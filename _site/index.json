{
  "README.html": {
    "href": "README.html",
    "title": "ShapeEngineDocs | ShapeEngine",
    "summary": "ShapeEngineDocs This is the repository for the documentation of Shape Engine."
  },
  "api/ShapeEngine.Achievements.Achievement.html": {
    "href": "api/ShapeEngine.Achievements.Achievement.html",
    "title": "Class Achievement | ShapeEngine",
    "summary": "Class Achievement Namespace ShapeEngine.Achievements Assembly ShapeEngine.dll public class Achievement Inheritance object Achievement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Achievement(string, string, bool, AchievementStat, int, int, int) public Achievement(string apiName, string displayName, bool hidden, AchievementStat stat, int start, int end, int notificationIncrement = 1) Parameters apiName string displayName string hidden bool stat AchievementStat start int end int notificationIncrement int Fields achieved protected bool achieved Field Value bool apiName public string apiName Field Value string displayName public string displayName Field Value string end protected int end Field Value int hidden protected bool hidden Field Value bool notificationIncrement protected int notificationIncrement Field Value int start protected int start Field Value int stat protected AchievementStat stat Field Value AchievementStat Methods Achieve() public void Achieve() Draw(TextFont, Rect, ColorRgba, ColorRgba, ColorRgba, ColorRgba) public virtual void Draw(TextFont textFont, Rect rect, ColorRgba bgColorRgba, ColorRgba textColorRgba, ColorRgba progressColorRgba, ColorRgba achievedColorRgba) Parameters textFont TextFont rect Rect bgColorRgba ColorRgba textColorRgba ColorRgba progressColorRgba ColorRgba achievedColorRgba ColorRgba GetGoalPercentage() public float GetGoalPercentage() Returns float IsAchieved() public bool IsAchieved() Returns bool IsGoalActive() public bool IsGoalActive() Returns bool IsGoalFinished() public bool IsGoalFinished() Returns bool IsHidden() public bool IsHidden() Returns bool OnStatValueChanged(int, int) protected void OnStatValueChanged(int oldValue, int newValue) Parameters oldValue int newValue int Events Achieved public event Action<Achievement>? Achieved Event Type Action<Achievement> IncrementNotification public event Action<Achievement>? IncrementNotification Event Type Action<Achievement>"
  },
  "api/ShapeEngine.Achievements.AchievementHandler.html": {
    "href": "api/ShapeEngine.Achievements.AchievementHandler.html",
    "title": "Class AchievementHandler | ShapeEngine",
    "summary": "Class AchievementHandler Namespace ShapeEngine.Achievements Assembly ShapeEngine.dll public class AchievementHandler Inheritance object AchievementHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AchievementHandler(TextFont) public AchievementHandler(TextFont textFont) Parameters textFont TextFont Fields achievedDisplayDuration public float achievedDisplayDuration Field Value float notificationDuration public float notificationDuration Field Value float Methods AddAchievement(Achievement) public void AddAchievement(Achievement achievement) Parameters achievement Achievement AddStat(AchievementStat) public void AddStat(AchievementStat stat) Parameters stat AchievementStat ClearAchievements() public void ClearAchievements() Close() public void Close() Draw(Rect, ColorRgba, ColorRgba, ColorRgba, ColorRgba) public void Draw(Rect achievementRect, ColorRgba background, ColorRgba text, ColorRgba progress, ColorRgba achieved) Parameters achievementRect Rect background ColorRgba text ColorRgba progress ColorRgba achieved ColorRgba GetStatValue(string) public int GetStatValue(string stat) Parameters stat string Returns int RemoveAchievment(Achievement) public void RemoveAchievment(Achievement achievement) Parameters achievement Achievement Update(float) public void Update(float dt) Parameters dt float UpdateStatValue(string, int) public void UpdateStatValue(string stat, int change) Parameters stat string change int"
  },
  "api/ShapeEngine.Achievements.AchievementStat.html": {
    "href": "api/ShapeEngine.Achievements.AchievementStat.html",
    "title": "Class AchievementStat | ShapeEngine",
    "summary": "Class AchievementStat Namespace ShapeEngine.Achievements Assembly ShapeEngine.dll public class AchievementStat Inheritance object AchievementStat Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AchievementStat(string, string, int, int, int) public AchievementStat(string apiName, string displayName, int defaultValue, int maxValue = 2147483647, int minValue = -2147483648) Parameters apiName string displayName string defaultValue int maxValue int minValue int Fields apiName public string apiName Field Value string defaultValue public int defaultValue Field Value int displayName public string displayName Field Value string maxValue public int maxValue Field Value int minValue public int minValue Field Value int value public int value Field Value int Methods ChangeStat(int) public void ChangeStat(int change) Parameters change int Reset() public void Reset() SetStat(int) public void SetStat(int newValue) Parameters newValue int Events OnValueChanged public event Action<int, int>? OnValueChanged Event Type Action<int, int>"
  },
  "api/ShapeEngine.Achievements.html": {
    "href": "api/ShapeEngine.Achievements.html",
    "title": "Namespace ShapeEngine.Achievements | ShapeEngine",
    "summary": "Namespace ShapeEngine.Achievements Classes Achievement AchievementHandler AchievementStat"
  },
  "api/ShapeEngine.Audio.AudioDevice.html": {
    "href": "api/ShapeEngine.Audio.AudioDevice.html",
    "title": "Class AudioDevice | ShapeEngine",
    "summary": "Class AudioDevice Namespace ShapeEngine.Audio Assembly ShapeEngine.dll public class AudioDevice Inheritance object AudioDevice Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AudioDevice() public AudioDevice() AudioDevice(params uint[]) public AudioDevice(params uint[] busIds) Parameters busIds uint[] Fields BUS_MASTER public static readonly uint BUS_MASTER Field Value uint IdCounter public readonly IdCounter IdCounter Field Value IdCounter Properties SpatialTargetOverride public GameObject? SpatialTargetOverride { get; set; } Property Value GameObject Methods BusAdd(float) public uint BusAdd(float volume = 1) Parameters volume float Returns uint BusAdd(uint, float) public bool BusAdd(uint busId, float volume) Parameters busId uint volume float Returns bool BusChangeVolume(uint, float) public bool BusChangeVolume(uint busId, float amount) Parameters busId uint amount float Returns bool BusGetVolume(uint) public float BusGetVolume(uint busId) Parameters busId uint Returns float BusSetVolume(uint, float) public bool BusSetVolume(uint busId, float volume) Parameters busId uint volume float Returns bool BusStop(uint) public bool BusStop(uint busId) Parameters busId uint Returns bool Close() public void Close() PlaylistAdd(string, params uint[]) public uint PlaylistAdd(string displayName, params uint[] songIDs) Parameters displayName string songIDs uint[] Returns uint PlaylistAdd(uint, string, params uint[]) public bool PlaylistAdd(uint id, string displayName, params uint[] songIDs) Parameters id uint displayName string songIDs uint[] Returns bool PlaylistGetName() public string PlaylistGetName() Returns string PlaylistGetSongName() public string PlaylistGetSongName() Returns string PlaylistGetSongPercentage() public float PlaylistGetSongPercentage() Returns float PlaylistPause() public bool PlaylistPause() Returns bool PlaylistResume() public bool PlaylistResume() Returns bool PlaylistStart() public bool PlaylistStart() Returns bool PlaylistStop() public bool PlaylistStop() Returns bool PlaylistSwitch(uint) public bool PlaylistSwitch(uint id) Parameters id uint Returns bool SFXAdd(Sound, float, float, params uint[]) public uint SFXAdd(Sound sound, float volume = 0.5, float pitch = 1, params uint[] busIDs) Parameters sound Sound volume float pitch float busIDs uint[] Returns uint SFXAdd(Sound, uint, float, float) public uint SFXAdd(Sound sound, uint busId, float volume = 0.5, float pitch = 1) Parameters sound Sound busId uint volume float pitch float Returns uint SFXAdd(uint, Sound, float, float, params uint[]) public bool SFXAdd(uint id, Sound sound, float volume = 0.5, float pitch = 1, params uint[] busIDs) Parameters id uint sound Sound volume float pitch float busIDs uint[] Returns bool SFXAdd(uint, Sound, uint, float, float) public bool SFXAdd(uint id, Sound sound, uint busId, float volume = 0.5, float pitch = 1) Parameters id uint sound Sound busId uint volume float pitch float Returns bool SFXLoopAdd(Sound, float, float, float, float, params uint[]) public uint SFXLoopAdd(Sound sound, float minSpatialRange, float maxSpatialRange, float volume = 0.5, float pitch = 1, params uint[] busIDs) Parameters sound Sound minSpatialRange float maxSpatialRange float volume float pitch float busIDs uint[] Returns uint SFXLoopAdd(Sound, float, float, params uint[]) public uint SFXLoopAdd(Sound sound, float volume = 0.5, float pitch = 1, params uint[] busIDs) Parameters sound Sound volume float pitch float busIDs uint[] Returns uint SFXLoopAdd(Sound, uint, float, float) public uint SFXLoopAdd(Sound sound, uint busId, float volume = 0.5, float pitch = 1) Parameters sound Sound busId uint volume float pitch float Returns uint SFXLoopAdd(Sound, uint, float, float, float, float) public uint SFXLoopAdd(Sound sound, uint busId, float minSpatialRange, float maxSpatialRange, float volume = 0.5, float pitch = 1) Parameters sound Sound busId uint minSpatialRange float maxSpatialRange float volume float pitch float Returns uint SFXLoopAdd(uint, Sound, float, float, float, float, params uint[]) public bool SFXLoopAdd(uint id, Sound sound, float minSpatialRange, float maxSpatialRange, float volume = 0.5, float pitch = 1, params uint[] busIDs) Parameters id uint sound Sound minSpatialRange float maxSpatialRange float volume float pitch float busIDs uint[] Returns bool SFXLoopAdd(uint, Sound, float, float, params uint[]) public bool SFXLoopAdd(uint id, Sound sound, float volume = 0.5, float pitch = 1, params uint[] busIDs) Parameters id uint sound Sound volume float pitch float busIDs uint[] Returns bool SFXLoopAdd(uint, Sound, uint, float, float) public bool SFXLoopAdd(uint id, Sound sound, uint busId, float volume = 0.5, float pitch = 1) Parameters id uint sound Sound busId uint volume float pitch float Returns bool SFXLoopAdd(uint, Sound, uint, float, float, float, float) public bool SFXLoopAdd(uint id, Sound sound, uint busId, float minSpatialRange, float maxSpatialRange, float volume = 0.5, float pitch = 1) Parameters id uint sound Sound busId uint minSpatialRange float maxSpatialRange float volume float pitch float Returns bool SFXLoopPlay(uint, Vector2, float, float, float) public bool SFXLoopPlay(uint id, Vector2 pos, float volume = 1, float pitch = 1, float blockDuration = 0) Parameters id uint pos Vector2 volume float pitch float blockDuration float Returns bool SFXLoopPlay(uint, float, float, float) public bool SFXLoopPlay(uint id, float volume = 1, float pitch = 1, float blockDuration = 0) Parameters id uint volume float pitch float blockDuration float Returns bool SFXLoopStop(uint) public bool SFXLoopStop(uint id) Parameters id uint Returns bool SFXLoopUpdateSpatialPos(uint, Vector2) Deprecated. Do not use, will be removed in a future updated! public void SFXLoopUpdateSpatialPos(uint id, Vector2 pos) Parameters id uint pos Vector2 SFXPlay(uint, Vector2, float, float, float) Play a sound. If pos is not inside the current camera area the sound is NOT played. public bool SFXPlay(uint id, Vector2 pos, float volume = 1, float pitch = 1, float blockDuration = 0) Parameters id uint pos Vector2 volume float pitch float blockDuration float Returns bool SFXPlay(uint, Vector2, float, float, float, float, float) Play the sound. If the pos is less than minRange from the current pos of the camera (or the spatial target override) the sound is played with full volume. If the pos is further away than minRange but less than maxRange from the pos of the camera the volume is linearly interpolated. If the pos is futher aways than maxRange the sound is not played. public bool SFXPlay(uint id, Vector2 pos, float minRange, float maxRange, float volume = 1, float pitch = 1, float blockDuration = 0) Parameters id uint pos Vector2 minRange float maxRange float volume float pitch float blockDuration float Returns bool SFXPlay(uint, float, float, float) public bool SFXPlay(uint id, float volume = 1, float pitch = 1, float blockDuration = 0) Parameters id uint volume float pitch float blockDuration float Returns bool SongAdd(Music, string, float, float, params uint[]) public uint SongAdd(Music song, string displayName, float volume = 0.5, float pitch = 1, params uint[] busIDs) Parameters song Music displayName string volume float pitch float busIDs uint[] Returns uint SongAdd(Music, uint, string, float, float) public uint SongAdd(Music song, uint busId, string displayName, float volume = 0.5, float pitch = 1) Parameters song Music busId uint displayName string volume float pitch float Returns uint SongAdd(uint, Music, string, float, float, params uint[]) public bool SongAdd(uint id, Music song, string displayName, float volume = 0.5, float pitch = 1, params uint[] busIDs) Parameters id uint song Music displayName string volume float pitch float busIDs uint[] Returns bool SongAdd(uint, Music, uint, string, float, float) public bool SongAdd(uint id, Music song, uint busId, string displayName, float volume = 0.5, float pitch = 1) Parameters id uint song Music busId uint displayName string volume float pitch float Returns bool Update(float, ShapeCamera) public void Update(float dt, ShapeCamera camera) Parameters dt float camera ShapeCamera Events PlaylistSongStarted public event Action<string, string>? PlaylistSongStarted Event Type Action<string, string> PlaylistStarted public event Action<string>? PlaylistStarted Event Type Action<string>"
  },
  "api/ShapeEngine.Audio.html": {
    "href": "api/ShapeEngine.Audio.html",
    "title": "Namespace ShapeEngine.Audio | ShapeEngine",
    "summary": "Namespace ShapeEngine.Audio Classes AudioDevice"
  },
  "api/ShapeEngine.Color.ColorHsl.html": {
    "href": "api/ShapeEngine.Color.ColorHsl.html",
    "title": "Struct ColorHsl | ShapeEngine",
    "summary": "Struct ColorHsl Namespace ShapeEngine.Color Assembly ShapeEngine.dll public readonly struct ColorHsl : IEquatable<ColorHsl> Implements IEquatable<ColorHsl> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ColorHsl(float, float, float) public ColorHsl(float hue, float saturation, float lightness) Parameters hue float saturation float lightness float Fields Hue Value range from 0 - 360 (color wheel degrees) public readonly float Hue Field Value float Lightness Value range from 0 - 1 (black to white) public readonly float Lightness Field Value float Saturation Value range from 0 - 1 (gray to full color) public readonly float Saturation Field Value float Methods ChangeHue(float) public ColorHsl ChangeHue(float amount) Parameters amount float Returns ColorHsl ChangeLightness(float) public ColorHsl ChangeLightness(float amount) Parameters amount float Returns ColorHsl ChangeSaturation(float) public ColorHsl ChangeSaturation(float amount) Parameters amount float Returns ColorHsl Equals(ColorHsl) Indicates whether the current object is equal to another object of the same type. public bool Equals(ColorHsl other) Parameters other ColorHsl An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. HasSameHue(ColorHsl) public bool HasSameHue(ColorHsl other) Parameters other ColorHsl Returns bool HasSameLightness(ColorHsl) public bool HasSameLightness(ColorHsl other) Parameters other ColorHsl Returns bool HasSameSaturation(ColorHsl) public bool HasSameSaturation(ColorHsl other) Parameters other ColorHsl Returns bool HslToRaylibColor(ColorHsl) public static Color HslToRaylibColor(ColorHsl colorHsl) Parameters colorHsl ColorHsl Returns Color Lerp(ColorHsl, float) public ColorHsl Lerp(ColorHsl to, float f) Parameters to ColorHsl f float Returns ColorHsl RaylibColorToHsl(Color) public static ColorHsl RaylibColorToHsl(Color rayColor) Parameters rayColor Color Returns ColorHsl SetHue(float) public ColorHsl SetHue(float amount) Parameters amount float Returns ColorHsl SetLightness(float) public ColorHsl SetLightness(float amount) Parameters amount float Returns ColorHsl SetSaturation(float) public ColorHsl SetSaturation(float amount) Parameters amount float Returns ColorHsl ToRGB() public ColorRgba ToRGB() Returns ColorRgba ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. Operators operator +(ColorHsl, ColorHsl) public static ColorHsl operator +(ColorHsl left, ColorHsl right) Parameters left ColorHsl right ColorHsl Returns ColorHsl operator ==(ColorHsl, ColorHsl) public static bool operator ==(ColorHsl left, ColorHsl right) Parameters left ColorHsl right ColorHsl Returns bool operator !=(ColorHsl, ColorHsl) public static bool operator !=(ColorHsl left, ColorHsl right) Parameters left ColorHsl right ColorHsl Returns bool operator *(ColorHsl, ColorHsl) public static ColorHsl operator *(ColorHsl left, ColorHsl right) Parameters left ColorHsl right ColorHsl Returns ColorHsl operator -(ColorHsl, ColorHsl) public static ColorHsl operator -(ColorHsl left, ColorHsl right) Parameters left ColorHsl right ColorHsl Returns ColorHsl"
  },
  "api/ShapeEngine.Color.ColorPalette.html": {
    "href": "api/ShapeEngine.Color.ColorPalette.html",
    "title": "Class ColorPalette | ShapeEngine",
    "summary": "Class ColorPalette Namespace ShapeEngine.Color Assembly ShapeEngine.dll public class ColorPalette Inheritance object ColorPalette Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ColorPalette() public ColorPalette() ColorPalette(params ColorRgba[]) public ColorPalette(params ColorRgba[] colors) Parameters colors ColorRgba[] ColorPalette(ColorScheme) public ColorPalette(ColorScheme colorScheme) Parameters colorScheme ColorScheme ColorPalette(params PaletteColor[]) public ColorPalette(params PaletteColor[] colors) Parameters colors PaletteColor[] ColorPalette(IEnumerable<ColorRgba>) public ColorPalette(IEnumerable<ColorRgba> colors) Parameters colors IEnumerable<ColorRgba> ColorPalette(IEnumerable<PaletteColor>) public ColorPalette(IEnumerable<PaletteColor> colors) Parameters colors IEnumerable<PaletteColor> ColorPalette(int) public ColorPalette(int colorCount) Parameters colorCount int Properties CurrentColorScheme public ColorScheme? CurrentColorScheme { get; } Property Value ColorScheme Methods AddColor() public int AddColor() Returns int AddColor(ColorRgba) public int AddColor(ColorRgba color) Parameters color ColorRgba Returns int AddColor(PaletteColor) public bool AddColor(PaletteColor color) Parameters color PaletteColor Returns bool ApplyColorScheme(ColorScheme) public bool ApplyColorScheme(ColorScheme scheme) Parameters scheme ColorScheme Returns bool ApplyColorScheme(List<PaletteColor>) public bool ApplyColorScheme(List<PaletteColor> scheme) Parameters scheme List<PaletteColor> Returns bool Clone() public ColorPalette Clone() Returns ColorPalette ColorSchemeWasApplied(ColorScheme) protected virtual void ColorSchemeWasApplied(ColorScheme colorScheme) Parameters colorScheme ColorScheme ColorWasAdded(PaletteColor) protected virtual void ColorWasAdded(PaletteColor color) Parameters color PaletteColor ColorWasRemoved(PaletteColor) protected virtual void ColorWasRemoved(PaletteColor color) Parameters color PaletteColor GetColor(int) public PaletteColor? GetColor(int colorId) Parameters colorId int Returns PaletteColor GetColorCount() public int GetColorCount() Returns int GetColorSchemeCopy() public ColorScheme? GetColorSchemeCopy() Returns ColorScheme GetColors() public List<ColorRgba>? GetColors() Returns List<ColorRgba> GetPaletteColors() public List<PaletteColor>? GetPaletteColors() Returns List<PaletteColor> GetPaletteColorsCopy() public List<PaletteColor>? GetPaletteColorsCopy() Returns List<PaletteColor> HasColor(int) public bool HasColor(int colorId) Parameters colorId int Returns bool RemoveColor(int) public bool RemoveColor(int colorId) Parameters colorId int Returns bool Events OnColorSchemeApplied public event Action<ColorScheme>? OnColorSchemeApplied Event Type Action<ColorScheme>"
  },
  "api/ShapeEngine.Color.ColorRgba.html": {
    "href": "api/ShapeEngine.Color.ColorRgba.html",
    "title": "Struct ColorRgba | ShapeEngine",
    "summary": "Struct ColorRgba Namespace ShapeEngine.Color Assembly ShapeEngine.dll public readonly struct ColorRgba : IEquatable<ColorRgba> Implements IEquatable<ColorRgba> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ShapeTween.Tween(ColorRgba, ColorRgba, float, TweenType) Constructors ColorRgba() public ColorRgba() ColorRgba(Color) public ColorRgba(Color color) Parameters color Color ColorRgba(Color, byte) public ColorRgba(Color color, byte a) Parameters color Color a byte ColorRgba(byte, byte, byte) public ColorRgba(byte r, byte g, byte b) Parameters r byte g byte b byte ColorRgba(byte, byte, byte, byte) public ColorRgba(byte r, byte g, byte b, byte a) Parameters r byte g byte b byte a byte ColorRgba(Color) public ColorRgba(Color color) Parameters color Color ColorRgba(Color, byte) public ColorRgba(Color color, byte a) Parameters color Color a byte ColorRgba(int, int, int) public ColorRgba(int r, int g, int b) Parameters r int g int b int ColorRgba(int, int, int, int) public ColorRgba(int r, int g, int b, int a) Parameters r int g int b int a int Fields A public readonly byte A Field Value byte B public readonly byte B Field Value byte G public readonly byte G Field Value byte R public readonly byte R Field Value byte Properties Black public static ColorRgba Black { get; } Property Value ColorRgba Clear public static ColorRgba Clear { get; } Property Value ColorRgba White public static ColorRgba White { get; } Property Value ColorRgba Methods ChangeAlpha(int) public ColorRgba ChangeAlpha(int amount) Parameters amount int Returns ColorRgba ChangeBlue(int) public ColorRgba ChangeBlue(int amount) Parameters amount int Returns ColorRgba ChangeBrightness(float) Change the brightness of the color. public ColorRgba ChangeBrightness(float correctionFactor) Parameters correctionFactor float Range -1 to 1 Returns ColorRgba ChangeContrast(float) Change the contrast of the color. public ColorRgba ChangeContrast(float correctionFactor) Parameters correctionFactor float Range -1 to 1 Returns ColorRgba ChangeGreen(int) public ColorRgba ChangeGreen(int amount) Parameters amount int Returns ColorRgba ChangeRed(int) public ColorRgba ChangeRed(int amount) Parameters amount int Returns ColorRgba Equals(ColorRgba) Indicates whether the current object is equal to another object of the same type. public bool Equals(ColorRgba other) Parameters other ColorRgba An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. ExpDecayLerp(ColorRgba, ColorRgba, float, float) public static ColorRgba ExpDecayLerp(ColorRgba from, ColorRgba to, float f, float dt) Parameters from ColorRgba to ColorRgba f float dt float Returns ColorRgba ExpDecayLerp(ColorRgba, float, float) public ColorRgba ExpDecayLerp(ColorRgba to, float f, float dt) Parameters to ColorRgba f float dt float Returns ColorRgba ExpDecayLerpComplex(ColorRgba, ColorRgba, float, float) public static ColorRgba ExpDecayLerpComplex(ColorRgba from, ColorRgba to, float decay, float dt) Parameters from ColorRgba to ColorRgba decay float dt float Returns ColorRgba ExpDecayLerpComplex(ColorRgba, float, float) public ColorRgba ExpDecayLerpComplex(ColorRgba to, float decay, float dt) Parameters to ColorRgba decay float dt float Returns ColorRgba FromHex(int) public static ColorRgba FromHex(int colorValue) Parameters colorValue int Returns ColorRgba FromHex(int, byte) public static ColorRgba FromHex(int colorValue, byte a) Parameters colorValue int a byte Returns ColorRgba FromHex(string) public static ColorRgba FromHex(string hexColor) Parameters hexColor string Returns ColorRgba FromHex(string, byte) public static ColorRgba FromHex(string hexColor, byte a) Parameters hexColor string a byte Returns ColorRgba FromName(string) public static ColorRgba FromName(string name) Parameters name string Returns ColorRgba FromNormalize(float, float, float, float) public static ColorRgba FromNormalize(float r, float g, float b, float a) Parameters r float g float b float a float Returns ColorRgba FromNormalize((float r, float g, float b, float a)) public static ColorRgba FromNormalize((float r, float g, float b, float a) normalizedColor) Parameters normalizedColor (float r, float g, float b, float a) Returns ColorRgba GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. GetRelativeLuminance() public byte GetRelativeLuminance() Returns byte GetRelativeLuminanceF() public float GetRelativeLuminanceF() Returns float IsClear() Alpha is zero. public bool IsClear() Returns bool IsNamed() public bool IsNamed() Returns bool IsOpaque() Alpha is at max value. public bool IsOpaque() Returns bool IsTransparent() Is not clear and not opaque. public bool IsTransparent() Returns bool Lerp(ColorRgba, ColorRgba, float) public static ColorRgba Lerp(ColorRgba from, ColorRgba to, float f) Parameters from ColorRgba to ColorRgba f float Returns ColorRgba Lerp(ColorRgba, float) public ColorRgba Lerp(ColorRgba to, float f) Parameters to ColorRgba f float Returns ColorRgba Normalize() public (float r, float g, float b, float a) Normalize() Returns (float r, float g, float b, float a) ParseColors(params int[]) public static ColorRgba[] ParseColors(params int[] colors) Parameters colors int[] Returns ColorRgba[] ParseColors(params string[]) public static ColorRgba[] ParseColors(params string[] hexColors) Parameters hexColors string[] Returns ColorRgba[] PowLerp(ColorRgba, ColorRgba, float, float) public static ColorRgba PowLerp(ColorRgba from, ColorRgba to, float remainder, float dt) Parameters from ColorRgba to ColorRgba remainder float dt float Returns ColorRgba PowLerp(ColorRgba, float, float) public ColorRgba PowLerp(ColorRgba to, float remainder, float dt) Parameters to ColorRgba remainder float dt float Returns ColorRgba SetAlpha(byte) public ColorRgba SetAlpha(byte a) Parameters a byte Returns ColorRgba SetBlue(byte) public ColorRgba SetBlue(byte b) Parameters b byte Returns ColorRgba SetGreen(byte) public ColorRgba SetGreen(byte g) Parameters g byte Returns ColorRgba SetRed(byte) public ColorRgba SetRed(byte r) Parameters r byte Returns ColorRgba ToHSL() public ColorHsl ToHSL() Returns ColorHsl ToHex() public int ToHex() Returns int ToKnownColor() public KnownColor ToKnownColor() Returns KnownColor ToRayColor() public Color ToRayColor() Returns Color ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. ToSysColor() public Color ToSysColor() Returns Color Operators operator +(ColorRgba, ColorRgba) public static ColorRgba operator +(ColorRgba left, ColorRgba right) Parameters left ColorRgba right ColorRgba Returns ColorRgba operator ==(ColorRgba, ColorRgba) public static bool operator ==(ColorRgba left, ColorRgba right) Parameters left ColorRgba right ColorRgba Returns bool operator !=(ColorRgba, ColorRgba) public static bool operator !=(ColorRgba left, ColorRgba right) Parameters left ColorRgba right ColorRgba Returns bool operator *(ColorRgba, ColorRgba) public static ColorRgba operator *(ColorRgba left, ColorRgba right) Parameters left ColorRgba right ColorRgba Returns ColorRgba operator -(ColorRgba, ColorRgba) public static ColorRgba operator -(ColorRgba left, ColorRgba right) Parameters left ColorRgba right ColorRgba Returns ColorRgba"
  },
  "api/ShapeEngine.Color.ColorScheme.html": {
    "href": "api/ShapeEngine.Color.ColorScheme.html",
    "title": "Class ColorScheme | ShapeEngine",
    "summary": "Class ColorScheme Namespace ShapeEngine.Color Assembly ShapeEngine.dll public class ColorScheme : List<PaletteColor>, IList<PaletteColor>, ICollection<PaletteColor>, IReadOnlyList<PaletteColor>, IReadOnlyCollection<PaletteColor>, IEnumerable<PaletteColor>, IList, ICollection, IEnumerable Inheritance object List<PaletteColor> ColorScheme Implements IList<PaletteColor> ICollection<PaletteColor> IReadOnlyList<PaletteColor> IReadOnlyCollection<PaletteColor> IEnumerable<PaletteColor> IList ICollection IEnumerable Inherited Members List<PaletteColor>.Add(PaletteColor) List<PaletteColor>.AddRange(IEnumerable<PaletteColor>) List<PaletteColor>.AsReadOnly() List<PaletteColor>.BinarySearch(int, int, PaletteColor, IComparer<PaletteColor>) List<PaletteColor>.BinarySearch(PaletteColor) List<PaletteColor>.BinarySearch(PaletteColor, IComparer<PaletteColor>) List<PaletteColor>.Clear() List<PaletteColor>.Contains(PaletteColor) List<PaletteColor>.ConvertAll<TOutput>(Converter<PaletteColor, TOutput>) List<PaletteColor>.CopyTo(int, PaletteColor[], int, int) List<PaletteColor>.CopyTo(PaletteColor[]) List<PaletteColor>.CopyTo(PaletteColor[], int) List<PaletteColor>.EnsureCapacity(int) List<PaletteColor>.Exists(Predicate<PaletteColor>) List<PaletteColor>.Find(Predicate<PaletteColor>) List<PaletteColor>.FindAll(Predicate<PaletteColor>) List<PaletteColor>.FindIndex(int, int, Predicate<PaletteColor>) List<PaletteColor>.FindIndex(int, Predicate<PaletteColor>) List<PaletteColor>.FindIndex(Predicate<PaletteColor>) List<PaletteColor>.FindLast(Predicate<PaletteColor>) List<PaletteColor>.FindLastIndex(int, int, Predicate<PaletteColor>) List<PaletteColor>.FindLastIndex(int, Predicate<PaletteColor>) List<PaletteColor>.FindLastIndex(Predicate<PaletteColor>) List<PaletteColor>.ForEach(Action<PaletteColor>) List<PaletteColor>.GetEnumerator() List<PaletteColor>.GetRange(int, int) List<PaletteColor>.IndexOf(PaletteColor) List<PaletteColor>.IndexOf(PaletteColor, int) List<PaletteColor>.IndexOf(PaletteColor, int, int) List<PaletteColor>.Insert(int, PaletteColor) List<PaletteColor>.InsertRange(int, IEnumerable<PaletteColor>) List<PaletteColor>.LastIndexOf(PaletteColor) List<PaletteColor>.LastIndexOf(PaletteColor, int) List<PaletteColor>.LastIndexOf(PaletteColor, int, int) List<PaletteColor>.Remove(PaletteColor) List<PaletteColor>.RemoveAll(Predicate<PaletteColor>) List<PaletteColor>.RemoveAt(int) List<PaletteColor>.RemoveRange(int, int) List<PaletteColor>.Reverse() List<PaletteColor>.Reverse(int, int) List<PaletteColor>.Slice(int, int) List<PaletteColor>.Sort() List<PaletteColor>.Sort(IComparer<PaletteColor>) List<PaletteColor>.Sort(Comparison<PaletteColor>) List<PaletteColor>.Sort(int, int, IComparer<PaletteColor>) List<PaletteColor>.ToArray() List<PaletteColor>.TrimExcess() List<PaletteColor>.TrueForAll(Predicate<PaletteColor>) List<PaletteColor>.Capacity List<PaletteColor>.Count List<PaletteColor>.this[int] object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ColorScheme() public ColorScheme() ColorScheme(params PaletteColor[]) public ColorScheme(params PaletteColor[] colors) Parameters colors PaletteColor[] ColorScheme(IEnumerable<PaletteColor>) public ColorScheme(IEnumerable<PaletteColor> colors) Parameters colors IEnumerable<PaletteColor> ColorScheme(int) public ColorScheme(int id) Parameters id int ColorScheme(int, params PaletteColor[]) public ColorScheme(int id, params PaletteColor[] colors) Parameters id int colors PaletteColor[] ColorScheme(int, IEnumerable<PaletteColor>) public ColorScheme(int id, IEnumerable<PaletteColor> colors) Parameters id int colors IEnumerable<PaletteColor> Fields Id public readonly int Id Field Value int Methods Generate(int[], params int[]) public static ColorScheme Generate(int[] colors, params int[] colorIDs) Parameters colors int[] colorIDs int[] Returns ColorScheme Generate(string[], params int[]) public static ColorScheme Generate(string[] hexColors, params int[] colorIDs) Parameters hexColors string[] colorIDs int[] Returns ColorScheme"
  },
  "api/ShapeEngine.Color.PaletteColor.html": {
    "href": "api/ShapeEngine.Color.PaletteColor.html",
    "title": "Class PaletteColor | ShapeEngine",
    "summary": "Class PaletteColor Namespace ShapeEngine.Color Assembly ShapeEngine.dll public class PaletteColor Inheritance object PaletteColor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PaletteColor() public PaletteColor() PaletteColor(ColorRgba) public PaletteColor(ColorRgba colorRgba) Parameters colorRgba ColorRgba PaletteColor(int, ColorRgba) public PaletteColor(int id, ColorRgba colorRgba) Parameters id int colorRgba ColorRgba Fields ID public readonly int ID Field Value int Properties ColorRgba public ColorRgba ColorRgba { get; } Property Value ColorRgba Methods Clone() public PaletteColor Clone() Returns PaletteColor Clone(ColorRgba) public PaletteColor Clone(ColorRgba colorRgba) Parameters colorRgba ColorRgba Returns PaletteColor"
  },
  "api/ShapeEngine.Color.html": {
    "href": "api/ShapeEngine.Color.html",
    "title": "Namespace ShapeEngine.Color | ShapeEngine",
    "summary": "Namespace ShapeEngine.Color Classes ColorPalette ColorScheme PaletteColor Structs ColorHsl ColorRgba"
  },
  "api/ShapeEngine.Core.BackendInterfaces.IDrawingBackend.html": {
    "href": "api/ShapeEngine.Core.BackendInterfaces.IDrawingBackend.html",
    "title": "Interface IDrawingBackend | ShapeEngine",
    "summary": "Interface IDrawingBackend Namespace ShapeEngine.Core.BackendInterfaces Assembly ShapeEngine.dll Do not use, this is just a placeholder and reminder for future reference! public interface IDrawingBackend Methods DrawTriangle(Vector2, Vector2, Vector2, ColorRgba) void DrawTriangle(Vector2 a, Vector2 b, Vector2 c, ColorRgba color) Parameters a Vector2 b Vector2 c Vector2 color ColorRgba DrawTriangle(float, float, float, float, float, float, ColorRgba) void DrawTriangle(float x1, float y1, float x2, float y2, float x3, float y3, ColorRgba color) Parameters x1 float y1 float x2 float y2 float x3 float y3 float color ColorRgba"
  },
  "api/ShapeEngine.Core.BackendInterfaces.RaylibDrawingBackend.html": {
    "href": "api/ShapeEngine.Core.BackendInterfaces.RaylibDrawingBackend.html",
    "title": "Class RaylibDrawingBackend | ShapeEngine",
    "summary": "Class RaylibDrawingBackend Namespace ShapeEngine.Core.BackendInterfaces Assembly ShapeEngine.dll Do not use, this is just a placeholder and reminder for future reference! public class RaylibDrawingBackend : IDrawingBackend Inheritance object RaylibDrawingBackend Implements IDrawingBackend Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DrawTriangle(Vector2, Vector2, Vector2, ColorRgba) public void DrawTriangle(Vector2 a, Vector2 b, Vector2 c, ColorRgba color) Parameters a Vector2 b Vector2 c Vector2 color ColorRgba DrawTriangle(float, float, float, float, float, float, ColorRgba) public void DrawTriangle(float x1, float y1, float x2, float y2, float x3, float y3, ColorRgba color) Parameters x1 float y1 float x2 float y2 float x3 float y3 float color ColorRgba"
  },
  "api/ShapeEngine.Core.BackendInterfaces.html": {
    "href": "api/ShapeEngine.Core.BackendInterfaces.html",
    "title": "Namespace ShapeEngine.Core.BackendInterfaces | ShapeEngine",
    "summary": "Namespace ShapeEngine.Core.BackendInterfaces Classes RaylibDrawingBackend Do not use, this is just a placeholder and reminder for future reference! Interfaces IDrawingBackend Do not use, this is just a placeholder and reminder for future reference!"
  },
  "api/ShapeEngine.Core.CollisionSystem.CastSpaceEntry.html": {
    "href": "api/ShapeEngine.Core.CollisionSystem.CastSpaceEntry.html",
    "title": "Class CastSpaceEntry | ShapeEngine",
    "summary": "Class CastSpaceEntry Namespace ShapeEngine.Core.CollisionSystem Assembly ShapeEngine.dll public class CastSpaceEntry : List<Collider>, IList<Collider>, ICollection<Collider>, IReadOnlyList<Collider>, IReadOnlyCollection<Collider>, IEnumerable<Collider>, IList, ICollection, IEnumerable Inheritance object List<Collider> CastSpaceEntry Implements IList<Collider> ICollection<Collider> IReadOnlyList<Collider> IReadOnlyCollection<Collider> IEnumerable<Collider> IList ICollection IEnumerable Inherited Members List<Collider>.Add(Collider) List<Collider>.AddRange(IEnumerable<Collider>) List<Collider>.AsReadOnly() List<Collider>.BinarySearch(int, int, Collider, IComparer<Collider>) List<Collider>.BinarySearch(Collider) List<Collider>.BinarySearch(Collider, IComparer<Collider>) List<Collider>.Clear() List<Collider>.Contains(Collider) List<Collider>.ConvertAll<TOutput>(Converter<Collider, TOutput>) List<Collider>.CopyTo(int, Collider[], int, int) List<Collider>.CopyTo(Collider[]) List<Collider>.CopyTo(Collider[], int) List<Collider>.EnsureCapacity(int) List<Collider>.Exists(Predicate<Collider>) List<Collider>.Find(Predicate<Collider>) List<Collider>.FindAll(Predicate<Collider>) List<Collider>.FindIndex(int, int, Predicate<Collider>) List<Collider>.FindIndex(int, Predicate<Collider>) List<Collider>.FindIndex(Predicate<Collider>) List<Collider>.FindLast(Predicate<Collider>) List<Collider>.FindLastIndex(int, int, Predicate<Collider>) List<Collider>.FindLastIndex(int, Predicate<Collider>) List<Collider>.FindLastIndex(Predicate<Collider>) List<Collider>.ForEach(Action<Collider>) List<Collider>.GetEnumerator() List<Collider>.GetRange(int, int) List<Collider>.IndexOf(Collider) List<Collider>.IndexOf(Collider, int) List<Collider>.IndexOf(Collider, int, int) List<Collider>.Insert(int, Collider) List<Collider>.InsertRange(int, IEnumerable<Collider>) List<Collider>.LastIndexOf(Collider) List<Collider>.LastIndexOf(Collider, int) List<Collider>.LastIndexOf(Collider, int, int) List<Collider>.Remove(Collider) List<Collider>.RemoveAll(Predicate<Collider>) List<Collider>.RemoveAt(int) List<Collider>.RemoveRange(int, int) List<Collider>.Reverse() List<Collider>.Reverse(int, int) List<Collider>.Slice(int, int) List<Collider>.Sort() List<Collider>.Sort(IComparer<Collider>) List<Collider>.Sort(Comparison<Collider>) List<Collider>.Sort(int, int, IComparer<Collider>) List<Collider>.ToArray() List<Collider>.TrimExcess() List<Collider>.TrueForAll(Predicate<Collider>) List<Collider>.Capacity List<Collider>.Count List<Collider>.this[int] object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CastSpaceEntry(CollisionObject) public CastSpaceEntry(CollisionObject otherCollisionObject) Parameters otherCollisionObject CollisionObject CastSpaceEntry(CollisionObject, int) public CastSpaceEntry(CollisionObject otherCollisionObject, int capacity) Parameters otherCollisionObject CollisionObject capacity int Fields OtherCollisionObject public readonly CollisionObject OtherCollisionObject Field Value CollisionObject Methods Copy() public CastSpaceEntry Copy() Returns CastSpaceEntry GetClosestCollider(Vector2, out float) public Collider? GetClosestCollider(Vector2 referencePoint, out float minDistanceSquared) Parameters referencePoint Vector2 minDistanceSquared float Returns Collider GetFirstCollider() public Collider? GetFirstCollider() Returns Collider GetFurthestCollider(Vector2, out float) public Collider? GetFurthestCollider(Vector2 referencePoint, out float maxDistanceSquared) Parameters referencePoint Vector2 maxDistanceSquared float Returns Collider GetLastCollider() public Collider? GetLastCollider() Returns Collider IsFirstContact(Collider) public bool IsFirstContact(Collider collider) Parameters collider Collider Returns bool SortClosestFirst(Vector2) public bool SortClosestFirst(Vector2 referencePoint) Parameters referencePoint Vector2 Returns bool SortFurthestFirst(Vector2) public bool SortFurthestFirst(Vector2 referencePoint) Parameters referencePoint Vector2 Returns bool"
  },
  "api/ShapeEngine.Core.CollisionSystem.CastSpaceResult.html": {
    "href": "api/ShapeEngine.Core.CollisionSystem.CastSpaceResult.html",
    "title": "Class CastSpaceResult | ShapeEngine",
    "summary": "Class CastSpaceResult Namespace ShapeEngine.Core.CollisionSystem Assembly ShapeEngine.dll public class CastSpaceResult : Dictionary<CollisionObject, CastSpaceEntry>, IDictionary<CollisionObject, CastSpaceEntry>, ICollection<KeyValuePair<CollisionObject, CastSpaceEntry>>, IReadOnlyDictionary<CollisionObject, CastSpaceEntry>, IReadOnlyCollection<KeyValuePair<CollisionObject, CastSpaceEntry>>, IEnumerable<KeyValuePair<CollisionObject, CastSpaceEntry>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable Inheritance object Dictionary<CollisionObject, CastSpaceEntry> CastSpaceResult Implements IDictionary<CollisionObject, CastSpaceEntry> ICollection<KeyValuePair<CollisionObject, CastSpaceEntry>> IReadOnlyDictionary<CollisionObject, CastSpaceEntry> IReadOnlyCollection<KeyValuePair<CollisionObject, CastSpaceEntry>> IEnumerable<KeyValuePair<CollisionObject, CastSpaceEntry>> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable Inherited Members Dictionary<CollisionObject, CastSpaceEntry>.Add(CollisionObject, CastSpaceEntry) Dictionary<CollisionObject, CastSpaceEntry>.Clear() Dictionary<CollisionObject, CastSpaceEntry>.ContainsKey(CollisionObject) Dictionary<CollisionObject, CastSpaceEntry>.ContainsValue(CastSpaceEntry) Dictionary<CollisionObject, CastSpaceEntry>.EnsureCapacity(int) Dictionary<CollisionObject, CastSpaceEntry>.GetEnumerator() Dictionary<CollisionObject, CastSpaceEntry>.OnDeserialization(object) Dictionary<CollisionObject, CastSpaceEntry>.Remove(CollisionObject) Dictionary<CollisionObject, CastSpaceEntry>.Remove(CollisionObject, out CastSpaceEntry) Dictionary<CollisionObject, CastSpaceEntry>.TrimExcess() Dictionary<CollisionObject, CastSpaceEntry>.TrimExcess(int) Dictionary<CollisionObject, CastSpaceEntry>.TryAdd(CollisionObject, CastSpaceEntry) Dictionary<CollisionObject, CastSpaceEntry>.TryGetValue(CollisionObject, out CastSpaceEntry) Dictionary<CollisionObject, CastSpaceEntry>.Comparer Dictionary<CollisionObject, CastSpaceEntry>.Count Dictionary<CollisionObject, CastSpaceEntry>.this[CollisionObject] Dictionary<CollisionObject, CastSpaceEntry>.Keys Dictionary<CollisionObject, CastSpaceEntry>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CastSpaceResult() public CastSpaceResult() CastSpaceResult(int) public CastSpaceResult(int capacity) Parameters capacity int Properties Valid public bool Valid { get; } Property Value bool Methods AddCollider(Collider) public bool AddCollider(Collider collider) Parameters collider Collider Returns bool Copy() public CastSpaceResult Copy() Returns CastSpaceResult GetClosestCollider(Vector2, out float) public Collider? GetClosestCollider(Vector2 referencePoint, out float minDistanceSquared) Parameters referencePoint Vector2 minDistanceSquared float Returns Collider GetClosestCollisionObject(Vector2, out float) public CollisionObject? GetClosestCollisionObject(Vector2 referencePoint, out float minDistanceSquared) Parameters referencePoint Vector2 minDistanceSquared float Returns CollisionObject GetClosestEntry(Vector2, out float) public CastSpaceEntry? GetClosestEntry(Vector2 referencePoint, out float minDistanceSquared) Parameters referencePoint Vector2 minDistanceSquared float Returns CastSpaceEntry GetEntry(CollisionObject) public CastSpaceEntry? GetEntry(CollisionObject obj) Parameters obj CollisionObject Returns CastSpaceEntry GetFirstEntry() public CastSpaceEntry? GetFirstEntry() Returns CastSpaceEntry GetFurthestCollider(Vector2, out float) public Collider? GetFurthestCollider(Vector2 referencePoint, out float maxDistanceSquared) Parameters referencePoint Vector2 maxDistanceSquared float Returns Collider GetFurthestCollisionObject(Vector2, out float) public CollisionObject? GetFurthestCollisionObject(Vector2 referencePoint, out float maxDistanceSquared) Parameters referencePoint Vector2 maxDistanceSquared float Returns CollisionObject GetFurthestEntry(Vector2, out float) public CastSpaceEntry? GetFurthestEntry(Vector2 referencePoint, out float maxDistanceSquared) Parameters referencePoint Vector2 maxDistanceSquared float Returns CastSpaceEntry GetLastEntry() public CastSpaceEntry? GetLastEntry() Returns CastSpaceEntry HasEntries() public bool HasEntries() Returns bool IsFirstContact(Collider) public bool IsFirstContact(Collider collider) Parameters collider Collider Returns bool SortClosest(Vector2) public bool SortClosest(Vector2 referencePoint) Parameters referencePoint Vector2 Returns bool SortFurthest(Vector2) public bool SortFurthest(Vector2 referencePoint) Parameters referencePoint Vector2 Returns bool"
  },
  "api/ShapeEngine.Core.CollisionSystem.CircleCollider.html": {
    "href": "api/ShapeEngine.Core.CollisionSystem.CircleCollider.html",
    "title": "Class CircleCollider | ShapeEngine",
    "summary": "Class CircleCollider Namespace ShapeEngine.Core.CollisionSystem Assembly ShapeEngine.dll public class CircleCollider : Collider, IShape Inheritance object Shape Collider CircleCollider Implements IShape Inherited Members Collider.OnIntersected Collider.OnOverlapped Collider.OnContactEnded Collider.Parent Collider.Enabled Collider.Velocity Collider.CollisionMask Collider.CollisionLayer Collider.ComputeCollision Collider.ComputeIntersections Collider.Intersected(Collision) Collider.Overlapped(Overlap) Collider.ContactEnded(Collider) Collider.InitializeShape(Transform2D) Collider.UpdateShape(float, Transform2D) Collider.DrawShape() Collider.RecalculateShape() Collider.OnInitialized() Collider.OnUpdate(float) Collider.OnDraw() Collider.OnAddedToCollisionBody(CollisionObject) Collider.OnRemovedFromCollisionBody(CollisionObject) Collider.Project(Vector2) Collider.GetClosestPoint(IShape) Collider.GetClosestPoint(Vector2, out float) Collider.GetClosestPoint(Segment) Collider.GetClosestPoint(Line) Collider.GetClosestPoint(Ray) Collider.GetClosestPoint(Circle) Collider.GetClosestPoint(Triangle) Collider.GetClosestPoint(Quad) Collider.GetClosestPoint(Rect) Collider.GetClosestPoint(Polygon) Collider.GetClosestPoint(Polyline) Collider.ContainsPoint(Vector2) Collider.ContainsShape(IShape) Collider.ContainsShape(Segment) Collider.ContainsShape(Circle) Collider.ContainsShape(Triangle) Collider.ContainsShape(Quad) Collider.ContainsShape(Rect) Collider.ContainsShape(Polygon) Collider.ContainsShape(Polyline) Collider.Overlap(CollisionObject) Collider.Overlap(Collider) Collider.Overlap(IShape) Collider.Overlap(Segment) Collider.Overlap(Line) Collider.Overlap(Ray) Collider.Overlap(Triangle) Collider.Overlap(Circle) Collider.Overlap(Rect) Collider.Overlap(Quad) Collider.Overlap(Polygon) Collider.Overlap(Polyline) Collider.Intersect(CollisionObject) Collider.Intersect(Collider) Collider.Intersect(IShape) Collider.Intersect(Ray) Collider.Intersect(Line) Collider.Intersect(Segment) Collider.Intersect(Triangle) Collider.Intersect(Circle) Collider.Intersect(Rect) Collider.Intersect(Quad) Collider.Intersect(Polygon) Collider.Intersect(Polyline) Collider.Intersect(CollisionObject, ref CollisionPoints, bool) Collider.Intersect(Collider, ref CollisionPoints, bool) Collider.Intersect(IShape, ref CollisionPoints, bool) Collider.Intersect(Ray, ref CollisionPoints, bool) Collider.Intersect(Line, ref CollisionPoints, bool) Collider.Intersect(Segment, ref CollisionPoints, bool) Collider.Intersect(Triangle, ref CollisionPoints, bool) Collider.Intersect(Circle, ref CollisionPoints, bool) Collider.Intersect(Rect, ref CollisionPoints, bool) Collider.Intersect(Quad, ref CollisionPoints, bool) Collider.Intersect(Polygon, ref CollisionPoints, bool) Collider.Intersect(Polyline, ref CollisionPoints, bool) Shape.Moves Shape.Rotates Shape.Scales Shape.Offset Shape.CurTransform Shape.PrevTransform Shape.OnShapeTransformChanged(bool) Shape.UpdateTransform(Transform2D) Shape.GetRayShape() Shape.GetLineShape() Shape.GetSegmentShape() Shape.GetTriangleShape() Shape.GetQuadShape() Shape.GetRectShape() Shape.GetPolygonShape() Shape.GetPolylineShape() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CircleCollider(Transform2D) public CircleCollider(Transform2D offset) Parameters offset Transform2D Methods GetBoundingBox() public override Rect GetBoundingBox() Returns Rect GetCircleShape() public override Circle GetCircleShape() Returns Circle GetShapeType() public override ShapeType GetShapeType() Returns ShapeType"
  },
  "api/ShapeEngine.Core.CollisionSystem.CircleSectorCollider.html": {
    "href": "api/ShapeEngine.Core.CollisionSystem.CircleSectorCollider.html",
    "title": "Class CircleSectorCollider | ShapeEngine",
    "summary": "Class CircleSectorCollider Namespace ShapeEngine.Core.CollisionSystem Assembly ShapeEngine.dll public class CircleSectorCollider : Collider, IShape Inheritance object Shape Collider CircleSectorCollider Implements IShape Inherited Members Collider.OnIntersected Collider.OnOverlapped Collider.OnContactEnded Collider.Parent Collider.Enabled Collider.Velocity Collider.CollisionMask Collider.CollisionLayer Collider.ComputeCollision Collider.ComputeIntersections Collider.Intersected(Collision) Collider.Overlapped(Overlap) Collider.ContactEnded(Collider) Collider.InitializeShape(Transform2D) Collider.UpdateShape(float, Transform2D) Collider.DrawShape() Collider.OnUpdate(float) Collider.OnDraw() Collider.OnAddedToCollisionBody(CollisionObject) Collider.OnRemovedFromCollisionBody(CollisionObject) Collider.Project(Vector2) Collider.GetClosestPoint(IShape) Collider.GetClosestPoint(Vector2, out float) Collider.GetClosestPoint(Segment) Collider.GetClosestPoint(Line) Collider.GetClosestPoint(Ray) Collider.GetClosestPoint(Circle) Collider.GetClosestPoint(Triangle) Collider.GetClosestPoint(Quad) Collider.GetClosestPoint(Rect) Collider.GetClosestPoint(Polygon) Collider.GetClosestPoint(Polyline) Collider.ContainsPoint(Vector2) Collider.ContainsShape(IShape) Collider.ContainsShape(Segment) Collider.ContainsShape(Circle) Collider.ContainsShape(Triangle) Collider.ContainsShape(Quad) Collider.ContainsShape(Rect) Collider.ContainsShape(Polygon) Collider.ContainsShape(Polyline) Collider.Overlap(CollisionObject) Collider.Overlap(Collider) Collider.Overlap(IShape) Collider.Overlap(Segment) Collider.Overlap(Line) Collider.Overlap(Ray) Collider.Overlap(Triangle) Collider.Overlap(Circle) Collider.Overlap(Rect) Collider.Overlap(Quad) Collider.Overlap(Polygon) Collider.Overlap(Polyline) Collider.Intersect(CollisionObject) Collider.Intersect(Collider) Collider.Intersect(IShape) Collider.Intersect(Ray) Collider.Intersect(Line) Collider.Intersect(Segment) Collider.Intersect(Triangle) Collider.Intersect(Circle) Collider.Intersect(Rect) Collider.Intersect(Quad) Collider.Intersect(Polygon) Collider.Intersect(Polyline) Collider.Intersect(CollisionObject, ref CollisionPoints, bool) Collider.Intersect(Collider, ref CollisionPoints, bool) Collider.Intersect(IShape, ref CollisionPoints, bool) Collider.Intersect(Ray, ref CollisionPoints, bool) Collider.Intersect(Line, ref CollisionPoints, bool) Collider.Intersect(Segment, ref CollisionPoints, bool) Collider.Intersect(Triangle, ref CollisionPoints, bool) Collider.Intersect(Circle, ref CollisionPoints, bool) Collider.Intersect(Rect, ref CollisionPoints, bool) Collider.Intersect(Quad, ref CollisionPoints, bool) Collider.Intersect(Polygon, ref CollisionPoints, bool) Collider.Intersect(Polyline, ref CollisionPoints, bool) Shape.Moves Shape.Rotates Shape.Scales Shape.Offset Shape.CurTransform Shape.PrevTransform Shape.UpdateTransform(Transform2D) Shape.GetRayShape() Shape.GetLineShape() Shape.GetSegmentShape() Shape.GetCircleShape() Shape.GetTriangleShape() Shape.GetQuadShape() Shape.GetRectShape() Shape.GetPolylineShape() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CircleSectorCollider(Transform2D, float, int) public CircleSectorCollider(Transform2D offset, float angleSectorRad, int arcPoints = 5) Parameters offset Transform2D angleSectorRad float arcPoints int Properties AngleSectorRad How wide the circle sector is. public float AngleSectorRad { get; } Property Value float ArcPoints How many points are used for the circle sector arc. 0 creates a triangle where the arc is a straight line. public int ArcPoints { get; } Property Value int Center Represents CurTransform.Position public Vector2 Center { get; } Property Value Vector2 Radius Represents CurTransform.ScaledSize.Radius public float Radius { get; } Property Value float RotationRad Represents CurTransform.RotationRad public float RotationRad { get; } Property Value float Methods ChangeAccuracy(int) public void ChangeAccuracy(int amount) Parameters amount int ChangeAngleSector(float) public void ChangeAngleSector(float radians) Parameters radians float GetBoundingBox() public override Rect GetBoundingBox() Returns Rect GetPolygonShape() public override Polygon GetPolygonShape() Returns Polygon GetShapeType() public override ShapeType GetShapeType() Returns ShapeType OnInitialized() protected override void OnInitialized() OnShapeTransformChanged(bool) Called each frame after the transform was actualized from the parents protected override void OnShapeTransformChanged(bool transformChanged) Parameters transformChanged bool RecalculateShape() public override void RecalculateShape() SetAccuracy(int) public void SetAccuracy(int value) Parameters value int SetAngleSector(float) public void SetAngleSector(float radians) Parameters radians float"
  },
  "api/ShapeEngine.Core.CollisionSystem.Collider.html": {
    "href": "api/ShapeEngine.Core.CollisionSystem.Collider.html",
    "title": "Class Collider | ShapeEngine",
    "summary": "Class Collider Namespace ShapeEngine.Core.CollisionSystem Assembly ShapeEngine.dll public abstract class Collider : Shape, IShape Inheritance object Shape Collider Implements IShape Derived CircleCollider CircleSectorCollider LineCollider PolyCollider PolyLineCollider QuadCollider RayCollider RectCollider SegmentCollider TriangleCollider Inherited Members Shape.Moves Shape.Rotates Shape.Scales Shape.Offset Shape.CurTransform Shape.PrevTransform Shape.OnShapeTransformChanged(bool) Shape.UpdateTransform(Transform2D) Shape.GetShapeType() Shape.GetRayShape() Shape.GetLineShape() Shape.GetSegmentShape() Shape.GetCircleShape() Shape.GetTriangleShape() Shape.GetQuadShape() Shape.GetRectShape() Shape.GetPolygonShape() Shape.GetPolylineShape() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Collider() This determines if ColliderIntersected and ColliderOverlapped will be called and if OnColliderOverlapped and OnColliderIntersected events will be invoked. Collision and CollisionEnded will always be called. This is an additional convenience option to get overlap/intersection information in a different way. protected Collider() Collider(Transform2D) protected Collider(Transform2D offset) Parameters offset Transform2D Collider(Vector2) protected Collider(Vector2 offset) Parameters offset Vector2 Properties CollisionLayer public uint CollisionLayer { get; set; } Property Value uint CollisionMask public BitFlag CollisionMask { get; set; } Property Value BitFlag ComputeCollision public bool ComputeCollision { get; set; } Property Value bool ComputeIntersections If false only overlaps will be reported but no further details on the intersection. public bool ComputeIntersections { get; set; } Property Value bool Enabled public bool Enabled { get; set; } Property Value bool Parent public CollisionObject? Parent { get; } Property Value CollisionObject Velocity public Vector2 Velocity { get; } Property Value Vector2 Methods ContactEnded(Collider) Will be called from the parent. Is only called when a collision (intersection / overlap) with this collider ends. AvancedCollisionNotification has to be enabled on the parent for this function to be called. protected virtual void ContactEnded(Collider other) Parameters other Collider ContainsPoint(Vector2) public bool ContainsPoint(Vector2 p) Parameters p Vector2 Returns bool ContainsShape(IShape) public bool ContainsShape(IShape shape) Parameters shape IShape Returns bool ContainsShape(Circle) public bool ContainsShape(Circle shape) Parameters shape Circle Returns bool ContainsShape(Polygon) public bool ContainsShape(Polygon shape) Parameters shape Polygon Returns bool ContainsShape(Polyline) public bool ContainsShape(Polyline shape) Parameters shape Polyline Returns bool ContainsShape(Quad) public bool ContainsShape(Quad shape) Parameters shape Quad Returns bool ContainsShape(Rect) public bool ContainsShape(Rect shape) Parameters shape Rect Returns bool ContainsShape(Segment) public bool ContainsShape(Segment shape) Parameters shape Segment Returns bool ContainsShape(Triangle) public bool ContainsShape(Triangle shape) Parameters shape Triangle Returns bool DrawShape() public override void DrawShape() GetBoundingBox() public abstract Rect GetBoundingBox() Returns Rect GetClosestPoint(IShape) public ClosestPointResult GetClosestPoint(IShape shape) Parameters shape IShape Returns ClosestPointResult GetClosestPoint(Circle) public ClosestPointResult GetClosestPoint(Circle shape) Parameters shape Circle Returns ClosestPointResult GetClosestPoint(Line) public ClosestPointResult GetClosestPoint(Line line) Parameters line Line Returns ClosestPointResult GetClosestPoint(Polygon) public ClosestPointResult GetClosestPoint(Polygon shape) Parameters shape Polygon Returns ClosestPointResult GetClosestPoint(Polyline) public ClosestPointResult GetClosestPoint(Polyline shape) Parameters shape Polyline Returns ClosestPointResult GetClosestPoint(Quad) public ClosestPointResult GetClosestPoint(Quad shape) Parameters shape Quad Returns ClosestPointResult GetClosestPoint(Ray) public ClosestPointResult GetClosestPoint(Ray ray) Parameters ray Ray Returns ClosestPointResult GetClosestPoint(Rect) public ClosestPointResult GetClosestPoint(Rect shape) Parameters shape Rect Returns ClosestPointResult GetClosestPoint(Segment) public ClosestPointResult GetClosestPoint(Segment shape) Parameters shape Segment Returns ClosestPointResult GetClosestPoint(Triangle) public ClosestPointResult GetClosestPoint(Triangle shape) Parameters shape Triangle Returns ClosestPointResult GetClosestPoint(Vector2, out float) public CollisionPoint GetClosestPoint(Vector2 p, out float disSquared) Parameters p Vector2 disSquared float Returns CollisionPoint InitializeShape(Transform2D) public override void InitializeShape(Transform2D parentTransform) Parameters parentTransform Transform2D Intersect(Collider) public CollisionPoints? Intersect(Collider other) Parameters other Collider Returns CollisionPoints Intersect(Collider, ref CollisionPoints, bool) public int Intersect(Collider other, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters other Collider points CollisionPoints returnAfterFirstValid bool Returns int Intersect(CollisionObject) public CollisionPoints? Intersect(CollisionObject other) Parameters other CollisionObject Returns CollisionPoints Intersect(CollisionObject, ref CollisionPoints, bool) public int Intersect(CollisionObject other, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters other CollisionObject points CollisionPoints returnAfterFirstValid bool Returns int Intersect(IShape) public CollisionPoints? Intersect(IShape other) Parameters other IShape Returns CollisionPoints Intersect(IShape, ref CollisionPoints, bool) public int Intersect(IShape other, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters other IShape points CollisionPoints returnAfterFirstValid bool Returns int Intersect(Circle) public CollisionPoints? Intersect(Circle circle) Parameters circle Circle Returns CollisionPoints Intersect(Circle, ref CollisionPoints, bool) public int Intersect(Circle circle, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters circle Circle points CollisionPoints returnAfterFirstValid bool Returns int Intersect(Line) public CollisionPoints? Intersect(Line line) Parameters line Line Returns CollisionPoints Intersect(Line, ref CollisionPoints, bool) public int Intersect(Line line, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters line Line points CollisionPoints returnAfterFirstValid bool Returns int Intersect(Polygon) public CollisionPoints? Intersect(Polygon poly) Parameters poly Polygon Returns CollisionPoints Intersect(Polygon, ref CollisionPoints, bool) public int Intersect(Polygon poly, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters poly Polygon points CollisionPoints returnAfterFirstValid bool Returns int Intersect(Polyline) public CollisionPoints? Intersect(Polyline polyLine) Parameters polyLine Polyline Returns CollisionPoints Intersect(Polyline, ref CollisionPoints, bool) public int Intersect(Polyline polyLine, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters polyLine Polyline points CollisionPoints returnAfterFirstValid bool Returns int Intersect(Quad) public CollisionPoints? Intersect(Quad quad) Parameters quad Quad Returns CollisionPoints Intersect(Quad, ref CollisionPoints, bool) public int Intersect(Quad quad, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters quad Quad points CollisionPoints returnAfterFirstValid bool Returns int Intersect(Ray) public CollisionPoints? Intersect(Ray ray) Parameters ray Ray Returns CollisionPoints Intersect(Ray, ref CollisionPoints, bool) public int Intersect(Ray ray, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters ray Ray points CollisionPoints returnAfterFirstValid bool Returns int Intersect(Rect) public CollisionPoints? Intersect(Rect rect) Parameters rect Rect Returns CollisionPoints Intersect(Rect, ref CollisionPoints, bool) public int Intersect(Rect rect, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters rect Rect points CollisionPoints returnAfterFirstValid bool Returns int Intersect(Segment) public CollisionPoints? Intersect(Segment segment) Parameters segment Segment Returns CollisionPoints Intersect(Segment, ref CollisionPoints, bool) public int Intersect(Segment segment, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters segment Segment points CollisionPoints returnAfterFirstValid bool Returns int Intersect(Triangle) public CollisionPoints? Intersect(Triangle triangle) Parameters triangle Triangle Returns CollisionPoints Intersect(Triangle, ref CollisionPoints, bool) public int Intersect(Triangle triangle, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters triangle Triangle points CollisionPoints returnAfterFirstValid bool Returns int Intersected(Collision) Will be called from the parent. Is only called when a collision with this collider occurs where the intersection is valid. AvancedCollisionNotification has to be enabled on the parent for this function to be called. protected virtual void Intersected(Collision info) Parameters info Collision OnAddedToCollisionBody(CollisionObject) protected virtual void OnAddedToCollisionBody(CollisionObject newParent) Parameters newParent CollisionObject OnDraw() protected override void OnDraw() OnInitialized() protected override void OnInitialized() OnRemovedFromCollisionBody(CollisionObject) protected virtual void OnRemovedFromCollisionBody(CollisionObject formerParent) Parameters formerParent CollisionObject OnUpdate(float) protected override void OnUpdate(float dt) Parameters dt float Overlap(Collider) public bool Overlap(Collider other) Parameters other Collider Returns bool Overlap(CollisionObject) public bool Overlap(CollisionObject other) Parameters other CollisionObject Returns bool Overlap(IShape) public bool Overlap(IShape other) Parameters other IShape Returns bool Overlap(Circle) public bool Overlap(Circle circle) Parameters circle Circle Returns bool Overlap(Line) public bool Overlap(Line line) Parameters line Line Returns bool Overlap(Polygon) public bool Overlap(Polygon poly) Parameters poly Polygon Returns bool Overlap(Polyline) public bool Overlap(Polyline polyLine) Parameters polyLine Polyline Returns bool Overlap(Quad) public bool Overlap(Quad quad) Parameters quad Quad Returns bool Overlap(Ray) public bool Overlap(Ray ray) Parameters ray Ray Returns bool Overlap(Rect) public bool Overlap(Rect rect) Parameters rect Rect Returns bool Overlap(Segment) public bool Overlap(Segment segment) Parameters segment Segment Returns bool Overlap(Triangle) public bool Overlap(Triangle triangle) Parameters triangle Triangle Returns bool Overlapped(Overlap) Will be called from the parent. Is only called when an overlap with this collider occurs where the intersection is not valid. AvancedCollisionNotification has to be enabled on the parent for this function to be called. protected virtual void Overlapped(Overlap contact) Parameters contact Overlap Project(Vector2) public Polygon? Project(Vector2 v) Parameters v Vector2 Returns Polygon RecalculateShape() public override void RecalculateShape() UpdateShape(float, Transform2D) public override void UpdateShape(float dt, Transform2D parentTransform) Parameters dt float parentTransform Transform2D Events OnContactEnded A collision (Intersection/Overlap) between this collider and another collider has ended. AvancedCollisionNotification has to be enabled on the parent for this event to be invoked. public event Action<Collider>? OnContactEnded Event Type Action<Collider> OnIntersected A collision (Intersection) between this collider and another collider has occurred. AvancedCollisionNotification has to be enabled on the parent for this event to be invoked. public event Action<Collision>? OnIntersected Event Type Action<Collision> OnOverlapped A collision (Overlap) between this collider and another collider has occured. AvancedCollisionNotification has to be enabled on the parent for this event to be invoked. public event Action<Overlap>? OnOverlapped Event Type Action<Overlap>"
  },
  "api/ShapeEngine.Core.CollisionSystem.Collision.html": {
    "href": "api/ShapeEngine.Core.CollisionSystem.Collision.html",
    "title": "Class Collision | ShapeEngine",
    "summary": "Class Collision Namespace ShapeEngine.Core.CollisionSystem Assembly ShapeEngine.dll Contains the information of an intersection or an overlap between two colliders. public class Collision Inheritance object Collision Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Collision(Collider, Collider, bool) public Collision(Collider self, Collider other, bool firstContact) Parameters self Collider other Collider firstContact bool Collision(Collider, Collider, bool, CollisionPoints?) public Collision(Collider self, Collider other, bool firstContact, CollisionPoints? collisionPoints) Parameters self Collider other Collider firstContact bool collisionPoints CollisionPoints Fields FirstContact public readonly bool FirstContact Field Value bool Other public readonly Collider Other Field Value Collider OtherVel public readonly Vector2 OtherVel Field Value Vector2 Points public readonly CollisionPoints? Points Field Value CollisionPoints Self public readonly Collider Self Field Value Collider SelfVel public readonly Vector2 SelfVel Field Value Vector2 Properties Overlap public Overlap Overlap { get; } Property Value Overlap Methods Copy() public Collision Copy() Returns Collision Exists(Predicate<CollisionPoint>) public bool Exists(Predicate<CollisionPoint> match) Parameters match Predicate<CollisionPoint> Returns bool Find(Predicate<CollisionPoint>) public CollisionPoint Find(Predicate<CollisionPoint> match) Parameters match Predicate<CollisionPoint> Returns CollisionPoint FindAll(Predicate<CollisionPoint>) public CollisionPoints? FindAll(Predicate<CollisionPoint> match) Parameters match Predicate<CollisionPoint> Returns CollisionPoints GetClosestCollisionPoint() public CollisionPoint GetClosestCollisionPoint() Returns CollisionPoint GetClosestCollisionPoint(out float) public CollisionPoint GetClosestCollisionPoint(out float closestDistanceSquared) Parameters closestDistanceSquared float Returns CollisionPoint GetCollisionPointFacingTowardsSelf() Finds the collision point with the normal facing most in the direction as the reference point. Each collision point normal is checked against the direction from the collision point towards the reference point. public CollisionPoint GetCollisionPointFacingTowardsSelf() Returns CollisionPoint GetCollisionPointFacingTowardsSelfVel() Finds the collision point with the normal facing most in the direction as the reference direction. public CollisionPoint GetCollisionPointFacingTowardsSelfVel() Returns CollisionPoint GetCombinedCollisionPoint() public CollisionPoint GetCombinedCollisionPoint() Returns CollisionPoint GetFurthestCollisionPoint() public CollisionPoint GetFurthestCollisionPoint() Returns CollisionPoint GetFurthestCollisionPoint(out float) public CollisionPoint GetFurthestCollisionPoint(out float furthestDistanceSquared) Parameters furthestDistanceSquared float Returns CollisionPoint Validate(out CollisionPoint) Validates the collision points using SelfVel as reference direction and Self.CurTransform.Position as reference point public bool Validate(out CollisionPoint combined) Parameters combined CollisionPoint The average CollisionPoint of all valid collision points. Returns bool Returns true if there are valid collision points left. Validate(out CollisionPoint, out CollisionPoint) Validates the collision points using SelfVel as reference direction and Self.CurTransform.Position as reference point public bool Validate(out CollisionPoint combined, out CollisionPoint closest) Parameters combined CollisionPoint The average CollisionPoint of all valid collision points. closest CollisionPoint The closest CollisionPoint to the reference point (Self.CurTransform.Position) Returns bool Returns true if there are valid collision points left. Validate(out CollisionPointValidationResult) Validates the collision points using SelfVel as reference direction and Self.CurTransform.Position as reference point public bool Validate(out CollisionPointValidationResult result) Parameters result CollisionPointValidationResult A combination of useful collision points. Returns bool Returns true if there are valid collision points left."
  },
  "api/ShapeEngine.Core.CollisionSystem.CollisionHandler.html": {
    "href": "api/ShapeEngine.Core.CollisionSystem.CollisionHandler.html",
    "title": "Class CollisionHandler | ShapeEngine",
    "summary": "Class CollisionHandler Namespace ShapeEngine.Core.CollisionSystem Assembly ShapeEngine.dll public class CollisionHandler : IBounds Inheritance object CollisionHandler Implements IBounds Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CollisionHandler(Rect, int, int, int) public CollisionHandler(Rect bounds, int rows, int cols, int startCapacity = 1024) Parameters bounds Rect rows int cols int startCapacity int CollisionHandler(float, float, float, float, int, int, int) public CollisionHandler(float x, float y, float w, float h, int rows, int cols, int startCapacity = 1024) Parameters x float y float w float h float rows int cols int startCapacity int Properties Bounds public Rect Bounds { get; } Property Value Rect Count public int Count { get; } Property Value int Methods Add(CollisionObject) public void Add(CollisionObject collisionObject) Parameters collisionObject CollisionObject AddRange(params CollisionObject[]) public void AddRange(params CollisionObject[] collisionObjects) Parameters collisionObjects CollisionObject[] AddRange(IEnumerable<CollisionObject>) public void AddRange(IEnumerable<CollisionObject> collisionObjects) Parameters collisionObjects IEnumerable<CollisionObject> CastSpace(Collider) public int CastSpace(Collider collider) Parameters collider Collider Returns int CastSpace(Collider, ref CastSpaceResult) public void CastSpace(Collider collider, ref CastSpaceResult result) Parameters collider Collider result CastSpaceResult CastSpace(CollisionObject) public int CastSpace(CollisionObject collisionBody) Parameters collisionBody CollisionObject Returns int CastSpace(CollisionObject, ref CastSpaceResult) public void CastSpace(CollisionObject collisionBody, ref CastSpaceResult result) Parameters collisionBody CollisionObject result CastSpaceResult CastSpace(Circle, BitFlag) public int CastSpace(Circle shape, BitFlag collisionMask) Parameters shape Circle collisionMask BitFlag Returns int CastSpace(Circle, BitFlag, ref CastSpaceResult) public void CastSpace(Circle shape, BitFlag collisionMask, ref CastSpaceResult result) Parameters shape Circle collisionMask BitFlag result CastSpaceResult CastSpace(Line, BitFlag) public int CastSpace(Line line, BitFlag collisionMask) Parameters line Line collisionMask BitFlag Returns int CastSpace(Line, BitFlag, ref CastSpaceResult) public void CastSpace(Line line, BitFlag collisionMask, ref CastSpaceResult result) Parameters line Line collisionMask BitFlag result CastSpaceResult CastSpace(Polygon, BitFlag) public int CastSpace(Polygon shape, BitFlag collisionMask) Parameters shape Polygon collisionMask BitFlag Returns int CastSpace(Polygon, BitFlag, ref CastSpaceResult) public void CastSpace(Polygon shape, BitFlag collisionMask, ref CastSpaceResult result) Parameters shape Polygon collisionMask BitFlag result CastSpaceResult CastSpace(Polyline, BitFlag) public int CastSpace(Polyline shape, BitFlag collisionMask) Parameters shape Polyline collisionMask BitFlag Returns int CastSpace(Polyline, BitFlag, ref CastSpaceResult) public void CastSpace(Polyline shape, BitFlag collisionMask, ref CastSpaceResult result) Parameters shape Polyline collisionMask BitFlag result CastSpaceResult CastSpace(Ray, BitFlag) public int CastSpace(Ray ray, BitFlag collisionMask) Parameters ray Ray collisionMask BitFlag Returns int CastSpace(Ray, BitFlag, ref CastSpaceResult) public void CastSpace(Ray ray, BitFlag collisionMask, ref CastSpaceResult result) Parameters ray Ray collisionMask BitFlag result CastSpaceResult CastSpace(Rect, BitFlag) public int CastSpace(Rect shape, BitFlag collisionMask) Parameters shape Rect collisionMask BitFlag Returns int CastSpace(Rect, BitFlag, ref CastSpaceResult) public void CastSpace(Rect shape, BitFlag collisionMask, ref CastSpaceResult result) Parameters shape Rect collisionMask BitFlag result CastSpaceResult CastSpace(Segment, BitFlag) public int CastSpace(Segment shape, BitFlag collisionMask) Parameters shape Segment collisionMask BitFlag Returns int CastSpace(Segment, BitFlag, ref CastSpaceResult) public void CastSpace(Segment shape, BitFlag collisionMask, ref CastSpaceResult result) Parameters shape Segment collisionMask BitFlag result CastSpaceResult CastSpace(Triangle, BitFlag) public int CastSpace(Triangle shape, BitFlag collisionMask) Parameters shape Triangle collisionMask BitFlag Returns int CastSpace(Triangle, BitFlag, ref CastSpaceResult) public void CastSpace(Triangle shape, BitFlag collisionMask, ref CastSpaceResult result) Parameters shape Triangle collisionMask BitFlag result CastSpaceResult CastSpace(HashSet<Collider>, ref CastSpaceResult) public void CastSpace(HashSet<Collider> colliders, ref CastSpaceResult result) Parameters colliders HashSet<Collider> result CastSpaceResult CastSpace(List<Collider>, ref CastSpaceResult) public void CastSpace(List<Collider> colliders, ref CastSpaceResult result) Parameters colliders List<Collider> result CastSpaceResult Clear() public void Clear() Close() public void Close() DebugDraw(ColorRgba, ColorRgba) public void DebugDraw(ColorRgba border, ColorRgba fill) Parameters border ColorRgba fill ColorRgba GetParents(List<Collider>) public static HashSet<CollisionObject>? GetParents(List<Collider> colliders) Parameters colliders List<Collider> Returns HashSet<CollisionObject> IntersectSpace(Collider, Vector2) public IntersectSpaceResult? IntersectSpace(Collider collider, Vector2 origin) Parameters collider Collider origin Vector2 Returns IntersectSpaceResult IntersectSpace(CollisionObject, Vector2) public IntersectSpaceResult? IntersectSpace(CollisionObject colObject, Vector2 origin) Parameters colObject CollisionObject origin Vector2 Returns IntersectSpaceResult IntersectSpace(Circle, Vector2, BitFlag) public IntersectSpaceResult? IntersectSpace(Circle shape, Vector2 origin, BitFlag collisionMask) Parameters shape Circle origin Vector2 collisionMask BitFlag Returns IntersectSpaceResult IntersectSpace(Line, Vector2, BitFlag) public IntersectSpaceResult? IntersectSpace(Line line, Vector2 origin, BitFlag collisionMask) Parameters line Line origin Vector2 collisionMask BitFlag Returns IntersectSpaceResult IntersectSpace(Polygon, Vector2, BitFlag) public IntersectSpaceResult? IntersectSpace(Polygon shape, Vector2 origin, BitFlag collisionMask) Parameters shape Polygon origin Vector2 collisionMask BitFlag Returns IntersectSpaceResult IntersectSpace(Polyline, Vector2, BitFlag) public IntersectSpaceResult? IntersectSpace(Polyline shape, Vector2 origin, BitFlag collisionMask) Parameters shape Polyline origin Vector2 collisionMask BitFlag Returns IntersectSpaceResult IntersectSpace(Quad, Vector2, BitFlag) public IntersectSpaceResult? IntersectSpace(Quad shape, Vector2 origin, BitFlag collisionMask) Parameters shape Quad origin Vector2 collisionMask BitFlag Returns IntersectSpaceResult IntersectSpace(Ray, Vector2, BitFlag) public IntersectSpaceResult? IntersectSpace(Ray ray, Vector2 origin, BitFlag collisionMask) Parameters ray Ray origin Vector2 collisionMask BitFlag Returns IntersectSpaceResult IntersectSpace(Rect, Vector2, BitFlag) public IntersectSpaceResult? IntersectSpace(Rect shape, Vector2 origin, BitFlag collisionMask) Parameters shape Rect origin Vector2 collisionMask BitFlag Returns IntersectSpaceResult IntersectSpace(Segment, Vector2, BitFlag) public IntersectSpaceResult? IntersectSpace(Segment shape, Vector2 origin, BitFlag collisionMask) Parameters shape Segment origin Vector2 collisionMask BitFlag Returns IntersectSpaceResult IntersectSpace(Triangle, Vector2, BitFlag) public IntersectSpaceResult? IntersectSpace(Triangle shape, Vector2 origin, BitFlag collisionMask) Parameters shape Triangle origin Vector2 collisionMask BitFlag Returns IntersectSpaceResult Remove(CollisionObject) public void Remove(CollisionObject collisionObject) Parameters collisionObject CollisionObject RemoveRange(params CollisionObject[]) public void RemoveRange(params CollisionObject[] collisionObjects) Parameters collisionObjects CollisionObject[] RemoveRange(IEnumerable<CollisionObject>) public void RemoveRange(IEnumerable<CollisionObject> collisionObjects) Parameters collisionObjects IEnumerable<CollisionObject> ResizeBounds(Rect) public void ResizeBounds(Rect newBounds) Parameters newBounds Rect SortCastResult(ref List<Collider>, Vector2) public void SortCastResult(ref List<Collider> result, Vector2 sortOrigin) Parameters result List<Collider> sortOrigin Vector2 Update(float) public void Update(float dt) Parameters dt float"
  },
  "api/ShapeEngine.Core.CollisionSystem.CollisionInformation.html": {
    "href": "api/ShapeEngine.Core.CollisionSystem.CollisionInformation.html",
    "title": "Class CollisionInformation | ShapeEngine",
    "summary": "Class CollisionInformation Namespace ShapeEngine.Core.CollisionSystem Assembly ShapeEngine.dll Contains the information of a collision between two collision objects in form of a list of collisions. Each collision is an intersection or overlap between two colliders public class CollisionInformation : List<Collision>, IList<Collision>, ICollection<Collision>, IReadOnlyList<Collision>, IReadOnlyCollection<Collision>, IEnumerable<Collision>, IList, ICollection, IEnumerable Inheritance object List<Collision> CollisionInformation Implements IList<Collision> ICollection<Collision> IReadOnlyList<Collision> IReadOnlyCollection<Collision> IEnumerable<Collision> IList ICollection IEnumerable Inherited Members List<Collision>.AddRange(IEnumerable<Collision>) List<Collision>.AsReadOnly() List<Collision>.BinarySearch(int, int, Collision, IComparer<Collision>) List<Collision>.BinarySearch(Collision) List<Collision>.BinarySearch(Collision, IComparer<Collision>) List<Collision>.Clear() List<Collision>.Contains(Collision) List<Collision>.ConvertAll<TOutput>(Converter<Collision, TOutput>) List<Collision>.CopyTo(int, Collision[], int, int) List<Collision>.CopyTo(Collision[]) List<Collision>.CopyTo(Collision[], int) List<Collision>.EnsureCapacity(int) List<Collision>.Exists(Predicate<Collision>) List<Collision>.Find(Predicate<Collision>) List<Collision>.FindAll(Predicate<Collision>) List<Collision>.FindIndex(int, int, Predicate<Collision>) List<Collision>.FindIndex(int, Predicate<Collision>) List<Collision>.FindIndex(Predicate<Collision>) List<Collision>.FindLast(Predicate<Collision>) List<Collision>.FindLastIndex(int, int, Predicate<Collision>) List<Collision>.FindLastIndex(int, Predicate<Collision>) List<Collision>.FindLastIndex(Predicate<Collision>) List<Collision>.ForEach(Action<Collision>) List<Collision>.GetEnumerator() List<Collision>.GetRange(int, int) List<Collision>.IndexOf(Collision) List<Collision>.IndexOf(Collision, int) List<Collision>.IndexOf(Collision, int, int) List<Collision>.Insert(int, Collision) List<Collision>.InsertRange(int, IEnumerable<Collision>) List<Collision>.LastIndexOf(Collision) List<Collision>.LastIndexOf(Collision, int) List<Collision>.LastIndexOf(Collision, int, int) List<Collision>.Remove(Collision) List<Collision>.RemoveAll(Predicate<Collision>) List<Collision>.RemoveAt(int) List<Collision>.RemoveRange(int, int) List<Collision>.Reverse() List<Collision>.Reverse(int, int) List<Collision>.Slice(int, int) List<Collision>.Sort() List<Collision>.Sort(IComparer<Collision>) List<Collision>.Sort(Comparison<Collision>) List<Collision>.Sort(int, int, IComparer<Collision>) List<Collision>.ToArray() List<Collision>.TrimExcess() List<Collision>.TrueForAll(Predicate<Collision>) List<Collision>.Capacity List<Collision>.Count List<Collision>.this[int] object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CollisionInformation(CollisionObject, CollisionObject, bool) public CollisionInformation(CollisionObject self, CollisionObject other, bool firstContact) Parameters self CollisionObject other CollisionObject firstContact bool CollisionInformation(CollisionObject, CollisionObject, bool, List<Collision>) public CollisionInformation(CollisionObject self, CollisionObject other, bool firstContact, List<Collision> collisions) Parameters self CollisionObject other CollisionObject firstContact bool collisions List<Collision> Fields FirstContact public readonly bool FirstContact Field Value bool Other public readonly CollisionObject Other Field Value CollisionObject OtherVel public readonly Vector2 OtherVel Field Value Vector2 Self public readonly CollisionObject Self Field Value CollisionObject SelfVel public readonly Vector2 SelfVel Field Value Vector2 Properties FilteredCollisionPoint This point is only valid when the collision object has ComputeIntersection and FilterCollisionPoints enabled. public CollisionPoint FilteredCollisionPoint { get; } Property Value CollisionPoint TotalCollisionPointCount public int TotalCollisionPointCount { get; } Property Value int Methods Add(Collision) public void Add(Collision collision) Parameters collision Collision Copy() public CollisionInformation Copy() Returns CollisionInformation ExistsCollisionPoint(Predicate<CollisionPoint>) Return if a collision point exist in any valid collision matching the predicate. public bool ExistsCollisionPoint(Predicate<CollisionPoint> match) Parameters match Predicate<CollisionPoint> Returns bool FilterCollisions(Predicate<Collision>) public List<Collision>? FilterCollisions(Predicate<Collision> match) Parameters match Predicate<Collision> Returns List<Collision> FindAllCollisionPoints(Predicate<CollisionPoint>) Finds all collision points matching the predicate in any valid collision. If no collision points are found null is returned. public CollisionPoints? FindAllCollisionPoints(Predicate<CollisionPoint> match) Parameters match Predicate<CollisionPoint> Returns CollisionPoints FindCollisionPoint(Predicate<CollisionPoint>) Returns the first collision point matching the predicate in any valid collision. If no collision point is found an empty CollisionPoint is returned. public CollisionPoint FindCollisionPoint(Predicate<CollisionPoint> match) Parameters match Predicate<CollisionPoint> Returns CollisionPoint GetAllFirstContactCollisions() public List<Collision>? GetAllFirstContactCollisions() Returns List<Collision> GetAllOtherColliders() public HashSet<Collider>? GetAllOtherColliders() Returns HashSet<Collider> GetAllOtherFirstContactColliders() public HashSet<Collider>? GetAllOtherFirstContactColliders() Returns HashSet<Collider> GetClosestCollisionPoint() Get the closest collision point to Self.Transform.Position within all valid collisions. public CollisionPoint GetClosestCollisionPoint() Returns CollisionPoint GetClosestCollisionPoint(Vector2) Get the closest collision point to the reference point within all valid collisions. public CollisionPoint GetClosestCollisionPoint(Vector2 referencePoint) Parameters referencePoint Vector2 Returns CollisionPoint GetClosestCollisionPoint(Vector2, out float) Get the closest collision point to the reference point within all valid collisions. public CollisionPoint GetClosestCollisionPoint(Vector2 referencePoint, out float closestDistanceSquared) Parameters referencePoint Vector2 The reference point for finding the closest collision point. closestDistanceSquared float The closest distance squared between the closest collision point and the reference point. If negative value is invalid. Returns CollisionPoint GetClosestCollisionPoint(out float) Get the closest collision point to Self.Transform.Position within all valid collisions. public CollisionPoint GetClosestCollisionPoint(out float closestDistanceSquared) Parameters closestDistanceSquared float The closest distance squared between the closest collision point and Self.Transform.Position. If negative value is invalid. Returns CollisionPoint GetCombinedCollisionPoint() Get the combined collision point of all valid collision points in all valid collisions. public CollisionPoint GetCombinedCollisionPoint() Returns CollisionPoint GetFurthestCollisionPoint() Get the furthest collision point to Self.Transform.Position within all valid collisions. public CollisionPoint GetFurthestCollisionPoint() Returns CollisionPoint GetFurthestCollisionPoint(Vector2) Get the furthest collision point to the reference point within all valid collisions. public CollisionPoint GetFurthestCollisionPoint(Vector2 referencePoint) Parameters referencePoint Vector2 Returns CollisionPoint GetFurthestCollisionPoint(Vector2, out float) Get the furthest collision point to the reference point within all valid collisions. public CollisionPoint GetFurthestCollisionPoint(Vector2 referencePoint, out float furthestDistanceSquared) Parameters referencePoint Vector2 The reference point for finding the furthest collision point. furthestDistanceSquared float The furthest distance squared between the furthest collision point and the reference point. If negative value is invalid. Returns CollisionPoint GetFurthestCollisionPoint(out float) Get the furthest collision point to Self.Transform.Position within all valid collisions. public CollisionPoint GetFurthestCollisionPoint(out float furthestDistanceSquared) Parameters furthestDistanceSquared float The furthest distance squared between the furthest collision point and Self.Transform.Position. If negative value is invalid. Returns CollisionPoint Validate(out CollisionPoint) Validates the collisions and removes invalid ones using SelfVel as referenceDirection and Self.CurTransform.Position as reference point. public bool Validate(out CollisionPoint combined) Parameters combined CollisionPoint The average CollisionPoint of all valid collision points. Returns bool Returns true if there are valid collision points left. Validate(out CollisionPoint, out CollisionPoint) Validates the collisions and removes invalid ones using SelfVel as referenceDirection and Self.CurTransform.Position as reference point. public bool Validate(out CollisionPoint combined, out CollisionPoint closest) Parameters combined CollisionPoint The average CollisionPoint of all valid collision points. closest CollisionPoint The closest CollisionPoint to the reference point (Self.CurTransform.Position) Returns bool Returns true if there are valid collision points left. Validate(out CollisionPointValidationResult) Validates the collisions and removes invalid ones using SelfVel as referenceDirection and Self.CurTransform.Position as reference point. public bool Validate(out CollisionPointValidationResult result) Parameters result CollisionPointValidationResult A combination of useful collision points. Returns bool Returns true if there are valid collision points left."
  },
  "api/ShapeEngine.Core.CollisionSystem.CollisionObject.html": {
    "href": "api/ShapeEngine.Core.CollisionSystem.CollisionObject.html",
    "title": "Class CollisionObject | ShapeEngine",
    "summary": "Class CollisionObject Namespace ShapeEngine.Core.CollisionSystem Assembly ShapeEngine.dll public abstract class CollisionObject : PhysicsObject, IUpdateable, IDrawable Inheritance object GameObject PhysicsObject CollisionObject Implements IUpdateable IDrawable Inherited Members PhysicsObject.CurVelocityMagnitudeSquared PhysicsObject.CurVelocityMagnitude PhysicsObject.CurVelocityDirection PhysicsObject.Velocity PhysicsObject.Mass PhysicsObject.DragCoefficient PhysicsObject.ConstAcceleration PhysicsObject.AccumulatedForce PhysicsObject.AccumulatedImpulses PhysicsObject.Momentum PhysicsObject.KineticEnergy PhysicsObject.IsInMotion PhysicsObject.ClearAccumulatedForce() PhysicsObject.ClearAccumulatedImpulses() PhysicsObject.AddForce(Vector2) PhysicsObject.AddForceRaw(Vector2) PhysicsObject.AddImpulse(Vector2) PhysicsObject.OnPhysicsStateUpdated(float) GameObject.OnKilled GameObject.OnRevived GameObject.Transform GameObject.IsDead GameObject.FixedUpdate(GameTime, ScreenInfo, ScreenInfo, ScreenInfo) GameObject.InterpolateFixedUpdate(GameTime, ScreenInfo, ScreenInfo, ScreenInfo, float) GameObject.DrawGame(ScreenInfo) GameObject.DrawGameUI(ScreenInfo) GameObject.IsDrawingToGame(Rect) GameObject.IsDrawingToGameUI(Rect) GameObject.Layer GameObject.UpdateParallaxe(Vector2) GameObject.IsInLayer(uint) GameObject.OnSpawned(SpawnArea) GameObject.OnDespawned(SpawnArea) GameObject.HasLeftBounds(Rect) GameObject.Kill(string, GameObject) GameObject.WasKilled(string, GameObject) GameObject.TryKill(string, GameObject) GameObject.Revive(string, GameObject) GameObject.WasRevived(string, GameObject) GameObject.TryRevive(string, GameObject) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ShapePhysics.ApplyAttraction(PhysicsObject, PhysicsObject) ShapePhysics.ApplyAttraction(PhysicsObject, Vector2, float) ShapePhysics.ApplyAttraction(PhysicsObject, Vector2, float, Vector2) ShapePhysics.ApplyAttraction(PhysicsObject, Vector2, float, float) ShapePhysics.ApplyElasticCollision(PhysicsObject, PhysicsObject, Vector2, float) ShapePhysics.ApplyElasticCollisionCircleSelf(PhysicsObject, PhysicsObject, float) ShapePhysics.ApplyElasticCollisionSelf(PhysicsObject, PhysicsObject, Vector2, float) ShapePhysics.ApplyRepulsion(PhysicsObject, Vector2, float) ShapePhysics.ApplyRepulsion(PhysicsObject, Vector2, float, Vector2) ShapePhysics.ApplyRepulsion(PhysicsObject, Vector2, float, float) Constructors CollisionObject() public CollisionObject() CollisionObject(Transform2D) public CollisionObject(Transform2D transform) Parameters transform Transform2D CollisionObject(Vector2) public CollisionObject(Vector2 position) Parameters position Vector2 Fields AvancedCollisionNotification If set to true: - ColliderIntersected(), ColliderOverlapped(), and ColliderOverlapEnded() functions will be called on this CollisionObject - OnColliderIntersected, OnColliderOverlapped, and OnColliderOverlapEnded events will be invoked - Collision(), Overlap(), OverlapEnded() functions will be called on the colliders involved public bool AvancedCollisionNotification Field Value bool CollisionPointsFilterType public CollisionPointsFilterType CollisionPointsFilterType Field Value CollisionPointsFilterType FilterCollisionPoints Determines if all generated collision points are filtered based on the CollisionPointsFilterType. ComputeIntersections has to be enabled on colliders for this to work. Only colliders that have ComputeIntersections enabled will generate CollisionPoints that are then filtered into a single CollisionPoint for each CollisionInformation. public bool FilterCollisionPoints Field Value bool Passive If a Passive CollisionObject checks for collisions/intersections against Non-Passive CollisionObjects, the CollisionInformation will be generated as if the Non-Passive CollisionObject checked for the collision. This mostly affects CollisionPoint normal generation. Normally the normals are pointing towards the CollisionObject that is checking for the collision. If this is not wanted and the normals should point away from the CollisionObject that is checking for the collision, the Passive flag should be set to true. This only comes into effect for colliders that compute intersections! public bool Passive Field Value bool ProjectShape public bool ProjectShape Field Value bool Properties Colliders public HashSet<Collider> Colliders { get; } Property Value HashSet<Collider> Enabled public bool Enabled { get; set; } Property Value bool HasColliders public bool HasColliders { get; } Property Value bool Methods AddCollider(Collider) public bool AddCollider(Collider col) Parameters col Collider Returns bool ColliderContactEnded(Collider, Collider) Only called when AdvancedCollisionNotification is set to true. Called when a collider of this CollisionObject and a collider of another CollisionObject have ended their contact. protected virtual void ColliderContactEnded(Collider self, Collider other) Parameters self Collider The collider of this CollisionObject. other Collider The collider of the other CollisionObject. ColliderIntersected(Collision) Only callded when AdvancedCollisionNotification is set to true and the intersection is valid. protected virtual void ColliderIntersected(Collision collision) Parameters collision Collision The information about the collision ColliderOverlapped(Overlap) Only callded when AdvancedCollisionNotification is set to true and the intersection is not valid. protected virtual void ColliderOverlapped(Overlap overlap) Parameters overlap Overlap The information about the overlap Collision(CollisionInformation) Called when 1 or more collider of this CollisionObject is involved in a collision (intersection or overlap) protected virtual void Collision(CollisionInformation info) Parameters info CollisionInformation ContactEnded(CollisionObject) Called when all colliders between this CollisionObject and other have ended their contact. protected virtual void ContactEnded(CollisionObject other) Parameters other CollisionObject The other collision object the contact has ended with. GetBoundingBox() public override Rect GetBoundingBox() Returns Rect Intersect(Collider) public CollisionPoints? Intersect(Collider other) Parameters other Collider Returns CollisionPoints Intersect(CollisionObject) public CollisionPoints? Intersect(CollisionObject other) Parameters other CollisionObject Returns CollisionPoints Intersect(Circle) public CollisionPoints? Intersect(Circle shape) Parameters shape Circle Returns CollisionPoints Intersect(Polygon) public CollisionPoints? Intersect(Polygon shape) Parameters shape Polygon Returns CollisionPoints Intersect(Polyline) public CollisionPoints? Intersect(Polyline shape) Parameters shape Polyline Returns CollisionPoints Intersect(Rect) public CollisionPoints? Intersect(Rect shape) Parameters shape Rect Returns CollisionPoints Intersect(Segment) public CollisionPoints? Intersect(Segment shape) Parameters shape Segment Returns CollisionPoints Intersect(Triangle) public CollisionPoints? Intersect(Triangle shape) Parameters shape Triangle Returns CollisionPoints OnColliderUpdateFinished() protected virtual void OnColliderUpdateFinished() OnColliderUpdated(Collider) protected virtual void OnColliderUpdated(Collider collider) Parameters collider Collider OnCollisionSystemEntered(CollisionHandler) Is called when collision object is added to a collision handler. public virtual void OnCollisionSystemEntered(CollisionHandler handler) Parameters handler CollisionHandler OnCollisionSystemLeft(CollisionHandler) Is called when the collision object is removed from a collision handler. public virtual void OnCollisionSystemLeft(CollisionHandler handler) Parameters handler CollisionHandler Overlap(Collider) public bool Overlap(Collider other) Parameters other Collider Returns bool Overlap(CollisionObject) public bool Overlap(CollisionObject other) Parameters other CollisionObject Returns bool Overlap(Circle) public bool Overlap(Circle shape) Parameters shape Circle Returns bool Overlap(Polygon) public bool Overlap(Polygon shape) Parameters shape Polygon Returns bool Overlap(Polyline) public bool Overlap(Polyline shape) Parameters shape Polyline Returns bool Overlap(Rect) public bool Overlap(Rect shape) Parameters shape Rect Returns bool Overlap(Segment) public bool Overlap(Segment shape) Parameters shape Segment Returns bool Overlap(Triangle) public bool Overlap(Triangle shape) Parameters shape Triangle Returns bool RemoveCollider(Collider) public bool RemoveCollider(Collider col) Parameters col Collider Returns bool Update(GameTime, ScreenInfo, ScreenInfo, ScreenInfo) Called every frame. Called before FixedUpdate if fixed framerate is enabled. public override void Update(GameTime time, ScreenInfo game, ScreenInfo gameUi, ScreenInfo ui) Parameters time GameTime game ScreenInfo gameUi ScreenInfo ui ScreenInfo Events OnColliderContactEnded public event Action<Collider, Collider>? OnColliderContactEnded Event Type Action<Collider, Collider> OnColliderIntersected public event Action<Collision>? OnColliderIntersected Event Type Action<Collision> OnColliderOverlapped public event Action<Overlap>? OnColliderOverlapped Event Type Action<Overlap> OnCollision public event Action<CollisionInformation>? OnCollision Event Type Action<CollisionInformation> OnContactEnded public event Action<CollisionObject, CollisionObject>? OnContactEnded Event Type Action<CollisionObject, CollisionObject>"
  },
  "api/ShapeEngine.Core.CollisionSystem.CollisionPoints.html": {
    "href": "api/ShapeEngine.Core.CollisionSystem.CollisionPoints.html",
    "title": "Class CollisionPoints | ShapeEngine",
    "summary": "Class CollisionPoints Namespace ShapeEngine.Core.CollisionSystem Assembly ShapeEngine.dll public class CollisionPoints : ShapeList<CollisionPoint>, IList<CollisionPoint>, ICollection<CollisionPoint>, IReadOnlyList<CollisionPoint>, IReadOnlyCollection<CollisionPoint>, IEnumerable<CollisionPoint>, IList, ICollection, IEnumerable Inheritance object List<CollisionPoint> ShapeList<CollisionPoint> CollisionPoints Implements IList<CollisionPoint> ICollection<CollisionPoint> IReadOnlyList<CollisionPoint> IReadOnlyCollection<CollisionPoint> IEnumerable<CollisionPoint> IList ICollection IEnumerable Derived IntersectSpaceEntry Inherited Members ShapeList<CollisionPoint>.AddRange(params CollisionPoint[]) ShapeList<CollisionPoint>.IsIndexValid(int) ShapeList<CollisionPoint>.GetRandomItem() ShapeList<CollisionPoint>.GetRandomItems(int) ShapeList<CollisionPoint>.GetItem(int) List<CollisionPoint>.Add(CollisionPoint) List<CollisionPoint>.AddRange(IEnumerable<CollisionPoint>) List<CollisionPoint>.AsReadOnly() List<CollisionPoint>.BinarySearch(int, int, CollisionPoint, IComparer<CollisionPoint>) List<CollisionPoint>.BinarySearch(CollisionPoint) List<CollisionPoint>.BinarySearch(CollisionPoint, IComparer<CollisionPoint>) List<CollisionPoint>.Clear() List<CollisionPoint>.Contains(CollisionPoint) List<CollisionPoint>.ConvertAll<TOutput>(Converter<CollisionPoint, TOutput>) List<CollisionPoint>.CopyTo(int, CollisionPoint[], int, int) List<CollisionPoint>.CopyTo(CollisionPoint[]) List<CollisionPoint>.CopyTo(CollisionPoint[], int) List<CollisionPoint>.EnsureCapacity(int) List<CollisionPoint>.Exists(Predicate<CollisionPoint>) List<CollisionPoint>.Find(Predicate<CollisionPoint>) List<CollisionPoint>.FindAll(Predicate<CollisionPoint>) List<CollisionPoint>.FindIndex(int, int, Predicate<CollisionPoint>) List<CollisionPoint>.FindIndex(int, Predicate<CollisionPoint>) List<CollisionPoint>.FindIndex(Predicate<CollisionPoint>) List<CollisionPoint>.FindLast(Predicate<CollisionPoint>) List<CollisionPoint>.FindLastIndex(int, int, Predicate<CollisionPoint>) List<CollisionPoint>.FindLastIndex(int, Predicate<CollisionPoint>) List<CollisionPoint>.FindLastIndex(Predicate<CollisionPoint>) List<CollisionPoint>.ForEach(Action<CollisionPoint>) List<CollisionPoint>.GetEnumerator() List<CollisionPoint>.GetRange(int, int) List<CollisionPoint>.IndexOf(CollisionPoint) List<CollisionPoint>.IndexOf(CollisionPoint, int) List<CollisionPoint>.IndexOf(CollisionPoint, int, int) List<CollisionPoint>.Insert(int, CollisionPoint) List<CollisionPoint>.InsertRange(int, IEnumerable<CollisionPoint>) List<CollisionPoint>.LastIndexOf(CollisionPoint) List<CollisionPoint>.LastIndexOf(CollisionPoint, int) List<CollisionPoint>.LastIndexOf(CollisionPoint, int, int) List<CollisionPoint>.Remove(CollisionPoint) List<CollisionPoint>.RemoveAll(Predicate<CollisionPoint>) List<CollisionPoint>.RemoveAt(int) List<CollisionPoint>.RemoveRange(int, int) List<CollisionPoint>.Reverse() List<CollisionPoint>.Reverse(int, int) List<CollisionPoint>.Slice(int, int) List<CollisionPoint>.Sort() List<CollisionPoint>.Sort(IComparer<CollisionPoint>) List<CollisionPoint>.Sort(Comparison<CollisionPoint>) List<CollisionPoint>.Sort(int, int, IComparer<CollisionPoint>) List<CollisionPoint>.ToArray() List<CollisionPoint>.TrimExcess() List<CollisionPoint>.TrueForAll(Predicate<CollisionPoint>) List<CollisionPoint>.Capacity List<CollisionPoint>.Count List<CollisionPoint>.this[int] object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ShapeCustomDrawing.Draw(CollisionPoints, float, ColorRgba, ColorRgba) Constructors CollisionPoints(CollisionPoints) public CollisionPoints(CollisionPoints other) Parameters other CollisionPoints CollisionPoints(params CollisionPoint[]) public CollisionPoints(params CollisionPoint[] points) Parameters points CollisionPoint[] CollisionPoints(IEnumerable<CollisionPoint>, int) public CollisionPoints(IEnumerable<CollisionPoint> points, int count) Parameters points IEnumerable<CollisionPoint> count int CollisionPoints(List<CollisionPoint>) public CollisionPoints(List<CollisionPoint> points) Parameters points List<CollisionPoint> CollisionPoints(int) public CollisionPoints(int capacity = 0) Parameters capacity int Properties First public CollisionPoint First { get; } Property Value CollisionPoint Last public CollisionPoint Last { get; } Property Value CollisionPoint Valid public bool Valid { get; } Property Value bool Methods Copy() public CollisionPoints Copy() Returns CollisionPoints Equals(CollisionPoints?) public bool Equals(CollisionPoints? other) Parameters other CollisionPoints Returns bool Filter(CollisionPointsFilterType, Vector2) Filters the CollisionPoints list based on a given filter type and reference point. PointingTowards and PointingAway calculate the direction from the collision point to the reference point. PointingTowards uses the normal that is facing the same direction as the direction from the collision point to the reference point. PointingAway uses the normal that is facing the opposite direction as the direction from the collision point to the reference point. public CollisionPoint Filter(CollisionPointsFilterType filterType, Vector2 referencePoint = default) Parameters filterType CollisionPointsFilterType The filter type for selecting a collision point. referencePoint Vector2 The reference point that is used for closest, furthest, pointing towards, and pointing away calculations. Returns CollisionPoint Filter(CollisionPointsFilterType, Vector2, Vector2) Filters the CollisionPoints list based on a given filter type and reference point. Closest and Furthest use the reference point. PointingTowards and PointingAway use the reference direction. PointingTowards uses the Normal that is facing the same direction as the referenceDirection. PointingAway uses the Normal that is facing the opposite direction as the reference direction. public CollisionPoint Filter(CollisionPointsFilterType filterType, Vector2 referencePoint, Vector2 referenceDirection) Parameters filterType CollisionPointsFilterType The filter type for selecting a collision point. referencePoint Vector2 The reference point that is used for closest and furthest calculations. referenceDirection Vector2 The reference direction that is used for pointing towards and pointing away calculations. Returns CollisionPoint FlipAllNormals() public void FlipAllNormals() FlipNormalsTowardsDirection(Vector2) public void FlipNormalsTowardsDirection(Vector2 referenceDirection) Parameters referenceDirection Vector2 FlipNormalsTowardsPoint(Vector2) public void FlipNormalsTowardsPoint(Vector2 referencePoint) Parameters referencePoint Vector2 GetClosestCollisionPoint(Vector2) public CollisionPoint GetClosestCollisionPoint(Vector2 referencePoint) Parameters referencePoint Vector2 Returns CollisionPoint GetClosestCollisionPoint(Vector2, out float) public CollisionPoint GetClosestCollisionPoint(Vector2 referencePoint, out float closestDistanceSquared) Parameters referencePoint Vector2 closestDistanceSquared float Returns CollisionPoint GetCollisionPointFacingTowardsDir(Vector2) Finds the collision point with the normal facing most in the direction as the reference direction. public CollisionPoint GetCollisionPointFacingTowardsDir(Vector2 referenceDir) Parameters referenceDir Vector2 Returns CollisionPoint GetCollisionPointFacingTowardsPoint(Vector2) Finds the collision point with the normal facing most in the direction as the reference point. Each collision point normal is checked against the direction from the collision point towards the reference point. public CollisionPoint GetCollisionPointFacingTowardsPoint(Vector2 referencePoint) Parameters referencePoint Vector2 Returns CollisionPoint GetCombinedCollisionPoint() public CollisionPoint GetCombinedCollisionPoint() Returns CollisionPoint GetFurthestCollisionPoint(Vector2) public CollisionPoint GetFurthestCollisionPoint(Vector2 referencePoint) Parameters referencePoint Vector2 Returns CollisionPoint GetFurthestCollisionPoint(Vector2, out float) public CollisionPoint GetFurthestCollisionPoint(Vector2 referencePoint, out float furthestDistanceSquared) Parameters referencePoint Vector2 furthestDistanceSquared float Returns CollisionPoint GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. GetUniqueCollisionPoints() public CollisionPoints GetUniqueCollisionPoints() Returns CollisionPoints GetUniquePoints() public Points GetUniquePoints() Returns Points SortClosestFirst(Vector2) public bool SortClosestFirst(Vector2 referencePoint) Parameters referencePoint Vector2 Returns bool SortFirstBottom() public bool SortFirstBottom() Returns bool SortFirstLeft() public bool SortFirstLeft() Returns bool SortFirstRight() public bool SortFirstRight() Returns bool SortFirstTop() public bool SortFirstTop() Returns bool SortFurthestFirst(Vector2) public bool SortFurthestFirst(Vector2 referencePoint) Parameters referencePoint Vector2 Returns bool Validate(out CollisionPoint) Removes: - invalid CollisionPoints public bool Validate(out CollisionPoint combined) Parameters combined CollisionPoint An averaged CollisionPoint of all remaining CollisionPoints. Returns bool Returns true if there are valid points remaining Validate(Vector2, out CollisionPoint) Removes: invalid CollisionPoints CollisionPoints with normals facing in the same direction as the reference direction public bool Validate(Vector2 referenceDirection, out CollisionPoint combined) Parameters referenceDirection Vector2 The direction to check CollisionPoint Normals against. combined CollisionPoint An averaged CollisionPoint of all remaining CollisionPoints. Returns bool Returns true if there are valid points remaining Validate(Vector2, out CollisionPoint, out CollisionPoint) Removes: invalid CollisionPoints public bool Validate(Vector2 referencePoint, out CollisionPoint combined, out CollisionPoint closest) Parameters referencePoint Vector2 The direction from the reference point towards to CollisionPoint to check CollisionPoint Normals against. combined CollisionPoint An averaged CollisionPoint of all remaining CollisionPoints. closest CollisionPoint The CollisionPoint that is closest to the referencePoint. Returns bool Returns true if there are valid points remaining Validate(Vector2, out CollisionPointValidationResult) Removes: invalid CollisionPoints public bool Validate(Vector2 referencePoint, out CollisionPointValidationResult validationResult) Parameters referencePoint Vector2 The direction from the reference point towards to CollisionPoint to check CollisionPoint Normals against. validationResult CollisionPointValidationResult The result of the combined CollisionPoint, and the closest/furthest collision point from the reference point, and the CollisionPoint with normal facing towards the referencePoint. Returns bool Returns true if there are valid points remaining Validate(Vector2, Vector2, out CollisionPoint) Removes: invalid CollisionPoints CollisionPoints with normals facing in the same direction as the reference direction CollisionPoints with normals facing in the opposite direction as the reference point (from CollisionPoint towards the reference point) public bool Validate(Vector2 referenceDirection, Vector2 referencePoint, out CollisionPoint combined) Parameters referenceDirection Vector2 The direction to check CollisionPoint normals against. referencePoint Vector2 The direction from the reference point towards to CollisionPoint to check CollisionPoint Normals against. combined CollisionPoint An averaged CollisionPoint of all remaining CollisionPoints. Returns bool Returns true if there are valid points remaining Validate(Vector2, Vector2, out CollisionPoint, out CollisionPoint) Removes: invalid CollisionPoints CollisionPoints with normals facing in the same direction as the reference direction CollisionPoints with normals facing in the opposite direction as the reference point (from CollisionPoint towards the reference point) public bool Validate(Vector2 referenceDirection, Vector2 referencePoint, out CollisionPoint combined, out CollisionPoint closest) Parameters referenceDirection Vector2 The direction to check CollisionPoint normals against. referencePoint Vector2 The direction from the reference point towards to CollisionPoint to check CollisionPoint Normals against. combined CollisionPoint An averaged CollisionPoint of all remaining CollisionPoints. closest CollisionPoint The CollisionPoint that is closest to the referencePoint. Returns bool Returns true if there are valid points remaining Validate(Vector2, Vector2, out CollisionPointValidationResult) Removes: invalid CollisionPoints CollisionPoints with normals facing in the same direction as the reference direction CollisionPoints with normals facing in the opposite direction as the reference point (from CollisionPoint towards the reference point) public bool Validate(Vector2 referenceDirection, Vector2 referencePoint, out CollisionPointValidationResult validationResult) Parameters referenceDirection Vector2 The direction to check CollisionPoint normals against. referencePoint Vector2 The direction from the reference point towards to CollisionPoint to check CollisionPoint Normals against. validationResult CollisionPointValidationResult The result of the combined CollisionPoint, and the closest/furthest collision point from the reference point, and the CollisionPoint with normal facing towards the referencePoint. Returns bool Returns true if there are valid points remaining"
  },
  "api/ShapeEngine.Core.CollisionSystem.CollisionPointsFilterType.html": {
    "href": "api/ShapeEngine.Core.CollisionSystem.CollisionPointsFilterType.html",
    "title": "Enum CollisionPointsFilterType | ShapeEngine",
    "summary": "Enum CollisionPointsFilterType Namespace ShapeEngine.Core.CollisionSystem Assembly ShapeEngine.dll First - Selects the first collision point. Closest - Selects the collision point closest to the reference point. Furthest - Selects the collision point furthest from the reference point. Combined - Computes the average collision point. PointingTowards - Selects the collision point with a normal pointing the most towards the reference position. PointingAway - Selects the collision point with a normal pointing the most away from the reference position. Random - Selects a random collision point. public enum CollisionPointsFilterType Fields Closest = 1 Combined = 3 First = 0 Furthest = 2 PointingAway = 5 PointingTowards = 4 Random = 6"
  },
  "api/ShapeEngine.Core.CollisionSystem.IShape.html": {
    "href": "api/ShapeEngine.Core.CollisionSystem.IShape.html",
    "title": "Interface IShape | ShapeEngine",
    "summary": "Interface IShape Namespace ShapeEngine.Core.CollisionSystem Assembly ShapeEngine.dll public interface IShape Methods GetCircleShape() Circle GetCircleShape() Returns Circle GetLineShape() Line GetLineShape() Returns Line GetPolygonShape() Polygon GetPolygonShape() Returns Polygon GetPolylineShape() Polyline GetPolylineShape() Returns Polyline GetQuadShape() Quad GetQuadShape() Returns Quad GetRayShape() Ray GetRayShape() Returns Ray GetRectShape() Rect GetRectShape() Returns Rect GetSegmentShape() Segment GetSegmentShape() Returns Segment GetShapeType() ShapeType GetShapeType() Returns ShapeType GetTriangleShape() Triangle GetTriangleShape() Returns Triangle"
  },
  "api/ShapeEngine.Core.CollisionSystem.IntersectSpaceEntry.html": {
    "href": "api/ShapeEngine.Core.CollisionSystem.IntersectSpaceEntry.html",
    "title": "Class IntersectSpaceEntry | ShapeEngine",
    "summary": "Class IntersectSpaceEntry Namespace ShapeEngine.Core.CollisionSystem Assembly ShapeEngine.dll public class IntersectSpaceEntry : CollisionPoints, IList<CollisionPoint>, ICollection<CollisionPoint>, IReadOnlyList<CollisionPoint>, IReadOnlyCollection<CollisionPoint>, IEnumerable<CollisionPoint>, IList, ICollection, IEnumerable Inheritance object List<CollisionPoint> ShapeList<CollisionPoint> CollisionPoints IntersectSpaceEntry Implements IList<CollisionPoint> ICollection<CollisionPoint> IReadOnlyList<CollisionPoint> IReadOnlyCollection<CollisionPoint> IEnumerable<CollisionPoint> IList ICollection IEnumerable Inherited Members CollisionPoints.First CollisionPoints.Last CollisionPoints.Valid CollisionPoints.Validate(out CollisionPoint) CollisionPoints.Validate(Vector2, out CollisionPoint) CollisionPoints.Validate(Vector2, Vector2, out CollisionPoint) CollisionPoints.Validate(Vector2, Vector2, out CollisionPoint, out CollisionPoint) CollisionPoints.Validate(Vector2, Vector2, out CollisionPointValidationResult) CollisionPoints.Validate(Vector2, out CollisionPoint, out CollisionPoint) CollisionPoints.Validate(Vector2, out CollisionPointValidationResult) CollisionPoints.FlipAllNormals() CollisionPoints.FlipNormalsTowardsPoint(Vector2) CollisionPoints.FlipNormalsTowardsDirection(Vector2) CollisionPoints.GetHashCode() CollisionPoints.Equals(CollisionPoints) CollisionPoints.Filter(CollisionPointsFilterType, Vector2) CollisionPoints.Filter(CollisionPointsFilterType, Vector2, Vector2) CollisionPoints.GetCombinedCollisionPoint() CollisionPoints.GetClosestCollisionPoint(Vector2) CollisionPoints.GetFurthestCollisionPoint(Vector2) CollisionPoints.GetClosestCollisionPoint(Vector2, out float) CollisionPoints.GetFurthestCollisionPoint(Vector2, out float) CollisionPoints.GetCollisionPointFacingTowardsPoint(Vector2) CollisionPoints.GetCollisionPointFacingTowardsDir(Vector2) CollisionPoints.Copy() CollisionPoints.SortClosestFirst(Vector2) CollisionPoints.SortFurthestFirst(Vector2) CollisionPoints.SortFirstLeft() CollisionPoints.SortFirstRight() CollisionPoints.SortFirstTop() CollisionPoints.SortFirstBottom() CollisionPoints.GetUniquePoints() CollisionPoints.GetUniqueCollisionPoints() ShapeList<CollisionPoint>.AddRange(params CollisionPoint[]) ShapeList<CollisionPoint>.IsIndexValid(int) ShapeList<CollisionPoint>.GetRandomItem() ShapeList<CollisionPoint>.GetRandomItems(int) ShapeList<CollisionPoint>.GetItem(int) List<CollisionPoint>.Add(CollisionPoint) List<CollisionPoint>.AddRange(IEnumerable<CollisionPoint>) List<CollisionPoint>.AsReadOnly() List<CollisionPoint>.BinarySearch(int, int, CollisionPoint, IComparer<CollisionPoint>) List<CollisionPoint>.BinarySearch(CollisionPoint) List<CollisionPoint>.BinarySearch(CollisionPoint, IComparer<CollisionPoint>) List<CollisionPoint>.Clear() List<CollisionPoint>.Contains(CollisionPoint) List<CollisionPoint>.ConvertAll<TOutput>(Converter<CollisionPoint, TOutput>) List<CollisionPoint>.CopyTo(int, CollisionPoint[], int, int) List<CollisionPoint>.CopyTo(CollisionPoint[]) List<CollisionPoint>.CopyTo(CollisionPoint[], int) List<CollisionPoint>.EnsureCapacity(int) List<CollisionPoint>.Exists(Predicate<CollisionPoint>) List<CollisionPoint>.Find(Predicate<CollisionPoint>) List<CollisionPoint>.FindAll(Predicate<CollisionPoint>) List<CollisionPoint>.FindIndex(int, int, Predicate<CollisionPoint>) List<CollisionPoint>.FindIndex(int, Predicate<CollisionPoint>) List<CollisionPoint>.FindIndex(Predicate<CollisionPoint>) List<CollisionPoint>.FindLast(Predicate<CollisionPoint>) List<CollisionPoint>.FindLastIndex(int, int, Predicate<CollisionPoint>) List<CollisionPoint>.FindLastIndex(int, Predicate<CollisionPoint>) List<CollisionPoint>.FindLastIndex(Predicate<CollisionPoint>) List<CollisionPoint>.ForEach(Action<CollisionPoint>) List<CollisionPoint>.GetEnumerator() List<CollisionPoint>.GetRange(int, int) List<CollisionPoint>.IndexOf(CollisionPoint) List<CollisionPoint>.IndexOf(CollisionPoint, int) List<CollisionPoint>.IndexOf(CollisionPoint, int, int) List<CollisionPoint>.Insert(int, CollisionPoint) List<CollisionPoint>.InsertRange(int, IEnumerable<CollisionPoint>) List<CollisionPoint>.LastIndexOf(CollisionPoint) List<CollisionPoint>.LastIndexOf(CollisionPoint, int) List<CollisionPoint>.LastIndexOf(CollisionPoint, int, int) List<CollisionPoint>.Remove(CollisionPoint) List<CollisionPoint>.RemoveAll(Predicate<CollisionPoint>) List<CollisionPoint>.RemoveAt(int) List<CollisionPoint>.RemoveRange(int, int) List<CollisionPoint>.Reverse() List<CollisionPoint>.Reverse(int, int) List<CollisionPoint>.Slice(int, int) List<CollisionPoint>.Sort() List<CollisionPoint>.Sort(IComparer<CollisionPoint>) List<CollisionPoint>.Sort(Comparison<CollisionPoint>) List<CollisionPoint>.Sort(int, int, IComparer<CollisionPoint>) List<CollisionPoint>.ToArray() List<CollisionPoint>.TrimExcess() List<CollisionPoint>.TrueForAll(Predicate<CollisionPoint>) List<CollisionPoint>.Capacity List<CollisionPoint>.Count List<CollisionPoint>.this[int] object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ShapeCustomDrawing.Draw(CollisionPoints, float, ColorRgba, ColorRgba) Constructors IntersectSpaceEntry(Collider, List<CollisionPoint>) public IntersectSpaceEntry(Collider otherCollider, List<CollisionPoint> points) Parameters otherCollider Collider points List<CollisionPoint> IntersectSpaceEntry(Collider, int) public IntersectSpaceEntry(Collider otherCollider, int capacity) Parameters otherCollider Collider capacity int Fields OtherCollider public readonly Collider OtherCollider Field Value Collider OtherVel public readonly Vector2 OtherVel Field Value Vector2 Methods GetCollisionPointFacingTowardsDir() public CollisionPoint GetCollisionPointFacingTowardsDir() Returns CollisionPoint GetCollisionPointFacingTowardsPoint() public CollisionPoint GetCollisionPointFacingTowardsPoint() Returns CollisionPoint ValidateByOther(out CollisionPoint, out CollisionPoint) Removes: invalid CollisionPoints CollisionPoints with normals facing in the same direction as the reference direction CollisionPoints with normals facing in the opposite direction as the reference point (from CollisionPoint towards the reference point) Uses Collider.Transform.Position as reference point and OtherVel as reference direction public bool ValidateByOther(out CollisionPoint combined, out CollisionPoint closest) Parameters combined CollisionPoint An averaged CollisionPoint of all remaining CollisionPoints. closest CollisionPoint The CollisionPoint that is closest to the referencePoint. Returns bool Returns true if there are valid points remaining ValidateByOther(out CollisionPointValidationResult) Removes: invalid CollisionPoints CollisionPoints with normals facing in the same direction as the reference direction CollisionPoints with normals facing in the opposite direction as the reference point (from CollisionPoint towards the reference point) Uses Collider.Transform.Position as reference point and OtherVel as reference direction public bool ValidateByOther(out CollisionPointValidationResult validationResult) Parameters validationResult CollisionPointValidationResult The result of the combined CollisionPoint, and the closest/furthest collision point from the reference point, and the CollisionPoint with normal facing towards the referencePoint. Returns bool Returns true if there are valid points remaining"
  },
  "api/ShapeEngine.Core.CollisionSystem.IntersectSpaceRegister.html": {
    "href": "api/ShapeEngine.Core.CollisionSystem.IntersectSpaceRegister.html",
    "title": "Class IntersectSpaceRegister | ShapeEngine",
    "summary": "Class IntersectSpaceRegister Namespace ShapeEngine.Core.CollisionSystem Assembly ShapeEngine.dll public class IntersectSpaceRegister : List<IntersectSpaceEntry>, IList<IntersectSpaceEntry>, ICollection<IntersectSpaceEntry>, IReadOnlyList<IntersectSpaceEntry>, IReadOnlyCollection<IntersectSpaceEntry>, IEnumerable<IntersectSpaceEntry>, IList, ICollection, IEnumerable Inheritance object List<IntersectSpaceEntry> IntersectSpaceRegister Implements IList<IntersectSpaceEntry> ICollection<IntersectSpaceEntry> IReadOnlyList<IntersectSpaceEntry> IReadOnlyCollection<IntersectSpaceEntry> IEnumerable<IntersectSpaceEntry> IList ICollection IEnumerable Inherited Members List<IntersectSpaceEntry>.Add(IntersectSpaceEntry) List<IntersectSpaceEntry>.AddRange(IEnumerable<IntersectSpaceEntry>) List<IntersectSpaceEntry>.AsReadOnly() List<IntersectSpaceEntry>.BinarySearch(int, int, IntersectSpaceEntry, IComparer<IntersectSpaceEntry>) List<IntersectSpaceEntry>.BinarySearch(IntersectSpaceEntry) List<IntersectSpaceEntry>.BinarySearch(IntersectSpaceEntry, IComparer<IntersectSpaceEntry>) List<IntersectSpaceEntry>.Clear() List<IntersectSpaceEntry>.Contains(IntersectSpaceEntry) List<IntersectSpaceEntry>.ConvertAll<TOutput>(Converter<IntersectSpaceEntry, TOutput>) List<IntersectSpaceEntry>.CopyTo(int, IntersectSpaceEntry[], int, int) List<IntersectSpaceEntry>.CopyTo(IntersectSpaceEntry[]) List<IntersectSpaceEntry>.CopyTo(IntersectSpaceEntry[], int) List<IntersectSpaceEntry>.EnsureCapacity(int) List<IntersectSpaceEntry>.Exists(Predicate<IntersectSpaceEntry>) List<IntersectSpaceEntry>.Find(Predicate<IntersectSpaceEntry>) List<IntersectSpaceEntry>.FindAll(Predicate<IntersectSpaceEntry>) List<IntersectSpaceEntry>.FindIndex(int, int, Predicate<IntersectSpaceEntry>) List<IntersectSpaceEntry>.FindIndex(int, Predicate<IntersectSpaceEntry>) List<IntersectSpaceEntry>.FindIndex(Predicate<IntersectSpaceEntry>) List<IntersectSpaceEntry>.FindLast(Predicate<IntersectSpaceEntry>) List<IntersectSpaceEntry>.FindLastIndex(int, int, Predicate<IntersectSpaceEntry>) List<IntersectSpaceEntry>.FindLastIndex(int, Predicate<IntersectSpaceEntry>) List<IntersectSpaceEntry>.FindLastIndex(Predicate<IntersectSpaceEntry>) List<IntersectSpaceEntry>.ForEach(Action<IntersectSpaceEntry>) List<IntersectSpaceEntry>.GetEnumerator() List<IntersectSpaceEntry>.GetRange(int, int) List<IntersectSpaceEntry>.IndexOf(IntersectSpaceEntry) List<IntersectSpaceEntry>.IndexOf(IntersectSpaceEntry, int) List<IntersectSpaceEntry>.IndexOf(IntersectSpaceEntry, int, int) List<IntersectSpaceEntry>.Insert(int, IntersectSpaceEntry) List<IntersectSpaceEntry>.InsertRange(int, IEnumerable<IntersectSpaceEntry>) List<IntersectSpaceEntry>.LastIndexOf(IntersectSpaceEntry) List<IntersectSpaceEntry>.LastIndexOf(IntersectSpaceEntry, int) List<IntersectSpaceEntry>.LastIndexOf(IntersectSpaceEntry, int, int) List<IntersectSpaceEntry>.Remove(IntersectSpaceEntry) List<IntersectSpaceEntry>.RemoveAll(Predicate<IntersectSpaceEntry>) List<IntersectSpaceEntry>.RemoveAt(int) List<IntersectSpaceEntry>.RemoveRange(int, int) List<IntersectSpaceEntry>.Reverse() List<IntersectSpaceEntry>.Reverse(int, int) List<IntersectSpaceEntry>.Slice(int, int) List<IntersectSpaceEntry>.Sort() List<IntersectSpaceEntry>.Sort(IComparer<IntersectSpaceEntry>) List<IntersectSpaceEntry>.Sort(Comparison<IntersectSpaceEntry>) List<IntersectSpaceEntry>.Sort(int, int, IComparer<IntersectSpaceEntry>) List<IntersectSpaceEntry>.ToArray() List<IntersectSpaceEntry>.TrimExcess() List<IntersectSpaceEntry>.TrueForAll(Predicate<IntersectSpaceEntry>) List<IntersectSpaceEntry>.Capacity List<IntersectSpaceEntry>.Count List<IntersectSpaceEntry>.this[int] object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IntersectSpaceRegister(CollisionObject, int) public IntersectSpaceRegister(CollisionObject colOtherCollisionObject, int capacity) Parameters colOtherCollisionObject CollisionObject capacity int Fields OtherCollisionObject public readonly CollisionObject OtherCollisionObject Field Value CollisionObject Properties First public IntersectSpaceEntry? First { get; } Property Value IntersectSpaceEntry Last public IntersectSpaceEntry? Last { get; } Property Value IntersectSpaceEntry Methods AddEntry(IntersectSpaceEntry) public bool AddEntry(IntersectSpaceEntry entry) Parameters entry IntersectSpaceEntry Returns bool GetAverageCollisionPoint() public CollisionPoint GetAverageCollisionPoint() Returns CollisionPoint GetClosestCollisionPoint(Vector2, out float) public CollisionPoint GetClosestCollisionPoint(Vector2 referencePoint, out float closestDistanceSquared) Parameters referencePoint Vector2 closestDistanceSquared float Returns CollisionPoint GetClosestEntry(Vector2, out float) public IntersectSpaceEntry? GetClosestEntry(Vector2 referencePoint, out float closestDistanceSquared) Parameters referencePoint Vector2 closestDistanceSquared float Returns IntersectSpaceEntry GetClosestEntryCollider(Vector2, out float) public IntersectSpaceEntry? GetClosestEntryCollider(Vector2 referencePoint, out float closestDistanceSquared) Parameters referencePoint Vector2 closestDistanceSquared float Returns IntersectSpaceEntry GetCollisionPointFacingTowardsDir() public CollisionPoint GetCollisionPointFacingTowardsDir() Returns CollisionPoint GetCollisionPointFacingTowardsDir(Vector2) public CollisionPoint GetCollisionPointFacingTowardsDir(Vector2 referenceDirection) Parameters referenceDirection Vector2 Returns CollisionPoint GetCollisionPointFacingTowardsPoint() public CollisionPoint GetCollisionPointFacingTowardsPoint() Returns CollisionPoint GetCollisionPointFacingTowardsPoint(Vector2) public CollisionPoint GetCollisionPointFacingTowardsPoint(Vector2 referencePoint) Parameters referencePoint Vector2 Returns CollisionPoint GetFurthestCollisionPoint(Vector2, out float) public CollisionPoint GetFurthestCollisionPoint(Vector2 referencePoint, out float furthestDistanceSquared) Parameters referencePoint Vector2 furthestDistanceSquared float Returns CollisionPoint GetFurthestEntry(Vector2, out float) public IntersectSpaceEntry? GetFurthestEntry(Vector2 referencePoint, out float furthestDistanceSquared) Parameters referencePoint Vector2 furthestDistanceSquared float Returns IntersectSpaceEntry GetFurthestEntryCollider(Vector2, out float) public IntersectSpaceEntry? GetFurthestEntryCollider(Vector2 referencePoint, out float furthestDistanceSquared) Parameters referencePoint Vector2 furthestDistanceSquared float Returns IntersectSpaceEntry SortClosestFirst(Vector2) public bool SortClosestFirst(Vector2 referencePoint) Parameters referencePoint Vector2 Returns bool SortFurthestFirst(Vector2) public bool SortFurthestFirst(Vector2 referencePoint) Parameters referencePoint Vector2 Returns bool Validate(Vector2, out CollisionPoint) Removes: invalid CollisionPoints CollisionPoints with normals facing in the same direction as the reference direction CollisionPoints with normals facing in the opposite direction as the reference point (from CollisionPoint towards the reference point) Uses Object.Velocity as reference direction. Uses Object.Transform.Position as reference point. public bool Validate(Vector2 referenceDirection, out CollisionPoint combined) Parameters referenceDirection Vector2 The direction to check CollisionPoint Normals against. combined CollisionPoint An averaged CollisionPoint of all remaining CollisionPoints of all entries. Returns bool Returns true if there are valid points remaining Validate(Vector2, out CollisionPoint, out CollisionPoint) Removes: invalid CollisionPoints CollisionPoints with normals facing in the same direction as the reference direction CollisionPoints with normals facing in the opposite direction as the reference point (from CollisionPoint towards the reference point) Uses Object.Velocity as reference direction. Uses Object.Transform.Position as reference point. public bool Validate(Vector2 referencePoint, out CollisionPoint combined, out CollisionPoint closest) Parameters referencePoint Vector2 The direction from the reference point towards to CollisionPoint to check CollisionPoint Normals against. combined CollisionPoint An averaged CollisionPoint of all remaining CollisionPoints of all entries. closest CollisionPoint The CollisionPoint that is closest to the referencePoint. Returns bool Returns true if there are valid points remaining Validate(Vector2, out CollisionPointValidationResult) Removes: invalid CollisionPoints CollisionPoints with normals facing in the same direction as the reference direction CollisionPoints with normals facing in the opposite direction as the reference point (from CollisionPoint towards the reference point) Uses Object.Velocity as reference direction. Uses Object.Transform.Position as reference point. public bool Validate(Vector2 referencePoint, out CollisionPointValidationResult validationResult) Parameters referencePoint Vector2 The direction from the reference point towards to CollisionPoint to check CollisionPoint Normals against. validationResult CollisionPointValidationResult The result of the combined CollisionPoint, and the closest/furthest collision point from the reference point, and the CollisionPoint with normal facing towards the referencePoint. Returns bool Returns true if there are valid points remaining Validate(Vector2, Vector2, out CollisionPoint) Removes: invalid CollisionPoints CollisionPoints with normals facing in the same direction as the reference direction CollisionPoints with normals facing in the opposite direction as the reference point (from CollisionPoint towards the reference point) Uses Object.Velocity as reference direction. Uses Object.Transform.Position as reference point. public bool Validate(Vector2 referenceDirection, Vector2 referencePoint, out CollisionPoint combined) Parameters referenceDirection Vector2 The direction to check CollisionPoint Normals against. referencePoint Vector2 The direction from the reference point towards to CollisionPoint to check CollisionPoint Normals against. combined CollisionPoint An averaged CollisionPoint of all remaining CollisionPoints of all entries. Returns bool Returns true if there are valid points remaining Validate(Vector2, Vector2, out CollisionPoint, out CollisionPoint) Removes: invalid CollisionPoints CollisionPoints with normals facing in the same direction as the reference direction CollisionPoints with normals facing in the opposite direction as the reference point (from CollisionPoint towards the reference point) Uses Object.Velocity as reference direction. Uses Object.Transform.Position as reference point. public bool Validate(Vector2 referenceDirection, Vector2 referencePoint, out CollisionPoint combined, out CollisionPoint closest) Parameters referenceDirection Vector2 The direction to check CollisionPoint Normals against. referencePoint Vector2 The direction from the reference point towards to CollisionPoint to check CollisionPoint Normals against. combined CollisionPoint An averaged CollisionPoint of all remaining CollisionPoints of all entries. closest CollisionPoint The CollisionPoint that is closest to the referencePoint. Returns bool Returns true if there are valid points remaining Validate(Vector2, Vector2, out CollisionPointValidationResult) Removes: invalid CollisionPoints CollisionPoints with normals facing in the same direction as the reference direction CollisionPoints with normals facing in the opposite direction as the reference point (from CollisionPoint towards the reference point) Uses Object.Velocity as reference direction. Uses Object.Transform.Position as reference point. public bool Validate(Vector2 referenceDirection, Vector2 referencePoint, out CollisionPointValidationResult validationResult) Parameters referenceDirection Vector2 The direction to check CollisionPoint Normals against. referencePoint Vector2 The direction from the reference point towards to CollisionPoint to check CollisionPoint Normals against. validationResult CollisionPointValidationResult The result of the combined CollisionPoint, and the closest/furthest collision point from the reference point, and the CollisionPoint with normal facing towards the referencePoint. Returns bool Returns true if there are valid points remaining ValidateByOther(out CollisionPoint, out CollisionPoint) Removes: invalid CollisionPoints CollisionPoints with normals facing in the same direction as the reference direction CollisionPoints with normals facing in the opposite direction as the reference point (from CollisionPoint towards the reference point) Uses Object.Velocity as reference direction. Uses Object.Transform.Position as reference point. public bool ValidateByOther(out CollisionPoint combined, out CollisionPoint closest) Parameters combined CollisionPoint An averaged CollisionPoint of all remaining CollisionPoints of all entries. closest CollisionPoint The CollisionPoint that is closest to the referencePoint. Returns bool Returns true if there are valid points remaining ValidateByOther(out CollisionPointValidationResult) Removes: invalid CollisionPoints CollisionPoints with normals facing in the same direction as the reference direction CollisionPoints with normals facing in the opposite direction as the reference point (from CollisionPoint towards the reference point) Uses Object.Velocity as reference direction. Uses Object.Transform.Position as reference point. public bool ValidateByOther(out CollisionPointValidationResult validationResult) Parameters validationResult CollisionPointValidationResult The result of the combined CollisionPoint, and the closest/furthest collision point from the reference point, and the CollisionPoint with normal facing towards the referencePoint. Returns bool Returns true if there are valid points remaining"
  },
  "api/ShapeEngine.Core.CollisionSystem.IntersectSpaceResult.html": {
    "href": "api/ShapeEngine.Core.CollisionSystem.IntersectSpaceResult.html",
    "title": "Class IntersectSpaceResult | ShapeEngine",
    "summary": "Class IntersectSpaceResult Namespace ShapeEngine.Core.CollisionSystem Assembly ShapeEngine.dll public class IntersectSpaceResult : List<IntersectSpaceRegister>, IList<IntersectSpaceRegister>, ICollection<IntersectSpaceRegister>, IReadOnlyList<IntersectSpaceRegister>, IReadOnlyCollection<IntersectSpaceRegister>, IEnumerable<IntersectSpaceRegister>, IList, ICollection, IEnumerable Inheritance object List<IntersectSpaceRegister> IntersectSpaceResult Implements IList<IntersectSpaceRegister> ICollection<IntersectSpaceRegister> IReadOnlyList<IntersectSpaceRegister> IReadOnlyCollection<IntersectSpaceRegister> IEnumerable<IntersectSpaceRegister> IList ICollection IEnumerable Inherited Members List<IntersectSpaceRegister>.Add(IntersectSpaceRegister) List<IntersectSpaceRegister>.AddRange(IEnumerable<IntersectSpaceRegister>) List<IntersectSpaceRegister>.AsReadOnly() List<IntersectSpaceRegister>.BinarySearch(int, int, IntersectSpaceRegister, IComparer<IntersectSpaceRegister>) List<IntersectSpaceRegister>.BinarySearch(IntersectSpaceRegister) List<IntersectSpaceRegister>.BinarySearch(IntersectSpaceRegister, IComparer<IntersectSpaceRegister>) List<IntersectSpaceRegister>.Clear() List<IntersectSpaceRegister>.Contains(IntersectSpaceRegister) List<IntersectSpaceRegister>.ConvertAll<TOutput>(Converter<IntersectSpaceRegister, TOutput>) List<IntersectSpaceRegister>.CopyTo(int, IntersectSpaceRegister[], int, int) List<IntersectSpaceRegister>.CopyTo(IntersectSpaceRegister[]) List<IntersectSpaceRegister>.CopyTo(IntersectSpaceRegister[], int) List<IntersectSpaceRegister>.EnsureCapacity(int) List<IntersectSpaceRegister>.Exists(Predicate<IntersectSpaceRegister>) List<IntersectSpaceRegister>.Find(Predicate<IntersectSpaceRegister>) List<IntersectSpaceRegister>.FindAll(Predicate<IntersectSpaceRegister>) List<IntersectSpaceRegister>.FindIndex(int, int, Predicate<IntersectSpaceRegister>) List<IntersectSpaceRegister>.FindIndex(int, Predicate<IntersectSpaceRegister>) List<IntersectSpaceRegister>.FindIndex(Predicate<IntersectSpaceRegister>) List<IntersectSpaceRegister>.FindLast(Predicate<IntersectSpaceRegister>) List<IntersectSpaceRegister>.FindLastIndex(int, int, Predicate<IntersectSpaceRegister>) List<IntersectSpaceRegister>.FindLastIndex(int, Predicate<IntersectSpaceRegister>) List<IntersectSpaceRegister>.FindLastIndex(Predicate<IntersectSpaceRegister>) List<IntersectSpaceRegister>.ForEach(Action<IntersectSpaceRegister>) List<IntersectSpaceRegister>.GetEnumerator() List<IntersectSpaceRegister>.GetRange(int, int) List<IntersectSpaceRegister>.IndexOf(IntersectSpaceRegister) List<IntersectSpaceRegister>.IndexOf(IntersectSpaceRegister, int) List<IntersectSpaceRegister>.IndexOf(IntersectSpaceRegister, int, int) List<IntersectSpaceRegister>.Insert(int, IntersectSpaceRegister) List<IntersectSpaceRegister>.InsertRange(int, IEnumerable<IntersectSpaceRegister>) List<IntersectSpaceRegister>.LastIndexOf(IntersectSpaceRegister) List<IntersectSpaceRegister>.LastIndexOf(IntersectSpaceRegister, int) List<IntersectSpaceRegister>.LastIndexOf(IntersectSpaceRegister, int, int) List<IntersectSpaceRegister>.Remove(IntersectSpaceRegister) List<IntersectSpaceRegister>.RemoveAll(Predicate<IntersectSpaceRegister>) List<IntersectSpaceRegister>.RemoveAt(int) List<IntersectSpaceRegister>.RemoveRange(int, int) List<IntersectSpaceRegister>.Reverse() List<IntersectSpaceRegister>.Reverse(int, int) List<IntersectSpaceRegister>.Slice(int, int) List<IntersectSpaceRegister>.Sort() List<IntersectSpaceRegister>.Sort(IComparer<IntersectSpaceRegister>) List<IntersectSpaceRegister>.Sort(Comparison<IntersectSpaceRegister>) List<IntersectSpaceRegister>.Sort(int, int, IComparer<IntersectSpaceRegister>) List<IntersectSpaceRegister>.ToArray() List<IntersectSpaceRegister>.TrimExcess() List<IntersectSpaceRegister>.TrueForAll(Predicate<IntersectSpaceRegister>) List<IntersectSpaceRegister>.Capacity List<IntersectSpaceRegister>.Count List<IntersectSpaceRegister>.this[int] object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IntersectSpaceResult(Vector2, int) public IntersectSpaceResult(Vector2 origin, int capacity) Parameters origin Vector2 capacity int Fields Origin public readonly Vector2 Origin Field Value Vector2 Properties First public IntersectSpaceRegister? First { get; } Property Value IntersectSpaceRegister Last public IntersectSpaceRegister? Last { get; } Property Value IntersectSpaceRegister Methods AddRegister(IntersectSpaceRegister) public bool AddRegister(IntersectSpaceRegister reg) Parameters reg IntersectSpaceRegister Returns bool GetClosestCollisionPoint(Vector2, out float) public CollisionPoint GetClosestCollisionPoint(Vector2 position, out float closestDistanceSquared) Parameters position Vector2 closestDistanceSquared float Returns CollisionPoint GetClosestCollisionPoint(out float) public CollisionPoint GetClosestCollisionPoint(out float closestDistanceSquared) Parameters closestDistanceSquared float Returns CollisionPoint GetClosestEntry(Vector2, out float) public IntersectSpaceEntry? GetClosestEntry(Vector2 referencePoint, out float closestDistanceSquared) Parameters referencePoint Vector2 closestDistanceSquared float Returns IntersectSpaceEntry GetClosestEntry(out float) public IntersectSpaceEntry? GetClosestEntry(out float closestDistanceSquared) Parameters closestDistanceSquared float Returns IntersectSpaceEntry GetClosestEntryCollider(Vector2, out float) public IntersectSpaceEntry? GetClosestEntryCollider(Vector2 referencePoint, out float closestDistanceSquared) Parameters referencePoint Vector2 closestDistanceSquared float Returns IntersectSpaceEntry GetClosestEntryCollider(out float) public IntersectSpaceEntry? GetClosestEntryCollider(out float closestDistanceSquared) Parameters closestDistanceSquared float Returns IntersectSpaceEntry GetClosestRegister(Vector2, out float) public IntersectSpaceRegister? GetClosestRegister(Vector2 referencePoint, out float closestDistanceSquared) Parameters referencePoint Vector2 closestDistanceSquared float Returns IntersectSpaceRegister GetClosestRegister(out float) public IntersectSpaceRegister? GetClosestRegister(out float closestDistanceSquared) Parameters closestDistanceSquared float Returns IntersectSpaceRegister GetCollisionPointFacingTowardsDir(Vector2) public CollisionPoint GetCollisionPointFacingTowardsDir(Vector2 referenceDirection) Parameters referenceDirection Vector2 Returns CollisionPoint GetCollisionPointFacingTowardsOrigin() public CollisionPoint GetCollisionPointFacingTowardsOrigin() Returns CollisionPoint GetCollisionPointFacingTowardsPoint(Vector2) public CollisionPoint GetCollisionPointFacingTowardsPoint(Vector2 referencePoint) Parameters referencePoint Vector2 Returns CollisionPoint GetFurthestCollisionPoint(Vector2, out float) public CollisionPoint GetFurthestCollisionPoint(Vector2 position, out float furthestDistanceSquared) Parameters position Vector2 furthestDistanceSquared float Returns CollisionPoint GetFurthestCollisionPoint(out float) public CollisionPoint GetFurthestCollisionPoint(out float furthestDistanceSquared) Parameters furthestDistanceSquared float Returns CollisionPoint GetFurthestEntry(Vector2, out float) public IntersectSpaceEntry? GetFurthestEntry(Vector2 referencePoint, out float furthestDistanceSquared) Parameters referencePoint Vector2 furthestDistanceSquared float Returns IntersectSpaceEntry GetFurthestEntry(out float) public IntersectSpaceEntry? GetFurthestEntry(out float furthestDistanceSquared) Parameters furthestDistanceSquared float Returns IntersectSpaceEntry GetFurthestEntryCollider(Vector2, out float) public IntersectSpaceEntry? GetFurthestEntryCollider(Vector2 referencePoint, out float furthestDistanceSquared) Parameters referencePoint Vector2 furthestDistanceSquared float Returns IntersectSpaceEntry GetFurthestEntryCollider(out float) public IntersectSpaceEntry? GetFurthestEntryCollider(out float furthestDistanceSquared) Parameters furthestDistanceSquared float Returns IntersectSpaceEntry GetFurthestRegister(Vector2, out float) public IntersectSpaceRegister? GetFurthestRegister(Vector2 referencePoint, out float furthestDistanceSquared) Parameters referencePoint Vector2 furthestDistanceSquared float Returns IntersectSpaceRegister GetFurthestRegister(out float) public IntersectSpaceRegister? GetFurthestRegister(out float furthestDistanceSquared) Parameters furthestDistanceSquared float Returns IntersectSpaceRegister SortClosestFirst() public bool SortClosestFirst() Returns bool SortClosestFirst(Vector2) public bool SortClosestFirst(Vector2 referencePoint) Parameters referencePoint Vector2 Returns bool SortFurthestFirst() public bool SortFurthestFirst() Returns bool SortFurthestFirst(Vector2) public bool SortFurthestFirst(Vector2 referencePoint) Parameters referencePoint Vector2 Returns bool Validate(Vector2, out CollisionPoint) Removes: invalid CollisionPoints CollisionPoints with normals facing in the same direction as the reference direction CollisionPoints with normals facing in the opposite direction as the reference point (from CollisionPoint towards the reference point) Uses Object.Velocity as reference direction. Uses Object.Transform.Position as reference point. public bool Validate(Vector2 referenceDirection, out CollisionPoint combined) Parameters referenceDirection Vector2 The direction to check CollisionPoint Normals against. combined CollisionPoint An averaged CollisionPoint of all remaining CollisionPoints of all entries. Returns bool Returns true if there are valid points remaining Validate(Vector2, out CollisionPoint, out CollisionPoint) Removes: invalid CollisionPoints CollisionPoints with normals facing in the same direction as the reference direction CollisionPoints with normals facing in the opposite direction as the reference point (from CollisionPoint towards the reference point) Uses Object.Velocity as reference direction. Uses Object.Transform.Position as reference point. public bool Validate(Vector2 referencePoint, out CollisionPoint combined, out CollisionPoint closest) Parameters referencePoint Vector2 The direction from the reference point towards to CollisionPoint to check CollisionPoint Normals against. combined CollisionPoint An averaged CollisionPoint of all remaining CollisionPoints of all entries. closest CollisionPoint The CollisionPoint that is closest to the referencePoint. Returns bool Returns true if there are valid points remaining Validate(Vector2, out CollisionPointValidationResult) Removes: invalid CollisionPoints CollisionPoints with normals facing in the same direction as the reference direction CollisionPoints with normals facing in the opposite direction as the reference point (from CollisionPoint towards the reference point) Uses Object.Velocity as reference direction. Uses Object.Transform.Position as reference point. public bool Validate(Vector2 referencePoint, out CollisionPointValidationResult validationResult) Parameters referencePoint Vector2 The direction from the reference point towards to CollisionPoint to check CollisionPoint Normals against. validationResult CollisionPointValidationResult The result of the combined CollisionPoint, and the closest/furthest collision point from the reference point, and the CollisionPoint with normal facing towards the referencePoint. Returns bool Returns true if there are valid points remaining Validate(Vector2, Vector2, out CollisionPoint) Removes: invalid CollisionPoints CollisionPoints with normals facing in the same direction as the reference direction CollisionPoints with normals facing in the opposite direction as the reference point (from CollisionPoint towards the reference point) Uses Object.Velocity as reference direction. Uses Object.Transform.Position as reference point. public bool Validate(Vector2 referenceDirection, Vector2 referencePoint, out CollisionPoint combined) Parameters referenceDirection Vector2 The direction to check CollisionPoint Normals against. referencePoint Vector2 The direction from the reference point towards to CollisionPoint to check CollisionPoint Normals against. combined CollisionPoint An averaged CollisionPoint of all remaining CollisionPoints of all entries. Returns bool Returns true if there are valid points remaining Validate(Vector2, Vector2, out CollisionPoint, out CollisionPoint) Removes: invalid CollisionPoints CollisionPoints with normals facing in the same direction as the reference direction CollisionPoints with normals facing in the opposite direction as the reference point (from CollisionPoint towards the reference point) Uses Object.Velocity as reference direction. Uses Object.Transform.Position as reference point. public bool Validate(Vector2 referenceDirection, Vector2 referencePoint, out CollisionPoint combined, out CollisionPoint closest) Parameters referenceDirection Vector2 The direction to check CollisionPoint Normals against. referencePoint Vector2 The direction from the reference point towards to CollisionPoint to check CollisionPoint Normals against. combined CollisionPoint An averaged CollisionPoint of all remaining CollisionPoints of all entries. closest CollisionPoint The CollisionPoint that is closest to the referencePoint. Returns bool Returns true if there are valid points remaining Validate(Vector2, Vector2, out CollisionPointValidationResult) Removes: invalid CollisionPoints CollisionPoints with normals facing in the same direction as the reference direction CollisionPoints with normals facing in the opposite direction as the reference point (from CollisionPoint towards the reference point) Uses Object.Velocity as reference direction. Uses Object.Transform.Position as reference point. public bool Validate(Vector2 referenceDirection, Vector2 referencePoint, out CollisionPointValidationResult validationResult) Parameters referenceDirection Vector2 The direction to check CollisionPoint Normals against. referencePoint Vector2 The direction from the reference point towards to CollisionPoint to check CollisionPoint Normals against. validationResult CollisionPointValidationResult The result of the combined CollisionPoint, and the closest/furthest collision point from the reference point, and the CollisionPoint with normal facing towards the referencePoint. Returns bool Returns true if there are valid points remaining"
  },
  "api/ShapeEngine.Core.CollisionSystem.LineCollider.html": {
    "href": "api/ShapeEngine.Core.CollisionSystem.LineCollider.html",
    "title": "Class LineCollider | ShapeEngine",
    "summary": "Class LineCollider Namespace ShapeEngine.Core.CollisionSystem Assembly ShapeEngine.dll public class LineCollider : Collider, IShape Inheritance object Shape Collider LineCollider Implements IShape Inherited Members Collider.OnIntersected Collider.OnOverlapped Collider.OnContactEnded Collider.Parent Collider.Enabled Collider.Velocity Collider.CollisionMask Collider.CollisionLayer Collider.ComputeCollision Collider.ComputeIntersections Collider.Intersected(Collision) Collider.Overlapped(Overlap) Collider.ContactEnded(Collider) Collider.InitializeShape(Transform2D) Collider.UpdateShape(float, Transform2D) Collider.DrawShape() Collider.RecalculateShape() Collider.OnInitialized() Collider.OnUpdate(float) Collider.OnDraw() Collider.OnAddedToCollisionBody(CollisionObject) Collider.OnRemovedFromCollisionBody(CollisionObject) Collider.Project(Vector2) Collider.GetClosestPoint(IShape) Collider.GetClosestPoint(Vector2, out float) Collider.GetClosestPoint(Segment) Collider.GetClosestPoint(Line) Collider.GetClosestPoint(Ray) Collider.GetClosestPoint(Circle) Collider.GetClosestPoint(Triangle) Collider.GetClosestPoint(Quad) Collider.GetClosestPoint(Rect) Collider.GetClosestPoint(Polygon) Collider.GetClosestPoint(Polyline) Collider.ContainsPoint(Vector2) Collider.ContainsShape(IShape) Collider.ContainsShape(Segment) Collider.ContainsShape(Circle) Collider.ContainsShape(Triangle) Collider.ContainsShape(Quad) Collider.ContainsShape(Rect) Collider.ContainsShape(Polygon) Collider.ContainsShape(Polyline) Collider.Overlap(CollisionObject) Collider.Overlap(Collider) Collider.Overlap(IShape) Collider.Overlap(Segment) Collider.Overlap(Line) Collider.Overlap(Ray) Collider.Overlap(Triangle) Collider.Overlap(Circle) Collider.Overlap(Rect) Collider.Overlap(Quad) Collider.Overlap(Polygon) Collider.Overlap(Polyline) Collider.Intersect(CollisionObject) Collider.Intersect(Collider) Collider.Intersect(IShape) Collider.Intersect(Ray) Collider.Intersect(Line) Collider.Intersect(Segment) Collider.Intersect(Triangle) Collider.Intersect(Circle) Collider.Intersect(Rect) Collider.Intersect(Quad) Collider.Intersect(Polygon) Collider.Intersect(Polyline) Collider.Intersect(CollisionObject, ref CollisionPoints, bool) Collider.Intersect(Collider, ref CollisionPoints, bool) Collider.Intersect(IShape, ref CollisionPoints, bool) Collider.Intersect(Ray, ref CollisionPoints, bool) Collider.Intersect(Line, ref CollisionPoints, bool) Collider.Intersect(Segment, ref CollisionPoints, bool) Collider.Intersect(Triangle, ref CollisionPoints, bool) Collider.Intersect(Circle, ref CollisionPoints, bool) Collider.Intersect(Rect, ref CollisionPoints, bool) Collider.Intersect(Quad, ref CollisionPoints, bool) Collider.Intersect(Polygon, ref CollisionPoints, bool) Collider.Intersect(Polyline, ref CollisionPoints, bool) Shape.Moves Shape.Rotates Shape.Scales Shape.Offset Shape.CurTransform Shape.PrevTransform Shape.OnShapeTransformChanged(bool) Shape.UpdateTransform(Transform2D) Shape.GetRayShape() Shape.GetSegmentShape() Shape.GetCircleShape() Shape.GetTriangleShape() Shape.GetQuadShape() Shape.GetRectShape() Shape.GetPolygonShape() Shape.GetPolylineShape() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LineCollider(Transform2D) public LineCollider(Transform2D offset) Parameters offset Transform2D Properties Direction public Vector2 Direction { get; } Property Value Vector2 Point public Vector2 Point { get; } Property Value Vector2 Methods GetBoundingBox() public override Rect GetBoundingBox() Returns Rect GetLineShape() public override Line GetLineShape() Returns Line GetShapeType() public override ShapeType GetShapeType() Returns ShapeType"
  },
  "api/ShapeEngine.Core.CollisionSystem.Overlap.html": {
    "href": "api/ShapeEngine.Core.CollisionSystem.Overlap.html",
    "title": "Class Overlap | ShapeEngine",
    "summary": "Class Overlap Namespace ShapeEngine.Core.CollisionSystem Assembly ShapeEngine.dll public class Overlap Inheritance object Overlap Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Overlap(Collider, Collider) public Overlap(Collider self, Collider other) Parameters self Collider other Collider Overlap(Collider, Collider, bool) public Overlap(Collider self, Collider other, bool firstContact) Parameters self Collider other Collider firstContact bool Fields Other public readonly Collider Other Field Value Collider Self public readonly Collider Self Field Value Collider Properties FirstContact public bool FirstContact { get; } Property Value bool Methods Copy() public Overlap Copy() Returns Overlap"
  },
  "api/ShapeEngine.Core.CollisionSystem.PolyCollider.html": {
    "href": "api/ShapeEngine.Core.CollisionSystem.PolyCollider.html",
    "title": "Class PolyCollider | ShapeEngine",
    "summary": "Class PolyCollider Namespace ShapeEngine.Core.CollisionSystem Assembly ShapeEngine.dll public class PolyCollider : Collider, IShape Inheritance object Shape Collider PolyCollider Implements IShape Inherited Members Collider.OnIntersected Collider.OnOverlapped Collider.OnContactEnded Collider.Parent Collider.Enabled Collider.Velocity Collider.CollisionMask Collider.CollisionLayer Collider.ComputeCollision Collider.ComputeIntersections Collider.Intersected(Collision) Collider.Overlapped(Overlap) Collider.ContactEnded(Collider) Collider.InitializeShape(Transform2D) Collider.UpdateShape(float, Transform2D) Collider.DrawShape() Collider.OnUpdate(float) Collider.OnDraw() Collider.OnAddedToCollisionBody(CollisionObject) Collider.OnRemovedFromCollisionBody(CollisionObject) Collider.Project(Vector2) Collider.GetClosestPoint(IShape) Collider.GetClosestPoint(Vector2, out float) Collider.GetClosestPoint(Segment) Collider.GetClosestPoint(Line) Collider.GetClosestPoint(Ray) Collider.GetClosestPoint(Circle) Collider.GetClosestPoint(Triangle) Collider.GetClosestPoint(Quad) Collider.GetClosestPoint(Rect) Collider.GetClosestPoint(Polygon) Collider.GetClosestPoint(Polyline) Collider.ContainsPoint(Vector2) Collider.ContainsShape(IShape) Collider.ContainsShape(Segment) Collider.ContainsShape(Circle) Collider.ContainsShape(Triangle) Collider.ContainsShape(Quad) Collider.ContainsShape(Rect) Collider.ContainsShape(Polygon) Collider.ContainsShape(Polyline) Collider.Overlap(CollisionObject) Collider.Overlap(Collider) Collider.Overlap(IShape) Collider.Overlap(Segment) Collider.Overlap(Line) Collider.Overlap(Ray) Collider.Overlap(Triangle) Collider.Overlap(Circle) Collider.Overlap(Rect) Collider.Overlap(Quad) Collider.Overlap(Polygon) Collider.Overlap(Polyline) Collider.Intersect(CollisionObject) Collider.Intersect(Collider) Collider.Intersect(IShape) Collider.Intersect(Ray) Collider.Intersect(Line) Collider.Intersect(Segment) Collider.Intersect(Triangle) Collider.Intersect(Circle) Collider.Intersect(Rect) Collider.Intersect(Quad) Collider.Intersect(Polygon) Collider.Intersect(Polyline) Collider.Intersect(CollisionObject, ref CollisionPoints, bool) Collider.Intersect(Collider, ref CollisionPoints, bool) Collider.Intersect(IShape, ref CollisionPoints, bool) Collider.Intersect(Ray, ref CollisionPoints, bool) Collider.Intersect(Line, ref CollisionPoints, bool) Collider.Intersect(Segment, ref CollisionPoints, bool) Collider.Intersect(Triangle, ref CollisionPoints, bool) Collider.Intersect(Circle, ref CollisionPoints, bool) Collider.Intersect(Rect, ref CollisionPoints, bool) Collider.Intersect(Quad, ref CollisionPoints, bool) Collider.Intersect(Polygon, ref CollisionPoints, bool) Collider.Intersect(Polyline, ref CollisionPoints, bool) Shape.Moves Shape.Rotates Shape.Scales Shape.Offset Shape.CurTransform Shape.PrevTransform Shape.UpdateTransform(Transform2D) Shape.GetRayShape() Shape.GetLineShape() Shape.GetSegmentShape() Shape.GetCircleShape() Shape.GetTriangleShape() Shape.GetQuadShape() Shape.GetRectShape() Shape.GetPolylineShape() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PolyCollider(Transform2D, Points) public PolyCollider(Transform2D offset, Points relativePoints) Parameters offset Transform2D relativePoints Points PolyCollider(Transform2D, Polygon) public PolyCollider(Transform2D offset, Polygon relativePoints) Parameters offset Transform2D relativePoints Polygon PolyCollider(Transform2D, Segment, float, float) public PolyCollider(Transform2D offset, Segment s, float inflation, float alignement = 0.5) Parameters offset Transform2D s Segment inflation float alignement float Fields RelativeShape public Polygon RelativeShape Field Value Polygon Methods GetBoundingBox() public override Rect GetBoundingBox() Returns Rect GetPolygonShape() public override Polygon GetPolygonShape() Returns Polygon GetShapeType() public override ShapeType GetShapeType() Returns ShapeType OnInitialized() protected override void OnInitialized() OnShapeTransformChanged(bool) Called each frame after the transform was actualized from the parents protected override void OnShapeTransformChanged(bool transformChanged) Parameters transformChanged bool RecalculateShape() public override void RecalculateShape()"
  },
  "api/ShapeEngine.Core.CollisionSystem.PolyLineCollider.html": {
    "href": "api/ShapeEngine.Core.CollisionSystem.PolyLineCollider.html",
    "title": "Class PolyLineCollider | ShapeEngine",
    "summary": "Class PolyLineCollider Namespace ShapeEngine.Core.CollisionSystem Assembly ShapeEngine.dll public class PolyLineCollider : Collider, IShape Inheritance object Shape Collider PolyLineCollider Implements IShape Inherited Members Collider.OnIntersected Collider.OnOverlapped Collider.OnContactEnded Collider.Parent Collider.Enabled Collider.Velocity Collider.CollisionMask Collider.CollisionLayer Collider.ComputeCollision Collider.ComputeIntersections Collider.Intersected(Collision) Collider.Overlapped(Overlap) Collider.ContactEnded(Collider) Collider.InitializeShape(Transform2D) Collider.UpdateShape(float, Transform2D) Collider.DrawShape() Collider.OnUpdate(float) Collider.OnDraw() Collider.OnAddedToCollisionBody(CollisionObject) Collider.OnRemovedFromCollisionBody(CollisionObject) Collider.Project(Vector2) Collider.GetClosestPoint(IShape) Collider.GetClosestPoint(Vector2, out float) Collider.GetClosestPoint(Segment) Collider.GetClosestPoint(Line) Collider.GetClosestPoint(Ray) Collider.GetClosestPoint(Circle) Collider.GetClosestPoint(Triangle) Collider.GetClosestPoint(Quad) Collider.GetClosestPoint(Rect) Collider.GetClosestPoint(Polygon) Collider.GetClosestPoint(Polyline) Collider.ContainsPoint(Vector2) Collider.ContainsShape(IShape) Collider.ContainsShape(Segment) Collider.ContainsShape(Circle) Collider.ContainsShape(Triangle) Collider.ContainsShape(Quad) Collider.ContainsShape(Rect) Collider.ContainsShape(Polygon) Collider.ContainsShape(Polyline) Collider.Overlap(CollisionObject) Collider.Overlap(Collider) Collider.Overlap(IShape) Collider.Overlap(Segment) Collider.Overlap(Line) Collider.Overlap(Ray) Collider.Overlap(Triangle) Collider.Overlap(Circle) Collider.Overlap(Rect) Collider.Overlap(Quad) Collider.Overlap(Polygon) Collider.Overlap(Polyline) Collider.Intersect(CollisionObject) Collider.Intersect(Collider) Collider.Intersect(IShape) Collider.Intersect(Ray) Collider.Intersect(Line) Collider.Intersect(Segment) Collider.Intersect(Triangle) Collider.Intersect(Circle) Collider.Intersect(Rect) Collider.Intersect(Quad) Collider.Intersect(Polygon) Collider.Intersect(Polyline) Collider.Intersect(CollisionObject, ref CollisionPoints, bool) Collider.Intersect(Collider, ref CollisionPoints, bool) Collider.Intersect(IShape, ref CollisionPoints, bool) Collider.Intersect(Ray, ref CollisionPoints, bool) Collider.Intersect(Line, ref CollisionPoints, bool) Collider.Intersect(Segment, ref CollisionPoints, bool) Collider.Intersect(Triangle, ref CollisionPoints, bool) Collider.Intersect(Circle, ref CollisionPoints, bool) Collider.Intersect(Rect, ref CollisionPoints, bool) Collider.Intersect(Quad, ref CollisionPoints, bool) Collider.Intersect(Polygon, ref CollisionPoints, bool) Collider.Intersect(Polyline, ref CollisionPoints, bool) Shape.Moves Shape.Rotates Shape.Scales Shape.Offset Shape.CurTransform Shape.PrevTransform Shape.UpdateTransform(Transform2D) Shape.GetRayShape() Shape.GetLineShape() Shape.GetSegmentShape() Shape.GetCircleShape() Shape.GetTriangleShape() Shape.GetQuadShape() Shape.GetRectShape() Shape.GetPolygonShape() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PolyLineCollider(Transform2D, Points) public PolyLineCollider(Transform2D offset, Points relativePoints) Parameters offset Transform2D relativePoints Points PolyLineCollider(Transform2D, Polyline) public PolyLineCollider(Transform2D offset, Polyline relativePoints) Parameters offset Transform2D relativePoints Polyline Fields RelativeShape public Polyline RelativeShape Field Value Polyline Methods GetBoundingBox() public override Rect GetBoundingBox() Returns Rect GetPolylineShape() public override Polyline GetPolylineShape() Returns Polyline GetShapeType() public override ShapeType GetShapeType() Returns ShapeType OnInitialized() protected override void OnInitialized() OnShapeTransformChanged(bool) Called each frame after the transform was actualized from the parents protected override void OnShapeTransformChanged(bool transformChanged) Parameters transformChanged bool RecalculateShape() public override void RecalculateShape()"
  },
  "api/ShapeEngine.Core.CollisionSystem.QuadCollider.html": {
    "href": "api/ShapeEngine.Core.CollisionSystem.QuadCollider.html",
    "title": "Class QuadCollider | ShapeEngine",
    "summary": "Class QuadCollider Namespace ShapeEngine.Core.CollisionSystem Assembly ShapeEngine.dll public class QuadCollider : Collider, IShape Inheritance object Shape Collider QuadCollider Implements IShape Inherited Members Collider.OnIntersected Collider.OnOverlapped Collider.OnContactEnded Collider.Parent Collider.Enabled Collider.Velocity Collider.CollisionMask Collider.CollisionLayer Collider.ComputeCollision Collider.ComputeIntersections Collider.Intersected(Collision) Collider.Overlapped(Overlap) Collider.ContactEnded(Collider) Collider.InitializeShape(Transform2D) Collider.UpdateShape(float, Transform2D) Collider.DrawShape() Collider.RecalculateShape() Collider.OnInitialized() Collider.OnUpdate(float) Collider.OnDraw() Collider.OnAddedToCollisionBody(CollisionObject) Collider.OnRemovedFromCollisionBody(CollisionObject) Collider.Project(Vector2) Collider.GetClosestPoint(IShape) Collider.GetClosestPoint(Vector2, out float) Collider.GetClosestPoint(Segment) Collider.GetClosestPoint(Line) Collider.GetClosestPoint(Ray) Collider.GetClosestPoint(Circle) Collider.GetClosestPoint(Triangle) Collider.GetClosestPoint(Quad) Collider.GetClosestPoint(Rect) Collider.GetClosestPoint(Polygon) Collider.GetClosestPoint(Polyline) Collider.ContainsPoint(Vector2) Collider.ContainsShape(IShape) Collider.ContainsShape(Segment) Collider.ContainsShape(Circle) Collider.ContainsShape(Triangle) Collider.ContainsShape(Quad) Collider.ContainsShape(Rect) Collider.ContainsShape(Polygon) Collider.ContainsShape(Polyline) Collider.Overlap(CollisionObject) Collider.Overlap(Collider) Collider.Overlap(IShape) Collider.Overlap(Segment) Collider.Overlap(Line) Collider.Overlap(Ray) Collider.Overlap(Triangle) Collider.Overlap(Circle) Collider.Overlap(Rect) Collider.Overlap(Quad) Collider.Overlap(Polygon) Collider.Overlap(Polyline) Collider.Intersect(CollisionObject) Collider.Intersect(Collider) Collider.Intersect(IShape) Collider.Intersect(Ray) Collider.Intersect(Line) Collider.Intersect(Segment) Collider.Intersect(Triangle) Collider.Intersect(Circle) Collider.Intersect(Rect) Collider.Intersect(Quad) Collider.Intersect(Polygon) Collider.Intersect(Polyline) Collider.Intersect(CollisionObject, ref CollisionPoints, bool) Collider.Intersect(Collider, ref CollisionPoints, bool) Collider.Intersect(IShape, ref CollisionPoints, bool) Collider.Intersect(Ray, ref CollisionPoints, bool) Collider.Intersect(Line, ref CollisionPoints, bool) Collider.Intersect(Segment, ref CollisionPoints, bool) Collider.Intersect(Triangle, ref CollisionPoints, bool) Collider.Intersect(Circle, ref CollisionPoints, bool) Collider.Intersect(Rect, ref CollisionPoints, bool) Collider.Intersect(Quad, ref CollisionPoints, bool) Collider.Intersect(Polygon, ref CollisionPoints, bool) Collider.Intersect(Polyline, ref CollisionPoints, bool) Shape.Moves Shape.Rotates Shape.Scales Shape.Offset Shape.CurTransform Shape.PrevTransform Shape.OnShapeTransformChanged(bool) Shape.UpdateTransform(Transform2D) Shape.GetRayShape() Shape.GetLineShape() Shape.GetSegmentShape() Shape.GetCircleShape() Shape.GetTriangleShape() Shape.GetRectShape() Shape.GetPolygonShape() Shape.GetPolylineShape() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors QuadCollider(Transform2D) public QuadCollider(Transform2D offset) Parameters offset Transform2D QuadCollider(Transform2D, AnchorPoint) public QuadCollider(Transform2D offset, AnchorPoint alignement) Parameters offset Transform2D alignement AnchorPoint Properties Alignement public AnchorPoint Alignement { get; set; } Property Value AnchorPoint Methods GetBoundingBox() public override Rect GetBoundingBox() Returns Rect GetQuadShape() public override Quad GetQuadShape() Returns Quad GetShapeType() public override ShapeType GetShapeType() Returns ShapeType"
  },
  "api/ShapeEngine.Core.CollisionSystem.RayCollider.html": {
    "href": "api/ShapeEngine.Core.CollisionSystem.RayCollider.html",
    "title": "Class RayCollider | ShapeEngine",
    "summary": "Class RayCollider Namespace ShapeEngine.Core.CollisionSystem Assembly ShapeEngine.dll public class RayCollider : Collider, IShape Inheritance object Shape Collider RayCollider Implements IShape Inherited Members Collider.OnIntersected Collider.OnOverlapped Collider.OnContactEnded Collider.Parent Collider.Enabled Collider.Velocity Collider.CollisionMask Collider.CollisionLayer Collider.ComputeCollision Collider.ComputeIntersections Collider.Intersected(Collision) Collider.Overlapped(Overlap) Collider.ContactEnded(Collider) Collider.InitializeShape(Transform2D) Collider.UpdateShape(float, Transform2D) Collider.DrawShape() Collider.RecalculateShape() Collider.OnInitialized() Collider.OnUpdate(float) Collider.OnDraw() Collider.OnAddedToCollisionBody(CollisionObject) Collider.OnRemovedFromCollisionBody(CollisionObject) Collider.Project(Vector2) Collider.GetClosestPoint(IShape) Collider.GetClosestPoint(Vector2, out float) Collider.GetClosestPoint(Segment) Collider.GetClosestPoint(Line) Collider.GetClosestPoint(Ray) Collider.GetClosestPoint(Circle) Collider.GetClosestPoint(Triangle) Collider.GetClosestPoint(Quad) Collider.GetClosestPoint(Rect) Collider.GetClosestPoint(Polygon) Collider.GetClosestPoint(Polyline) Collider.ContainsPoint(Vector2) Collider.ContainsShape(IShape) Collider.ContainsShape(Segment) Collider.ContainsShape(Circle) Collider.ContainsShape(Triangle) Collider.ContainsShape(Quad) Collider.ContainsShape(Rect) Collider.ContainsShape(Polygon) Collider.ContainsShape(Polyline) Collider.Overlap(CollisionObject) Collider.Overlap(Collider) Collider.Overlap(IShape) Collider.Overlap(Segment) Collider.Overlap(Line) Collider.Overlap(Ray) Collider.Overlap(Triangle) Collider.Overlap(Circle) Collider.Overlap(Rect) Collider.Overlap(Quad) Collider.Overlap(Polygon) Collider.Overlap(Polyline) Collider.Intersect(CollisionObject) Collider.Intersect(Collider) Collider.Intersect(IShape) Collider.Intersect(Ray) Collider.Intersect(Line) Collider.Intersect(Segment) Collider.Intersect(Triangle) Collider.Intersect(Circle) Collider.Intersect(Rect) Collider.Intersect(Quad) Collider.Intersect(Polygon) Collider.Intersect(Polyline) Collider.Intersect(CollisionObject, ref CollisionPoints, bool) Collider.Intersect(Collider, ref CollisionPoints, bool) Collider.Intersect(IShape, ref CollisionPoints, bool) Collider.Intersect(Ray, ref CollisionPoints, bool) Collider.Intersect(Line, ref CollisionPoints, bool) Collider.Intersect(Segment, ref CollisionPoints, bool) Collider.Intersect(Triangle, ref CollisionPoints, bool) Collider.Intersect(Circle, ref CollisionPoints, bool) Collider.Intersect(Rect, ref CollisionPoints, bool) Collider.Intersect(Quad, ref CollisionPoints, bool) Collider.Intersect(Polygon, ref CollisionPoints, bool) Collider.Intersect(Polyline, ref CollisionPoints, bool) Shape.Moves Shape.Rotates Shape.Scales Shape.Offset Shape.CurTransform Shape.PrevTransform Shape.OnShapeTransformChanged(bool) Shape.UpdateTransform(Transform2D) Shape.GetLineShape() Shape.GetSegmentShape() Shape.GetCircleShape() Shape.GetTriangleShape() Shape.GetQuadShape() Shape.GetRectShape() Shape.GetPolygonShape() Shape.GetPolylineShape() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RayCollider(Transform2D) public RayCollider(Transform2D offset) Parameters offset Transform2D Properties Direction public Vector2 Direction { get; } Property Value Vector2 Point public Vector2 Point { get; } Property Value Vector2 Methods GetBoundingBox() public override Rect GetBoundingBox() Returns Rect GetRayShape() public override Ray GetRayShape() Returns Ray GetShapeType() public override ShapeType GetShapeType() Returns ShapeType"
  },
  "api/ShapeEngine.Core.CollisionSystem.RectCollider.html": {
    "href": "api/ShapeEngine.Core.CollisionSystem.RectCollider.html",
    "title": "Class RectCollider | ShapeEngine",
    "summary": "Class RectCollider Namespace ShapeEngine.Core.CollisionSystem Assembly ShapeEngine.dll public class RectCollider : Collider, IShape Inheritance object Shape Collider RectCollider Implements IShape Inherited Members Collider.OnIntersected Collider.OnOverlapped Collider.OnContactEnded Collider.Parent Collider.Enabled Collider.Velocity Collider.CollisionMask Collider.CollisionLayer Collider.ComputeCollision Collider.ComputeIntersections Collider.Intersected(Collision) Collider.Overlapped(Overlap) Collider.ContactEnded(Collider) Collider.InitializeShape(Transform2D) Collider.UpdateShape(float, Transform2D) Collider.DrawShape() Collider.RecalculateShape() Collider.OnInitialized() Collider.OnUpdate(float) Collider.OnDraw() Collider.OnAddedToCollisionBody(CollisionObject) Collider.OnRemovedFromCollisionBody(CollisionObject) Collider.Project(Vector2) Collider.GetClosestPoint(IShape) Collider.GetClosestPoint(Vector2, out float) Collider.GetClosestPoint(Segment) Collider.GetClosestPoint(Line) Collider.GetClosestPoint(Ray) Collider.GetClosestPoint(Circle) Collider.GetClosestPoint(Triangle) Collider.GetClosestPoint(Quad) Collider.GetClosestPoint(Rect) Collider.GetClosestPoint(Polygon) Collider.GetClosestPoint(Polyline) Collider.ContainsPoint(Vector2) Collider.ContainsShape(IShape) Collider.ContainsShape(Segment) Collider.ContainsShape(Circle) Collider.ContainsShape(Triangle) Collider.ContainsShape(Quad) Collider.ContainsShape(Rect) Collider.ContainsShape(Polygon) Collider.ContainsShape(Polyline) Collider.Overlap(CollisionObject) Collider.Overlap(Collider) Collider.Overlap(IShape) Collider.Overlap(Segment) Collider.Overlap(Line) Collider.Overlap(Ray) Collider.Overlap(Triangle) Collider.Overlap(Circle) Collider.Overlap(Rect) Collider.Overlap(Quad) Collider.Overlap(Polygon) Collider.Overlap(Polyline) Collider.Intersect(CollisionObject) Collider.Intersect(Collider) Collider.Intersect(IShape) Collider.Intersect(Ray) Collider.Intersect(Line) Collider.Intersect(Segment) Collider.Intersect(Triangle) Collider.Intersect(Circle) Collider.Intersect(Rect) Collider.Intersect(Quad) Collider.Intersect(Polygon) Collider.Intersect(Polyline) Collider.Intersect(CollisionObject, ref CollisionPoints, bool) Collider.Intersect(Collider, ref CollisionPoints, bool) Collider.Intersect(IShape, ref CollisionPoints, bool) Collider.Intersect(Ray, ref CollisionPoints, bool) Collider.Intersect(Line, ref CollisionPoints, bool) Collider.Intersect(Segment, ref CollisionPoints, bool) Collider.Intersect(Triangle, ref CollisionPoints, bool) Collider.Intersect(Circle, ref CollisionPoints, bool) Collider.Intersect(Rect, ref CollisionPoints, bool) Collider.Intersect(Quad, ref CollisionPoints, bool) Collider.Intersect(Polygon, ref CollisionPoints, bool) Collider.Intersect(Polyline, ref CollisionPoints, bool) Shape.Moves Shape.Rotates Shape.Scales Shape.Offset Shape.CurTransform Shape.PrevTransform Shape.OnShapeTransformChanged(bool) Shape.UpdateTransform(Transform2D) Shape.GetRayShape() Shape.GetLineShape() Shape.GetSegmentShape() Shape.GetCircleShape() Shape.GetTriangleShape() Shape.GetQuadShape() Shape.GetPolygonShape() Shape.GetPolylineShape() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RectCollider(Transform2D) public RectCollider(Transform2D offset) Parameters offset Transform2D RectCollider(Transform2D, AnchorPoint) public RectCollider(Transform2D offset, AnchorPoint alignement) Parameters offset Transform2D alignement AnchorPoint Properties Alignement public AnchorPoint Alignement { get; set; } Property Value AnchorPoint Methods GetBoundingBox() public override Rect GetBoundingBox() Returns Rect GetRectShape() public override Rect GetRectShape() Returns Rect GetShapeType() public override ShapeType GetShapeType() Returns ShapeType"
  },
  "api/ShapeEngine.Core.CollisionSystem.SegmentCollider.html": {
    "href": "api/ShapeEngine.Core.CollisionSystem.SegmentCollider.html",
    "title": "Class SegmentCollider | ShapeEngine",
    "summary": "Class SegmentCollider Namespace ShapeEngine.Core.CollisionSystem Assembly ShapeEngine.dll public class SegmentCollider : Collider, IShape Inheritance object Shape Collider SegmentCollider Implements IShape Inherited Members Collider.OnIntersected Collider.OnOverlapped Collider.OnContactEnded Collider.Parent Collider.Enabled Collider.Velocity Collider.CollisionMask Collider.CollisionLayer Collider.ComputeCollision Collider.ComputeIntersections Collider.Intersected(Collision) Collider.Overlapped(Overlap) Collider.ContactEnded(Collider) Collider.InitializeShape(Transform2D) Collider.UpdateShape(float, Transform2D) Collider.DrawShape() Collider.OnUpdate(float) Collider.OnDraw() Collider.OnAddedToCollisionBody(CollisionObject) Collider.OnRemovedFromCollisionBody(CollisionObject) Collider.Project(Vector2) Collider.GetClosestPoint(IShape) Collider.GetClosestPoint(Vector2, out float) Collider.GetClosestPoint(Segment) Collider.GetClosestPoint(Line) Collider.GetClosestPoint(Ray) Collider.GetClosestPoint(Circle) Collider.GetClosestPoint(Triangle) Collider.GetClosestPoint(Quad) Collider.GetClosestPoint(Rect) Collider.GetClosestPoint(Polygon) Collider.GetClosestPoint(Polyline) Collider.ContainsPoint(Vector2) Collider.ContainsShape(IShape) Collider.ContainsShape(Segment) Collider.ContainsShape(Circle) Collider.ContainsShape(Triangle) Collider.ContainsShape(Quad) Collider.ContainsShape(Rect) Collider.ContainsShape(Polygon) Collider.ContainsShape(Polyline) Collider.Overlap(CollisionObject) Collider.Overlap(Collider) Collider.Overlap(IShape) Collider.Overlap(Segment) Collider.Overlap(Line) Collider.Overlap(Ray) Collider.Overlap(Triangle) Collider.Overlap(Circle) Collider.Overlap(Rect) Collider.Overlap(Quad) Collider.Overlap(Polygon) Collider.Overlap(Polyline) Collider.Intersect(CollisionObject) Collider.Intersect(Collider) Collider.Intersect(IShape) Collider.Intersect(Ray) Collider.Intersect(Line) Collider.Intersect(Segment) Collider.Intersect(Triangle) Collider.Intersect(Circle) Collider.Intersect(Rect) Collider.Intersect(Quad) Collider.Intersect(Polygon) Collider.Intersect(Polyline) Collider.Intersect(CollisionObject, ref CollisionPoints, bool) Collider.Intersect(Collider, ref CollisionPoints, bool) Collider.Intersect(IShape, ref CollisionPoints, bool) Collider.Intersect(Ray, ref CollisionPoints, bool) Collider.Intersect(Line, ref CollisionPoints, bool) Collider.Intersect(Segment, ref CollisionPoints, bool) Collider.Intersect(Triangle, ref CollisionPoints, bool) Collider.Intersect(Circle, ref CollisionPoints, bool) Collider.Intersect(Rect, ref CollisionPoints, bool) Collider.Intersect(Quad, ref CollisionPoints, bool) Collider.Intersect(Polygon, ref CollisionPoints, bool) Collider.Intersect(Polyline, ref CollisionPoints, bool) Shape.Moves Shape.Rotates Shape.Scales Shape.Offset Shape.CurTransform Shape.PrevTransform Shape.UpdateTransform(Transform2D) Shape.GetRayShape() Shape.GetLineShape() Shape.GetCircleShape() Shape.GetTriangleShape() Shape.GetQuadShape() Shape.GetRectShape() Shape.GetPolygonShape() Shape.GetPolylineShape() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SegmentCollider(Segment, Vector2, float) public SegmentCollider(Segment segment, Vector2 parentPosition, float originOffset = 0) Parameters segment Segment parentPosition Vector2 originOffset float SegmentCollider(Transform2D, Vector2, float) public SegmentCollider(Transform2D offset, Vector2 dir, float originOffset = 0) Parameters offset Transform2D dir Vector2 originOffset float Properties Center public Vector2 Center { get; } Property Value Vector2 Dir public Vector2 Dir { get; set; } Property Value Vector2 Displacement public Vector2 Displacement { get; } Property Value Vector2 End public Vector2 End { get; } Property Value Vector2 OriginOffset 0 Start = Position / 0.5 Center = Position / 1 End = Position public float OriginOffset { get; set; } Property Value float Start public Vector2 Start { get; } Property Value Vector2 Methods GetBoundingBox() public override Rect GetBoundingBox() Returns Rect GetSegmentShape() public override Segment GetSegmentShape() Returns Segment GetShapeType() public override ShapeType GetShapeType() Returns ShapeType OnInitialized() protected override void OnInitialized() OnShapeTransformChanged(bool) Called each frame after the transform was actualized from the parents protected override void OnShapeTransformChanged(bool transformChanged) Parameters transformChanged bool RecalculateShape() public override void RecalculateShape()"
  },
  "api/ShapeEngine.Core.CollisionSystem.ShapeType.html": {
    "href": "api/ShapeEngine.Core.CollisionSystem.ShapeType.html",
    "title": "Enum ShapeType | ShapeEngine",
    "summary": "Enum ShapeType Namespace ShapeEngine.Core.CollisionSystem Assembly ShapeEngine.dll public enum ShapeType Fields Circle = 1 Line = 9 None = 0 Poly = 6 PolyLine = 7 Quad = 4 Ray = 8 Rect = 5 Segment = 2 Triangle = 3"
  },
  "api/ShapeEngine.Core.CollisionSystem.SpatialHash.Bucket.html": {
    "href": "api/ShapeEngine.Core.CollisionSystem.SpatialHash.Bucket.html",
    "title": "Class SpatialHash.Bucket | ShapeEngine",
    "summary": "Class SpatialHash.Bucket Namespace ShapeEngine.Core.CollisionSystem Assembly ShapeEngine.dll public class SpatialHash.Bucket : HashSet<Collider>, ISet<Collider>, ICollection<Collider>, IReadOnlySet<Collider>, IReadOnlyCollection<Collider>, IEnumerable<Collider>, IEnumerable, IDeserializationCallback, ISerializable Inheritance object HashSet<Collider> SpatialHash.Bucket Implements ISet<Collider> ICollection<Collider> IReadOnlySet<Collider> IReadOnlyCollection<Collider> IEnumerable<Collider> IEnumerable IDeserializationCallback ISerializable Inherited Members HashSet<Collider>.Add(Collider) HashSet<Collider>.Clear() HashSet<Collider>.Contains(Collider) HashSet<Collider>.CopyTo(Collider[]) HashSet<Collider>.CopyTo(Collider[], int) HashSet<Collider>.CopyTo(Collider[], int, int) HashSet<Collider>.CreateSetComparer() HashSet<Collider>.EnsureCapacity(int) HashSet<Collider>.ExceptWith(IEnumerable<Collider>) HashSet<Collider>.GetEnumerator() HashSet<Collider>.IntersectWith(IEnumerable<Collider>) HashSet<Collider>.IsProperSubsetOf(IEnumerable<Collider>) HashSet<Collider>.IsProperSupersetOf(IEnumerable<Collider>) HashSet<Collider>.IsSubsetOf(IEnumerable<Collider>) HashSet<Collider>.IsSupersetOf(IEnumerable<Collider>) HashSet<Collider>.OnDeserialization(object) HashSet<Collider>.Overlaps(IEnumerable<Collider>) HashSet<Collider>.Remove(Collider) HashSet<Collider>.RemoveWhere(Predicate<Collider>) HashSet<Collider>.SetEquals(IEnumerable<Collider>) HashSet<Collider>.SymmetricExceptWith(IEnumerable<Collider>) HashSet<Collider>.TrimExcess() HashSet<Collider>.TryGetValue(Collider, out Collider) HashSet<Collider>.UnionWith(IEnumerable<Collider>) HashSet<Collider>.Comparer HashSet<Collider>.Count object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Copy() public SpatialHash.Bucket? Copy() Returns SpatialHash.Bucket FilterObjects(BitFlag) public SpatialHash.Bucket? FilterObjects(BitFlag mask) Parameters mask BitFlag Returns SpatialHash.Bucket"
  },
  "api/ShapeEngine.Core.CollisionSystem.SpatialHash.html": {
    "href": "api/ShapeEngine.Core.CollisionSystem.SpatialHash.html",
    "title": "Class SpatialHash | ShapeEngine",
    "summary": "Class SpatialHash Namespace ShapeEngine.Core.CollisionSystem Assembly ShapeEngine.dll public class SpatialHash : IBounds Inheritance object SpatialHash Implements IBounds Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SpatialHash(Rect, int, int) public SpatialHash(Rect bounds, int rows, int cols) Parameters bounds Rect rows int cols int SpatialHash(float, float, float, float, int, int) public SpatialHash(float x, float y, float w, float h, int rows, int cols) Parameters x float y float w float h float rows int cols int Properties Bounds public Rect Bounds { get; } Property Value Rect BucketCount public int BucketCount { get; } Property Value int Cols public int Cols { get; } Property Value int Rows public int Rows { get; } Property Value int SpacingX public float SpacingX { get; } Property Value float SpacingY public float SpacingY { get; } Property Value float Methods ChangeGrid(int, int) Change the cols and rows of the grid. Clears the spatial hash! public void ChangeGrid(int rows, int cols) Parameters rows int cols int Close() public void Close() DebugDraw(ColorRgba, ColorRgba) public void DebugDraw(ColorRgba border, ColorRgba fill) Parameters border ColorRgba fill ColorRgba Fill(IEnumerable<CollisionObject>) public void Fill(IEnumerable<CollisionObject> collisionBodies) Parameters collisionBodies IEnumerable<CollisionObject> GetCandidateBuckets(Collider, ref List<Bucket>) public void GetCandidateBuckets(Collider collider, ref List<SpatialHash.Bucket> candidateBuckets) Parameters collider Collider candidateBuckets List<SpatialHash.Bucket> GetCandidateBuckets(CollisionObject, ref List<Bucket>) public void GetCandidateBuckets(CollisionObject collidable, ref List<SpatialHash.Bucket> candidateBuckets) Parameters collidable CollisionObject candidateBuckets List<SpatialHash.Bucket> GetCandidateBuckets(Circle, ref List<Bucket>) public void GetCandidateBuckets(Circle circle, ref List<SpatialHash.Bucket> candidateBuckets) Parameters circle Circle candidateBuckets List<SpatialHash.Bucket> GetCandidateBuckets(Line, ref List<Bucket>) public void GetCandidateBuckets(Line line, ref List<SpatialHash.Bucket> candidateBuckets) Parameters line Line candidateBuckets List<SpatialHash.Bucket> GetCandidateBuckets(Polygon, ref List<Bucket>) public void GetCandidateBuckets(Polygon poly, ref List<SpatialHash.Bucket> candidateBuckets) Parameters poly Polygon candidateBuckets List<SpatialHash.Bucket> GetCandidateBuckets(Polyline, ref List<Bucket>) public void GetCandidateBuckets(Polyline polyLine, ref List<SpatialHash.Bucket> candidateBuckets) Parameters polyLine Polyline candidateBuckets List<SpatialHash.Bucket> GetCandidateBuckets(Quad, ref List<Bucket>) public void GetCandidateBuckets(Quad quad, ref List<SpatialHash.Bucket> candidateBuckets) Parameters quad Quad candidateBuckets List<SpatialHash.Bucket> GetCandidateBuckets(Ray, ref List<Bucket>) public void GetCandidateBuckets(Ray ray, ref List<SpatialHash.Bucket> candidateBuckets) Parameters ray Ray candidateBuckets List<SpatialHash.Bucket> GetCandidateBuckets(Rect, ref List<Bucket>) public void GetCandidateBuckets(Rect rect, ref List<SpatialHash.Bucket> candidateBuckets) Parameters rect Rect candidateBuckets List<SpatialHash.Bucket> GetCandidateBuckets(Segment, ref List<Bucket>) public void GetCandidateBuckets(Segment segment, ref List<SpatialHash.Bucket> candidateBuckets) Parameters segment Segment candidateBuckets List<SpatialHash.Bucket> GetCandidateBuckets(Triangle, ref List<Bucket>) public void GetCandidateBuckets(Triangle triangle, ref List<SpatialHash.Bucket> candidateBuckets) Parameters triangle Triangle candidateBuckets List<SpatialHash.Bucket> GetRegisteredCollisionCandidateBuckets(Collider, ref List<Bucket>) public void GetRegisteredCollisionCandidateBuckets(Collider collider, ref List<SpatialHash.Bucket> candidateBuckets) Parameters collider Collider candidateBuckets List<SpatialHash.Bucket> GetUniqueCandidates(Collider, ref HashSet<Collider>) public void GetUniqueCandidates(Collider collider, ref HashSet<Collider> candidates) Parameters collider Collider candidates HashSet<Collider> GetUniqueCandidates(CollisionObject, ref HashSet<Collider>) public void GetUniqueCandidates(CollisionObject collisionBody, ref HashSet<Collider> candidates) Parameters collisionBody CollisionObject candidates HashSet<Collider> GetUniqueCandidates(Circle, ref HashSet<Collider>) public void GetUniqueCandidates(Circle circle, ref HashSet<Collider> candidates) Parameters circle Circle candidates HashSet<Collider> GetUniqueCandidates(Polygon, ref HashSet<Collider>) public void GetUniqueCandidates(Polygon poly, ref HashSet<Collider> candidates) Parameters poly Polygon candidates HashSet<Collider> GetUniqueCandidates(Polyline, ref HashSet<Collider>) public void GetUniqueCandidates(Polyline polyLine, ref HashSet<Collider> candidates) Parameters polyLine Polyline candidates HashSet<Collider> GetUniqueCandidates(Quad, ref HashSet<Collider>) public void GetUniqueCandidates(Quad quad, ref HashSet<Collider> candidates) Parameters quad Quad candidates HashSet<Collider> GetUniqueCandidates(Rect, ref HashSet<Collider>) public void GetUniqueCandidates(Rect rect, ref HashSet<Collider> candidates) Parameters rect Rect candidates HashSet<Collider> GetUniqueCandidates(Segment, ref HashSet<Collider>) public void GetUniqueCandidates(Segment segment, ref HashSet<Collider> candidates) Parameters segment Segment candidates HashSet<Collider> GetUniqueCandidates(Triangle, ref HashSet<Collider>) public void GetUniqueCandidates(Triangle triangle, ref HashSet<Collider> candidates) Parameters triangle Triangle candidates HashSet<Collider> ResizeBounds(Rect) public void ResizeBounds(Rect targetBounds) Parameters targetBounds Rect"
  },
  "api/ShapeEngine.Core.CollisionSystem.TriangleCollider.html": {
    "href": "api/ShapeEngine.Core.CollisionSystem.TriangleCollider.html",
    "title": "Class TriangleCollider | ShapeEngine",
    "summary": "Class TriangleCollider Namespace ShapeEngine.Core.CollisionSystem Assembly ShapeEngine.dll public class TriangleCollider : Collider, IShape Inheritance object Shape Collider TriangleCollider Implements IShape Inherited Members Collider.OnIntersected Collider.OnOverlapped Collider.OnContactEnded Collider.Parent Collider.Enabled Collider.Velocity Collider.CollisionMask Collider.CollisionLayer Collider.ComputeCollision Collider.ComputeIntersections Collider.Intersected(Collision) Collider.Overlapped(Overlap) Collider.ContactEnded(Collider) Collider.InitializeShape(Transform2D) Collider.UpdateShape(float, Transform2D) Collider.DrawShape() Collider.RecalculateShape() Collider.OnInitialized() Collider.OnUpdate(float) Collider.OnDraw() Collider.OnAddedToCollisionBody(CollisionObject) Collider.OnRemovedFromCollisionBody(CollisionObject) Collider.Project(Vector2) Collider.GetClosestPoint(IShape) Collider.GetClosestPoint(Vector2, out float) Collider.GetClosestPoint(Segment) Collider.GetClosestPoint(Line) Collider.GetClosestPoint(Ray) Collider.GetClosestPoint(Circle) Collider.GetClosestPoint(Triangle) Collider.GetClosestPoint(Quad) Collider.GetClosestPoint(Rect) Collider.GetClosestPoint(Polygon) Collider.GetClosestPoint(Polyline) Collider.ContainsPoint(Vector2) Collider.ContainsShape(IShape) Collider.ContainsShape(Segment) Collider.ContainsShape(Circle) Collider.ContainsShape(Triangle) Collider.ContainsShape(Quad) Collider.ContainsShape(Rect) Collider.ContainsShape(Polygon) Collider.ContainsShape(Polyline) Collider.Overlap(CollisionObject) Collider.Overlap(Collider) Collider.Overlap(IShape) Collider.Overlap(Segment) Collider.Overlap(Line) Collider.Overlap(Ray) Collider.Overlap(Triangle) Collider.Overlap(Circle) Collider.Overlap(Rect) Collider.Overlap(Quad) Collider.Overlap(Polygon) Collider.Overlap(Polyline) Collider.Intersect(CollisionObject) Collider.Intersect(Collider) Collider.Intersect(IShape) Collider.Intersect(Ray) Collider.Intersect(Line) Collider.Intersect(Segment) Collider.Intersect(Triangle) Collider.Intersect(Circle) Collider.Intersect(Rect) Collider.Intersect(Quad) Collider.Intersect(Polygon) Collider.Intersect(Polyline) Collider.Intersect(CollisionObject, ref CollisionPoints, bool) Collider.Intersect(Collider, ref CollisionPoints, bool) Collider.Intersect(IShape, ref CollisionPoints, bool) Collider.Intersect(Ray, ref CollisionPoints, bool) Collider.Intersect(Line, ref CollisionPoints, bool) Collider.Intersect(Segment, ref CollisionPoints, bool) Collider.Intersect(Triangle, ref CollisionPoints, bool) Collider.Intersect(Circle, ref CollisionPoints, bool) Collider.Intersect(Rect, ref CollisionPoints, bool) Collider.Intersect(Quad, ref CollisionPoints, bool) Collider.Intersect(Polygon, ref CollisionPoints, bool) Collider.Intersect(Polyline, ref CollisionPoints, bool) Shape.Moves Shape.Rotates Shape.Scales Shape.Offset Shape.CurTransform Shape.PrevTransform Shape.OnShapeTransformChanged(bool) Shape.UpdateTransform(Transform2D) Shape.GetRayShape() Shape.GetLineShape() Shape.GetSegmentShape() Shape.GetCircleShape() Shape.GetQuadShape() Shape.GetRectShape() Shape.GetPolygonShape() Shape.GetPolylineShape() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TriangleCollider(Transform2D, List<Vector2>) public TriangleCollider(Transform2D offset, List<Vector2> relativePoints) Parameters offset Transform2D relativePoints List<Vector2> TriangleCollider(Transform2D, Vector2, Vector2, Vector2) public TriangleCollider(Transform2D offset, Vector2 relA, Vector2 relB, Vector2 relC) Parameters offset Transform2D relA Vector2 relB Vector2 relC Vector2 TriangleCollider(Transform2D, Vector2[]) public TriangleCollider(Transform2D offset, Vector2[] relativePoints) Parameters offset Transform2D relativePoints Vector2[] Properties AAbsolute public Vector2 AAbsolute { get; } Property Value Vector2 ARelative public Vector2 ARelative { get; set; } Property Value Vector2 BAbsolute public Vector2 BAbsolute { get; } Property Value Vector2 BRelative public Vector2 BRelative { get; set; } Property Value Vector2 CAbsolute public Vector2 CAbsolute { get; } Property Value Vector2 CRelative public Vector2 CRelative { get; set; } Property Value Vector2 Methods GetBoundingBox() public override Rect GetBoundingBox() Returns Rect GetShapeType() public override ShapeType GetShapeType() Returns ShapeType GetTriangleShape() public override Triangle GetTriangleShape() Returns Triangle"
  },
  "api/ShapeEngine.Core.CollisionSystem.html": {
    "href": "api/ShapeEngine.Core.CollisionSystem.html",
    "title": "Namespace ShapeEngine.Core.CollisionSystem | ShapeEngine",
    "summary": "Namespace ShapeEngine.Core.CollisionSystem Classes CastSpaceEntry CastSpaceResult CircleCollider CircleSectorCollider Collider Collision Contains the information of an intersection or an overlap between two colliders. CollisionHandler CollisionInformation Contains the information of a collision between two collision objects in form of a list of collisions. Each collision is an intersection or overlap between two colliders CollisionObject CollisionPoints IntersectSpaceEntry IntersectSpaceRegister IntersectSpaceResult LineCollider Overlap PolyCollider PolyLineCollider QuadCollider RayCollider RectCollider SegmentCollider SpatialHash SpatialHash.Bucket TriangleCollider Interfaces IShape Enums CollisionPointsFilterType First - Selects the first collision point. Closest - Selects the collision point closest to the reference point. Furthest - Selects the collision point furthest from the reference point. Combined - Computes the average collision point. PointingTowards - Selects the collision point with a normal pointing the most towards the reference position. PointingAway - Selects the collision point with a normal pointing the most away from the reference position. Random - Selects a random collision point. ShapeType"
  },
  "api/ShapeEngine.Core.Game.html": {
    "href": "api/ShapeEngine.Core.Game.html",
    "title": "Class Game | ShapeEngine",
    "summary": "Class Game Namespace ShapeEngine.Core Assembly ShapeEngine.dll public class Game Inheritance object Game Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Game(GameSettings, WindowSettings) public Game(GameSettings gameSettings, WindowSettings windowSettings) Parameters gameSettings GameSettings windowSettings WindowSettings Fields AudioDevice public readonly AudioDevice AudioDevice Field Value AudioDevice BackgroundColorRgba public ColorRgba BackgroundColorRgba Field Value ColorRgba CURRENT_DIRECTORY public static readonly string CURRENT_DIRECTORY Field Value string DeferredDrawingAfterGame Add functions that draw something to the screen after the game texture was drawn to the screen and before the UI texture is drawn to the screen. Lower keys (layers) will be drawn first. public readonly SortedList<int, Action> DeferredDrawingAfterGame Field Value SortedList<int, Action> DeferredDrawingAfterUI Add functions that draw something to the screen after the UI texture was drawn to the screen. Lower keys (layers) will be drawn first. public readonly SortedList<int, Action> DeferredDrawingAfterUI Field Value SortedList<int, Action> DeferredDrawingBeforeGame Add functions that draw something to the screen before the game texture is drawn to the screen. Lower keys (layers) will be drawn first. public readonly SortedList<int, Action> DeferredDrawingBeforeGame Field Value SortedList<int, Action> ScreenEffectIntensity public float ScreenEffectIntensity Field Value float Properties Camera public ShapeCamera Camera { get; set; } Property Value ShapeCamera CurScene public Scene CurScene { get; } Property Value Scene CurrentGameInstance public static Game CurrentGameInstance { get; } Property Value Game DebugMode public static bool DebugMode { get; } Property Value bool FixedPhysicsEnabled public bool FixedPhysicsEnabled { get; } Property Value bool FixedPhysicsFramerate public int FixedPhysicsFramerate { get; } Property Value int FixedPhysicsTimestep public float FixedPhysicsTimestep { get; } Property Value float FixedTime public GameTime FixedTime { get; } Property Value GameTime GameScreenInfo public ScreenInfo GameScreenInfo { get; } Property Value ScreenInfo GameTexture public ScreenTexture GameTexture { get; } Property Value ScreenTexture GameUiScreenInfo public ScreenInfo GameUiScreenInfo { get; } Property Value ScreenInfo LaunchParams public string[] LaunchParams { get; protected set; } Property Value string[] OS_PLATFORM public static OSPlatform OS_PLATFORM { get; } Property Value OSPlatform Paused public bool Paused { get; set; } Property Value bool ReleaseMode public static bool ReleaseMode { get; } Property Value bool ScreenShaders public ShaderContainer? ScreenShaders { get; } Property Value ShaderContainer Time public GameTime Time { get; } Property Value GameTime UIScreenInfo public ScreenInfo UIScreenInfo { get; } Property Value ScreenInfo Window public GameWindow Window { get; } Property Value GameWindow Methods AddScreenTexture(ScreenTexture) public bool AddScreenTexture(ScreenTexture texture) Parameters texture ScreenTexture Returns bool BeginRun() Called after LoadContent but before the main loop has started. protected virtual void BeginRun() CallDeferred(Action, int) public void CallDeferred(Action action, int afterFrames = 0) Parameters action Action afterFrames int ChangeGameTexture(ScreenTexture) Change the game texture. public ScreenTexture? ChangeGameTexture(ScreenTexture newScreenTexture) Parameters newScreenTexture ScreenTexture The new screen texture to use. Returns ScreenTexture Returns the old game texture or null if the newScreenTexture is the same as the game texture. The old ScreenTexture should be unloaded and disposed of if no longer needed! ChangeMousePos(float, Vector2, Rect) protected virtual Vector2 ChangeMousePos(float dt, Vector2 mousePos, Rect screenArea) Parameters dt float mousePos Vector2 screenArea Rect Returns Vector2 ClearFlashes() public void ClearFlashes() ClearScreenTextures() public int ClearScreenTextures() Returns int DrawCursorGame(ScreenInfo) protected virtual void DrawCursorGame(ScreenInfo gameInfo) Parameters gameInfo ScreenInfo DrawCursorGameUi(ScreenInfo) protected virtual void DrawCursorGameUi(ScreenInfo gameUiInfo) Parameters gameUiInfo ScreenInfo DrawCursorUi(ScreenInfo) protected virtual void DrawCursorUi(ScreenInfo uiInfo) Parameters uiInfo ScreenInfo DrawGame(ScreenInfo) protected virtual void DrawGame(ScreenInfo game) Parameters game ScreenInfo DrawGameUI(ScreenInfo) protected virtual void DrawGameUI(ScreenInfo gameUi) Parameters gameUi ScreenInfo DrawUI(ScreenInfo) protected virtual void DrawUI(ScreenInfo ui) Parameters ui ScreenInfo EndRun() Called before UnloadContent is called after the main gameloop has been exited. protected virtual void EndRun() FixedUpdate(GameTime, ScreenInfo, ScreenInfo, ScreenInfo) Only called when fixed framerate is enabled. This function will be called in fixed interval. protected virtual void FixedUpdate(GameTime fixedTime, ScreenInfo game, ScreenInfo gameUi, ScreenInfo ui) Parameters fixedTime GameTime game ScreenInfo gameUi ScreenInfo ui ScreenInfo Flash(float, ColorRgba, ColorRgba) public void Flash(float duration, ColorRgba startColorRgba, ColorRgba endColorRgba) Parameters duration float startColorRgba ColorRgba endColorRgba ColorRgba GetGameTexture() public ScreenTexture GetGameTexture() Returns ScreenTexture GetHashCode<T>(IEnumerable<T>) public static int GetHashCode<T>(IEnumerable<T> collection) Parameters collection IEnumerable<T> Returns int Type Parameters T GetItem<T>(List<T>, int) public static T GetItem<T>(List<T> collection, int index) Parameters collection List<T> index int Returns T Type Parameters T GoToScene(Scene) Switches to the new scene. Deactivate is called on the old scene and then Activate is called on the new scene. public void GoToScene(Scene newScene) Parameters newScene Scene HasScreenTexture(ScreenTexture) public bool HasScreenTexture(ScreenTexture texture) Parameters texture ScreenTexture Returns bool InterpolateFixedUpdate(GameTime, ScreenInfo, ScreenInfo, ScreenInfo, float) Only called when fixed framerate is enabled. This function will be called every frame. protected virtual void InterpolateFixedUpdate(GameTime time, ScreenInfo game, ScreenInfo gameUi, ScreenInfo ui, float f) Parameters time GameTime game ScreenInfo gameUi ScreenInfo ui ScreenInfo f float IsEqual<T>(List<T>?, List<T>?) public static bool IsEqual<T>(List<T>? a, List<T>? b) where T : IEquatable<T> Parameters a List<T> b List<T> Returns bool Type Parameters T IsLinux() public static bool IsLinux() Returns bool IsOSX() public static bool IsOSX() Returns bool IsWindows() public static bool IsWindows() Returns bool LoadContent() Called first after starting the gameloop. protected virtual void LoadContent() OnButtonPressed(InputEvent) protected virtual void OnButtonPressed(InputEvent e) Parameters e InputEvent OnButtonReleased(InputEvent) protected virtual void OnButtonReleased(InputEvent e) Parameters e InputEvent OnGameTextureResized(int, int) protected virtual void OnGameTextureResized(int w, int h) Parameters w int h int OnGamepadConnected(ShapeGamepadDevice) protected virtual void OnGamepadConnected(ShapeGamepadDevice gamepad) Parameters gamepad ShapeGamepadDevice OnGamepadDisconnected(ShapeGamepadDevice) protected virtual void OnGamepadDisconnected(ShapeGamepadDevice gamepad) Parameters gamepad ShapeGamepadDevice OnInputDeviceChanged(InputDeviceType, InputDeviceType) protected virtual void OnInputDeviceChanged(InputDeviceType prevDeviceType, InputDeviceType newDeviceType) Parameters prevDeviceType InputDeviceType newDeviceType InputDeviceType OnMonitorChanged(MonitorInfo) protected virtual void OnMonitorChanged(MonitorInfo newMonitor) Parameters newMonitor MonitorInfo OnMouseEnabledChanged(bool) protected virtual void OnMouseEnabledChanged(bool enabled) Parameters enabled bool OnMouseEnteredScreen() protected virtual void OnMouseEnteredScreen() OnMouseLeftScreen() protected virtual void OnMouseLeftScreen() OnMouseVisibilityChanged(bool) protected virtual void OnMouseVisibilityChanged(bool visible) Parameters visible bool OnPausedChanged(bool) protected virtual void OnPausedChanged(bool newPaused) Parameters newPaused bool OnWindowFocusChanged(bool) protected virtual void OnWindowFocusChanged(bool focused) Parameters focused bool OnWindowFullscreenChanged(bool) protected virtual void OnWindowFullscreenChanged(bool fullscreen) Parameters fullscreen bool OnWindowHiddenChanged(bool) protected virtual void OnWindowHiddenChanged(bool hidden) Parameters hidden bool OnWindowMaximizeChanged(bool) protected virtual void OnWindowMaximizeChanged(bool maximized) Parameters maximized bool OnWindowMinimizedChanged(bool) protected virtual void OnWindowMinimizedChanged(bool minimized) Parameters minimized bool OnWindowPositionChanged(Vector2, Vector2) protected virtual void OnWindowPositionChanged(Vector2 oldPos, Vector2 newPos) Parameters oldPos Vector2 newPos Vector2 OnWindowSizeChanged(DimensionConversionFactors) protected virtual void OnWindowSizeChanged(DimensionConversionFactors conversion) Parameters conversion DimensionConversionFactors OnWindowTopmostChanged(bool) protected virtual void OnWindowTopmostChanged(bool topmost) Parameters topmost bool PreFixedUpdate(GameTime, ScreenInfo, ScreenInfo, ScreenInfo) This functions is called every frame before fixed update. Only called when fixed framerate is enabled. protected virtual void PreFixedUpdate(GameTime time, ScreenInfo game, ScreenInfo gameUi, ScreenInfo ui) Parameters time GameTime game ScreenInfo gameUi ScreenInfo ui ScreenInfo Quit() public void Quit() ReadFromFile(string, string, Action<StreamReader>) Use the readAction to read from the file. public static void ReadFromFile(string path, string fileName, Action<StreamReader> readAction) Parameters path string The path were the file should be. A new one is created if it does not exist. fileName string The name of the file. Needs a valid extension. readAction Action<StreamReader> The function that is called with the active StreamReader. Use Read/ ReadLine functions to read. Exceptions ArgumentException Filename has no valid extension. RemoveScreenTexture(ScreenTexture) public bool RemoveScreenTexture(ScreenTexture texture) Parameters texture ScreenTexture Returns bool ResetCamera() public void ResetCamera() Restart() public void Restart() Run(params string[]) public ExitCode Run(params string[] launchParameters) Parameters launchParameters string[] Returns ExitCode TryParseEnum<TEnum>(string, out TEnum) public static bool TryParseEnum<TEnum>(string value, out TEnum result) where TEnum : struct Parameters value string result TEnum Returns bool Type Parameters TEnum UnloadContent() Called after EndRun before the application terminates. protected virtual void UnloadContent() Update(GameTime, ScreenInfo, ScreenInfo, ScreenInfo) Called when fixed framerate is disabled protected virtual void Update(GameTime time, ScreenInfo game, ScreenInfo gameUi, ScreenInfo ui) Parameters time GameTime game ScreenInfo gameUi ScreenInfo ui ScreenInfo UpdateCursor(float, ScreenInfo, ScreenInfo, ScreenInfo) protected virtual void UpdateCursor(float dt, ScreenInfo gameInfo, ScreenInfo gameUiInfo, ScreenInfo uiInfo) Parameters dt float gameInfo ScreenInfo gameUiInfo ScreenInfo uiInfo ScreenInfo WriteToFile(string, string, Action<StreamWriter>) Use the writeAction to write to the text file. public static void WriteToFile(string path, string fileName, Action<StreamWriter> writeAction) Parameters path string The path were the file should be. A new one is created if it does not exist. fileName string The name of the file. Needs a valid extension. writeAction Action<StreamWriter> The function that is called with the active StreamWriter. Use Write/ WriteLine functions to write. Exceptions ArgumentException Filename has no valid extension."
  },
  "api/ShapeEngine.Core.GameObject.html": {
    "href": "api/ShapeEngine.Core.GameObject.html",
    "title": "Class GameObject | ShapeEngine",
    "summary": "Class GameObject Namespace ShapeEngine.Core Assembly ShapeEngine.dll public abstract class GameObject : IUpdateable, IDrawable Inheritance object GameObject Implements IUpdateable IDrawable Derived PhysicsObject EffectObject Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsDead public bool IsDead { get; } Property Value bool Layer The area layer the object is stored in. Higher layers are draw on top of lower layers. public uint Layer { get; set; } Property Value uint Transform public Transform2D Transform { get; set; } Property Value Transform2D Methods DrawGame(ScreenInfo) Draw the game here. Is affected by screen shaders and the camera. public abstract void DrawGame(ScreenInfo game) Parameters game ScreenInfo DrawGameUI(ScreenInfo) Draw to the game ui here. Is affected by screen shaders but NOT by the camera. public abstract void DrawGameUI(ScreenInfo gameUi) Parameters gameUi ScreenInfo FixedUpdate(GameTime, ScreenInfo, ScreenInfo, ScreenInfo) Only called when fixed framerate is enabled. Called in fixed interval. public virtual void FixedUpdate(GameTime fixedTime, ScreenInfo game, ScreenInfo gameUi, ScreenInfo ui) Parameters fixedTime GameTime game ScreenInfo gameUi ScreenInfo ui ScreenInfo GetBoundingBox() public abstract Rect GetBoundingBox() Returns Rect HasLeftBounds(Rect) Get the bounds of the spawn area this object is in and return if this object should be removed from the spawn area. public virtual bool HasLeftBounds(Rect bounds) Parameters bounds Rect The rect bounds of the spawn area. Returns bool If true is return object is removed from the spawn area InterpolateFixedUpdate(GameTime, ScreenInfo, ScreenInfo, ScreenInfo, float) Only called when fixed framerate is enabled. Called every frame after fixed update calls. public virtual void InterpolateFixedUpdate(GameTime time, ScreenInfo game, ScreenInfo gameUi, ScreenInfo ui, float f) Parameters time GameTime game ScreenInfo gameUi ScreenInfo ui ScreenInfo f float IsDrawingToGame(Rect) public virtual bool IsDrawingToGame(Rect gameArea) Parameters gameArea Rect Returns bool IsDrawingToGameUI(Rect) public virtual bool IsDrawingToGameUI(Rect gameUiArea) Parameters gameUiArea Rect Returns bool IsInLayer(uint) Check if the object is in a layer. public bool IsInLayer(uint layer) Parameters layer uint Returns bool Kill(string?, GameObject?) Tries to kill this game object. public bool Kill(string? killMessage = null, GameObject? killer = null) Parameters killMessage string killer GameObject Returns bool Returns if kill was successful. OnDespawned(SpawnArea) Is called by the area once a game object is dead. public virtual void OnDespawned(SpawnArea spawnArea) Parameters spawnArea SpawnArea OnSpawned(SpawnArea) Is called when gameobject is added to an area. public virtual void OnSpawned(SpawnArea spawnArea) Parameters spawnArea SpawnArea Revive(string?, GameObject?) public bool Revive(string? reviveMessage = null, GameObject? reviver = null) Parameters reviveMessage string reviver GameObject Returns bool TryKill(string?, GameObject?) protected virtual bool TryKill(string? killMessage = null, GameObject? killer = null) Parameters killMessage string killer GameObject Returns bool TryRevive(string?, GameObject?) protected virtual bool TryRevive(string? reviveMessage = null, GameObject? reviver = null) Parameters reviveMessage string reviver GameObject Returns bool Update(GameTime, ScreenInfo, ScreenInfo, ScreenInfo) Called every frame. Called before FixedUpdate if fixed framerate is enabled. public abstract void Update(GameTime time, ScreenInfo game, ScreenInfo gameUi, ScreenInfo ui) Parameters time GameTime game ScreenInfo gameUi ScreenInfo ui ScreenInfo UpdateParallaxe(Vector2) Is called by the area. Can be used to update the objects position based on the new parallax position. public virtual void UpdateParallaxe(Vector2 newParallaxPosition) Parameters newParallaxPosition Vector2 The new parallax position from the layer the object is in. WasKilled(string?, GameObject?) protected virtual void WasKilled(string? killMessage = null, GameObject? killer = null) Parameters killMessage string killer GameObject WasRevived(string?, GameObject?) protected virtual void WasRevived(string? reviveMessage = null, GameObject? reviver = null) Parameters reviveMessage string reviver GameObject Events OnKilled public event Action<GameObject, string?, GameObject?>? OnKilled Event Type Action<GameObject, string, GameObject> OnRevived public event Action<GameObject, string?, GameObject?>? OnRevived Event Type Action<GameObject, string, GameObject>"
  },
  "api/ShapeEngine.Core.GameWindow.html": {
    "href": "api/ShapeEngine.Core.GameWindow.html",
    "title": "Class GameWindow | ShapeEngine",
    "summary": "Class GameWindow Namespace ShapeEngine.Core Assembly ShapeEngine.dll public sealed class GameWindow Inheritance object GameWindow Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties CurScreenSize public Dimensions CurScreenSize { get; } Property Value Dimensions DisplayState public WindowDisplayState DisplayState { get; } Property Value WindowDisplayState Fps public int Fps { get; } Property Value int FpsLimit public int FpsLimit { get; set; } Property Value int FullscreenAutoRestoring public bool FullscreenAutoRestoring { get; set; } Property Value bool Instance public static GameWindow Instance { get; } Property Value GameWindow IsWindowFocused public bool IsWindowFocused { get; } Property Value bool IsWindowTopmost public bool IsWindowTopmost { get; } Property Value bool MaxFramerate public int MaxFramerate { get; set; } Property Value int MinFramerate public int MinFramerate { get; set; } Property Value int Monitor public MonitorDevice Monitor { get; } Property Value MonitorDevice MonitorToScreen public DimensionConversionFactors MonitorToScreen { get; } Property Value DimensionConversionFactors MouseDelta public Vector2 MouseDelta { get; } Property Value Vector2 MouseEnabled public bool MouseEnabled { get; set; } Property Value bool MouseOnScreen public bool MouseOnScreen { get; } Property Value bool MousePosition public Vector2 MousePosition { get; set; } Property Value Vector2 MouseVisible public bool MouseVisible { get; set; } Property Value bool MouseX public float MouseX { get; } Property Value float MouseY public float MouseY { get; } Property Value float ScreenArea public Rect ScreenArea { get; } Property Value Rect ScreenToMonitor public DimensionConversionFactors ScreenToMonitor { get; } Property Value DimensionConversionFactors VSync public bool VSync { get; set; } Property Value bool WindowBorder public WindowBorder WindowBorder { get; } Property Value WindowBorder WindowMinSize public Dimensions WindowMinSize { get; } Property Value Dimensions WindowPosition public Vector2 WindowPosition { get; } Property Value Vector2 WindowSize public Dimensions WindowSize { get; set; } Property Value Dimensions Methods ActivateBorderlessFullscreen() public bool ActivateBorderlessFullscreen() Returns bool ActivateFullscreen(int, int) public bool ActivateFullscreen(int width, int height) Parameters width int height int Returns bool CenterWindow() public void CenterWindow() GetScreenPercentage() public float GetScreenPercentage() Returns float IsWindowBorderlessFullscreen() public bool IsWindowBorderlessFullscreen() Returns bool IsWindowFullscreen() public bool IsWindowFullscreen() Returns bool IsWindowMaximized() public bool IsWindowMaximized() Returns bool IsWindowMinimized() public bool IsWindowMinimized() Returns bool IsWindowNormal() public bool IsWindowNormal() Returns bool MaximizeWindow() public bool MaximizeWindow() Returns bool MinimizeWindow() public bool MinimizeWindow() Returns bool NextMonitor() public void NextMonitor() ResetMousePosition() public void ResetMousePosition() ResetWindow() public void ResetWindow() ResizeWindow(Dimensions) public void ResizeWindow(Dimensions newDimensions) Parameters newDimensions Dimensions RestoreWindow() public bool RestoreWindow() Returns bool SetMonitor(int) public bool SetMonitor(int newMonitor) Parameters newMonitor int Returns bool SetWindowBorderFixed() public bool SetWindowBorderFixed() Returns bool SetWindowBorderResizable() public bool SetWindowBorderResizable() Returns bool SetWindowBorderUndecorated() public bool SetWindowBorderUndecorated() Returns bool SetWindowTopmost(bool) public bool SetWindowTopmost(bool topmost) Parameters topmost bool Returns bool ToggleBorderlessFullscreen() public void ToggleBorderlessFullscreen() ToggleMaximizeWindow() public void ToggleMaximizeWindow() ToggleMinimizeWindow() public void ToggleMinimizeWindow() Events OnMonitorChanged public event Action<MonitorInfo>? OnMonitorChanged Event Type Action<MonitorInfo> OnMouseEnabledChanged public event Action<bool>? OnMouseEnabledChanged Event Type Action<bool> OnMouseEnteredScreen public event Action? OnMouseEnteredScreen Event Type Action OnMouseLeftScreen public event Action? OnMouseLeftScreen Event Type Action OnMouseVisibilityChanged public event Action<bool>? OnMouseVisibilityChanged Event Type Action<bool> OnWindowAlwaysRunChanged public event Action<bool>? OnWindowAlwaysRunChanged Event Type Action<bool> OnWindowFocusChanged public event Action<bool>? OnWindowFocusChanged Event Type Action<bool> OnWindowFullscreenChanged public event Action<bool>? OnWindowFullscreenChanged Event Type Action<bool> OnWindowHiddenChanged public event Action<bool>? OnWindowHiddenChanged Event Type Action<bool> OnWindowMaximizeChanged public event Action<bool>? OnWindowMaximizeChanged Event Type Action<bool> OnWindowMinimizedChanged public event Action<bool>? OnWindowMinimizedChanged Event Type Action<bool> OnWindowMousePassThroughChanged public event Action<bool>? OnWindowMousePassThroughChanged Event Type Action<bool> OnWindowPositionChanged public event Action<Vector2, Vector2>? OnWindowPositionChanged Event Type Action<Vector2, Vector2> OnWindowResizableChanged public event Action<bool>? OnWindowResizableChanged Event Type Action<bool> OnWindowSizeChanged public event Action<DimensionConversionFactors>? OnWindowSizeChanged Event Type Action<DimensionConversionFactors> OnWindowTopmostChanged public event Action<bool>? OnWindowTopmostChanged Event Type Action<bool> OnWindowUndecoratedChanged public event Action<bool>? OnWindowUndecoratedChanged Event Type Action<bool> OnWindowVSyncChanged public event Action<bool>? OnWindowVSyncChanged Event Type Action<bool>"
  },
  "api/ShapeEngine.Core.Interfaces.IBounds.html": {
    "href": "api/ShapeEngine.Core.Interfaces.IBounds.html",
    "title": "Interface IBounds | ShapeEngine",
    "summary": "Interface IBounds Namespace ShapeEngine.Core.Interfaces Assembly ShapeEngine.dll public interface IBounds Properties Bounds Rect Bounds { get; } Property Value Rect Methods ResizeBounds(Rect) void ResizeBounds(Rect newBounds) Parameters newBounds Rect"
  },
  "api/ShapeEngine.Core.Interfaces.ICameraFollowTarget.html": {
    "href": "api/ShapeEngine.Core.Interfaces.ICameraFollowTarget.html",
    "title": "Interface ICameraFollowTarget | ShapeEngine",
    "summary": "Interface ICameraFollowTarget Namespace ShapeEngine.Core.Interfaces Assembly ShapeEngine.dll public interface ICameraFollowTarget Methods FollowEnded() void FollowEnded() FollowStarted() void FollowStarted() GetCameraFollowPosition() Vector2 GetCameraFollowPosition() Returns Vector2"
  },
  "api/ShapeEngine.Core.Interfaces.IDrawable.html": {
    "href": "api/ShapeEngine.Core.Interfaces.IDrawable.html",
    "title": "Interface IDrawable | ShapeEngine",
    "summary": "Interface IDrawable Namespace ShapeEngine.Core.Interfaces Assembly ShapeEngine.dll public interface IDrawable Methods DrawGame(ScreenInfo) Draw the game here. Is affected by screen shaders and the camera. void DrawGame(ScreenInfo game) Parameters game ScreenInfo DrawGameUI(ScreenInfo) Draw to the game ui here. Is affected by screen shaders but NOT by the camera. void DrawGameUI(ScreenInfo gameUi) Parameters gameUi ScreenInfo"
  },
  "api/ShapeEngine.Core.Interfaces.IUpdateable.html": {
    "href": "api/ShapeEngine.Core.Interfaces.IUpdateable.html",
    "title": "Interface IUpdateable | ShapeEngine",
    "summary": "Interface IUpdateable Namespace ShapeEngine.Core.Interfaces Assembly ShapeEngine.dll public interface IUpdateable Methods FixedUpdate(GameTime, ScreenInfo, ScreenInfo, ScreenInfo) Only called when fixed framerate is enabled. Called in fixed interval. void FixedUpdate(GameTime fixedTime, ScreenInfo game, ScreenInfo gameUi, ScreenInfo ui) Parameters fixedTime GameTime game ScreenInfo gameUi ScreenInfo ui ScreenInfo InterpolateFixedUpdate(GameTime, ScreenInfo, ScreenInfo, ScreenInfo, float) Only called when fixed framerate is enabled. Called every frame after fixed update calls. void InterpolateFixedUpdate(GameTime time, ScreenInfo game, ScreenInfo gameUi, ScreenInfo ui, float f) Parameters time GameTime game ScreenInfo gameUi ScreenInfo ui ScreenInfo f float Update(GameTime, ScreenInfo, ScreenInfo, ScreenInfo) Called every frame. Called before FixedUpdate if fixed framerate is enabled. void Update(GameTime time, ScreenInfo game, ScreenInfo gameUi, ScreenInfo ui) Parameters time GameTime game ScreenInfo gameUi ScreenInfo ui ScreenInfo"
  },
  "api/ShapeEngine.Core.Interfaces.html": {
    "href": "api/ShapeEngine.Core.Interfaces.html",
    "title": "Namespace ShapeEngine.Core.Interfaces | ShapeEngine",
    "summary": "Namespace ShapeEngine.Core.Interfaces Interfaces IBounds ICameraFollowTarget IDrawable IUpdateable"
  },
  "api/ShapeEngine.Core.PhysicsObject.html": {
    "href": "api/ShapeEngine.Core.PhysicsObject.html",
    "title": "Class PhysicsObject | ShapeEngine",
    "summary": "Class PhysicsObject Namespace ShapeEngine.Core Assembly ShapeEngine.dll public abstract class PhysicsObject : GameObject, IUpdateable, IDrawable Inheritance object GameObject PhysicsObject Implements IUpdateable IDrawable Derived CollisionObject Inherited Members GameObject.OnKilled GameObject.OnRevived GameObject.Transform GameObject.IsDead GameObject.GetBoundingBox() GameObject.FixedUpdate(GameTime, ScreenInfo, ScreenInfo, ScreenInfo) GameObject.InterpolateFixedUpdate(GameTime, ScreenInfo, ScreenInfo, ScreenInfo, float) GameObject.DrawGame(ScreenInfo) GameObject.DrawGameUI(ScreenInfo) GameObject.IsDrawingToGame(Rect) GameObject.IsDrawingToGameUI(Rect) GameObject.Layer GameObject.UpdateParallaxe(Vector2) GameObject.IsInLayer(uint) GameObject.OnSpawned(SpawnArea) GameObject.OnDespawned(SpawnArea) GameObject.HasLeftBounds(Rect) GameObject.Kill(string, GameObject) GameObject.WasKilled(string, GameObject) GameObject.TryKill(string, GameObject) GameObject.Revive(string, GameObject) GameObject.WasRevived(string, GameObject) GameObject.TryRevive(string, GameObject) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ShapePhysics.ApplyAttraction(PhysicsObject, PhysicsObject) ShapePhysics.ApplyAttraction(PhysicsObject, Vector2, float) ShapePhysics.ApplyAttraction(PhysicsObject, Vector2, float, Vector2) ShapePhysics.ApplyAttraction(PhysicsObject, Vector2, float, float) ShapePhysics.ApplyElasticCollision(PhysicsObject, PhysicsObject, Vector2, float) ShapePhysics.ApplyElasticCollisionCircleSelf(PhysicsObject, PhysicsObject, float) ShapePhysics.ApplyElasticCollisionSelf(PhysicsObject, PhysicsObject, Vector2, float) ShapePhysics.ApplyRepulsion(PhysicsObject, Vector2, float) ShapePhysics.ApplyRepulsion(PhysicsObject, Vector2, float, Vector2) ShapePhysics.ApplyRepulsion(PhysicsObject, Vector2, float, float) Properties AccumulatedForce public Vector2 AccumulatedForce { get; } Property Value Vector2 AccumulatedImpulses public Vector2 AccumulatedImpulses { get; } Property Value Vector2 ConstAcceleration public Vector2 ConstAcceleration { get; set; } Property Value Vector2 CurVelocityDirection public Vector2 CurVelocityDirection { get; } Property Value Vector2 CurVelocityMagnitude public float CurVelocityMagnitude { get; } Property Value float CurVelocityMagnitudeSquared public float CurVelocityMagnitudeSquared { get; } Property Value float DragCoefficient The Value Range is 0-1. 0 means no drag, 1 means full drag. Drag determines how much energy the velocity loses per second. Drag of 0.5f would mean the velocity loses half of its energy per second. public float DragCoefficient { get; set; } Property Value float IsInMotion public bool IsInMotion { get; } Property Value bool KineticEnergy public float KineticEnergy { get; } Property Value float Mass public float Mass { get; set; } Property Value float Momentum public float Momentum { get; } Property Value float Velocity public Vector2 Velocity { get; set; } Property Value Vector2 Methods AddForce(Vector2) public void AddForce(Vector2 force) Parameters force Vector2 AddForceRaw(Vector2) Add a force without dividing by mass public void AddForceRaw(Vector2 force) Parameters force Vector2 AddImpulse(Vector2) public void AddImpulse(Vector2 force) Parameters force Vector2 ClearAccumulatedForce() public void ClearAccumulatedForce() ClearAccumulatedImpulses() public void ClearAccumulatedImpulses() OnPhysicsStateUpdated(float) protected virtual void OnPhysicsStateUpdated(float dt) Parameters dt float Update(GameTime, ScreenInfo, ScreenInfo, ScreenInfo) Called every frame. Called before FixedUpdate if fixed framerate is enabled. public override void Update(GameTime time, ScreenInfo game, ScreenInfo gameUi, ScreenInfo ui) Parameters time GameTime game ScreenInfo gameUi ScreenInfo ui ScreenInfo"
  },
  "api/ShapeEngine.Core.Scene.html": {
    "href": "api/ShapeEngine.Core.Scene.html",
    "title": "Class Scene | ShapeEngine",
    "summary": "Class Scene Namespace ShapeEngine.Core Assembly ShapeEngine.dll public abstract class Scene Inheritance object Scene Derived SceneEmpty Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Active public bool Active { get; } Property Value bool CollisionHandler public CollisionHandler? CollisionHandler { get; } Property Value CollisionHandler Game If the scene is Active Game will be set. public Game? Game { get; } Property Value Game Pathfinder public Pathfinder? Pathfinder { get; } Property Value Pathfinder SpawnArea public SpawnArea? SpawnArea { get; } Property Value SpawnArea Methods Close() Used for cleanup. Should be called once right before the scene gets deleted. public void Close() InitCollisionHandler(CollisionHandler) protected bool InitCollisionHandler(CollisionHandler collisionHandler) Parameters collisionHandler CollisionHandler Returns bool InitCollisionHandler(Rect, int, int) protected bool InitCollisionHandler(Rect bounds, int rows, int cols) Parameters bounds Rect rows int cols int Returns bool InitPathfinder(Rect, int, int) protected bool InitPathfinder(Rect bounds, int rows, int cols) Parameters bounds Rect rows int cols int Returns bool InitPathfinder(Pathfinder) protected bool InitPathfinder(Pathfinder pathfinder) Parameters pathfinder Pathfinder Returns bool InitSpawnArea(Rect) protected bool InitSpawnArea(Rect bounds) Parameters bounds Rect Returns bool InitSpawnArea(SpawnArea) protected bool InitSpawnArea(SpawnArea area) Parameters area SpawnArea Returns bool InitSpawnArea(float, float, float, float) protected bool InitSpawnArea(float x, float y, float w, float h) Parameters x float y float w float h float Returns bool OnActivate(Scene) protected abstract void OnActivate(Scene oldScene) Parameters oldScene Scene OnButtonPressed(InputEvent) protected virtual void OnButtonPressed(InputEvent e) Parameters e InputEvent OnButtonReleased(InputEvent) protected virtual void OnButtonReleased(InputEvent e) Parameters e InputEvent OnClose() Used for cleanup. Should be called once right before the scene gets deleted. protected virtual void OnClose() OnDeactivate() protected abstract void OnDeactivate() OnDrawGame(ScreenInfo) Draw your game. Is affected by screen shaders and the camera. protected virtual void OnDrawGame(ScreenInfo game) Parameters game ScreenInfo OnDrawGameUI(ScreenInfo) Draw your game ui. Is not affected by screen shaders and not by the camera but uses the same ScreenTextureMode as DrawGame. protected virtual void OnDrawGameUI(ScreenInfo gameUi) Parameters gameUi ScreenInfo OnDrawUI(ScreenInfo) Draw your main ui. Is NOT affected by screen shaders and NOT affected by the camera. protected virtual void OnDrawUI(ScreenInfo ui) Parameters ui ScreenInfo OnFixedUpdate(GameTime, ScreenInfo, ScreenInfo, ScreenInfo) Only called when fixed framerate is enabled. Called in fixed interval. protected virtual void OnFixedUpdate(GameTime fixedTime, ScreenInfo game, ScreenInfo gameUi, ScreenInfo ui) Parameters fixedTime GameTime game ScreenInfo gameUi ScreenInfo ui ScreenInfo OnGameTextureResized(int, int) protected virtual void OnGameTextureResized(int w, int h) Parameters w int h int OnGamepadConnected(ShapeGamepadDevice) protected virtual void OnGamepadConnected(ShapeGamepadDevice gamepad) Parameters gamepad ShapeGamepadDevice OnGamepadDisconnected(ShapeGamepadDevice) protected virtual void OnGamepadDisconnected(ShapeGamepadDevice gamepad) Parameters gamepad ShapeGamepadDevice OnInputDeviceChanged(InputDeviceType, InputDeviceType) protected virtual void OnInputDeviceChanged(InputDeviceType prevDeviceType, InputDeviceType curDeviceType) Parameters prevDeviceType InputDeviceType curDeviceType InputDeviceType OnInterpolateFixedUpdate(GameTime, ScreenInfo, ScreenInfo, ScreenInfo, float) Only called when fixed framerate is enabled. Called every frame after all fixed update calls. protected virtual void OnInterpolateFixedUpdate(GameTime time, ScreenInfo game, ScreenInfo gameUi, ScreenInfo ui, float f) Parameters time GameTime game ScreenInfo gameUi ScreenInfo ui ScreenInfo f float OnMonitorChanged(MonitorInfo) protected virtual void OnMonitorChanged(MonitorInfo newMonitor) Parameters newMonitor MonitorInfo OnMouseEnabledChanged(bool) protected virtual void OnMouseEnabledChanged(bool enabled) Parameters enabled bool OnMouseEnteredScreen() protected virtual void OnMouseEnteredScreen() OnMouseLeftScreen() protected virtual void OnMouseLeftScreen() OnMouseVisibilityChanged(bool) protected virtual void OnMouseVisibilityChanged(bool visible) Parameters visible bool OnPausedChanged(bool) protected virtual void OnPausedChanged(bool newPaused) Parameters newPaused bool OnPreDrawGame(ScreenInfo) Called before SpawnArea DrawGame is called. protected virtual void OnPreDrawGame(ScreenInfo game) Parameters game ScreenInfo OnPreDrawGameUI(ScreenInfo) Called before SpawnArea DrawGameUI is called protected virtual void OnPreDrawGameUI(ScreenInfo ui) Parameters ui ScreenInfo OnUpdate(GameTime, ScreenInfo, ScreenInfo, ScreenInfo) Called every frame. Called before FixedUpdate if fixed framerate is enabled. protected virtual void OnUpdate(GameTime time, ScreenInfo game, ScreenInfo gameUi, ScreenInfo ui) Parameters time GameTime game ScreenInfo gameUi ScreenInfo ui ScreenInfo OnWindowFocusChanged(bool) protected virtual void OnWindowFocusChanged(bool focused) Parameters focused bool OnWindowFullscreenChanged(bool) protected virtual void OnWindowFullscreenChanged(bool fullscreen) Parameters fullscreen bool OnWindowHiddenChanged(bool) protected virtual void OnWindowHiddenChanged(bool hidden) Parameters hidden bool OnWindowMaximizeChanged(bool) protected virtual void OnWindowMaximizeChanged(bool maximized) Parameters maximized bool OnWindowMinimizedChanged(bool) protected virtual void OnWindowMinimizedChanged(bool minimized) Parameters minimized bool OnWindowPositionChanged(Vector2, Vector2) protected virtual void OnWindowPositionChanged(Vector2 oldPos, Vector2 newPos) Parameters oldPos Vector2 newPos Vector2 OnWindowSizeChanged(DimensionConversionFactors) protected virtual void OnWindowSizeChanged(DimensionConversionFactors conversionFactors) Parameters conversionFactors DimensionConversionFactors OnWindowTopmostChanged(bool) protected virtual void OnWindowTopmostChanged(bool topmost) Parameters topmost bool ResolveOnButtonPressed(InputEvent) public void ResolveOnButtonPressed(InputEvent e) Parameters e InputEvent ResolveOnButtonReleased(InputEvent) public void ResolveOnButtonReleased(InputEvent e) Parameters e InputEvent"
  },
  "api/ShapeEngine.Core.SceneEmpty.html": {
    "href": "api/ShapeEngine.Core.SceneEmpty.html",
    "title": "Class SceneEmpty | ShapeEngine",
    "summary": "Class SceneEmpty Namespace ShapeEngine.Core Assembly ShapeEngine.dll public sealed class SceneEmpty : Scene Inheritance object Scene SceneEmpty Inherited Members Scene.Active Scene.Game Scene.SpawnArea Scene.CollisionHandler Scene.Pathfinder Scene.Close() Scene.ResolveOnButtonPressed(InputEvent) Scene.ResolveOnButtonReleased(InputEvent) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors SceneEmpty() public SceneEmpty() Methods OnActivate(Scene) protected override void OnActivate(Scene oldScene) Parameters oldScene Scene OnDeactivate() protected override void OnDeactivate()"
  },
  "api/ShapeEngine.Core.Shake.html": {
    "href": "api/ShapeEngine.Core.Shake.html",
    "title": "Class Shake | ShapeEngine",
    "summary": "Class Shake Namespace ShapeEngine.Core Assembly ShapeEngine.dll public class Shake Inheritance object Shake Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Shake(int) Create a new shake class with the specified amount of float values that are affected. Each value has an additional factor for the intensity that can be set in the Start() function. public Shake(int valueCount) Parameters valueCount int How many float values to generate. Properties F public float F { get; } Property Value float Smoothness public float Smoothness { get; set; } Property Value float Methods Get(int) public float Get(int index) Parameters index int Returns float IsActive() public bool IsActive() Returns bool Start(float, float, params float[]) public void Start(float duration, float smoothness, params float[] newFactors) Parameters duration float smoothness float newFactors float[] Stop() public void Stop() Update(float) public void Update(float dt) Parameters dt float"
  },
  "api/ShapeEngine.Core.Shapes.Circle.html": {
    "href": "api/ShapeEngine.Core.Shapes.Circle.html",
    "title": "Struct Circle | ShapeEngine",
    "summary": "Struct Circle Namespace ShapeEngine.Core.Shapes Assembly ShapeEngine.dll public readonly struct Circle : IEquatable<Circle> Implements IEquatable<Circle> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ShapeCircleDrawing.Draw(Circle, ColorRgba) ShapeCircleDrawing.Draw(Circle, ColorRgba, int) ShapeCircleDrawing.Draw(Circle, ColorRgba, float, int) ShapeCircleDrawing.DrawLines(Circle, LineDrawingInfo, int) ShapeCircleDrawing.DrawLines(Circle, LineDrawingInfo, float, int) ShapeCircleDrawing.DrawLines(Circle, LineDrawingInfo, float, float) ShapeCircleDrawing.DrawLines(Circle, float, ColorRgba, float) ShapeCircleDrawing.DrawLines(Circle, float, int, ColorRgba) ShapeCircleDrawing.DrawLines(Circle, float, float, int, ColorRgba) ShapeCircleDrawing.DrawLinesPercentage(Circle, float, LineDrawingInfo, float, int) ShapeCircleDrawing.DrawLinesPercentage(Circle, float, LineDrawingInfo, float, float) ShapeCircleDrawing.DrawLinesPercentage(Circle, float, float, ColorRgba, float) ShapeCircleDrawing.DrawLinesPercentage(Circle, float, float, float, ColorRgba, LineCapType, int, float) ShapeCircleDrawing.DrawLinesPercentage(Circle, float, float, float, int, ColorRgba, LineCapType, int) ShapeCircleDrawing.DrawLinesScaled(Circle, LineDrawingInfo, int, float, float) ShapeCircleDrawing.DrawLinesScaled(Circle, LineDrawingInfo, float, int, float, float) ShapeCircleDrawing.DrawSector(Circle, float, float, int, ColorRgba) ShapeCircleDrawing.DrawSectorLines(Circle, float, float, LineDrawingInfo, bool, float) ShapeCircleDrawing.DrawSectorLines(Circle, float, float, int, LineDrawingInfo, bool) ShapeCircleDrawing.DrawSectorLines(Circle, float, float, float, LineDrawingInfo, bool, float) ShapeCircleDrawing.DrawSectorLines(Circle, float, float, float, int, LineDrawingInfo, bool) ShapeCircleDrawing.DrawSectorLinesScaled(Circle, LineDrawingInfo, float, float, float, int, float, float, bool) ShapeGappedDrawing.DrawGappedOutline(Circle, LineDrawingInfo, GappedOutlineDrawingInfo, float, int) ShapeStripedDrawing.DrawStriped(Circle, Circle, float, float, LineDrawingInfo, float) ShapeStripedDrawing.DrawStriped(Circle, Polygon, float, float, LineDrawingInfo, float) ShapeStripedDrawing.DrawStriped(Circle, Quad, float, float, LineDrawingInfo, float) ShapeStripedDrawing.DrawStriped(Circle, Rect, float, float, LineDrawingInfo, float) ShapeStripedDrawing.DrawStriped(Circle, Triangle, float, float, LineDrawingInfo, float) ShapeStripedDrawing.DrawStriped(Circle, CurveFloat, float, LineDrawingInfo) ShapeStripedDrawing.DrawStriped(Circle, CurveFloat, float, LineDrawingInfo, LineDrawingInfo) ShapeStripedDrawing.DrawStriped(Circle, CurveFloat, float, params LineDrawingInfo[]) ShapeStripedDrawing.DrawStriped(Circle, float, float, LineDrawingInfo, LineDrawingInfo) ShapeStripedDrawing.DrawStriped(Circle, float, float, LineDrawingInfo, float) ShapeStripedDrawing.DrawStriped(Circle, float, float, params LineDrawingInfo[]) ShapeUIDrawing.DrawOutlineBar(Circle, float, float, ColorRgba) ShapeUIDrawing.DrawOutlineBar(Circle, float, float, float, ColorRgba) Constructors Circle(Circle, Vector2) public Circle(Circle c, Vector2 center) Parameters c Circle center Vector2 Circle(Circle, float) public Circle(Circle c, float radius) Parameters c Circle radius float Circle(Rect) public Circle(Rect r) Parameters r Rect Circle(Transform2D) public Circle(Transform2D transform) Parameters transform Transform2D Circle(Vector2, float) public Circle(Vector2 center, float radius) Parameters center Vector2 radius float Circle(float, float, float) public Circle(float x, float y, float radius) Parameters x float y float radius float Fields Center public readonly Vector2 Center Field Value Vector2 Radius public readonly float Radius Field Value float Properties Bottom public Vector2 Bottom { get; } Property Value Vector2 BottomLeft public Vector2 BottomLeft { get; } Property Value Vector2 BottomRight public Vector2 BottomRight { get; } Property Value Vector2 Diameter public float Diameter { get; } Property Value float Left public Vector2 Left { get; } Property Value Vector2 Right public Vector2 Right { get; } Property Value Vector2 Top public Vector2 Top { get; } Property Value Vector2 TopLeft public Vector2 TopLeft { get; } Property Value Vector2 TopRight public Vector2 TopRight { get; } Property Value Vector2 Methods ApplyOffset(Transform2D) Moves the circle by offset.Position Changes the radius of the moved circle by transform.ScaledSize.Radius! public Circle ApplyOffset(Transform2D offset) Parameters offset Transform2D Returns Circle Ceiling() public Circle Ceiling() Returns Circle ChangePosition(Vector2) public Circle ChangePosition(Vector2 offset) Parameters offset Vector2 Returns Circle ChangePosition(float, float) public Circle ChangePosition(float x, float y) Parameters x float y float Returns Circle ChangeRadius(float) public Circle ChangeRadius(float amount) Parameters amount float Returns Circle ChangeRotation(float, Vector2) public Circle ChangeRotation(float rotationRad, Vector2 pivot) Parameters rotationRad float pivot Vector2 Returns Circle Combine(Circle) public Circle Combine(Circle other) Parameters other Circle Returns Circle Combine(params Circle[]) public static Circle Combine(params Circle[] circles) Parameters circles Circle[] Returns Circle ContainsCircleCircle(Vector2, float, Vector2, float) public static bool ContainsCircleCircle(Vector2 circle1Center, float circle1Radius, Vector2 circle2Center, float circle2Radius) Parameters circle1Center Vector2 circle1Radius float circle2Center Vector2 circle2Radius float Returns bool ContainsCirclePoint(Vector2, float, Vector2) public static bool ContainsCirclePoint(Vector2 circleCenter, float circleRadius, Vector2 p) Parameters circleCenter Vector2 circleRadius float p Vector2 Returns bool ContainsCirclePoints(Vector2, float, List<Vector2>) public static bool ContainsCirclePoints(Vector2 circleCenter, float circleRadius, List<Vector2> points) Parameters circleCenter Vector2 circleRadius float points List<Vector2> Returns bool ContainsCirclePoints(Vector2, float, Vector2, Vector2) public static bool ContainsCirclePoints(Vector2 circleCenter, float circleRadius, Vector2 a, Vector2 b) Parameters circleCenter Vector2 circleRadius float a Vector2 b Vector2 Returns bool ContainsCirclePoints(Vector2, float, Vector2, Vector2, Vector2) public static bool ContainsCirclePoints(Vector2 circleCenter, float circleRadius, Vector2 a, Vector2 b, Vector2 c) Parameters circleCenter Vector2 circleRadius float a Vector2 b Vector2 c Vector2 Returns bool ContainsCirclePoints(Vector2, float, Vector2, Vector2, Vector2, Vector2) public static bool ContainsCirclePoints(Vector2 circleCenter, float circleRadius, Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters circleCenter Vector2 circleRadius float a Vector2 b Vector2 c Vector2 d Vector2 Returns bool ContainsCirclePolygon(Vector2, float, List<Vector2>) public static bool ContainsCirclePolygon(Vector2 circleCenter, float circleRadius, List<Vector2> polygon) Parameters circleCenter Vector2 circleRadius float polygon List<Vector2> Returns bool ContainsCirclePolyline(Vector2, float, List<Vector2>) public static bool ContainsCirclePolyline(Vector2 circleCenter, float circleRadius, List<Vector2> polyline) Parameters circleCenter Vector2 circleRadius float polyline List<Vector2> Returns bool ContainsCircleQuad(Vector2, float, Vector2, Vector2, Vector2, Vector2) public static bool ContainsCircleQuad(Vector2 circleCenter, float circleRadius, Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters circleCenter Vector2 circleRadius float a Vector2 b Vector2 c Vector2 d Vector2 Returns bool ContainsCircleRect(Vector2, float, Vector2, Vector2, Vector2, Vector2) public static bool ContainsCircleRect(Vector2 circleCenter, float circleRadius, Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters circleCenter Vector2 circleRadius float a Vector2 b Vector2 c Vector2 d Vector2 Returns bool ContainsCircleSegment(Vector2, float, Vector2, Vector2) public static bool ContainsCircleSegment(Vector2 circleCenter, float circleRadius, Vector2 segmentStart, Vector2 segmentEnd) Parameters circleCenter Vector2 circleRadius float segmentStart Vector2 segmentEnd Vector2 Returns bool ContainsCircleTriangle(Vector2, float, Vector2, Vector2, Vector2) public static bool ContainsCircleTriangle(Vector2 circleCenter, float circleRadius, Vector2 a, Vector2 b, Vector2 c) Parameters circleCenter Vector2 circleRadius float a Vector2 b Vector2 c Vector2 Returns bool ContainsCollider(Collider) public bool ContainsCollider(Collider collider) Parameters collider Collider Returns bool ContainsCollisionObject(CollisionObject) public bool ContainsCollisionObject(CollisionObject collisionObject) Parameters collisionObject CollisionObject Returns bool ContainsPoint(Vector2) public bool ContainsPoint(Vector2 p) Parameters p Vector2 Returns bool ContainsPointSector(Vector2, Vector2, float) public bool ContainsPointSector(Vector2 p, Vector2 dir, float sectorAngleRad) Parameters p Vector2 dir Vector2 sectorAngleRad float Returns bool ContainsPointSector(Vector2, float, float) public bool ContainsPointSector(Vector2 p, float rotationRad, float sectorAngleRad) Parameters p Vector2 rotationRad float sectorAngleRad float Returns bool ContainsPoints(List<Vector2>) public bool ContainsPoints(List<Vector2> points) Parameters points List<Vector2> Returns bool ContainsPoints(Vector2, Vector2) public bool ContainsPoints(Vector2 a, Vector2 b) Parameters a Vector2 b Vector2 Returns bool ContainsPoints(Vector2, Vector2, Vector2) public bool ContainsPoints(Vector2 a, Vector2 b, Vector2 c) Parameters a Vector2 b Vector2 c Vector2 Returns bool ContainsPoints(Vector2, Vector2, Vector2, Vector2) public bool ContainsPoints(Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters a Vector2 b Vector2 c Vector2 d Vector2 Returns bool ContainsShape(Circle) public bool ContainsShape(Circle circle) Parameters circle Circle Returns bool ContainsShape(Points) public bool ContainsShape(Points points) Parameters points Points Returns bool ContainsShape(Polygon) public bool ContainsShape(Polygon polygon) Parameters polygon Polygon Returns bool ContainsShape(Polyline) public bool ContainsShape(Polyline polyline) Parameters polyline Polyline Returns bool ContainsShape(Quad) public bool ContainsShape(Quad quad) Parameters quad Quad Returns bool ContainsShape(Rect) public bool ContainsShape(Rect rect) Parameters rect Rect Returns bool ContainsShape(Segment) public bool ContainsShape(Segment segment) Parameters segment Segment Returns bool ContainsShape(Triangle) public bool ContainsShape(Triangle triangle) Parameters triangle Triangle Returns bool Equals(Circle) Indicates whether the current object is equal to another object of the same type. public bool Equals(Circle other) Parameters other Circle An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. Floor() public Circle Floor() Returns Circle GetArea() public float GetArea() Returns float GetBoundingBox() public Rect GetBoundingBox() Returns Rect GetCircumference() public float GetCircumference() Returns float GetCircumference(float) public static float GetCircumference(float radius) Parameters radius float Returns float GetCircumferenceSquared() public float GetCircumferenceSquared() Returns float GetClosestPoint(Circle) public ClosestPointResult GetClosestPoint(Circle other) Parameters other Circle Returns ClosestPointResult GetClosestPoint(Line) public ClosestPointResult GetClosestPoint(Line other) Parameters other Line Returns ClosestPointResult GetClosestPoint(Polygon) public ClosestPointResult GetClosestPoint(Polygon other) Parameters other Polygon Returns ClosestPointResult GetClosestPoint(Polyline) public ClosestPointResult GetClosestPoint(Polyline other) Parameters other Polyline Returns ClosestPointResult GetClosestPoint(Quad) public ClosestPointResult GetClosestPoint(Quad other) Parameters other Quad Returns ClosestPointResult GetClosestPoint(Ray) public ClosestPointResult GetClosestPoint(Ray other) Parameters other Ray Returns ClosestPointResult GetClosestPoint(Rect) public ClosestPointResult GetClosestPoint(Rect other) Parameters other Rect Returns ClosestPointResult GetClosestPoint(Segment) public ClosestPointResult GetClosestPoint(Segment other) Parameters other Segment Returns ClosestPointResult GetClosestPoint(Segments) public ClosestPointResult GetClosestPoint(Segments segments) Parameters segments Segments Returns ClosestPointResult GetClosestPoint(Triangle) public ClosestPointResult GetClosestPoint(Triangle other) Parameters other Triangle Returns ClosestPointResult GetClosestPoint(Vector2, out float) public CollisionPoint GetClosestPoint(Vector2 p, out float disSquared) Parameters p Vector2 disSquared float Returns CollisionPoint GetClosestPointCircleCircle(Vector2, float, Vector2, float, out float) public static (Vector2 self, Vector2 other) GetClosestPointCircleCircle(Vector2 circle1Center, float circle1Radius, Vector2 circle2Center, float circle2Radius, out float disSquared) Parameters circle1Center Vector2 circle1Radius float circle2Center Vector2 circle2Radius float disSquared float Returns (Vector2 self, Vector2 other) GetClosestPointCircleLine(Vector2, float, Vector2, Vector2, out float) public static (Vector2 self, Vector2 other) GetClosestPointCircleLine(Vector2 circleCenter, float circleRadius, Vector2 linePoint, Vector2 lineDirection, out float disSquared) Parameters circleCenter Vector2 circleRadius float linePoint Vector2 lineDirection Vector2 disSquared float Returns (Vector2 self, Vector2 other) GetClosestPointCirclePoint(Vector2, float, Vector2, out float) public static Vector2 GetClosestPointCirclePoint(Vector2 center, float radius, Vector2 p, out float disSquared) Parameters center Vector2 radius float p Vector2 disSquared float Returns Vector2 GetClosestPointCircleRay(Vector2, float, Vector2, Vector2, out float) public static (Vector2 self, Vector2 other) GetClosestPointCircleRay(Vector2 circleCenter, float circleRadius, Vector2 rayPoint, Vector2 rayDirection, out float disSquared) Parameters circleCenter Vector2 circleRadius float rayPoint Vector2 rayDirection Vector2 disSquared float Returns (Vector2 self, Vector2 other) GetClosestPointCircleSegment(Vector2, float, Vector2, Vector2, out float) public static (Vector2 self, Vector2 other) GetClosestPointCircleSegment(Vector2 circleCenter, float circleRadius, Vector2 segmentStart, Vector2 segmentEnd, out float disSquared) Parameters circleCenter Vector2 circleRadius float segmentStart Vector2 segmentEnd Vector2 disSquared float Returns (Vector2 self, Vector2 other) GetClosestVertex(Vector2, out float) public Vector2 GetClosestVertex(Vector2 p, out float disSquared) Parameters p Vector2 disSquared float Returns Vector2 GetCorners() public (Vector2 top, Vector2 right, Vector2 bottom, Vector2 left) GetCorners() Returns (Vector2 top, Vector2 right, Vector2 bottom, Vector2 left) GetCornersList() public List<Vector2> GetCornersList() Returns List<Vector2> GetEdges(int) public Segments GetEdges(int pointCount = 16) Parameters pointCount int Returns Segments GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. GetInterpolatedEdgePoints(float, int) public Points? GetInterpolatedEdgePoints(float t, int vertexCount) Parameters t float vertexCount int Returns Points GetInterpolatedEdgePoints(float, int, int) public Points? GetInterpolatedEdgePoints(float t, int steps, int vertexCount) Parameters t float steps int vertexCount int Returns Points GetPoint(float, float) public Vector2 GetPoint(float angleRad, float f) Parameters angleRad float f float Returns Vector2 GetProjectedShapePoints(Vector2, int) public Points? GetProjectedShapePoints(Vector2 v, int pointCount = 8) Parameters v Vector2 pointCount int Returns Points GetRandomEdge() public Segment GetRandomEdge() Returns Segment GetRandomPoint() public Vector2 GetRandomPoint() Returns Vector2 GetRandomPointOnEdge() public Vector2 GetRandomPointOnEdge() Returns Vector2 GetRandomPoints(int) public Points GetRandomPoints(int amount) Parameters amount int Returns Points GetRandomPointsOnEdge(int) public Points GetRandomPointsOnEdge(int amount) Parameters amount int Returns Points GetRandomVertex() public Vector2 GetRandomVertex() Returns Vector2 GetRectCorners() public (Vector2 tl, Vector2 tr, Vector2 br, Vector2 bl) GetRectCorners() Returns (Vector2 top, Vector2 right, Vector2 bottom, Vector2 left) GetRectCornersList() public List<Vector2> GetRectCornersList() Returns List<Vector2> GetVertex(float, float, int) public Vector2 GetVertex(float angleRad, float angleStepRad, int index) Parameters angleRad float angleStepRad float index int Returns Vector2 GetVertices(int) public Points GetVertices(int count = 16) Parameters count int Returns Points Intersect(Collider) public CollisionPoints? Intersect(Collider collider) Parameters collider Collider Returns CollisionPoints Intersect(Collider, ref CollisionPoints, bool) public int Intersect(Collider collider, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters collider Collider points CollisionPoints returnAfterFirstValid bool Returns int IntersectCircleCircle(Vector2, float, Vector2, float) public static (CollisionPoint a, CollisionPoint b) IntersectCircleCircle(Vector2 aPos, float aRadius, Vector2 bPos, float bRadius) Parameters aPos Vector2 aRadius float bPos Vector2 bRadius float Returns (CollisionPoint a, CollisionPoint b) IntersectCircleCircle(float, float, float, float, float, float) public static (CollisionPoint a, CollisionPoint b) IntersectCircleCircle(float cx0, float cy0, float radius0, float cx1, float cy1, float radius1) Parameters cx0 float cy0 float radius0 float cx1 float cy1 float radius1 float Returns (CollisionPoint a, CollisionPoint b) IntersectCircleLine(Vector2, float, Vector2, Vector2, Vector2) public static (CollisionPoint a, CollisionPoint b) IntersectCircleLine(Vector2 circleCenter, float circleRadius, Vector2 linePoint, Vector2 lineDirection, Vector2 lineNormal) Parameters circleCenter Vector2 circleRadius float linePoint Vector2 lineDirection Vector2 lineNormal Vector2 Returns (CollisionPoint a, CollisionPoint b) IntersectCircleRay(Vector2, float, Vector2, Vector2, Vector2) public static (CollisionPoint a, CollisionPoint b) IntersectCircleRay(Vector2 circleCenter, float circleRadius, Vector2 rayPoint, Vector2 rayDirection, Vector2 rayNormal) Parameters circleCenter Vector2 circleRadius float rayPoint Vector2 rayDirection Vector2 rayNormal Vector2 Returns (CollisionPoint a, CollisionPoint b) IntersectCircleSegment(Vector2, float, Vector2, Vector2) public static (CollisionPoint a, CollisionPoint b) IntersectCircleSegment(Vector2 circlePos, float circleRadius, Vector2 start, Vector2 end) Parameters circlePos Vector2 circleRadius float start Vector2 end Vector2 Returns (CollisionPoint a, CollisionPoint b) IntersectCircleSegment(float, float, float, float, float, float, float) public static (CollisionPoint a, CollisionPoint b) IntersectCircleSegment(float circleX, float circleY, float circleRadius, float segStartX, float segStartY, float segEndX, float segEndY) Parameters circleX float circleY float circleRadius float segStartX float segStartY float segEndX float segEndY float Returns (CollisionPoint a, CollisionPoint b) IntersectShape(Circle) public CollisionPoints? IntersectShape(Circle c) Parameters c Circle Returns CollisionPoints IntersectShape(Circle, ref CollisionPoints, bool) public int IntersectShape(Circle c, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters c Circle points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Line) public CollisionPoints? IntersectShape(Line l) Parameters l Line Returns CollisionPoints IntersectShape(Line, ref CollisionPoints, bool) public int IntersectShape(Line l, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters l Line points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Polygon) public CollisionPoints? IntersectShape(Polygon p) Parameters p Polygon Returns CollisionPoints IntersectShape(Polygon, ref CollisionPoints, bool) public int IntersectShape(Polygon p, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters p Polygon points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Polyline) public CollisionPoints? IntersectShape(Polyline pl) Parameters pl Polyline Returns CollisionPoints IntersectShape(Polyline, ref CollisionPoints, bool) public int IntersectShape(Polyline pl, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters pl Polyline points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Quad) public CollisionPoints? IntersectShape(Quad q) Parameters q Quad Returns CollisionPoints IntersectShape(Quad, ref CollisionPoints, bool) public int IntersectShape(Quad q, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters q Quad points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Ray) public CollisionPoints? IntersectShape(Ray r) Parameters r Ray Returns CollisionPoints IntersectShape(Ray, ref CollisionPoints, bool) public int IntersectShape(Ray r, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters r Ray points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Rect) public CollisionPoints? IntersectShape(Rect r) Parameters r Rect Returns CollisionPoints IntersectShape(Rect, ref CollisionPoints, bool) public int IntersectShape(Rect r, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters r Rect points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Segment) public CollisionPoints? IntersectShape(Segment s) Parameters s Segment Returns CollisionPoints IntersectShape(Segment, ref CollisionPoints, bool) public int IntersectShape(Segment s, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters s Segment points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Segments) public CollisionPoints? IntersectShape(Segments shape) Parameters shape Segments Returns CollisionPoints IntersectShape(Segments, ref CollisionPoints, bool) public int IntersectShape(Segments shape, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters shape Segments points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Triangle) public CollisionPoints? IntersectShape(Triangle t) Parameters t Triangle Returns CollisionPoints IntersectShape(Triangle, ref CollisionPoints, bool) public int IntersectShape(Triangle t, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters t Triangle points CollisionPoints returnAfterFirstValid bool Returns int Overlap(Collider) public bool Overlap(Collider collider) Parameters collider Collider Returns bool OverlapCircle(Vector2, float) public bool OverlapCircle(Vector2 center, float radius) Parameters center Vector2 radius float Returns bool OverlapCircleCircle(Vector2, float, Vector2, float) public static bool OverlapCircleCircle(Vector2 aPos, float aRadius, Vector2 bPos, float bRadius) Parameters aPos Vector2 aRadius float bPos Vector2 bRadius float Returns bool OverlapCircleLine(Vector2, float, Vector2, Vector2) public static bool OverlapCircleLine(Vector2 cPos, float cRadius, Vector2 linePos, Vector2 lineDir) Parameters cPos Vector2 cRadius float linePos Vector2 lineDir Vector2 Returns bool OverlapCirclePolygon(Vector2, float, List<Vector2>) public static bool OverlapCirclePolygon(Vector2 center, float radius, List<Vector2> points) Parameters center Vector2 radius float points List<Vector2> Returns bool OverlapCirclePolyline(Vector2, float, List<Vector2>) public static bool OverlapCirclePolyline(Vector2 center, float radius, List<Vector2> points) Parameters center Vector2 radius float points List<Vector2> Returns bool OverlapCircleQuad(Vector2, float, Vector2, Vector2, Vector2, Vector2) public static bool OverlapCircleQuad(Vector2 center, float radius, Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters center Vector2 radius float a Vector2 b Vector2 c Vector2 d Vector2 Returns bool OverlapCircleRay(Vector2, float, Vector2, Vector2) public static bool OverlapCircleRay(Vector2 cPos, float cRadius, Vector2 rayPos, Vector2 rayDir) Parameters cPos Vector2 cRadius float rayPos Vector2 rayDir Vector2 Returns bool OverlapCircleRect(Vector2, float, Vector2, Vector2, Vector2, Vector2) public static bool OverlapCircleRect(Vector2 center, float radius, Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters center Vector2 radius float a Vector2 b Vector2 c Vector2 d Vector2 Returns bool OverlapCircleSegment(Vector2, float, Vector2, Vector2) public static bool OverlapCircleSegment(Vector2 cPos, float cRadius, Vector2 segStart, Vector2 segEnd) Parameters cPos Vector2 cRadius float segStart Vector2 segEnd Vector2 Returns bool OverlapCircleSegments(Vector2, float, List<Segment>) public static bool OverlapCircleSegments(Vector2 center, float radius, List<Segment> segments) Parameters center Vector2 radius float segments List<Segment> Returns bool OverlapCircleTriangle(Vector2, float, Vector2, Vector2, Vector2) public static bool OverlapCircleTriangle(Vector2 center, float radius, Vector2 a, Vector2 b, Vector2 c) Parameters center Vector2 radius float a Vector2 b Vector2 c Vector2 Returns bool OverlapLine(Vector2, Vector2) public bool OverlapLine(Vector2 linePos, Vector2 lineDir) Parameters linePos Vector2 lineDir Vector2 Returns bool OverlapPolygon(List<Vector2>) public bool OverlapPolygon(List<Vector2> points) Parameters points List<Vector2> Returns bool OverlapPolyline(List<Vector2>) public bool OverlapPolyline(List<Vector2> points) Parameters points List<Vector2> Returns bool OverlapQuad(Vector2, Vector2, Vector2, Vector2) public bool OverlapQuad(Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters a Vector2 b Vector2 c Vector2 d Vector2 Returns bool OverlapRay(Vector2, Vector2) public bool OverlapRay(Vector2 rayPos, Vector2 rayDir) Parameters rayPos Vector2 rayDir Vector2 Returns bool OverlapRect(Vector2, Vector2, Vector2, Vector2) public bool OverlapRect(Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters a Vector2 b Vector2 c Vector2 d Vector2 Returns bool OverlapSegment(Vector2, Vector2) public bool OverlapSegment(Vector2 start, Vector2 end) Parameters start Vector2 end Vector2 Returns bool OverlapSegments(List<Segment>) public bool OverlapSegments(List<Segment> segments) Parameters segments List<Segment> Returns bool OverlapShape(Circle) public bool OverlapShape(Circle b) Parameters b Circle Returns bool OverlapShape(Line) public bool OverlapShape(Line l) Parameters l Line Returns bool OverlapShape(Polygon) public bool OverlapShape(Polygon poly) Parameters poly Polygon Returns bool OverlapShape(Polyline) public bool OverlapShape(Polyline pl) Parameters pl Polyline Returns bool OverlapShape(Quad) public bool OverlapShape(Quad q) Parameters q Quad Returns bool OverlapShape(Ray) public bool OverlapShape(Ray r) Parameters r Ray Returns bool OverlapShape(Rect) public bool OverlapShape(Rect r) Parameters r Rect Returns bool OverlapShape(Segment) public bool OverlapShape(Segment s) Parameters s Segment Returns bool OverlapShape(Segments) public bool OverlapShape(Segments segments) Parameters segments Segments Returns bool OverlapShape(Triangle) public bool OverlapShape(Triangle t) Parameters t Triangle Returns bool OverlapTriangle(Vector2, Vector2, Vector2) public bool OverlapTriangle(Vector2 a, Vector2 b, Vector2 c) Parameters a Vector2 b Vector2 c Vector2 Returns bool ProjectShape(Vector2, int) public Polygon? ProjectShape(Vector2 v, int pointCount = 8) Parameters v Vector2 pointCount int Returns Polygon Round() public Circle Round() Returns Circle ScaleRadius(float) public Circle ScaleRadius(float scale) Parameters scale float Returns Circle SetPosition(Vector2) public Circle SetPosition(Vector2 position) Parameters position Vector2 Returns Circle SetRadius(float) public Circle SetRadius(float radius) Parameters radius float Returns Circle SetTransform(Transform2D) Moves the circle to transform.Position Set the radius of the moved circle to ScaledSize.Radius. public Circle SetTransform(Transform2D transform) Parameters transform Transform2D Returns Circle ToPolygon(int) public Polygon ToPolygon(int pointCount = 16) Parameters pointCount int Returns Polygon ToPolyline(int) public Polyline ToPolyline(int pointCount = 16) Parameters pointCount int Returns Polyline Triangulate() public Triangulation Triangulate() Returns Triangulation Truncate() public Circle Truncate() Returns Circle Operators operator +(Circle, Circle) public static Circle operator +(Circle left, Circle right) Parameters left Circle right Circle Returns Circle operator +(Circle, Vector2) public static Circle operator +(Circle left, Vector2 right) Parameters left Circle right Vector2 Returns Circle operator +(Circle, float) public static Circle operator +(Circle left, float right) Parameters left Circle right float Returns Circle operator /(Circle, Circle) public static Circle operator /(Circle left, Circle right) Parameters left Circle right Circle Returns Circle operator /(Circle, Vector2) public static Circle operator /(Circle left, Vector2 right) Parameters left Circle right Vector2 Returns Circle operator /(Circle, float) public static Circle operator /(Circle left, float right) Parameters left Circle right float Returns Circle operator ==(Circle, Circle) public static bool operator ==(Circle left, Circle right) Parameters left Circle right Circle Returns bool operator !=(Circle, Circle) public static bool operator !=(Circle left, Circle right) Parameters left Circle right Circle Returns bool operator *(Circle, Circle) public static Circle operator *(Circle left, Circle right) Parameters left Circle right Circle Returns Circle operator *(Circle, Vector2) public static Circle operator *(Circle left, Vector2 right) Parameters left Circle right Vector2 Returns Circle operator *(Circle, float) public static Circle operator *(Circle left, float right) Parameters left Circle right float Returns Circle operator -(Circle, Circle) public static Circle operator -(Circle left, Circle right) Parameters left Circle right Circle Returns Circle operator -(Circle, Vector2) public static Circle operator -(Circle left, Vector2 right) Parameters left Circle right Vector2 Returns Circle operator -(Circle, float) public static Circle operator -(Circle left, float right) Parameters left Circle right float Returns Circle"
  },
  "api/ShapeEngine.Core.Shapes.CircleSector.html": {
    "href": "api/ShapeEngine.Core.Shapes.CircleSector.html",
    "title": "Class CircleSector | ShapeEngine",
    "summary": "Class CircleSector Namespace ShapeEngine.Core.Shapes Assembly ShapeEngine.dll public class CircleSector Inheritance object CircleSector Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CircleSector(Transform2D, float, int) public CircleSector(Transform2D transform, float angleSectorRad, int arcPoints = 3) Parameters transform Transform2D angleSectorRad float arcPoints int CircleSector(Vector2, float, Vector2, float, int) public CircleSector(Vector2 center, float radius, Vector2 direction, float angleSectorRad, int arcPoints = 3) Parameters center Vector2 radius float direction Vector2 angleSectorRad float arcPoints int CircleSector(Vector2, float, float, float, int) public CircleSector(Vector2 center, float radius, float rotationRad, float angleSectorRad, int arcPoints = 3) Parameters center Vector2 radius float rotationRad float angleSectorRad float arcPoints int Properties AngleSectorRad How wide the circle sector is. public float AngleSectorRad { get; set; } Property Value float ArcPoints How many points are used for the circle sector arc. 0 creates a triangle where the arc is a straight line. public int ArcPoints { get; set; } Property Value int Center Represents Transform.Position public Vector2 Center { get; set; } Property Value Vector2 Radius Represents Transform.ScaledSize.Radius public float Radius { get; set; } Property Value float RotationRad Represents Transform.RotationRad public float RotationRad { get; set; } Property Value float Transform public Transform2D Transform { get; set; } Property Value Transform2D Methods Copy() public CircleSector Copy() Returns CircleSector GeneratePoints() public Points? GeneratePoints() Returns Points GeneratePoints(Vector2, float, float, float, int) public static Points? GeneratePoints(Vector2 center, float radius, float rotationRad, float angleSectorRad, int accuracy = 3) Parameters center Vector2 radius float rotationRad float angleSectorRad float accuracy int Returns Points GeneratePolygon() public Polygon? GeneratePolygon() Returns Polygon GeneratePolygon(Vector2, float, float, float, int) public static Polygon? GeneratePolygon(Vector2 center, float radius, float rotationRad, float angleSectorRad, int accuracy = 3) Parameters center Vector2 radius float rotationRad float angleSectorRad float accuracy int Returns Polygon GenerateSegments() public Segments? GenerateSegments() Returns Segments GenerateSegments(Vector2, float, float, float, int) public static Segments? GenerateSegments(Vector2 center, float radius, float rotationRad, float angleSectorRad, int accuracy = 3) Parameters center Vector2 radius float rotationRad float angleSectorRad float accuracy int Returns Segments UpdatePolygon(Polygon) Clears the given polygon and fills it with new points. public bool UpdatePolygon(Polygon polygon) Parameters polygon Polygon Returns bool Returns true if new points were generated"
  },
  "api/ShapeEngine.Core.Shapes.CircleShape.html": {
    "href": "api/ShapeEngine.Core.Shapes.CircleShape.html",
    "title": "Class CircleShape | ShapeEngine",
    "summary": "Class CircleShape Namespace ShapeEngine.Core.Shapes Assembly ShapeEngine.dll public class CircleShape : ShapeContainer, IShape Inheritance object Shape ShapeContainer CircleShape Implements IShape Inherited Members ShapeContainer.Parent ShapeContainer.ChangeParent(ShapeContainer) ShapeContainer.AddChild(ShapeContainer) ShapeContainer.RemoveChild(ShapeContainer) ShapeContainer.InitializeShape(Transform2D) ShapeContainer.UpdateShape(float, Transform2D) ShapeContainer.DrawShape() ShapeContainer.OnChildInitialized(ShapeContainer) ShapeContainer.OnChildUpdated(ShapeContainer) ShapeContainer.OnChildDrawn(ShapeContainer) ShapeContainer.OnUpdateFinished() ShapeContainer.OnDrawFinished() ShapeContainer.OnAddedToParent(ShapeContainer) ShapeContainer.OnRemovedFromParent(ShapeContainer) Shape.Moves Shape.Rotates Shape.Scales Shape.Offset Shape.CurTransform Shape.PrevTransform Shape.RecalculateShape() Shape.OnInitialized() Shape.OnUpdate(float) Shape.OnDraw() Shape.OnShapeTransformChanged(bool) Shape.UpdateTransform(Transform2D) Shape.GetRayShape() Shape.GetLineShape() Shape.GetSegmentShape() Shape.GetTriangleShape() Shape.GetQuadShape() Shape.GetRectShape() Shape.GetPolygonShape() Shape.GetPolylineShape() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CircleShape(Transform2D) public CircleShape(Transform2D offset) Parameters offset Transform2D Properties Center public Vector2 Center { get; } Property Value Vector2 Radius public float Radius { get; } Property Value float Methods GetCircleShape() public override Circle GetCircleShape() Returns Circle GetShapeType() public override ShapeType GetShapeType() Returns ShapeType"
  },
  "api/ShapeEngine.Core.Shapes.FractureHelper.html": {
    "href": "api/ShapeEngine.Core.Shapes.FractureHelper.html",
    "title": "Class FractureHelper | ShapeEngine",
    "summary": "Class FractureHelper Namespace ShapeEngine.Core.Shapes Assembly ShapeEngine.dll public class FractureHelper Inheritance object FractureHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FractureHelper(float, float, float, float) public FractureHelper(float minArea, float maxArea, float keepChance = 0.5, float narrowValue = 0.2) Parameters minArea float maxArea float keepChance float narrowValue float Properties KeepChance public float KeepChance { get; set; } Property Value float MaxArea public float MaxArea { get; set; } Property Value float MinArea public float MinArea { get; set; } Property Value float NarrowValue public float NarrowValue { get; set; } Property Value float Methods Fracture(Polygon, Polygon) public FractureInfo Fracture(Polygon shape, Polygon cutShape) Parameters shape Polygon cutShape Polygon Returns FractureInfo"
  },
  "api/ShapeEngine.Core.Shapes.FractureInfo.html": {
    "href": "api/ShapeEngine.Core.Shapes.FractureInfo.html",
    "title": "Class FractureInfo | ShapeEngine",
    "summary": "Class FractureInfo Namespace ShapeEngine.Core.Shapes Assembly ShapeEngine.dll public class FractureInfo Inheritance object FractureInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FractureInfo(Polygons, Polygons, Triangulation) public FractureInfo(Polygons newShapes, Polygons cutouts, Triangulation pieces) Parameters newShapes Polygons cutouts Polygons pieces Triangulation Fields Cutouts public readonly Polygons Cutouts Field Value Polygons NewShapes public readonly Polygons NewShapes Field Value Polygons Pieces public readonly Triangulation Pieces Field Value Triangulation"
  },
  "api/ShapeEngine.Core.Shapes.Line.html": {
    "href": "api/ShapeEngine.Core.Shapes.Line.html",
    "title": "Struct Line | ShapeEngine",
    "summary": "Struct Line Namespace ShapeEngine.Core.Shapes Assembly ShapeEngine.dll public readonly struct Line Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ShapeLineDrawing.Draw(Line, float, float, ColorRgba) Constructors Line() public Line() Line(Vector2, bool) public Line(Vector2 direction, bool flippedNormal = false) Parameters direction Vector2 flippedNormal bool Line(Vector2, Vector2, bool) public Line(Vector2 point, Vector2 direction, bool flippedNormal = false) Parameters point Vector2 direction Vector2 flippedNormal bool Line(float, float, float, float, bool) public Line(float x, float y, float dx, float dy, bool flippedNormal = false) Parameters x float y float dx float dy float flippedNormal bool Fields Direction public readonly Vector2 Direction Field Value Vector2 MaxLength public static float MaxLength Field Value float Normal public readonly Vector2 Normal Field Value Vector2 Point public readonly Vector2 Point Field Value Vector2 Properties IsValid public bool IsValid { get; } Property Value bool Methods ChangeDirection(Vector2) public Line ChangeDirection(Vector2 amount) Parameters amount Vector2 Returns Line ChangePoint(Vector2) public Line ChangePoint(Vector2 amount) Parameters amount Vector2 Returns Line ChangeRotation(float) public Line ChangeRotation(float angleRad) Parameters angleRad float Returns Line FlipNormal() public Line FlipNormal() Returns Line GetBoundingBox() public Rect GetBoundingBox() Returns Rect GetBoundingBox(float) public Rect GetBoundingBox(float length) Parameters length float Returns Rect GetClosestPoint(Circle) public ClosestPointResult GetClosestPoint(Circle other) Parameters other Circle Returns ClosestPointResult GetClosestPoint(Line) public ClosestPointResult GetClosestPoint(Line other) Parameters other Line Returns ClosestPointResult GetClosestPoint(Polygon) public ClosestPointResult GetClosestPoint(Polygon other) Parameters other Polygon Returns ClosestPointResult GetClosestPoint(Polyline) public ClosestPointResult GetClosestPoint(Polyline other) Parameters other Polyline Returns ClosestPointResult GetClosestPoint(Quad) public ClosestPointResult GetClosestPoint(Quad other) Parameters other Quad Returns ClosestPointResult GetClosestPoint(Ray) public ClosestPointResult GetClosestPoint(Ray other) Parameters other Ray Returns ClosestPointResult GetClosestPoint(Rect) public ClosestPointResult GetClosestPoint(Rect other) Parameters other Rect Returns ClosestPointResult GetClosestPoint(Segment) public ClosestPointResult GetClosestPoint(Segment other) Parameters other Segment Returns ClosestPointResult GetClosestPoint(Segments) public ClosestPointResult GetClosestPoint(Segments segments) Parameters segments Segments Returns ClosestPointResult GetClosestPoint(Triangle) public ClosestPointResult GetClosestPoint(Triangle other) Parameters other Triangle Returns ClosestPointResult GetClosestPoint(Vector2, out float) public CollisionPoint GetClosestPoint(Vector2 point, out float disSquared) Parameters point Vector2 disSquared float Returns CollisionPoint GetClosestPointLineCircle(Vector2, Vector2, Vector2, float, out float) public static (Vector2 self, Vector2 other) GetClosestPointLineCircle(Vector2 linePoint, Vector2 lineDirection, Vector2 circleCenter, float circleRadius, out float disSquared) Parameters linePoint Vector2 lineDirection Vector2 circleCenter Vector2 circleRadius float disSquared float Returns (Vector2 self, Vector2 other) GetClosestPointLineLine(Vector2, Vector2, Vector2, Vector2, out float) public static (Vector2 self, Vector2 other) GetClosestPointLineLine(Vector2 line1Point, Vector2 line1Direction, Vector2 line2Point, Vector2 line2Direction, out float disSquared) Parameters line1Point Vector2 line1Direction Vector2 line2Point Vector2 line2Direction Vector2 disSquared float Returns (Vector2 self, Vector2 other) GetClosestPointLinePoint(Vector2, Vector2, Vector2, out float) public static Vector2 GetClosestPointLinePoint(Vector2 linePoint, Vector2 lineDirection, Vector2 point, out float disSquared) Parameters linePoint Vector2 lineDirection Vector2 point Vector2 disSquared float Returns Vector2 GetClosestPointLineRay(Vector2, Vector2, Vector2, Vector2, out float) public static (Vector2 self, Vector2 other) GetClosestPointLineRay(Vector2 linePoint, Vector2 lineDirection, Vector2 rayPoint, Vector2 rayDirection, out float disSquared) Parameters linePoint Vector2 lineDirection Vector2 rayPoint Vector2 rayDirection Vector2 disSquared float Returns (Vector2 self, Vector2 other) GetClosestPointLineSegment(Vector2, Vector2, Vector2, Vector2, out float) public static (Vector2 self, Vector2 other) GetClosestPointLineSegment(Vector2 linePoint, Vector2 lineDirection, Vector2 segmentStart, Vector2 segmentEnd, out float disSquared) Parameters linePoint Vector2 lineDirection Vector2 segmentStart Vector2 segmentEnd Vector2 disSquared float Returns (Vector2 self, Vector2 other) GetNormal(Vector2, bool) public static Vector2 GetNormal(Vector2 direction, bool flippedNormal) Parameters direction Vector2 flippedNormal bool Returns Vector2 Intersect(Collider) public CollisionPoints? Intersect(Collider collider) Parameters collider Collider Returns CollisionPoints Intersect(Collider, ref CollisionPoints, bool) public int Intersect(Collider collider, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters collider Collider points CollisionPoints returnAfterFirstValid bool Returns int IntersectCircle(Circle) public (CollisionPoint a, CollisionPoint b) IntersectCircle(Circle otherCircle) Parameters otherCircle Circle Returns (CollisionPoint a, CollisionPoint b) IntersectCircle(Vector2, float) public (CollisionPoint a, CollisionPoint b) IntersectCircle(Vector2 circleCenter, float circleRadius) Parameters circleCenter Vector2 circleRadius float Returns (CollisionPoint a, CollisionPoint b) IntersectLine(Line) public CollisionPoint IntersectLine(Line otherLine) Parameters otherLine Line Returns CollisionPoint IntersectLine(Vector2, Vector2) public CollisionPoint IntersectLine(Vector2 otherPoint, Vector2 otherDirection) Parameters otherPoint Vector2 otherDirection Vector2 Returns CollisionPoint IntersectLineCircle(Vector2, Vector2, Vector2, float) public static (CollisionPoint a, CollisionPoint b) IntersectLineCircle(Vector2 linePoint, Vector2 lineDirection, Vector2 circleCenter, float circleRadius) Parameters linePoint Vector2 lineDirection Vector2 circleCenter Vector2 circleRadius float Returns (CollisionPoint a, CollisionPoint b) IntersectLineLine(Vector2, Vector2, Vector2, Vector2) public static CollisionPoint IntersectLineLine(Vector2 line1Point, Vector2 line1Direction, Vector2 line2Point, Vector2 line2Direction) Parameters line1Point Vector2 line1Direction Vector2 line2Point Vector2 line2Direction Vector2 Returns CollisionPoint IntersectLineLine(Vector2, Vector2, Vector2, Vector2, Vector2) public static CollisionPoint IntersectLineLine(Vector2 line1Point, Vector2 line1Direction, Vector2 line2Point, Vector2 line2Direction, Vector2 line2Normal) Parameters line1Point Vector2 line1Direction Vector2 line2Point Vector2 line2Direction Vector2 line2Normal Vector2 Returns CollisionPoint IntersectLineLineInfo(Vector2, Vector2, Vector2, Vector2) public static (CollisionPoint p, float t) IntersectLineLineInfo(Vector2 line1Point, Vector2 line1Direction, Vector2 line2Point, Vector2 line2Direction) Parameters line1Point Vector2 line1Direction Vector2 line2Point Vector2 line2Direction Vector2 Returns (CollisionPoint p, float t) IntersectLineLineInfo(Vector2, Vector2, Vector2, Vector2, Vector2) public static (CollisionPoint p, float t) IntersectLineLineInfo(Vector2 line1Point, Vector2 line1Direction, Vector2 line2Point, Vector2 line2Direction, Vector2 line2Normal) Parameters line1Point Vector2 line1Direction Vector2 line2Point Vector2 line2Direction Vector2 line2Normal Vector2 Returns (CollisionPoint p, float t) IntersectLinePolygon(Vector2, Vector2, List<Vector2>, ref CollisionPoints, bool) public static int IntersectLinePolygon(Vector2 linePoint, Vector2 lineDirection, List<Vector2> points, ref CollisionPoints result, bool returnAfterFirstValid = false) Parameters linePoint Vector2 lineDirection Vector2 points List<Vector2> result CollisionPoints returnAfterFirstValid bool Returns int IntersectLinePolygon(Vector2, Vector2, List<Vector2>, int) public static CollisionPoints? IntersectLinePolygon(Vector2 linePoint, Vector2 lineDirection, List<Vector2> points, int maxCollisionPoints = -1) Parameters linePoint Vector2 lineDirection Vector2 points List<Vector2> maxCollisionPoints int Returns CollisionPoints IntersectLinePolyline(Vector2, Vector2, List<Vector2>, int) public static CollisionPoints? IntersectLinePolyline(Vector2 linePoint, Vector2 lineDirection, List<Vector2> points, int maxCollisionPoints = -1) Parameters linePoint Vector2 lineDirection Vector2 points List<Vector2> maxCollisionPoints int Returns CollisionPoints IntersectLineQuad(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static (CollisionPoint a, CollisionPoint b) IntersectLineQuad(Vector2 linePoint, Vector2 lineDirection, Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters linePoint Vector2 lineDirection Vector2 a Vector2 b Vector2 c Vector2 d Vector2 Returns (CollisionPoint a, CollisionPoint b) IntersectLineRay(Vector2, Vector2, Vector2, Vector2) public static CollisionPoint IntersectLineRay(Vector2 linePoint, Vector2 lineDirection, Vector2 rayPoint, Vector2 rayDirection) Parameters linePoint Vector2 lineDirection Vector2 rayPoint Vector2 rayDirection Vector2 Returns CollisionPoint IntersectLineRay(Vector2, Vector2, Vector2, Vector2, Vector2) public static CollisionPoint IntersectLineRay(Vector2 linePoint, Vector2 lineDirection, Vector2 rayPoint, Vector2 rayDirection, Vector2 rayNormal) Parameters linePoint Vector2 lineDirection Vector2 rayPoint Vector2 rayDirection Vector2 rayNormal Vector2 Returns CollisionPoint IntersectLineRayInfo(Vector2, Vector2, Vector2, Vector2) public static (CollisionPoint p, float t) IntersectLineRayInfo(Vector2 linePoint, Vector2 lineDirection, Vector2 rayPoint, Vector2 rayDirection) Parameters linePoint Vector2 lineDirection Vector2 rayPoint Vector2 rayDirection Vector2 Returns (CollisionPoint p, float t) IntersectLineRayInfo(Vector2, Vector2, Vector2, Vector2, Vector2) public static (CollisionPoint p, float t) IntersectLineRayInfo(Vector2 linePoint, Vector2 lineDirection, Vector2 rayPoint, Vector2 rayDirection, Vector2 rayNormal) Parameters linePoint Vector2 lineDirection Vector2 rayPoint Vector2 rayDirection Vector2 rayNormal Vector2 Returns (CollisionPoint p, float t) IntersectLineRect(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static (CollisionPoint a, CollisionPoint b) IntersectLineRect(Vector2 linePoint, Vector2 lineDirection, Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters linePoint Vector2 lineDirection Vector2 a Vector2 b Vector2 c Vector2 d Vector2 Returns (CollisionPoint a, CollisionPoint b) IntersectLineSegment(Vector2, Vector2, Vector2, Vector2) public static CollisionPoint IntersectLineSegment(Vector2 linePoint, Vector2 lineDirection, Vector2 segmentStart, Vector2 segmentEnd) Parameters linePoint Vector2 lineDirection Vector2 segmentStart Vector2 segmentEnd Vector2 Returns CollisionPoint IntersectLineSegment(Vector2, Vector2, Vector2, Vector2, Vector2) public static CollisionPoint IntersectLineSegment(Vector2 linePoint, Vector2 lineDirection, Vector2 segmentStart, Vector2 segmentEnd, Vector2 segmentNormal) Parameters linePoint Vector2 lineDirection Vector2 segmentStart Vector2 segmentEnd Vector2 segmentNormal Vector2 Returns CollisionPoint IntersectLineSegmentInfo(Vector2, Vector2, Vector2, Vector2) public static (CollisionPoint p, float t) IntersectLineSegmentInfo(Vector2 linePoint, Vector2 lineDirection, Vector2 segmentStart, Vector2 segmentEnd) Parameters linePoint Vector2 lineDirection Vector2 segmentStart Vector2 segmentEnd Vector2 Returns (CollisionPoint p, float t) IntersectLineSegmentInfo(Vector2, Vector2, Vector2, Vector2, Vector2) public static (CollisionPoint p, float t) IntersectLineSegmentInfo(Vector2 linePoint, Vector2 lineDirection, Vector2 segmentStart, Vector2 segmentEnd, Vector2 segmentNormal) Parameters linePoint Vector2 lineDirection Vector2 segmentStart Vector2 segmentEnd Vector2 segmentNormal Vector2 Returns (CollisionPoint p, float t) IntersectLineSegments(Vector2, Vector2, List<Segment>, int) public static CollisionPoints? IntersectLineSegments(Vector2 linePoint, Vector2 lineDirection, List<Segment> segments, int maxCollisionPoints = -1) Parameters linePoint Vector2 lineDirection Vector2 segments List<Segment> maxCollisionPoints int Returns CollisionPoints IntersectLineTriangle(Vector2, Vector2, Vector2, Vector2, Vector2) public static (CollisionPoint a, CollisionPoint b) IntersectLineTriangle(Vector2 linePoint, Vector2 lineDirection, Vector2 a, Vector2 b, Vector2 c) Parameters linePoint Vector2 lineDirection Vector2 a Vector2 b Vector2 c Vector2 Returns (CollisionPoint a, CollisionPoint b) IntersectPolygon(Polygon, int) public CollisionPoints? IntersectPolygon(Polygon polygon, int maxCollisionPoints = -1) Parameters polygon Polygon maxCollisionPoints int Returns CollisionPoints IntersectPolygon(List<Vector2>, int) public CollisionPoints? IntersectPolygon(List<Vector2> points, int maxCollisionPoints = -1) Parameters points List<Vector2> maxCollisionPoints int Returns CollisionPoints IntersectPolyline(Polyline, int) public CollisionPoints? IntersectPolyline(Polyline polyline, int maxCollisionPoints = -1) Parameters polyline Polyline maxCollisionPoints int Returns CollisionPoints IntersectPolyline(List<Vector2>, int) public CollisionPoints? IntersectPolyline(List<Vector2> points, int maxCollisionPoints = -1) Parameters points List<Vector2> maxCollisionPoints int Returns CollisionPoints IntersectQuad(Quad) public (CollisionPoint a, CollisionPoint b) IntersectQuad(Quad quad) Parameters quad Quad Returns (CollisionPoint a, CollisionPoint b) IntersectQuad(Vector2, Vector2, Vector2, Vector2) public (CollisionPoint a, CollisionPoint b) IntersectQuad(Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters a Vector2 b Vector2 c Vector2 d Vector2 Returns (CollisionPoint a, CollisionPoint b) IntersectRay(Ray) public CollisionPoint IntersectRay(Ray otherRay) Parameters otherRay Ray Returns CollisionPoint IntersectRay(Vector2, Vector2) public CollisionPoint IntersectRay(Vector2 otherPoint, Vector2 otherDirection) Parameters otherPoint Vector2 otherDirection Vector2 Returns CollisionPoint IntersectRect(Rect) public (CollisionPoint a, CollisionPoint b) IntersectRect(Rect rect) Parameters rect Rect Returns (CollisionPoint a, CollisionPoint b) IntersectRect(Vector2, Vector2, Vector2, Vector2) public (CollisionPoint a, CollisionPoint b) IntersectRect(Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters a Vector2 b Vector2 c Vector2 d Vector2 Returns (CollisionPoint a, CollisionPoint b) IntersectSegment(Segment) public CollisionPoint IntersectSegment(Segment segment) Parameters segment Segment Returns CollisionPoint IntersectSegment(Vector2, Vector2) public CollisionPoint IntersectSegment(Vector2 segmentStart, Vector2 segmentEnd) Parameters segmentStart Vector2 segmentEnd Vector2 Returns CollisionPoint IntersectSegments(Segments, int) public CollisionPoints? IntersectSegments(Segments segments, int maxCollisionPoints = -1) Parameters segments Segments maxCollisionPoints int Returns CollisionPoints IntersectSegments(List<Segment>, int) public CollisionPoints? IntersectSegments(List<Segment> segments, int maxCollisionPoints = -1) Parameters segments List<Segment> maxCollisionPoints int Returns CollisionPoints IntersectShape(Circle) public CollisionPoints? IntersectShape(Circle circle) Parameters circle Circle Returns CollisionPoints IntersectShape(Circle, ref CollisionPoints, bool) public int IntersectShape(Circle c, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters c Circle points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Line) public CollisionPoints? IntersectShape(Line line) Parameters line Line Returns CollisionPoints IntersectShape(Line, ref CollisionPoints) public int IntersectShape(Line l, ref CollisionPoints points) Parameters l Line points CollisionPoints Returns int IntersectShape(Polygon, ref CollisionPoints, bool) public int IntersectShape(Polygon p, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters p Polygon points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Polygon, int) public CollisionPoints? IntersectShape(Polygon p, int maxCollisionPoints = -1) Parameters p Polygon maxCollisionPoints int Returns CollisionPoints IntersectShape(Polyline, ref CollisionPoints, bool) public int IntersectShape(Polyline pl, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters pl Polyline points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Polyline, int) public CollisionPoints? IntersectShape(Polyline pl, int maxCollisionPoints = -1) Parameters pl Polyline maxCollisionPoints int Returns CollisionPoints IntersectShape(Quad) public CollisionPoints? IntersectShape(Quad q) Parameters q Quad Returns CollisionPoints IntersectShape(Quad, ref CollisionPoints, bool) public int IntersectShape(Quad q, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters q Quad points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Ray) public CollisionPoints? IntersectShape(Ray ray) Parameters ray Ray Returns CollisionPoints IntersectShape(Ray, ref CollisionPoints) public int IntersectShape(Ray r, ref CollisionPoints points) Parameters r Ray points CollisionPoints Returns int IntersectShape(Rect) public CollisionPoints? IntersectShape(Rect r) Parameters r Rect Returns CollisionPoints IntersectShape(Rect, ref CollisionPoints, bool) public int IntersectShape(Rect r, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters r Rect points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Segment) public CollisionPoints? IntersectShape(Segment segment) Parameters segment Segment Returns CollisionPoints IntersectShape(Segment, ref CollisionPoints) public int IntersectShape(Segment s, ref CollisionPoints points) Parameters s Segment points CollisionPoints Returns int IntersectShape(Segments, ref CollisionPoints, bool) public int IntersectShape(Segments shape, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters shape Segments points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Segments, int) public CollisionPoints? IntersectShape(Segments segments, int maxCollisionPoints = -1) Parameters segments Segments maxCollisionPoints int Returns CollisionPoints IntersectShape(Triangle) public CollisionPoints? IntersectShape(Triangle t) Parameters t Triangle Returns CollisionPoints IntersectShape(Triangle, ref CollisionPoints, bool) public int IntersectShape(Triangle t, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters t Triangle points CollisionPoints returnAfterFirstValid bool Returns int IntersectTriangle(Triangle) public (CollisionPoint a, CollisionPoint b) IntersectTriangle(Triangle triangle) Parameters triangle Triangle Returns (CollisionPoint a, CollisionPoint b) IntersectTriangle(Vector2, Vector2, Vector2) public (CollisionPoint a, CollisionPoint b) IntersectTriangle(Vector2 a, Vector2 b, Vector2 c) Parameters a Vector2 b Vector2 c Vector2 Returns (CollisionPoint a, CollisionPoint b) IsNormalFlipped() public bool IsNormalFlipped() Returns bool IsPointOnLine(Vector2, Vector2, Vector2) public static bool IsPointOnLine(Vector2 point, Vector2 linePoint, Vector2 lineDirection) Parameters point Vector2 linePoint Vector2 lineDirection Vector2 Returns bool Overlap(Collider) public bool Overlap(Collider collider) Parameters collider Collider Returns bool OverlapCircle(Vector2, float) public bool OverlapCircle(Vector2 circleCenter, float circleRadius) Parameters circleCenter Vector2 circleRadius float Returns bool OverlapLine(Vector2, Vector2) public bool OverlapLine(Vector2 linePoint, Vector2 lineDirection) Parameters linePoint Vector2 lineDirection Vector2 Returns bool OverlapLineCircle(Vector2, Vector2, Vector2, float) public static bool OverlapLineCircle(Vector2 linePoint, Vector2 lineDirection, Vector2 circleCenter, float circleRadius) Parameters linePoint Vector2 lineDirection Vector2 circleCenter Vector2 circleRadius float Returns bool OverlapLineLine(Vector2, Vector2, Vector2, Vector2) public static bool OverlapLineLine(Vector2 line1Point, Vector2 line1Direction, Vector2 line2Point, Vector2 line2Direction) Parameters line1Point Vector2 line1Direction Vector2 line2Point Vector2 line2Direction Vector2 Returns bool OverlapLinePolygon(Vector2, Vector2, List<Vector2>) public static bool OverlapLinePolygon(Vector2 linePoint, Vector2 lineDirection, List<Vector2> points) Parameters linePoint Vector2 lineDirection Vector2 points List<Vector2> Returns bool OverlapLinePolyline(Vector2, Vector2, List<Vector2>) public static bool OverlapLinePolyline(Vector2 linePoint, Vector2 lineDirection, List<Vector2> points) Parameters linePoint Vector2 lineDirection Vector2 points List<Vector2> Returns bool OverlapLineQuad(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool OverlapLineQuad(Vector2 linePoint, Vector2 lineDirection, Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters linePoint Vector2 lineDirection Vector2 a Vector2 b Vector2 c Vector2 d Vector2 Returns bool OverlapLineRay(Vector2, Vector2, Vector2, Vector2) public static bool OverlapLineRay(Vector2 linePoint, Vector2 lineDirection, Vector2 rayPoint, Vector2 rayDirection) Parameters linePoint Vector2 lineDirection Vector2 rayPoint Vector2 rayDirection Vector2 Returns bool OverlapLineRect(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool OverlapLineRect(Vector2 linePoint, Vector2 lineDirection, Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters linePoint Vector2 lineDirection Vector2 a Vector2 b Vector2 c Vector2 d Vector2 Returns bool OverlapLineSegment(Vector2, Vector2, Vector2, Vector2) public static bool OverlapLineSegment(Vector2 linePoint, Vector2 lineDirection, Vector2 segmentStart, Vector2 segmentEnd) Parameters linePoint Vector2 lineDirection Vector2 segmentStart Vector2 segmentEnd Vector2 Returns bool OverlapLineSegments(Vector2, Vector2, List<Segment>) public static bool OverlapLineSegments(Vector2 linePoint, Vector2 lineDirection, List<Segment> segments) Parameters linePoint Vector2 lineDirection Vector2 segments List<Segment> Returns bool OverlapLineTriangle(Vector2, Vector2, Vector2, Vector2, Vector2) public static bool OverlapLineTriangle(Vector2 linePoint, Vector2 lineDirection, Vector2 a, Vector2 b, Vector2 c) Parameters linePoint Vector2 lineDirection Vector2 a Vector2 b Vector2 c Vector2 Returns bool OverlapPoint(Vector2) public bool OverlapPoint(Vector2 p) Parameters p Vector2 Returns bool OverlapPolygon(List<Vector2>) public bool OverlapPolygon(List<Vector2> points) Parameters points List<Vector2> Returns bool OverlapPolyline(List<Vector2>) public bool OverlapPolyline(List<Vector2> points) Parameters points List<Vector2> Returns bool OverlapQuad(Vector2, Vector2, Vector2, Vector2) public bool OverlapQuad(Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters a Vector2 b Vector2 c Vector2 d Vector2 Returns bool OverlapRay(Vector2, Vector2) public bool OverlapRay(Vector2 rayPoint, Vector2 rayDirection) Parameters rayPoint Vector2 rayDirection Vector2 Returns bool OverlapRect(Vector2, Vector2, Vector2, Vector2) public bool OverlapRect(Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters a Vector2 b Vector2 c Vector2 d Vector2 Returns bool OverlapSegment(Vector2, Vector2) public bool OverlapSegment(Vector2 segmentStart, Vector2 segmentEnd) Parameters segmentStart Vector2 segmentEnd Vector2 Returns bool OverlapSegments(List<Segment>) public bool OverlapSegments(List<Segment> segments) Parameters segments List<Segment> Returns bool OverlapShape(Circle) public bool OverlapShape(Circle circle) Parameters circle Circle Returns bool OverlapShape(Line) public bool OverlapShape(Line line) Parameters line Line Returns bool OverlapShape(Polygon) public bool OverlapShape(Polygon p) Parameters p Polygon Returns bool OverlapShape(Polyline) public bool OverlapShape(Polyline pl) Parameters pl Polyline Returns bool OverlapShape(Quad) public bool OverlapShape(Quad q) Parameters q Quad Returns bool OverlapShape(Ray) public bool OverlapShape(Ray ray) Parameters ray Ray Returns bool OverlapShape(Rect) public bool OverlapShape(Rect r) Parameters r Rect Returns bool OverlapShape(Segment) public bool OverlapShape(Segment segment) Parameters segment Segment Returns bool OverlapShape(Segments) public bool OverlapShape(Segments segments) Parameters segments Segments Returns bool OverlapShape(Triangle) public bool OverlapShape(Triangle t) Parameters t Triangle Returns bool OverlapTriangle(Vector2, Vector2, Vector2) public bool OverlapTriangle(Vector2 a, Vector2 b, Vector2 c) Parameters a Vector2 b Vector2 c Vector2 Returns bool RandomLine() public Line RandomLine() Returns Line RandomLine(Vector2, float, float, float, float) public Line RandomLine(Vector2 origin, float minLength, float maxLength, float minAngleDeg, float maxAngleDeg) Parameters origin Vector2 minLength float maxLength float minAngleDeg float maxAngleDeg float Returns Line RandomLine(float) public Line RandomLine(float maxAngleDeg) Parameters maxAngleDeg float Returns Line RandomLine(float, float) public Line RandomLine(float minAngleDeg, float maxAngleDeg) Parameters minAngleDeg float maxAngleDeg float Returns Line SetDirection(Vector2) public Line SetDirection(Vector2 newDirection) Parameters newDirection Vector2 Returns Line SetPoint(Vector2) public Line SetPoint(Vector2 newPoint) Parameters newPoint Vector2 Returns Line SetRotation(float) public Line SetRotation(float angleRad) Parameters angleRad float Returns Line ToRay(bool) public Ray ToRay(bool reversed = false) Parameters reversed bool Returns Ray ToSegment(float) public Segment ToSegment(float length) Parameters length float Returns Segment"
  },
  "api/ShapeEngine.Core.Shapes.Points.html": {
    "href": "api/ShapeEngine.Core.Shapes.Points.html",
    "title": "Class Points | ShapeEngine",
    "summary": "Class Points Namespace ShapeEngine.Core.Shapes Assembly ShapeEngine.dll public class Points : ShapeList<Vector2>, IList<Vector2>, ICollection<Vector2>, IReadOnlyList<Vector2>, IReadOnlyCollection<Vector2>, IEnumerable<Vector2>, IList, ICollection, IEnumerable, IEquatable<Points> Inheritance object List<Vector2> ShapeList<Vector2> Points Implements IList<Vector2> ICollection<Vector2> IReadOnlyList<Vector2> IReadOnlyCollection<Vector2> IEnumerable<Vector2> IList ICollection IEnumerable IEquatable<Points> Derived Polygon Polyline Inherited Members ShapeList<Vector2>.AddRange(params Vector2[]) ShapeList<Vector2>.IsIndexValid(int) ShapeList<Vector2>.GetRandomItem() ShapeList<Vector2>.GetRandomItems(int) ShapeList<Vector2>.GetItem(int) List<Vector2>.Add(Vector2) List<Vector2>.AddRange(IEnumerable<Vector2>) List<Vector2>.AsReadOnly() List<Vector2>.BinarySearch(int, int, Vector2, IComparer<Vector2>) List<Vector2>.BinarySearch(Vector2) List<Vector2>.BinarySearch(Vector2, IComparer<Vector2>) List<Vector2>.Clear() List<Vector2>.Contains(Vector2) List<Vector2>.ConvertAll<TOutput>(Converter<Vector2, TOutput>) List<Vector2>.CopyTo(int, Vector2[], int, int) List<Vector2>.CopyTo(Vector2[]) List<Vector2>.CopyTo(Vector2[], int) List<Vector2>.EnsureCapacity(int) List<Vector2>.Exists(Predicate<Vector2>) List<Vector2>.Find(Predicate<Vector2>) List<Vector2>.FindAll(Predicate<Vector2>) List<Vector2>.FindIndex(int, int, Predicate<Vector2>) List<Vector2>.FindIndex(int, Predicate<Vector2>) List<Vector2>.FindIndex(Predicate<Vector2>) List<Vector2>.FindLast(Predicate<Vector2>) List<Vector2>.FindLastIndex(int, int, Predicate<Vector2>) List<Vector2>.FindLastIndex(int, Predicate<Vector2>) List<Vector2>.FindLastIndex(Predicate<Vector2>) List<Vector2>.ForEach(Action<Vector2>) List<Vector2>.GetEnumerator() List<Vector2>.GetRange(int, int) List<Vector2>.IndexOf(Vector2) List<Vector2>.IndexOf(Vector2, int) List<Vector2>.IndexOf(Vector2, int, int) List<Vector2>.Insert(int, Vector2) List<Vector2>.InsertRange(int, IEnumerable<Vector2>) List<Vector2>.LastIndexOf(Vector2) List<Vector2>.LastIndexOf(Vector2, int) List<Vector2>.LastIndexOf(Vector2, int, int) List<Vector2>.Remove(Vector2) List<Vector2>.RemoveAll(Predicate<Vector2>) List<Vector2>.RemoveAt(int) List<Vector2>.RemoveRange(int, int) List<Vector2>.Reverse() List<Vector2>.Reverse(int, int) List<Vector2>.Slice(int, int) List<Vector2>.Sort() List<Vector2>.Sort(IComparer<Vector2>) List<Vector2>.Sort(Comparison<Vector2>) List<Vector2>.Sort(int, int, IComparer<Vector2>) List<Vector2>.ToArray() List<Vector2>.TrimExcess() List<Vector2>.TrueForAll(Predicate<Vector2>) List<Vector2>.Capacity List<Vector2>.Count List<Vector2>.this[int] object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ShapeGappedDrawing.DrawGappedOutline(Points, float, LineDrawingInfo, GappedOutlineDrawingInfo) ShapePointDrawing.Draw(Points, float, ColorRgba, int) ShapeDrawing.DrawLinesScaled(List<Vector2>, LineDrawingInfo, float, float) ShapeDrawing.DrawLinesScaled(List<Vector2>, Transform2D, LineDrawingInfo, float, float) ShapeDrawing.DrawLinesScaled(List<Vector2>, Vector2, float, float, LineDrawingInfo, float, float) ShapeDrawing.DrawOutline(List<Vector2>, LineDrawingInfo) ShapeDrawing.DrawOutline(List<Vector2>, Transform2D, LineDrawingInfo) ShapeDrawing.DrawOutline(List<Vector2>, Transform2D, float, ColorRgba, LineCapType, int) ShapeDrawing.DrawOutline(List<Vector2>, Vector2, float, float, LineDrawingInfo) ShapeDrawing.DrawOutline(List<Vector2>, Vector2, float, float, float, ColorRgba, LineCapType, int) ShapeDrawing.DrawOutline(List<Vector2>, float, ColorRgba, ColorRgba, LineCapType, int) ShapeDrawing.DrawOutline(List<Vector2>, float, ColorRgba, LineCapType, int) ShapeDrawing.DrawOutline(List<Vector2>, float, ColorRgba, float, LineCapType, int) ShapeDrawing.DrawOutlineCornered(List<Vector2>, LineDrawingInfo, List<float>) ShapeDrawing.DrawOutlineCornered(List<Vector2>, LineDrawingInfo, float) ShapeDrawing.DrawOutlineCornered(List<Vector2>, List<float>, LineDrawingInfo) ShapeDrawing.DrawOutlineCornered(List<Vector2>, float, ColorRgba, List<float>, LineCapType, int) ShapeDrawing.DrawOutlineCornered(List<Vector2>, float, ColorRgba, float, LineCapType, int) ShapeDrawing.DrawOutlineCornered(List<Vector2>, float, LineDrawingInfo) ShapeDrawing.DrawOutlineCorneredRelative(List<Vector2>, LineDrawingInfo, List<float>) ShapeDrawing.DrawOutlineCorneredRelative(List<Vector2>, LineDrawingInfo, float) ShapeDrawing.DrawOutlineCorneredRelative(List<Vector2>, List<float>, LineDrawingInfo) ShapeDrawing.DrawOutlineCorneredRelative(List<Vector2>, float, ColorRgba, List<float>, LineCapType, int) ShapeDrawing.DrawOutlineCorneredRelative(List<Vector2>, float, ColorRgba, float, LineCapType, int) ShapeDrawing.DrawOutlineCorneredRelative(List<Vector2>, float, LineDrawingInfo) ShapeDrawing.DrawOutlinePercentage(List<Vector2>, float, float, ColorRgba, LineCapType, int) ShapeDrawing.DrawOutlinePerimeter(List<Vector2>, float, int, float, ColorRgba, LineCapType, int) ShapeDrawing.DrawVertices(List<Vector2>, float, ColorRgba, int) ShapeGappedDrawing.DrawGappedOutline(List<Vector2>, float, LineDrawingInfo, GappedOutlineDrawingInfo) Constructors Points() public Points() Points(IEnumerable<Vector2>) public Points(IEnumerable<Vector2> points) Parameters points IEnumerable<Vector2> Points(int) public Points(int capacity) Parameters capacity int Methods ApplyOffset(Transform2D, Vector2) public void ApplyOffset(Transform2D offset, Vector2 origin) Parameters offset Transform2D origin Vector2 ApplyOffsetCopy(Transform2D, Vector2) public Points? ApplyOffsetCopy(Transform2D offset, Vector2 origin) Parameters offset Transform2D origin Vector2 Returns Points Ceiling() public void Ceiling() Ceiling(List<Vector2>) public static void Ceiling(List<Vector2> points) Parameters points List<Vector2> ChangePosition(Vector2) public void ChangePosition(Vector2 offset) Parameters offset Vector2 ChangePositionCopy(Vector2) public Points? ChangePositionCopy(Vector2 offset) Parameters offset Vector2 Returns Points ChangeRotation(float, Vector2) public void ChangeRotation(float rotRad, Vector2 origin) Parameters rotRad float origin Vector2 ChangeRotationCopy(float, Vector2) public Points? ChangeRotationCopy(float rotRad, Vector2 origin) Parameters rotRad float origin Vector2 Returns Points ChangeSize(float, Vector2) public void ChangeSize(float amount, Vector2 origin) Parameters amount float origin Vector2 ChangeSizeCopy(float, Vector2) public Points? ChangeSizeCopy(float amount, Vector2 origin) Parameters amount float origin Vector2 Returns Points Copy() Does not deep copy public override Points Copy() Returns Points Equals(Points?) Indicates whether the current object is equal to another object of the same type. public bool Equals(Points? other) Parameters other Points An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Floor() public void Floor() Floor(List<Vector2>) public static void Floor(List<Vector2> points) Parameters points List<Vector2> GetClosestIndex(Vector2) public int GetClosestIndex(Vector2 p) Parameters p Vector2 Returns int GetClosestPoint(Circle) public ClosestPointResult GetClosestPoint(Circle other) Parameters other Circle Returns ClosestPointResult GetClosestPoint(Line) public ClosestPointResult GetClosestPoint(Line other) Parameters other Line Returns ClosestPointResult GetClosestPoint(Polygon) public ClosestPointResult GetClosestPoint(Polygon other) Parameters other Polygon Returns ClosestPointResult GetClosestPoint(Polyline) public ClosestPointResult GetClosestPoint(Polyline other) Parameters other Polyline Returns ClosestPointResult GetClosestPoint(Quad) public ClosestPointResult GetClosestPoint(Quad other) Parameters other Quad Returns ClosestPointResult GetClosestPoint(Ray) public ClosestPointResult GetClosestPoint(Ray other) Parameters other Ray Returns ClosestPointResult GetClosestPoint(Rect) public ClosestPointResult GetClosestPoint(Rect other) Parameters other Rect Returns ClosestPointResult GetClosestPoint(Segment) public ClosestPointResult GetClosestPoint(Segment other) Parameters other Segment Returns ClosestPointResult GetClosestPoint(Segments) public ClosestPointResult GetClosestPoint(Segments other) Parameters other Segments Returns ClosestPointResult GetClosestPoint(Triangle) public ClosestPointResult GetClosestPoint(Triangle other) Parameters other Triangle Returns ClosestPointResult GetClosestPoint(Vector2, out float) public Vector2 GetClosestPoint(Vector2 p, out float disSquared) Parameters p Vector2 disSquared float Returns Vector2 GetClosestPoint(Vector2, out float, out int) public Vector2 GetClosestPoint(Vector2 p, out float disSquared, out int index) Parameters p Vector2 disSquared float index int Returns Vector2 GetClosestVertex(Vector2) public Vector2 GetClosestVertex(Vector2 p) Parameters p Vector2 Returns Vector2 GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. GetInterpolatedEdgePoints(float) Interpolate the edge(segment) between each pair of points using t and return the new interpolated points. Interplates between last and first point as well (closed shape) public Points? GetInterpolatedEdgePoints(float t) Parameters t float The value t for interpolation. Should be between 0 - 1. Returns Points GetInterpolatedEdgePoints(float, int) Interpolate the edge(segment) between each pair of points using t and return the new interpolated points. Interplates between last and first point as well (closed shape) public Points? GetInterpolatedEdgePoints(float t, int steps) Parameters t float The value t for interpolation. Should be between 0 - 1. steps int Recursive steps. The amount of times the result of InterpolatedEdgesPoints will be run through InterpolateEdgePoints. Returns Points GetPoint(int) Gets the value at the specified index wrapping around if index is smaller than 0 or bigger than count public Vector2 GetPoint(int index) Parameters index int Returns Vector2 GetRandomPoint() public Vector2 GetRandomPoint() Returns Vector2 GetRandomPoints(int) public List<Vector2> GetRandomPoints(int amount) Parameters amount int Returns List<Vector2> GetRelativePoints(Transform2D) public Points GetRelativePoints(Transform2D transform) Parameters transform Transform2D Returns Points GetRelativePoints(Vector2) public Points GetRelativePoints(Vector2 origin) Parameters origin Vector2 Returns Points GetRelativeVector2List(Transform2D) public List<Vector2> GetRelativeVector2List(Transform2D transform) Parameters transform Transform2D Returns List<Vector2> GetRelativeVector2List(Vector2) public List<Vector2> GetRelativeVector2List(Vector2 origin) Parameters origin Vector2 Returns List<Vector2> GetUniquePoints() public Points GetUniquePoints() Returns Points Round() public void Round() Round(List<Vector2>) public static void Round(List<Vector2> points) Parameters points List<Vector2> ScaleSize(Vector2, Vector2) public void ScaleSize(Vector2 scale, Vector2 origin) Parameters scale Vector2 origin Vector2 ScaleSize(float, Vector2) public void ScaleSize(float scale, Vector2 origin) Parameters scale float origin Vector2 ScaleSizeCopy(Vector2, Vector2) public Points? ScaleSizeCopy(Vector2 scale, Vector2 origin) Parameters scale Vector2 origin Vector2 Returns Points ScaleSizeCopy(float, Vector2) public Points? ScaleSizeCopy(float scale, Vector2 origin) Parameters scale float origin Vector2 Returns Points SetPosition(Vector2, Vector2) public void SetPosition(Vector2 newPosition, Vector2 origin) Parameters newPosition Vector2 origin Vector2 SetPositionCopy(Vector2, Vector2) public Points? SetPositionCopy(Vector2 newPosition, Vector2 origin) Parameters newPosition Vector2 origin Vector2 Returns Points SetRotation(float, Vector2) public void SetRotation(float angleRad, Vector2 origin) Parameters angleRad float origin Vector2 SetRotationCopy(float, Vector2) public Points? SetRotationCopy(float angleRad, Vector2 origin) Parameters angleRad float origin Vector2 Returns Points SetSize(float, Vector2) public void SetSize(float size, Vector2 origin) Parameters size float origin Vector2 SetSizeCopy(float, Vector2) public Points? SetSizeCopy(float size, Vector2 origin) Parameters size float origin Vector2 Returns Points SetTransform(Transform2D, Vector2) public void SetTransform(Transform2D transform, Vector2 origin) Parameters transform Transform2D origin Vector2 SetTransformCopy(Transform2D, Vector2) public Points? SetTransformCopy(Transform2D transform, Vector2 origin) Parameters transform Transform2D origin Vector2 Returns Points SortClosestFirst(Vector2) public bool SortClosestFirst(Vector2 referencePoint) Parameters referencePoint Vector2 Returns bool SortFurthestFirst(Vector2) public bool SortFurthestFirst(Vector2 referencePoint) Parameters referencePoint Vector2 Returns bool ToPolygon() public Polygon ToPolygon() Returns Polygon ToPolyline() public Polyline ToPolyline() Returns Polyline ToRelative(Vector2) public (Transform2D transform, Polygon shape) ToRelative(Vector2 center) Parameters center Vector2 Returns (Transform2D transform, Polygon shape) Truncate() public void Truncate() Truncate(List<Vector2>) public static void Truncate(List<Vector2> points) Parameters points List<Vector2>"
  },
  "api/ShapeEngine.Core.Shapes.PolyLineShape.html": {
    "href": "api/ShapeEngine.Core.Shapes.PolyLineShape.html",
    "title": "Class PolyLineShape | ShapeEngine",
    "summary": "Class PolyLineShape Namespace ShapeEngine.Core.Shapes Assembly ShapeEngine.dll public class PolyLineShape : ShapeContainer, IShape Inheritance object Shape ShapeContainer PolyLineShape Implements IShape Inherited Members ShapeContainer.Parent ShapeContainer.ChangeParent(ShapeContainer) ShapeContainer.AddChild(ShapeContainer) ShapeContainer.RemoveChild(ShapeContainer) ShapeContainer.InitializeShape(Transform2D) ShapeContainer.UpdateShape(float, Transform2D) ShapeContainer.DrawShape() ShapeContainer.OnChildInitialized(ShapeContainer) ShapeContainer.OnChildUpdated(ShapeContainer) ShapeContainer.OnChildDrawn(ShapeContainer) ShapeContainer.OnUpdateFinished() ShapeContainer.OnDrawFinished() ShapeContainer.OnAddedToParent(ShapeContainer) ShapeContainer.OnRemovedFromParent(ShapeContainer) Shape.Moves Shape.Rotates Shape.Scales Shape.Offset Shape.CurTransform Shape.PrevTransform Shape.OnUpdate(float) Shape.OnDraw() Shape.UpdateTransform(Transform2D) Shape.GetRayShape() Shape.GetLineShape() Shape.GetSegmentShape() Shape.GetCircleShape() Shape.GetTriangleShape() Shape.GetQuadShape() Shape.GetRectShape() Shape.GetPolygonShape() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PolyLineShape(Transform2D, Points) public PolyLineShape(Transform2D offset, Points relativePoints) Parameters offset Transform2D relativePoints Points PolyLineShape(Transform2D, Polyline) public PolyLineShape(Transform2D offset, Polyline relativePoints) Parameters offset Transform2D relativePoints Polyline Fields RelativeShape public Polyline RelativeShape Field Value Polyline Methods GetPolylineShape() public override Polyline GetPolylineShape() Returns Polyline GetShapeType() public override ShapeType GetShapeType() Returns ShapeType OnInitialized() protected override void OnInitialized() OnShapeTransformChanged(bool) Called each frame after the transform was actualized from the parents protected override void OnShapeTransformChanged(bool transformChanged) Parameters transformChanged bool RecalculateShape() public override void RecalculateShape()"
  },
  "api/ShapeEngine.Core.Shapes.PolyShape.html": {
    "href": "api/ShapeEngine.Core.Shapes.PolyShape.html",
    "title": "Class PolyShape | ShapeEngine",
    "summary": "Class PolyShape Namespace ShapeEngine.Core.Shapes Assembly ShapeEngine.dll public class PolyShape : ShapeContainer, IShape Inheritance object Shape ShapeContainer PolyShape Implements IShape Inherited Members ShapeContainer.Parent ShapeContainer.ChangeParent(ShapeContainer) ShapeContainer.AddChild(ShapeContainer) ShapeContainer.RemoveChild(ShapeContainer) ShapeContainer.InitializeShape(Transform2D) ShapeContainer.UpdateShape(float, Transform2D) ShapeContainer.DrawShape() ShapeContainer.OnChildInitialized(ShapeContainer) ShapeContainer.OnChildUpdated(ShapeContainer) ShapeContainer.OnChildDrawn(ShapeContainer) ShapeContainer.OnUpdateFinished() ShapeContainer.OnDrawFinished() ShapeContainer.OnAddedToParent(ShapeContainer) ShapeContainer.OnRemovedFromParent(ShapeContainer) Shape.Moves Shape.Rotates Shape.Scales Shape.Offset Shape.CurTransform Shape.PrevTransform Shape.OnUpdate(float) Shape.OnDraw() Shape.UpdateTransform(Transform2D) Shape.GetRayShape() Shape.GetLineShape() Shape.GetSegmentShape() Shape.GetCircleShape() Shape.GetTriangleShape() Shape.GetQuadShape() Shape.GetRectShape() Shape.GetPolylineShape() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PolyShape(Transform2D, Points) public PolyShape(Transform2D offset, Points relativePoints) Parameters offset Transform2D relativePoints Points PolyShape(Transform2D, Polygon) public PolyShape(Transform2D offset, Polygon relativePoints) Parameters offset Transform2D relativePoints Polygon PolyShape(Transform2D, Segment, float, float) public PolyShape(Transform2D offset, Segment s, float inflation, float alignement = 0.5) Parameters offset Transform2D s Segment inflation float alignement float Fields RelativeShape public Polygon RelativeShape Field Value Polygon Methods GetPolygonShape() public override Polygon GetPolygonShape() Returns Polygon GetShapeType() public override ShapeType GetShapeType() Returns ShapeType OnInitialized() protected override void OnInitialized() OnShapeTransformChanged(bool) Called each frame after the transform was actualized from the parents protected override void OnShapeTransformChanged(bool transformChanged) Parameters transformChanged bool RecalculateShape() public override void RecalculateShape()"
  },
  "api/ShapeEngine.Core.Shapes.Polygon.html": {
    "href": "api/ShapeEngine.Core.Shapes.Polygon.html",
    "title": "Class Polygon | ShapeEngine",
    "summary": "Class Polygon Namespace ShapeEngine.Core.Shapes Assembly ShapeEngine.dll Points shoud be in CCW order. public class Polygon : Points, IList<Vector2>, ICollection<Vector2>, IReadOnlyList<Vector2>, IReadOnlyCollection<Vector2>, IEnumerable<Vector2>, IList, ICollection, IEnumerable, IEquatable<Points>, IEquatable<Polygon> Inheritance object List<Vector2> ShapeList<Vector2> Points Polygon Implements IList<Vector2> ICollection<Vector2> IReadOnlyList<Vector2> IReadOnlyCollection<Vector2> IEnumerable<Vector2> IList ICollection IEnumerable IEquatable<Points> IEquatable<Polygon> Inherited Members Points.Equals(Points) Points.GetPoint(int) Points.GetClosestIndex(Vector2) Points.GetClosestVertex(Vector2) Points.GetUniquePoints() Points.GetRandomPoint() Points.GetRandomPoints(int) Points.Floor() Points.Ceiling() Points.Truncate() Points.Round() Points.ToPolygon() Points.ToPolyline() Points.ToRelative(Vector2) Points.GetRelativeVector2List(Vector2) Points.GetRelativeVector2List(Transform2D) Points.GetRelativePoints(Vector2) Points.GetRelativePoints(Transform2D) Points.SetPosition(Vector2, Vector2) Points.ChangePosition(Vector2) Points.ChangeRotation(float, Vector2) Points.SetRotation(float, Vector2) Points.ScaleSize(float, Vector2) Points.ScaleSize(Vector2, Vector2) Points.ChangeSize(float, Vector2) Points.SetSize(float, Vector2) Points.SetTransform(Transform2D, Vector2) Points.ApplyOffset(Transform2D, Vector2) Points.SetPositionCopy(Vector2, Vector2) Points.Floor(List<Vector2>) Points.Ceiling(List<Vector2>) Points.Round(List<Vector2>) Points.Truncate(List<Vector2>) Points.GetInterpolatedEdgePoints(float) Points.GetInterpolatedEdgePoints(float, int) Points.SortClosestFirst(Vector2) Points.SortFurthestFirst(Vector2) ShapeList<Vector2>.AddRange(params Vector2[]) ShapeList<Vector2>.IsIndexValid(int) ShapeList<Vector2>.GetRandomItem() ShapeList<Vector2>.GetRandomItems(int) ShapeList<Vector2>.GetItem(int) List<Vector2>.Add(Vector2) List<Vector2>.AddRange(IEnumerable<Vector2>) List<Vector2>.AsReadOnly() List<Vector2>.BinarySearch(int, int, Vector2, IComparer<Vector2>) List<Vector2>.BinarySearch(Vector2) List<Vector2>.BinarySearch(Vector2, IComparer<Vector2>) List<Vector2>.Clear() List<Vector2>.Contains(Vector2) List<Vector2>.ConvertAll<TOutput>(Converter<Vector2, TOutput>) List<Vector2>.CopyTo(int, Vector2[], int, int) List<Vector2>.CopyTo(Vector2[]) List<Vector2>.CopyTo(Vector2[], int) List<Vector2>.EnsureCapacity(int) List<Vector2>.Exists(Predicate<Vector2>) List<Vector2>.Find(Predicate<Vector2>) List<Vector2>.FindAll(Predicate<Vector2>) List<Vector2>.FindIndex(int, int, Predicate<Vector2>) List<Vector2>.FindIndex(int, Predicate<Vector2>) List<Vector2>.FindIndex(Predicate<Vector2>) List<Vector2>.FindLast(Predicate<Vector2>) List<Vector2>.FindLastIndex(int, int, Predicate<Vector2>) List<Vector2>.FindLastIndex(int, Predicate<Vector2>) List<Vector2>.FindLastIndex(Predicate<Vector2>) List<Vector2>.ForEach(Action<Vector2>) List<Vector2>.GetEnumerator() List<Vector2>.GetRange(int, int) List<Vector2>.IndexOf(Vector2) List<Vector2>.IndexOf(Vector2, int) List<Vector2>.IndexOf(Vector2, int, int) List<Vector2>.Insert(int, Vector2) List<Vector2>.InsertRange(int, IEnumerable<Vector2>) List<Vector2>.LastIndexOf(Vector2) List<Vector2>.LastIndexOf(Vector2, int) List<Vector2>.LastIndexOf(Vector2, int, int) List<Vector2>.Remove(Vector2) List<Vector2>.RemoveAll(Predicate<Vector2>) List<Vector2>.RemoveAt(int) List<Vector2>.RemoveRange(int, int) List<Vector2>.Reverse() List<Vector2>.Reverse(int, int) List<Vector2>.Slice(int, int) List<Vector2>.Sort() List<Vector2>.Sort(IComparer<Vector2>) List<Vector2>.Sort(Comparison<Vector2>) List<Vector2>.Sort(int, int, IComparer<Vector2>) List<Vector2>.ToArray() List<Vector2>.TrimExcess() List<Vector2>.TrueForAll(Predicate<Vector2>) List<Vector2>.Capacity List<Vector2>.Count List<Vector2>.this[int] object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ShapeGappedDrawing.DrawGappedOutline(Points, float, LineDrawingInfo, GappedOutlineDrawingInfo) ShapePointDrawing.Draw(Points, float, ColorRgba, int) ShapeGappedDrawing.DrawGappedOutline(Polygon, float, LineDrawingInfo, GappedOutlineDrawingInfo) ShapePolygonDrawing.DEBUG_DrawLinesCCW(Polygon, float, ColorRgba, ColorRgba) ShapePolygonDrawing.Draw(Polygon, ColorRgba) ShapePolygonDrawing.DrawCornered(Polygon, LineDrawingInfo, List<float>) ShapePolygonDrawing.DrawCornered(Polygon, LineDrawingInfo, float) ShapePolygonDrawing.DrawCornered(Polygon, List<float>, LineDrawingInfo) ShapePolygonDrawing.DrawCornered(Polygon, float, ColorRgba, List<float>, LineCapType, int) ShapePolygonDrawing.DrawCornered(Polygon, float, ColorRgba, float, LineCapType, int) ShapePolygonDrawing.DrawCornered(Polygon, float, LineDrawingInfo) ShapePolygonDrawing.DrawCorneredRelative(Polygon, LineDrawingInfo, List<float>) ShapePolygonDrawing.DrawCorneredRelative(Polygon, LineDrawingInfo, float) ShapePolygonDrawing.DrawCorneredRelative(Polygon, List<float>, LineDrawingInfo) ShapePolygonDrawing.DrawCorneredRelative(Polygon, float, ColorRgba, List<float>, LineCapType, int) ShapePolygonDrawing.DrawCorneredRelative(Polygon, float, ColorRgba, float, LineCapType, int) ShapePolygonDrawing.DrawCorneredRelative(Polygon, float, LineDrawingInfo) ShapePolygonDrawing.DrawLines(Polygon, LineDrawingInfo) ShapePolygonDrawing.DrawLines(Polygon, Transform2D, LineDrawingInfo) ShapePolygonDrawing.DrawLines(Polygon, Transform2D, float, ColorRgba, LineCapType, int) ShapePolygonDrawing.DrawLines(Polygon, Vector2, float, float, LineDrawingInfo) ShapePolygonDrawing.DrawLines(Polygon, Vector2, float, float, float, ColorRgba, LineCapType, int) ShapePolygonDrawing.DrawLines(Polygon, float, ColorRgba, ColorRgba, LineCapType, int) ShapePolygonDrawing.DrawLines(Polygon, float, ColorRgba, LineCapType, int) ShapePolygonDrawing.DrawLines(Polygon, float, ColorRgba, float, LineCapType, int) ShapePolygonDrawing.DrawLinesPercentage(Polygon, float, LineDrawingInfo) ShapePolygonDrawing.DrawLinesPercentage(Polygon, float, float, ColorRgba, LineCapType, int) ShapePolygonDrawing.DrawLinesPerimeter(Polygon, float, int, float, ColorRgba, LineCapType, int) ShapePolygonDrawing.DrawLinesScaled(Polygon, LineDrawingInfo, float, float) ShapePolygonDrawing.DrawLinesScaled(Polygon, Transform2D, LineDrawingInfo, float, float) ShapePolygonDrawing.DrawLinesScaled(Polygon, Vector2, float, float, LineDrawingInfo, float, float) ShapePolygonDrawing.DrawPolygonConvex(Polygon, ColorRgba, bool) ShapePolygonDrawing.DrawPolygonConvex(Polygon, Transform2D, ColorRgba, bool) ShapePolygonDrawing.DrawPolygonConvex(Polygon, Vector2, ColorRgba, bool) ShapePolygonDrawing.DrawPolygonConvex(Polygon, Vector2, float, float, ColorRgba, bool) ShapePolygonDrawing.DrawVertices(Polygon, float, ColorRgba, int) ShapeStripedDrawing.DrawStriped(Polygon, Circle, float, float, LineDrawingInfo, float) ShapeStripedDrawing.DrawStriped(Polygon, Polygon, float, float, LineDrawingInfo, float) ShapeStripedDrawing.DrawStriped(Polygon, Quad, float, float, LineDrawingInfo, float) ShapeStripedDrawing.DrawStriped(Polygon, Rect, float, float, LineDrawingInfo, float) ShapeStripedDrawing.DrawStriped(Polygon, Triangle, float, float, LineDrawingInfo, float) ShapeStripedDrawing.DrawStriped(Polygon, CurveFloat, float, LineDrawingInfo) ShapeStripedDrawing.DrawStriped(Polygon, CurveFloat, float, LineDrawingInfo, LineDrawingInfo) ShapeStripedDrawing.DrawStriped(Polygon, CurveFloat, float, params LineDrawingInfo[]) ShapeStripedDrawing.DrawStriped(Polygon, float, float, LineDrawingInfo, LineDrawingInfo) ShapeStripedDrawing.DrawStriped(Polygon, float, float, LineDrawingInfo, float) ShapeStripedDrawing.DrawStriped(Polygon, float, float, params LineDrawingInfo[]) ShapeClipper.Difference(Polygon, Polygon, FillRule, int) ShapeClipper.Difference(Polygon, Polyline, FillRule, int) ShapeClipper.Difference(Polygon, Segment, FillRule, int) ShapeClipper.Difference(Polygon, Polygons, FillRule, int) ShapeClipper.DifferenceMany(Polygon, Segments, FillRule, int) ShapeClipper.DifferenceMany(Polygon, Polygons, FillRule, int) ShapeClipper.DifferenceMany(Polygon, Polylines, FillRule, int) ShapeClipper.Inflate(Polygon, float, JoinType, EndType, float, int) ShapeClipper.Intersect(Polygon, Polygon, FillRule, int) ShapeClipper.Intersect(Polygon, Polygons, FillRule, int) ShapeClipper.IntersectMany(Polygon, Polygons, FillRule, int) ShapeClipper.IsHole(Polygon) ShapeClipper.IsPointInside(Polygon, Vector2) ShapeClipper.IsPointInsideClipper(Polygon, Vector2) ShapeClipper.MinkowskiDiff(Polygon, Polygon, bool) ShapeClipper.MinkowskiDiffOrigin(Polygon, Polygon, bool) ShapeClipper.MinkowskiSum(Polygon, Polygon, bool) ShapeClipper.MinkowskiSumOrigin(Polygon, Polygon, bool) ShapeClipper.Simplify(Polygon, float, bool) ShapeClipper.SimplifyRDP(Polygon, float) ShapeClipper.StripDuplicates(Polygon, float, bool) ShapeClipper.ToClipperPath(Polygon) ShapeClipper.ToClipperPaths(Polygon) ShapeClipper.TrimCollinear(Polygon, int, bool) ShapeClipper.Union(Polygon, Polygon, FillRule) ShapeClipper.UnionMany(Polygon, Polygons, FillRule) ShapeDrawing.DrawLinesScaled(List<Vector2>, LineDrawingInfo, float, float) ShapeDrawing.DrawLinesScaled(List<Vector2>, Transform2D, LineDrawingInfo, float, float) ShapeDrawing.DrawLinesScaled(List<Vector2>, Vector2, float, float, LineDrawingInfo, float, float) ShapeDrawing.DrawOutline(List<Vector2>, LineDrawingInfo) ShapeDrawing.DrawOutline(List<Vector2>, Transform2D, LineDrawingInfo) ShapeDrawing.DrawOutline(List<Vector2>, Transform2D, float, ColorRgba, LineCapType, int) ShapeDrawing.DrawOutline(List<Vector2>, Vector2, float, float, LineDrawingInfo) ShapeDrawing.DrawOutline(List<Vector2>, Vector2, float, float, float, ColorRgba, LineCapType, int) ShapeDrawing.DrawOutline(List<Vector2>, float, ColorRgba, ColorRgba, LineCapType, int) ShapeDrawing.DrawOutline(List<Vector2>, float, ColorRgba, LineCapType, int) ShapeDrawing.DrawOutline(List<Vector2>, float, ColorRgba, float, LineCapType, int) ShapeDrawing.DrawOutlineCornered(List<Vector2>, LineDrawingInfo, List<float>) ShapeDrawing.DrawOutlineCornered(List<Vector2>, LineDrawingInfo, float) ShapeDrawing.DrawOutlineCornered(List<Vector2>, List<float>, LineDrawingInfo) ShapeDrawing.DrawOutlineCornered(List<Vector2>, float, ColorRgba, List<float>, LineCapType, int) ShapeDrawing.DrawOutlineCornered(List<Vector2>, float, ColorRgba, float, LineCapType, int) ShapeDrawing.DrawOutlineCornered(List<Vector2>, float, LineDrawingInfo) ShapeDrawing.DrawOutlineCorneredRelative(List<Vector2>, LineDrawingInfo, List<float>) ShapeDrawing.DrawOutlineCorneredRelative(List<Vector2>, LineDrawingInfo, float) ShapeDrawing.DrawOutlineCorneredRelative(List<Vector2>, List<float>, LineDrawingInfo) ShapeDrawing.DrawOutlineCorneredRelative(List<Vector2>, float, ColorRgba, List<float>, LineCapType, int) ShapeDrawing.DrawOutlineCorneredRelative(List<Vector2>, float, ColorRgba, float, LineCapType, int) ShapeDrawing.DrawOutlineCorneredRelative(List<Vector2>, float, LineDrawingInfo) ShapeDrawing.DrawOutlinePercentage(List<Vector2>, float, float, ColorRgba, LineCapType, int) ShapeDrawing.DrawOutlinePerimeter(List<Vector2>, float, int, float, ColorRgba, LineCapType, int) ShapeDrawing.DrawVertices(List<Vector2>, float, ColorRgba, int) ShapeGappedDrawing.DrawGappedOutline(List<Vector2>, float, LineDrawingInfo, GappedOutlineDrawingInfo) Constructors Polygon() public Polygon() Polygon(Points) public Polygon(Points points) Parameters points Points Polygon(Polygon) public Polygon(Polygon poly) Parameters poly Polygon Polygon(Polyline) public Polygon(Polyline polyLine) Parameters polyLine Polyline Polygon(IEnumerable<Vector2>) Points should be in CCW order. Use Reverse if they are in CW order. public Polygon(IEnumerable<Vector2> points) Parameters points IEnumerable<Vector2> Polygon(int) public Polygon(int capacity) Parameters capacity int Properties Area public float Area { get; } Property Value float Center public Vector2 Center { get; } Property Value Vector2 Diameter public float Diameter { get; } Property Value float Perimeter public float Perimeter { get; } Property Value float Methods ApplyOffsetCopy(Transform2D, Vector2) public Polygon? ApplyOffsetCopy(Transform2D offset, Vector2 origin) Parameters offset Transform2D origin Vector2 Returns Polygon ChangePositionCopy(Vector2) public Polygon? ChangePositionCopy(Vector2 offset) Parameters offset Vector2 Returns Polygon ChangeRotation(float) public void ChangeRotation(float rotRad) Parameters rotRad float ChangeRotationCopy(float) public Polygon? ChangeRotationCopy(float rotRad) Parameters rotRad float Returns Polygon ChangeRotationCopy(float, Vector2) public Polygon? ChangeRotationCopy(float rotRad, Vector2 origin) Parameters rotRad float origin Vector2 Returns Polygon ChangeSize(float) public void ChangeSize(float amount) Parameters amount float ChangeSizeCopy(float) public Polygon? ChangeSizeCopy(float amount) Parameters amount float Returns Polygon ChangeSizeCopy(float, Vector2) public Polygon? ChangeSizeCopy(float amount, Vector2 origin) Parameters amount float origin Vector2 Returns Polygon CombineShape(Polygon) public (Polygons newShapes, Polygons overlaps) CombineShape(Polygon other) Parameters other Polygon Returns (Polygons newShapes, Polygons cutOuts) CombineShape(Polygons) public (Polygons newShapes, Polygons overlaps) CombineShape(Polygons others) Parameters others Polygons Returns (Polygons newShapes, Polygons cutOuts) ContainsCollider(Collider) public bool ContainsCollider(Collider collider) Parameters collider Collider Returns bool ContainsCollisionObject(CollisionObject) public bool ContainsCollisionObject(CollisionObject collisionObject) Parameters collisionObject CollisionObject Returns bool ContainsPoint(List<Vector2>, Vector2) public static bool ContainsPoint(List<Vector2> polygon, Vector2 p) Parameters polygon List<Vector2> p Vector2 Returns bool ContainsPoint(Vector2) public bool ContainsPoint(Vector2 p) Parameters p Vector2 Returns bool ContainsPoints(Points) public bool ContainsPoints(Points points) Parameters points Points Returns bool ContainsPoints(List<Vector2>, List<Vector2>) public static bool ContainsPoints(List<Vector2> polygon, List<Vector2> points) Parameters polygon List<Vector2> points List<Vector2> Returns bool ContainsPoints(List<Vector2>, Vector2, Vector2) public static bool ContainsPoints(List<Vector2> polygon, Vector2 a, Vector2 b) Parameters polygon List<Vector2> a Vector2 b Vector2 Returns bool ContainsPoints(List<Vector2>, Vector2, Vector2, Vector2) public static bool ContainsPoints(List<Vector2> polygon, Vector2 a, Vector2 b, Vector2 c) Parameters polygon List<Vector2> a Vector2 b Vector2 c Vector2 Returns bool ContainsPoints(List<Vector2>, Vector2, Vector2, Vector2, Vector2) public static bool ContainsPoints(List<Vector2> polygon, Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters polygon List<Vector2> a Vector2 b Vector2 c Vector2 d Vector2 Returns bool ContainsPoints(Vector2, Vector2) public bool ContainsPoints(Vector2 a, Vector2 b) Parameters a Vector2 b Vector2 Returns bool ContainsPoints(Vector2, Vector2, Vector2) public bool ContainsPoints(Vector2 a, Vector2 b, Vector2 c) Parameters a Vector2 b Vector2 c Vector2 Returns bool ContainsPoints(Vector2, Vector2, Vector2, Vector2) public bool ContainsPoints(Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters a Vector2 b Vector2 c Vector2 d Vector2 Returns bool ContainsPolygonCircle(List<Vector2>, Vector2, float) public static bool ContainsPolygonCircle(List<Vector2> polygon, Vector2 circleCenter, float circleRadius) Parameters polygon List<Vector2> circleCenter Vector2 circleRadius float Returns bool ContainsPolygonPolygon(List<Vector2>, List<Vector2>) public static bool ContainsPolygonPolygon(List<Vector2> polygon, List<Vector2> other) Parameters polygon List<Vector2> other List<Vector2> Returns bool ContainsPolygonPolyline(List<Vector2>, List<Vector2>) public static bool ContainsPolygonPolyline(List<Vector2> polygon, List<Vector2> polyline) Parameters polygon List<Vector2> polyline List<Vector2> Returns bool ContainsPolygonQuad(List<Vector2>, Vector2, Vector2, Vector2, Vector2) public static bool ContainsPolygonQuad(List<Vector2> polygon, Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters polygon List<Vector2> a Vector2 b Vector2 c Vector2 d Vector2 Returns bool ContainsPolygonRect(List<Vector2>, Vector2, Vector2, Vector2, Vector2) public static bool ContainsPolygonRect(List<Vector2> polygon, Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters polygon List<Vector2> a Vector2 b Vector2 c Vector2 d Vector2 Returns bool ContainsPolygonSegment(List<Vector2>, Vector2, Vector2) public static bool ContainsPolygonSegment(List<Vector2> polygon, Vector2 segmentStart, Vector2 segmentEnd) Parameters polygon List<Vector2> segmentStart Vector2 segmentEnd Vector2 Returns bool ContainsPolygonTriangle(List<Vector2>, Vector2, Vector2, Vector2) public static bool ContainsPolygonTriangle(List<Vector2> polygon, Vector2 a, Vector2 b, Vector2 c) Parameters polygon List<Vector2> a Vector2 b Vector2 c Vector2 Returns bool ContainsQuad(Vector2, Vector2, Vector2, Vector2) public bool ContainsQuad(Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters a Vector2 b Vector2 c Vector2 d Vector2 Returns bool ContainsSegment(Vector2, Vector2) public bool ContainsSegment(Vector2 segmentStart, Vector2 segmentEnd) Parameters segmentStart Vector2 segmentEnd Vector2 Returns bool ContainsShape(Circle) public bool ContainsShape(Circle circle) Parameters circle Circle Returns bool ContainsShape(Polygon) public bool ContainsShape(Polygon polygon) Parameters polygon Polygon Returns bool ContainsShape(Polyline) public bool ContainsShape(Polyline polyline) Parameters polyline Polyline Returns bool ContainsShape(Quad) public bool ContainsShape(Quad quad) Parameters quad Quad Returns bool ContainsShape(Rect) public bool ContainsShape(Rect rect) Parameters rect Rect Returns bool ContainsShape(Segment) public bool ContainsShape(Segment segment) Parameters segment Segment Returns bool ContainsShape(Triangle) public bool ContainsShape(Triangle triangle) Parameters triangle Triangle Returns bool ContainsTriangle(Vector2, Vector2, Vector2) public bool ContainsTriangle(Vector2 a, Vector2 b, Vector2 c) Parameters a Vector2 b Vector2 c Vector2 Returns bool Copy() Does not deep copy public override Polygon Copy() Returns Polygon CutRayWithPolygon(Vector2, Vector2) This function intersects a ray with a polygon and returns all segments that lie inside the polygon. public List<Segment>? CutRayWithPolygon(Vector2 rayPoint, Vector2 rayDirection) Parameters rayPoint Vector2 rayDirection Vector2 Returns List<Segment> CutRayWithPolygon(Vector2, Vector2, ref List<Segment>) This function intersects a ray with a polygon and returns all segments that lie inside the polygon. public int CutRayWithPolygon(Vector2 rayPoint, Vector2 rayDirection, ref List<Segment> result) Parameters rayPoint Vector2 rayDirection Vector2 result List<Segment> Returns int CutShape(Polygon) public (Polygons newShapes, Polygons cutOuts) CutShape(Polygon cutShape) Parameters cutShape Polygon Returns (Polygons newShapes, Polygons cutOuts) CutShapeMany(Polygons) public (Polygons newShapes, Polygons cutOuts) CutShapeMany(Polygons cutShapes) Parameters cutShapes Polygons Returns (Polygons newShapes, Polygons cutOuts) CutShapeSimple(Segment, float, float, float, float) public (Polygons newShapes, Polygons cutOuts) CutShapeSimple(Segment cutLine, float minSectionLength = 0.025, float maxSectionLength = 0.1, float minMagnitude = 0.05, float maxMagnitude = 0.25) Parameters cutLine Segment minSectionLength float maxSectionLength float minMagnitude float maxMagnitude float Returns (Polygons newShapes, Polygons cutOuts) CutShapeSimple(Vector2, float, float, int) public (Polygons newShapes, Polygons cutOuts) CutShapeSimple(Vector2 cutPos, float minCutRadius, float maxCutRadius, int pointCount = 16) Parameters cutPos Vector2 minCutRadius float maxCutRadius float pointCount int Returns (Polygons newShapes, Polygons cutOuts) Equals(Polygon?) Indicates whether the current object is equal to another object of the same type. public bool Equals(Polygon? other) Parameters other Polygon An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. FindConvexHull(Points) public static Polygon FindConvexHull(Points points) Parameters points Points Returns Polygon FindConvexHull(Polygon) public static Polygon FindConvexHull(Polygon points) Parameters points Polygon Returns Polygon FindConvexHull(params Polygon[]) public static Polygon FindConvexHull(params Polygon[] shapes) Parameters shapes Polygon[] Returns Polygon FindConvexHull(List<Vector2>) public static Polygon FindConvexHull(List<Vector2> points) Parameters points List<Vector2> Returns Polygon FindConvexHull(params Vector2[]) public static Polygon FindConvexHull(params Vector2[] points) Parameters points Vector2[] Returns Polygon FixWindingOrder() public void FixWindingOrder() FractureSplit(Vector2, float, int) Generates a facture line in the direction of dir and splits the polygon with it. public Polygons? FractureSplit(Vector2 dir, float maxOffsetPercentage, int fractureLineComplexity) Parameters dir Vector2 The direction for the fracture. maxOffsetPercentage float Max distance each point can be offset along the fracture line. Value Range 0-1. Relative to segment length of the fracture line. fractureLineComplexity int How many points should be generated for the fracture line. Returns Polygons Generate(Segment, float, float, float, float) Generates a polygon around the given segment. Points are generated ccw around the segment beginning with the segment start. public static Polygon Generate(Segment segment, float magMin = 0.1, float magMax = 0.25, float minSectionLength = 0.025, float maxSectionLength = 0.1) Parameters segment Segment The segment to build a polygon around. magMin float The minimum perpendicular magnitude factor for generating a point. (0-1) magMax float The maximum perpendicular magnitude factor for generating a point. (0-1) minSectionLength float The minimum factor of the length between points along the line.(0-1) maxSectionLength float The maximum factor of the length between points along the line.(0-1) Returns Polygon Returns the a generated polygon. Generate(Vector2, int, float, float) public static Polygon Generate(Vector2 center, int pointCount, float minLength, float maxLength) Parameters center Vector2 pointCount int minLength float maxLength float Returns Polygon GenerateFractureLine(Vector2, Vector2, float, int) Generate a fracture line from start to end. public Segments? GenerateFractureLine(Vector2 start, Vector2 end, float maxOffsetPercentage, int linePoints) Parameters start Vector2 Start of the fracture line. end Vector2 End of the fracture line. maxOffsetPercentage float How far each point can be offset from the main line. Value Range 0-1. Relative to the segment length. linePoints int How many points should be generated. Final segment count = segmentPoints + 1. Returns Segments GenerateRelative(int, float, float) public static Polygon GenerateRelative(int pointCount, float minLength, float maxLength) Parameters pointCount int minLength float maxLength float Returns Polygon GetApothem() Computes the length of this polygon's apothem. This will only be valid if the polygon is regular. More info: http://en.wikipedia.org/wiki/Apothem public float GetApothem() Returns float Return the length of the apothem. GetArea() public float GetArea() Returns float GetBoundingBox() public Rect GetBoundingBox() Returns Rect GetBoundingBox(IEnumerable<Vector2>) Get a rect that encapsulates all points. public static Rect GetBoundingBox(IEnumerable<Vector2> points) Parameters points IEnumerable<Vector2> Returns Rect GetBoundingCircle() public Circle GetBoundingCircle() Returns Circle GetBoundingTriangle(IEnumerable<Vector2>, float) Get a triangle the encapsulates all points. public static Triangle GetBoundingTriangle(IEnumerable<Vector2> points, float marginFactor = 1) Parameters points IEnumerable<Vector2> marginFactor float A factor for scaling the final triangle. Returns Triangle GetBoundingTriangle(float) public Triangle GetBoundingTriangle(float margin = 3) Parameters margin float Returns Triangle GetCentroid() public Vector2 GetCentroid() Returns Vector2 GetCentroidMean() public Vector2 GetCentroidMean() Returns Vector2 GetClosestPoint(Circle) public ClosestPointResult GetClosestPoint(Circle other) Parameters other Circle Returns ClosestPointResult GetClosestPoint(Line) public ClosestPointResult GetClosestPoint(Line other) Parameters other Line Returns ClosestPointResult GetClosestPoint(Polygon) public ClosestPointResult GetClosestPoint(Polygon other) Parameters other Polygon Returns ClosestPointResult GetClosestPoint(Polyline) public ClosestPointResult GetClosestPoint(Polyline other) Parameters other Polyline Returns ClosestPointResult GetClosestPoint(Quad) public ClosestPointResult GetClosestPoint(Quad other) Parameters other Quad Returns ClosestPointResult GetClosestPoint(Ray) public ClosestPointResult GetClosestPoint(Ray other) Parameters other Ray Returns ClosestPointResult GetClosestPoint(Rect) public ClosestPointResult GetClosestPoint(Rect other) Parameters other Rect Returns ClosestPointResult GetClosestPoint(Segment) public ClosestPointResult GetClosestPoint(Segment other) Parameters other Segment Returns ClosestPointResult GetClosestPoint(Segments) public ClosestPointResult GetClosestPoint(Segments other) Parameters other Segments Returns ClosestPointResult GetClosestPoint(Triangle) public ClosestPointResult GetClosestPoint(Triangle other) Parameters other Triangle Returns ClosestPointResult GetClosestPoint(Vector2, out float) public CollisionPoint GetClosestPoint(Vector2 p, out float disSquared) Parameters p Vector2 disSquared float Returns CollisionPoint GetClosestPoint(Vector2, out float, out int) public CollisionPoint GetClosestPoint(Vector2 p, out float disSquared, out int index) Parameters p Vector2 disSquared float index int Returns CollisionPoint GetClosestPointPolygonPoint(List<Vector2>, Vector2, out float) public static Vector2 GetClosestPointPolygonPoint(List<Vector2> points, Vector2 p, out float disSquared) Parameters points List<Vector2> p Vector2 disSquared float Returns Vector2 GetClosestSegment(Vector2, out float) public (Segment segment, CollisionPoint segmentPoint) GetClosestSegment(Vector2 p, out float disSquared) Parameters p Vector2 disSquared float Returns (Segment segment, CollisionPoint segmentPoint) GetClosestVertex(Vector2, out float, out int) public Vector2 GetClosestVertex(Vector2 p, out float disSquared, out int index) Parameters p Vector2 disSquared float index int Returns Vector2 GetEdges() Return the segments of the polygon. If the points are in ccw winding order the normals face outward when InsideNormals = false and face inside otherwise. public Segments GetEdges() Returns Segments GetFurthestVertex(Vector2, out float, out int) public Vector2 GetFurthestVertex(Vector2 p, out float disSquared, out int index) Parameters p Vector2 disSquared float index int Returns Vector2 GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. GetPerimeter() public float GetPerimeter() Returns float GetPerimeterSquared() public float GetPerimeterSquared() Returns float GetProjectedShapePoints(Vector2) public Points? GetProjectedShapePoints(Vector2 v) Parameters v Vector2 Returns Points GetRandomEdge() public Segment GetRandomEdge() Returns Segment GetRandomPointConvex() public Vector2 GetRandomPointConvex() Returns Vector2 GetRandomPointInside() public Vector2 GetRandomPointInside() Returns Vector2 GetRandomPointOnEdge() public Vector2 GetRandomPointOnEdge() Returns Vector2 GetRandomPointsInside(int) public Points GetRandomPointsInside(int amount) Parameters amount int Returns Points GetRandomPointsOnEdge(int) public Points GetRandomPointsOnEdge(int amount) Parameters amount int Returns Points GetRandomVertex() public Vector2 GetRandomVertex() Returns Vector2 GetSegment(int) public Segment GetSegment(int index) Parameters index int Returns Segment GetSegmentAxis(Polygon, bool) public static List<Vector2> GetSegmentAxis(Polygon p, bool normalized = false) Parameters p Polygon normalized bool Returns List<Vector2> GetSegmentAxis(Segments, bool) public static List<Vector2> GetSegmentAxis(Segments edges, bool normalized = false) Parameters edges Segments normalized bool Returns List<Vector2> GetShape(Points, Transform2D) public static Polygon GetShape(Points relative, Transform2D transform) Parameters relative Points transform Transform2D Returns Polygon GetVertex(int) public Vector2 GetVertex(int index) Parameters index int Returns Vector2 IncreaseVertexCount(int) public void IncreaseVertexCount(int newCount) Parameters newCount int Intersect(Collider) public CollisionPoints? Intersect(Collider collider) Parameters collider Collider Returns CollisionPoints Intersect(Collider, ref CollisionPoints, bool) public int Intersect(Collider collider, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters collider Collider points CollisionPoints returnAfterFirstValid bool Returns int IntersectPolygonRay(List<Vector2>, Vector2, Vector2) public static CollisionPoints? IntersectPolygonRay(List<Vector2> polygon, Vector2 rayPoint, Vector2 rayDirection) Parameters polygon List<Vector2> rayPoint Vector2 rayDirection Vector2 Returns CollisionPoints IntersectPolygonRay(List<Vector2>, Vector2, Vector2, ref CollisionPoints) public static int IntersectPolygonRay(List<Vector2> polygon, Vector2 rayPoint, Vector2 rayDirection, ref CollisionPoints result) Parameters polygon List<Vector2> rayPoint Vector2 rayDirection Vector2 result CollisionPoints Returns int IntersectShape(Circle) public CollisionPoints? IntersectShape(Circle c) Parameters c Circle Returns CollisionPoints IntersectShape(Circle, ref CollisionPoints, bool) public int IntersectShape(Circle c, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters c Circle points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Line) public CollisionPoints? IntersectShape(Line l) Parameters l Line Returns CollisionPoints IntersectShape(Line, ref CollisionPoints, bool) public int IntersectShape(Line l, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters l Line points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Polygon) public CollisionPoints? IntersectShape(Polygon p) Parameters p Polygon Returns CollisionPoints IntersectShape(Polygon, ref CollisionPoints, bool) public int IntersectShape(Polygon p, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters p Polygon points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Polyline) public CollisionPoints? IntersectShape(Polyline pl) Parameters pl Polyline Returns CollisionPoints IntersectShape(Polyline, ref CollisionPoints, bool) public int IntersectShape(Polyline pl, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters pl Polyline points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Quad) public CollisionPoints? IntersectShape(Quad q) Parameters q Quad Returns CollisionPoints IntersectShape(Quad, ref CollisionPoints, bool) public int IntersectShape(Quad q, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters q Quad points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Ray) public CollisionPoints? IntersectShape(Ray r) Parameters r Ray Returns CollisionPoints IntersectShape(Ray, ref CollisionPoints, bool) public int IntersectShape(Ray r, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters r Ray points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Rect) public CollisionPoints? IntersectShape(Rect r) Parameters r Rect Returns CollisionPoints IntersectShape(Rect, ref CollisionPoints, bool) public int IntersectShape(Rect r, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters r Rect points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Segment) public CollisionPoints? IntersectShape(Segment s) Parameters s Segment Returns CollisionPoints IntersectShape(Segment, ref CollisionPoints, bool) public int IntersectShape(Segment s, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters s Segment points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Segments) public CollisionPoints? IntersectShape(Segments segments) Parameters segments Segments Returns CollisionPoints IntersectShape(Segments, ref CollisionPoints, bool) public int IntersectShape(Segments shape, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters shape Segments points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Triangle) public CollisionPoints? IntersectShape(Triangle t) Parameters t Triangle Returns CollisionPoints IntersectShape(Triangle, ref CollisionPoints, bool) public int IntersectShape(Triangle t, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters t Triangle points CollisionPoints returnAfterFirstValid bool Returns int IsClockwise() public bool IsClockwise() Returns bool IsConvex() public bool IsConvex() Returns bool MakeClockwise() public void MakeClockwise() MakeCounterClockwise() public void MakeCounterClockwise() MergeShape(Polygon, float) public Polygon? MergeShape(Polygon other, float distanceThreshold) Parameters other Polygon distanceThreshold float Returns Polygon MergeShapeSelf(Polygon, float) public bool MergeShapeSelf(Polygon other, float distanceThreshold) Parameters other Polygon distanceThreshold float Returns bool Overlap(Collider) public bool Overlap(Collider collider) Parameters collider Collider Returns bool OverlapCircle(Vector2, float) public bool OverlapCircle(Vector2 circleCenter, float circleRadius) Parameters circleCenter Vector2 circleRadius float Returns bool OverlapLine(Vector2, Vector2) public bool OverlapLine(Vector2 linePoint, Vector2 lineDirection) Parameters linePoint Vector2 lineDirection Vector2 Returns bool OverlapPolygon(List<Vector2>) public bool OverlapPolygon(List<Vector2> points) Parameters points List<Vector2> Returns bool OverlapPolygonCircle(List<Vector2>, Vector2, float) public static bool OverlapPolygonCircle(List<Vector2> points, Vector2 circleCenter, float circleRadius) Parameters points List<Vector2> circleCenter Vector2 circleRadius float Returns bool OverlapPolygonLine(List<Vector2>, Vector2, Vector2) public static bool OverlapPolygonLine(List<Vector2> points, Vector2 linePoint, Vector2 lineDirection) Parameters points List<Vector2> linePoint Vector2 lineDirection Vector2 Returns bool OverlapPolygonPolygon(List<Vector2>, List<Vector2>) public static bool OverlapPolygonPolygon(List<Vector2> points1, List<Vector2> points2) Parameters points1 List<Vector2> points2 List<Vector2> Returns bool OverlapPolygonPolyline(List<Vector2>, List<Vector2>) public static bool OverlapPolygonPolyline(List<Vector2> points1, List<Vector2> points2) Parameters points1 List<Vector2> points2 List<Vector2> Returns bool OverlapPolygonQuad(List<Vector2>, Vector2, Vector2, Vector2, Vector2) public static bool OverlapPolygonQuad(List<Vector2> points, Vector2 qa, Vector2 qb, Vector2 qc, Vector2 qd) Parameters points List<Vector2> qa Vector2 qb Vector2 qc Vector2 qd Vector2 Returns bool OverlapPolygonRay(List<Vector2>, Vector2, Vector2) public static bool OverlapPolygonRay(List<Vector2> points, Vector2 rayPoint, Vector2 rayDirection) Parameters points List<Vector2> rayPoint Vector2 rayDirection Vector2 Returns bool OverlapPolygonRect(List<Vector2>, Vector2, Vector2, Vector2, Vector2) public static bool OverlapPolygonRect(List<Vector2> points, Vector2 ra, Vector2 rb, Vector2 rc, Vector2 rd) Parameters points List<Vector2> ra Vector2 rb Vector2 rc Vector2 rd Vector2 Returns bool OverlapPolygonSegment(List<Vector2>, Vector2, Vector2) public static bool OverlapPolygonSegment(List<Vector2> points, Vector2 segmentStart, Vector2 segmentEnd) Parameters points List<Vector2> segmentStart Vector2 segmentEnd Vector2 Returns bool OverlapPolygonSegments(List<Vector2>, List<Segment>) public static bool OverlapPolygonSegments(List<Vector2> points, List<Segment> segments) Parameters points List<Vector2> segments List<Segment> Returns bool OverlapPolygonTriangle(List<Vector2>, Vector2, Vector2, Vector2) public static bool OverlapPolygonTriangle(List<Vector2> points, Vector2 ta, Vector2 tb, Vector2 tc) Parameters points List<Vector2> ta Vector2 tb Vector2 tc Vector2 Returns bool OverlapPolyline(List<Vector2>) public bool OverlapPolyline(List<Vector2> points) Parameters points List<Vector2> Returns bool OverlapQuad(Vector2, Vector2, Vector2, Vector2) public bool OverlapQuad(Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters a Vector2 b Vector2 c Vector2 d Vector2 Returns bool OverlapRay(Vector2, Vector2) public bool OverlapRay(Vector2 rayPoint, Vector2 rayDirection) Parameters rayPoint Vector2 rayDirection Vector2 Returns bool OverlapRect(Vector2, Vector2, Vector2, Vector2) public bool OverlapRect(Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters a Vector2 b Vector2 c Vector2 d Vector2 Returns bool OverlapSegment(Vector2, Vector2) public bool OverlapSegment(Vector2 segmentStart, Vector2 segmentEnd) Parameters segmentStart Vector2 segmentEnd Vector2 Returns bool OverlapSegments(List<Segment>) public bool OverlapSegments(List<Segment> segments) Parameters segments List<Segment> Returns bool OverlapShape(Circle) public bool OverlapShape(Circle c) Parameters c Circle Returns bool OverlapShape(Line) public bool OverlapShape(Line line) Parameters line Line Returns bool OverlapShape(Polygon) public bool OverlapShape(Polygon b) Parameters b Polygon Returns bool OverlapShape(Polyline) public bool OverlapShape(Polyline pl) Parameters pl Polyline Returns bool OverlapShape(Quad) public bool OverlapShape(Quad q) Parameters q Quad Returns bool OverlapShape(Ray) public bool OverlapShape(Ray ray) Parameters ray Ray Returns bool OverlapShape(Rect) public bool OverlapShape(Rect r) Parameters r Rect Returns bool OverlapShape(Segment) public bool OverlapShape(Segment s) Parameters s Segment Returns bool OverlapShape(Segments) public bool OverlapShape(Segments segments) Parameters segments Segments Returns bool OverlapShape(Triangle) public bool OverlapShape(Triangle t) Parameters t Triangle Returns bool OverlapTriangle(Vector2, Vector2, Vector2) public bool OverlapTriangle(Vector2 a, Vector2 b, Vector2 c) Parameters a Vector2 b Vector2 c Vector2 Returns bool ProjectShape(Vector2) public Polygon? ProjectShape(Vector2 v) Parameters v Vector2 Returns Polygon ReduceVertexCount(int) public void ReduceVertexCount(int newCount) Parameters newCount int ReduceVertexCount(float) public void ReduceVertexCount(float factor) Parameters factor float RemoveColinearVertices() public void RemoveColinearVertices() RemoveDuplicates(float) public void RemoveDuplicates(float toleranceSquared = 0.001) Parameters toleranceSquared float ScaleSize(float) public void ScaleSize(float scale) Parameters scale float ScaleSizeCopy(Vector2, Vector2) public Polygon? ScaleSizeCopy(Vector2 scale, Vector2 origin) Parameters scale Vector2 origin Vector2 Returns Polygon ScaleSizeCopy(float) public Polygon? ScaleSizeCopy(float scale) Parameters scale float Returns Polygon ScaleSizeCopy(float, Vector2) public Polygon? ScaleSizeCopy(float scale, Vector2 origin) Parameters scale float origin Vector2 Returns Polygon SetPosition(Vector2) public void SetPosition(Vector2 newPosition) Parameters newPosition Vector2 SetPositionCopy(Vector2) public Polygon? SetPositionCopy(Vector2 newPosition) Parameters newPosition Vector2 Returns Polygon SetRotation(float) public void SetRotation(float angleRad) Parameters angleRad float SetRotationCopy(float) public Polygon? SetRotationCopy(float angleRad) Parameters angleRad float Returns Polygon SetRotationCopy(float, Vector2) public Polygon? SetRotationCopy(float angleRad, Vector2 origin) Parameters angleRad float origin Vector2 Returns Polygon SetSize(float) public void SetSize(float size) Parameters size float SetSizeCopy(float) public Polygon? SetSizeCopy(float size) Parameters size float Returns Polygon SetSizeCopy(float, Vector2) public Polygon? SetSizeCopy(float size, Vector2 origin) Parameters size float origin Vector2 Returns Polygon SetTransformCopy(Transform2D, Vector2) public Polygon? SetTransformCopy(Transform2D transform, Vector2 origin) Parameters transform Transform2D origin Vector2 Returns Polygon Smooth(float, float) public void Smooth(float amount, float baseWeight) Parameters amount float baseWeight float Split(Line) public Polygons? Split(Line line) Parameters line Line Returns Polygons Split(Segment) public Polygons? Split(Segment segment) Parameters segment Segment Returns Polygons Split(Segments) public Polygons? Split(Segments segments) Parameters segments Segments Returns Polygons Split(Vector2, Vector2) public Polygons? Split(Vector2 point, Vector2 direction) Parameters point Vector2 direction Vector2 Returns Polygons ToConvex() public Polygon ToConvex() Returns Polygon ToPoints() public Points ToPoints() Returns Points ToRelative() public (Transform2D transform, Polygon shape) ToRelative() Returns (Transform2D transform, Polygon shape) ToRelative(Transform2D) public List<Vector2> ToRelative(Transform2D transform) Parameters transform Transform2D Returns List<Vector2> ToRelativePoints(Transform2D) public Points ToRelativePoints(Transform2D transform) Parameters transform Transform2D Returns Points ToRelativePolygon(Transform2D) public Polygon ToRelativePolygon(Transform2D transform) Parameters transform Transform2D Returns Polygon Triangulate() public Triangulation Triangulate() Returns Triangulation TriangulateDelaunay(IEnumerable<Vector2>) Triangulates a set of points. Only works with non self intersecting shapes. public static Triangulation TriangulateDelaunay(IEnumerable<Vector2> points) Parameters points IEnumerable<Vector2> The points to triangulate. Can be any set of points. (polygons as well) Returns Triangulation TriangulateDelaunay(IEnumerable<Vector2>, Triangle) Triangulates a set of points. Only works with non self intersecting shapes. public static Triangulation TriangulateDelaunay(IEnumerable<Vector2> points, Triangle supraTriangle) Parameters points IEnumerable<Vector2> The points to triangulate. Can be any set of points. (polygons as well) supraTriangle Triangle The triangle that encapsulates all the points. Returns Triangulation UnionShapeSelf(Polygon, FillRule) public void UnionShapeSelf(Polygon b, FillRule fillRule = FillRule.NonZero) Parameters b Polygon fillRule FillRule"
  },
  "api/ShapeEngine.Core.Shapes.Polyline.html": {
    "href": "api/ShapeEngine.Core.Shapes.Polyline.html",
    "title": "Class Polyline | ShapeEngine",
    "summary": "Class Polyline Namespace ShapeEngine.Core.Shapes Assembly ShapeEngine.dll public class Polyline : Points, IList<Vector2>, ICollection<Vector2>, IReadOnlyList<Vector2>, IReadOnlyCollection<Vector2>, IEnumerable<Vector2>, IList, ICollection, IEnumerable, IEquatable<Points>, IEquatable<Polyline> Inheritance object List<Vector2> ShapeList<Vector2> Points Polyline Implements IList<Vector2> ICollection<Vector2> IReadOnlyList<Vector2> IReadOnlyCollection<Vector2> IEnumerable<Vector2> IList ICollection IEnumerable IEquatable<Points> IEquatable<Polyline> Inherited Members Points.Equals(Points) Points.GetPoint(int) Points.GetClosestIndex(Vector2) Points.GetClosestVertex(Vector2) Points.GetUniquePoints() Points.GetRandomPoint() Points.GetRandomPoints(int) Points.Floor() Points.Ceiling() Points.Truncate() Points.Round() Points.Copy() Points.ToPolygon() Points.ToPolyline() Points.ToRelative(Vector2) Points.GetRelativeVector2List(Vector2) Points.GetRelativeVector2List(Transform2D) Points.GetRelativePoints(Vector2) Points.GetRelativePoints(Transform2D) Points.SetPosition(Vector2, Vector2) Points.ChangePosition(Vector2) Points.ChangeRotation(float, Vector2) Points.SetRotation(float, Vector2) Points.ScaleSize(float, Vector2) Points.ScaleSize(Vector2, Vector2) Points.ChangeSize(float, Vector2) Points.SetSize(float, Vector2) Points.SetTransform(Transform2D, Vector2) Points.ApplyOffset(Transform2D, Vector2) Points.SetPositionCopy(Vector2, Vector2) Points.Floor(List<Vector2>) Points.Ceiling(List<Vector2>) Points.Round(List<Vector2>) Points.Truncate(List<Vector2>) Points.GetInterpolatedEdgePoints(float) Points.GetInterpolatedEdgePoints(float, int) Points.SortClosestFirst(Vector2) Points.SortFurthestFirst(Vector2) ShapeList<Vector2>.AddRange(params Vector2[]) ShapeList<Vector2>.IsIndexValid(int) ShapeList<Vector2>.GetRandomItem() ShapeList<Vector2>.GetRandomItems(int) ShapeList<Vector2>.GetItem(int) List<Vector2>.Add(Vector2) List<Vector2>.AddRange(IEnumerable<Vector2>) List<Vector2>.AsReadOnly() List<Vector2>.BinarySearch(int, int, Vector2, IComparer<Vector2>) List<Vector2>.BinarySearch(Vector2) List<Vector2>.BinarySearch(Vector2, IComparer<Vector2>) List<Vector2>.Clear() List<Vector2>.Contains(Vector2) List<Vector2>.ConvertAll<TOutput>(Converter<Vector2, TOutput>) List<Vector2>.CopyTo(int, Vector2[], int, int) List<Vector2>.CopyTo(Vector2[]) List<Vector2>.CopyTo(Vector2[], int) List<Vector2>.EnsureCapacity(int) List<Vector2>.Exists(Predicate<Vector2>) List<Vector2>.Find(Predicate<Vector2>) List<Vector2>.FindAll(Predicate<Vector2>) List<Vector2>.FindIndex(int, int, Predicate<Vector2>) List<Vector2>.FindIndex(int, Predicate<Vector2>) List<Vector2>.FindIndex(Predicate<Vector2>) List<Vector2>.FindLast(Predicate<Vector2>) List<Vector2>.FindLastIndex(int, int, Predicate<Vector2>) List<Vector2>.FindLastIndex(int, Predicate<Vector2>) List<Vector2>.FindLastIndex(Predicate<Vector2>) List<Vector2>.ForEach(Action<Vector2>) List<Vector2>.GetEnumerator() List<Vector2>.GetRange(int, int) List<Vector2>.IndexOf(Vector2) List<Vector2>.IndexOf(Vector2, int) List<Vector2>.IndexOf(Vector2, int, int) List<Vector2>.Insert(int, Vector2) List<Vector2>.InsertRange(int, IEnumerable<Vector2>) List<Vector2>.LastIndexOf(Vector2) List<Vector2>.LastIndexOf(Vector2, int) List<Vector2>.LastIndexOf(Vector2, int, int) List<Vector2>.Remove(Vector2) List<Vector2>.RemoveAll(Predicate<Vector2>) List<Vector2>.RemoveAt(int) List<Vector2>.RemoveRange(int, int) List<Vector2>.Reverse() List<Vector2>.Reverse(int, int) List<Vector2>.Slice(int, int) List<Vector2>.Sort() List<Vector2>.Sort(IComparer<Vector2>) List<Vector2>.Sort(Comparison<Vector2>) List<Vector2>.Sort(int, int, IComparer<Vector2>) List<Vector2>.ToArray() List<Vector2>.TrimExcess() List<Vector2>.TrueForAll(Predicate<Vector2>) List<Vector2>.Capacity List<Vector2>.Count List<Vector2>.this[int] object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ShapeGappedDrawing.DrawGappedOutline(Points, float, LineDrawingInfo, GappedOutlineDrawingInfo) ShapePointDrawing.Draw(Points, float, ColorRgba, int) ShapeGappedDrawing.DrawGappedOutline(Polyline, float, LineDrawingInfo, GappedOutlineDrawingInfo) ShapePolylineDrawing.Draw(Polyline, LineDrawingInfo) ShapePolylineDrawing.Draw(Polyline, Transform2D, LineDrawingInfo) ShapePolylineDrawing.Draw(Polyline, Transform2D, float, ColorRgba, LineCapType, int) ShapePolylineDrawing.Draw(Polyline, List<ColorRgba>, LineDrawingInfo) ShapePolylineDrawing.Draw(Polyline, Vector2, float, float, LineDrawingInfo) ShapePolylineDrawing.Draw(Polyline, Vector2, float, float, float, ColorRgba, LineCapType, int) ShapePolylineDrawing.Draw(Polyline, float, ColorRgba, LineCapType, int) ShapePolylineDrawing.Draw(Polyline, float, List<ColorRgba>, LineCapType, int) ShapePolylineDrawing.DrawGlow(Polyline, float, float, ColorRgba, ColorRgba, int, LineCapType, int) ShapePolylineDrawing.DrawLinesScaled(Polyline, LineDrawingInfo, float, float) ShapePolylineDrawing.DrawLinesScaled(Polyline, Transform2D, LineDrawingInfo, float, float) ShapePolylineDrawing.DrawLinesScaled(Polyline, Vector2, float, float, LineDrawingInfo, float, float) ShapePolylineDrawing.DrawPercentage(Polyline, float, LineDrawingInfo) ShapePolylineDrawing.DrawPercentage(Polyline, float, float, ColorRgba, LineCapType, int) ShapePolylineDrawing.DrawPerimeter(Polyline, float, LineDrawingInfo) ShapePolylineDrawing.DrawPerimeter(Polyline, float, float, ColorRgba, LineCapType, int) ShapePolylineDrawing.DrawVertices(Polyline, float, ColorRgba, int) ShapeClipper.Inflate(Polyline, float, JoinType, EndType, float, int) ShapeClipper.ToClipperPath(Polyline) ShapeClipper.ToClipperPaths(Polyline) ShapeDrawing.DrawLinesScaled(List<Vector2>, LineDrawingInfo, float, float) ShapeDrawing.DrawLinesScaled(List<Vector2>, Transform2D, LineDrawingInfo, float, float) ShapeDrawing.DrawLinesScaled(List<Vector2>, Vector2, float, float, LineDrawingInfo, float, float) ShapeDrawing.DrawOutline(List<Vector2>, LineDrawingInfo) ShapeDrawing.DrawOutline(List<Vector2>, Transform2D, LineDrawingInfo) ShapeDrawing.DrawOutline(List<Vector2>, Transform2D, float, ColorRgba, LineCapType, int) ShapeDrawing.DrawOutline(List<Vector2>, Vector2, float, float, LineDrawingInfo) ShapeDrawing.DrawOutline(List<Vector2>, Vector2, float, float, float, ColorRgba, LineCapType, int) ShapeDrawing.DrawOutline(List<Vector2>, float, ColorRgba, ColorRgba, LineCapType, int) ShapeDrawing.DrawOutline(List<Vector2>, float, ColorRgba, LineCapType, int) ShapeDrawing.DrawOutline(List<Vector2>, float, ColorRgba, float, LineCapType, int) ShapeDrawing.DrawOutlineCornered(List<Vector2>, LineDrawingInfo, List<float>) ShapeDrawing.DrawOutlineCornered(List<Vector2>, LineDrawingInfo, float) ShapeDrawing.DrawOutlineCornered(List<Vector2>, List<float>, LineDrawingInfo) ShapeDrawing.DrawOutlineCornered(List<Vector2>, float, ColorRgba, List<float>, LineCapType, int) ShapeDrawing.DrawOutlineCornered(List<Vector2>, float, ColorRgba, float, LineCapType, int) ShapeDrawing.DrawOutlineCornered(List<Vector2>, float, LineDrawingInfo) ShapeDrawing.DrawOutlineCorneredRelative(List<Vector2>, LineDrawingInfo, List<float>) ShapeDrawing.DrawOutlineCorneredRelative(List<Vector2>, LineDrawingInfo, float) ShapeDrawing.DrawOutlineCorneredRelative(List<Vector2>, List<float>, LineDrawingInfo) ShapeDrawing.DrawOutlineCorneredRelative(List<Vector2>, float, ColorRgba, List<float>, LineCapType, int) ShapeDrawing.DrawOutlineCorneredRelative(List<Vector2>, float, ColorRgba, float, LineCapType, int) ShapeDrawing.DrawOutlineCorneredRelative(List<Vector2>, float, LineDrawingInfo) ShapeDrawing.DrawOutlinePercentage(List<Vector2>, float, float, ColorRgba, LineCapType, int) ShapeDrawing.DrawOutlinePerimeter(List<Vector2>, float, int, float, ColorRgba, LineCapType, int) ShapeDrawing.DrawVertices(List<Vector2>, float, ColorRgba, int) ShapeGappedDrawing.DrawGappedOutline(List<Vector2>, float, LineDrawingInfo, GappedOutlineDrawingInfo) Constructors Polyline() public Polyline() Polyline(Points) public Polyline(Points points) Parameters points Points Polyline(Polygon) public Polyline(Polygon poly) Parameters poly Polygon Polyline(Polyline) public Polyline(Polyline polyLine) Parameters polyLine Polyline Polyline(IEnumerable<Vector2>) Points should be in CCW order. Use Reverse if they are in CW order. public Polyline(IEnumerable<Vector2> points) Parameters points IEnumerable<Vector2> Polyline(int) public Polyline(int capacity) Parameters capacity int Methods ApplyOffsetCopy(Transform2D, Vector2) public Polyline? ApplyOffsetCopy(Transform2D offset, Vector2 origin) Parameters offset Transform2D origin Vector2 Returns Polyline ChangePositionCopy(Vector2) public Polyline? ChangePositionCopy(Vector2 offset) Parameters offset Vector2 Returns Polyline ChangeRotation(float) public void ChangeRotation(float rotRad) Parameters rotRad float ChangeRotationCopy(float) public Polyline? ChangeRotationCopy(float rotRad) Parameters rotRad float Returns Polyline ChangeRotationCopy(float, Vector2) public Polyline? ChangeRotationCopy(float rotRad, Vector2 origin) Parameters rotRad float origin Vector2 Returns Polyline ChangeSize(float) public void ChangeSize(float amount) Parameters amount float ChangeSizeCopy(float) public Polyline? ChangeSizeCopy(float amount) Parameters amount float Returns Polyline ChangeSizeCopy(float, Vector2) public Polyline? ChangeSizeCopy(float amount, Vector2 origin) Parameters amount float origin Vector2 Returns Polyline Equals(Polyline?) Indicates whether the current object is equal to another object of the same type. public bool Equals(Polyline? other) Parameters other Polyline An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetBoundingBox() public Rect GetBoundingBox() Returns Rect GetBoundingCircle() public Circle GetBoundingCircle() Returns Circle GetCentroidMean() public Vector2 GetCentroidMean() Returns Vector2 GetCentroidOnLine() public Vector2 GetCentroidOnLine() Returns Vector2 GetClosestPoint(Circle) public ClosestPointResult GetClosestPoint(Circle other) Parameters other Circle Returns ClosestPointResult GetClosestPoint(Line) public ClosestPointResult GetClosestPoint(Line other) Parameters other Line Returns ClosestPointResult GetClosestPoint(Polygon) public ClosestPointResult GetClosestPoint(Polygon other) Parameters other Polygon Returns ClosestPointResult GetClosestPoint(Polyline) public ClosestPointResult GetClosestPoint(Polyline other) Parameters other Polyline Returns ClosestPointResult GetClosestPoint(Quad) public ClosestPointResult GetClosestPoint(Quad other) Parameters other Quad Returns ClosestPointResult GetClosestPoint(Ray) public ClosestPointResult GetClosestPoint(Ray other) Parameters other Ray Returns ClosestPointResult GetClosestPoint(Rect) public ClosestPointResult GetClosestPoint(Rect other) Parameters other Rect Returns ClosestPointResult GetClosestPoint(Segment) public ClosestPointResult GetClosestPoint(Segment other) Parameters other Segment Returns ClosestPointResult GetClosestPoint(Segments) public ClosestPointResult GetClosestPoint(Segments other) Parameters other Segments Returns ClosestPointResult GetClosestPoint(Triangle) public ClosestPointResult GetClosestPoint(Triangle other) Parameters other Triangle Returns ClosestPointResult GetClosestPoint(Vector2, out float) public CollisionPoint GetClosestPoint(Vector2 p, out float disSquared) Parameters p Vector2 disSquared float Returns CollisionPoint GetClosestPoint(Vector2, out float, out int) public CollisionPoint GetClosestPoint(Vector2 p, out float disSquared, out int index) Parameters p Vector2 disSquared float index int Returns CollisionPoint GetClosestPointPolylinePoint(List<Vector2>, Vector2, out float) public static Vector2 GetClosestPointPolylinePoint(List<Vector2> points, Vector2 p, out float disSquared) Parameters points List<Vector2> p Vector2 disSquared float Returns Vector2 GetClosestSegment(Vector2, out float) public (Segment segment, CollisionPoint segmentPoint) GetClosestSegment(Vector2 p, out float disSquared) Parameters p Vector2 disSquared float Returns (Segment segment, CollisionPoint segmentPoint) GetClosestVertex(Vector2, out float, out int) public Vector2 GetClosestVertex(Vector2 p, out float disSquared, out int index) Parameters p Vector2 disSquared float index int Returns Vector2 GetEdges() Return the segments of the polyline. If points are in ccw order the normals face to the right of the direction of the segments. If InsideNormals = true the normals face to the left of the direction of the segments. public Segments GetEdges() Returns Segments GetFurthestVertex(Vector2, out float, out int) public Vector2 GetFurthestVertex(Vector2 p, out float disSquared, out int index) Parameters p Vector2 disSquared float index int Returns Vector2 GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. GetLength() public float GetLength() Returns float GetLengthSquared() public float GetLengthSquared() Returns float GetPoint(float) public Vector2 GetPoint(float f) Parameters f float Returns Vector2 GetProjectedShapePoints(Vector2) public Points? GetProjectedShapePoints(Vector2 v) Parameters v Vector2 Returns Points GetRandomEdge() public Segment GetRandomEdge() Returns Segment GetRandomVertex() public Vector2 GetRandomVertex() Returns Vector2 GetSegment(int) public Segment GetSegment(int index) Parameters index int Returns Segment GetShape(Points, Transform2D) public static Polyline GetShape(Points relative, Transform2D transform) Parameters relative Points transform Transform2D Returns Polyline InterpolatedEdgePoints(float) Interpolate the edge(segment) between each pair of points using t and return the new interpolated points. public Points? InterpolatedEdgePoints(float t) Parameters t float The value t for interpolation. Should be between 0 - 1. Returns Points InterpolatedEdgePoints(float, int) Interpolate the edge(segment) between each pair of points using t and return the new interpolated points. public Points? InterpolatedEdgePoints(float t, int steps) Parameters t float The value t for interpolation. Should be between 0 - 1. steps int Recursive steps. The amount of times the result of InterpolatedEdgesPoints will be run through InterpolateEdgePoints. Returns Points Intersect(Collider) public CollisionPoints? Intersect(Collider collider) Parameters collider Collider Returns CollisionPoints Intersect(Collider, ref CollisionPoints, bool) public int Intersect(Collider collider, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters collider Collider points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Circle) public CollisionPoints? IntersectShape(Circle c) Parameters c Circle Returns CollisionPoints IntersectShape(Circle, ref CollisionPoints, bool) public int IntersectShape(Circle c, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters c Circle points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Line) public CollisionPoints? IntersectShape(Line l) Parameters l Line Returns CollisionPoints IntersectShape(Line, ref CollisionPoints, bool) public int IntersectShape(Line l, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters l Line points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Polygon) public CollisionPoints? IntersectShape(Polygon p) Parameters p Polygon Returns CollisionPoints IntersectShape(Polygon, ref CollisionPoints, bool) public int IntersectShape(Polygon p, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters p Polygon points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Polyline) public CollisionPoints? IntersectShape(Polyline pl) Parameters pl Polyline Returns CollisionPoints IntersectShape(Polyline, ref CollisionPoints, bool) public int IntersectShape(Polyline pl, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters pl Polyline points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Quad) public CollisionPoints? IntersectShape(Quad q) Parameters q Quad Returns CollisionPoints IntersectShape(Quad, ref CollisionPoints, bool) public int IntersectShape(Quad q, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters q Quad points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Ray) public CollisionPoints? IntersectShape(Ray ray) Parameters ray Ray Returns CollisionPoints IntersectShape(Ray, ref CollisionPoints, bool) public int IntersectShape(Ray r, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters r Ray points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Rect) public CollisionPoints? IntersectShape(Rect r) Parameters r Rect Returns CollisionPoints IntersectShape(Rect, ref CollisionPoints, bool) public int IntersectShape(Rect r, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters r Rect points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Segment) public CollisionPoints? IntersectShape(Segment s) Parameters s Segment Returns CollisionPoints IntersectShape(Segment, ref CollisionPoints, bool) public int IntersectShape(Segment s, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters s Segment points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Segments) public CollisionPoints? IntersectShape(Segments segments) Parameters segments Segments Returns CollisionPoints IntersectShape(Segments, ref CollisionPoints, bool) public int IntersectShape(Segments shape, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters shape Segments points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Triangle) public CollisionPoints? IntersectShape(Triangle t) Parameters t Triangle Returns CollisionPoints IntersectShape(Triangle, ref CollisionPoints, bool) public int IntersectShape(Triangle t, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters t Triangle points CollisionPoints returnAfterFirstValid bool Returns int Overlap(Collider) public bool Overlap(Collider collider) Parameters collider Collider Returns bool OverlapCircle(Vector2, float) public bool OverlapCircle(Vector2 circleCenter, float circleRadius) Parameters circleCenter Vector2 circleRadius float Returns bool OverlapLine(Vector2, Vector2) public bool OverlapLine(Vector2 linePoint, Vector2 lineDirection) Parameters linePoint Vector2 lineDirection Vector2 Returns bool OverlapPoint(Vector2) public bool OverlapPoint(Vector2 p) Parameters p Vector2 Returns bool OverlapPolygon(List<Vector2>) public bool OverlapPolygon(List<Vector2> points) Parameters points List<Vector2> Returns bool OverlapPolyline(List<Vector2>) public bool OverlapPolyline(List<Vector2> points) Parameters points List<Vector2> Returns bool OverlapPolylineCircle(List<Vector2>, Vector2, float) public static bool OverlapPolylineCircle(List<Vector2> points, Vector2 circleCenter, float circleRadius) Parameters points List<Vector2> circleCenter Vector2 circleRadius float Returns bool OverlapPolylineLine(List<Vector2>, Vector2, Vector2) public static bool OverlapPolylineLine(List<Vector2> points, Vector2 linePoint, Vector2 lineDirection) Parameters points List<Vector2> linePoint Vector2 lineDirection Vector2 Returns bool OverlapPolylinePolygon(List<Vector2>, List<Vector2>) public static bool OverlapPolylinePolygon(List<Vector2> points1, List<Vector2> points2) Parameters points1 List<Vector2> points2 List<Vector2> Returns bool OverlapPolylinePolyline(List<Vector2>, List<Vector2>) public static bool OverlapPolylinePolyline(List<Vector2> points1, List<Vector2> points2) Parameters points1 List<Vector2> points2 List<Vector2> Returns bool OverlapPolylineQuad(List<Vector2>, Vector2, Vector2, Vector2, Vector2) public static bool OverlapPolylineQuad(List<Vector2> points, Vector2 qa, Vector2 qb, Vector2 qc, Vector2 qd) Parameters points List<Vector2> qa Vector2 qb Vector2 qc Vector2 qd Vector2 Returns bool OverlapPolylineRay(List<Vector2>, Vector2, Vector2) public static bool OverlapPolylineRay(List<Vector2> points, Vector2 rayPoint, Vector2 rayDirection) Parameters points List<Vector2> rayPoint Vector2 rayDirection Vector2 Returns bool OverlapPolylineRect(List<Vector2>, Vector2, Vector2, Vector2, Vector2) public static bool OverlapPolylineRect(List<Vector2> points, Vector2 ra, Vector2 rb, Vector2 rc, Vector2 rd) Parameters points List<Vector2> ra Vector2 rb Vector2 rc Vector2 rd Vector2 Returns bool OverlapPolylineSegment(List<Vector2>, Vector2, Vector2) public static bool OverlapPolylineSegment(List<Vector2> points, Vector2 segmentStart, Vector2 segmentEnd) Parameters points List<Vector2> segmentStart Vector2 segmentEnd Vector2 Returns bool OverlapPolylineSegments(List<Vector2>, List<Segment>) public static bool OverlapPolylineSegments(List<Vector2> points, List<Segment> segments) Parameters points List<Vector2> segments List<Segment> Returns bool OverlapPolylineTriangle(List<Vector2>, Vector2, Vector2, Vector2) public static bool OverlapPolylineTriangle(List<Vector2> points, Vector2 ta, Vector2 tb, Vector2 tc) Parameters points List<Vector2> ta Vector2 tb Vector2 tc Vector2 Returns bool OverlapQuad(Vector2, Vector2, Vector2, Vector2) public bool OverlapQuad(Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters a Vector2 b Vector2 c Vector2 d Vector2 Returns bool OverlapRay(Vector2, Vector2) public bool OverlapRay(Vector2 rayPoint, Vector2 rayDirection) Parameters rayPoint Vector2 rayDirection Vector2 Returns bool OverlapRect(Vector2, Vector2, Vector2, Vector2) public bool OverlapRect(Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters a Vector2 b Vector2 c Vector2 d Vector2 Returns bool OverlapSegment(Vector2, Vector2) public bool OverlapSegment(Vector2 segmentStart, Vector2 segmentEnd) Parameters segmentStart Vector2 segmentEnd Vector2 Returns bool OverlapSegments(List<Segment>) public bool OverlapSegments(List<Segment> segments) Parameters segments List<Segment> Returns bool OverlapShape(Circle) public bool OverlapShape(Circle c) Parameters c Circle Returns bool OverlapShape(Line) public bool OverlapShape(Line line) Parameters line Line Returns bool OverlapShape(Polygon) public bool OverlapShape(Polygon p) Parameters p Polygon Returns bool OverlapShape(Polyline) public bool OverlapShape(Polyline b) Parameters b Polyline Returns bool OverlapShape(Quad) public bool OverlapShape(Quad q) Parameters q Quad Returns bool OverlapShape(Ray) public bool OverlapShape(Ray ray) Parameters ray Ray Returns bool OverlapShape(Rect) public bool OverlapShape(Rect r) Parameters r Rect Returns bool OverlapShape(Segment) public bool OverlapShape(Segment s) Parameters s Segment Returns bool OverlapShape(Segments) public bool OverlapShape(Segments segments) Parameters segments Segments Returns bool OverlapShape(Triangle) public bool OverlapShape(Triangle t) Parameters t Triangle Returns bool OverlapTriangle(Vector2, Vector2, Vector2) public bool OverlapTriangle(Vector2 a, Vector2 b, Vector2 c) Parameters a Vector2 b Vector2 c Vector2 Returns bool ProjectShape(Vector2) public Polygon? ProjectShape(Vector2 v) Parameters v Vector2 Returns Polygon ScaleSize(float) public void ScaleSize(float scale) Parameters scale float ScaleSizeCopy(Vector2, Vector2) public Polyline? ScaleSizeCopy(Vector2 scale, Vector2 origin) Parameters scale Vector2 origin Vector2 Returns Polyline ScaleSizeCopy(float) public Polyline? ScaleSizeCopy(float scale) Parameters scale float Returns Polyline ScaleSizeCopy(float, Vector2) public Polyline? ScaleSizeCopy(float scale, Vector2 origin) Parameters scale float origin Vector2 Returns Polyline SetPosition(Vector2) public void SetPosition(Vector2 newPosition) Parameters newPosition Vector2 SetPositionCopy(Vector2) public Polyline? SetPositionCopy(Vector2 newPosition) Parameters newPosition Vector2 Returns Polyline SetRotation(float) public void SetRotation(float angleRad) Parameters angleRad float SetRotationCopy(float) public Polyline? SetRotationCopy(float angleRad) Parameters angleRad float Returns Polyline SetRotationCopy(float, Vector2) public Polyline? SetRotationCopy(float angleRad, Vector2 origin) Parameters angleRad float origin Vector2 Returns Polyline SetSize(float) public void SetSize(float size) Parameters size float SetSizeCopy(float) public Polyline? SetSizeCopy(float size) Parameters size float Returns Polyline SetSizeCopy(float, Vector2) public Polyline? SetSizeCopy(float size, Vector2 origin) Parameters size float origin Vector2 Returns Polyline SetTransformCopy(Transform2D, Vector2) public Polyline? SetTransformCopy(Transform2D transform, Vector2 origin) Parameters transform Transform2D origin Vector2 Returns Polyline ToPoints() public Points ToPoints() Returns Points"
  },
  "api/ShapeEngine.Core.Shapes.Quad.html": {
    "href": "api/ShapeEngine.Core.Shapes.Quad.html",
    "title": "Struct Quad | ShapeEngine",
    "summary": "Struct Quad Namespace ShapeEngine.Core.Shapes Assembly ShapeEngine.dll Points should be in CCW order (A -> B -> C -> D) public readonly struct Quad : IEquatable<Quad> Implements IEquatable<Quad> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ShapeGappedDrawing.DrawGappedOutline(Quad, float, LineDrawingInfo, GappedOutlineDrawingInfo) ShapeQuadDrawing.Draw(Quad, ColorRgba) ShapeQuadDrawing.DrawLines(Quad, LineDrawingInfo) ShapeQuadDrawing.DrawLines(Quad, float, ColorRgba, LineCapType, int) ShapeQuadDrawing.DrawLines(Quad, float, ColorRgba, float, LineCapType, int) ShapeQuadDrawing.DrawLinesPercentage(Quad, float, LineDrawingInfo) ShapeQuadDrawing.DrawLinesPercentage(Quad, float, float, ColorRgba, LineCapType, int) ShapeQuadDrawing.DrawLinesScaled(Quad, LineDrawingInfo, float, AnchorPoint, float, float) ShapeQuadDrawing.DrawVertices(Quad, float, ColorRgba, int) ShapeStripedDrawing.DrawStriped(Quad, Circle, float, float, LineDrawingInfo, float) ShapeStripedDrawing.DrawStriped(Quad, Polygon, float, float, LineDrawingInfo, float) ShapeStripedDrawing.DrawStriped(Quad, Quad, float, float, LineDrawingInfo, float) ShapeStripedDrawing.DrawStriped(Quad, Rect, float, float, LineDrawingInfo, float) ShapeStripedDrawing.DrawStriped(Quad, Triangle, float, float, LineDrawingInfo, float) ShapeStripedDrawing.DrawStriped(Quad, CurveFloat, float, LineDrawingInfo) ShapeStripedDrawing.DrawStriped(Quad, CurveFloat, float, LineDrawingInfo, LineDrawingInfo) ShapeStripedDrawing.DrawStriped(Quad, CurveFloat, float, params LineDrawingInfo[]) ShapeStripedDrawing.DrawStriped(Quad, float, float, LineDrawingInfo, LineDrawingInfo) ShapeStripedDrawing.DrawStriped(Quad, float, float, LineDrawingInfo, float) ShapeStripedDrawing.DrawStriped(Quad, float, float, params LineDrawingInfo[]) Constructors Quad(Rect) public Quad(Rect rect) Parameters rect Rect Quad(Rect, float, AnchorPoint) public Quad(Rect rect, float rotRad, AnchorPoint pivot) Parameters rect Rect rotRad float pivot AnchorPoint Quad(Vector2, Size, float, AnchorPoint) public Quad(Vector2 pos, Size size, float rotRad, AnchorPoint alignement) Parameters pos Vector2 size Size rotRad float alignement AnchorPoint Quad(Vector2, Vector2) public Quad(Vector2 topLeft, Vector2 bottomRight) Parameters topLeft Vector2 bottomRight Vector2 Quad(Vector2, float, float) public Quad(Vector2 topLeft, float width, float height) Parameters topLeft Vector2 width float height float Fields A public readonly Vector2 A Field Value Vector2 B public readonly Vector2 B Field Value Vector2 C public readonly Vector2 C Field Value Vector2 D public readonly Vector2 D Field Value Vector2 Properties AB public Vector2 AB { get; } Property Value Vector2 AngleRad public float AngleRad { get; } Property Value float BC public Vector2 BC { get; } Property Value Vector2 CD public Vector2 CD { get; } Property Value Vector2 Center public Vector2 Center { get; } Property Value Vector2 DA public Vector2 DA { get; } Property Value Vector2 SegmentAToB public Segment SegmentAToB { get; } Property Value Segment SegmentBToC public Segment SegmentBToC { get; } Property Value Segment SegmentCToD public Segment SegmentCToD { get; } Property Value Segment SegmentDToA public Segment SegmentDToA { get; } Property Value Segment Methods ApplyOffset(Transform2D) Moves the quad by transform.Position Rotates the moved quad by transform.RotationRad Changes the size of the rotated quad by transform.Size! public Quad ApplyOffset(Transform2D offset) Parameters offset Transform2D Returns Quad ApplyOffset(Transform2D, AnchorPoint) Moves the quad by transform.Position Rotates the moved quad by transform.RotationRad Changes the size of the rotated quad by transform.Size.Width! public Quad ApplyOffset(Transform2D offset, AnchorPoint alignement) Parameters offset Transform2D alignement AnchorPoint Returns Quad Ceiling() public Quad Ceiling() Returns Quad ChangePosition(Vector2) public Quad ChangePosition(Vector2 offset) Parameters offset Vector2 Returns Quad ChangeRotation(float) public Quad ChangeRotation(float rad) Parameters rad float Returns Quad ChangeRotation(float, AnchorPoint) public Quad ChangeRotation(float rad, AnchorPoint alignement) Parameters rad float alignement AnchorPoint Returns Quad ChangeSize(float) public Quad ChangeSize(float amount) Parameters amount float Returns Quad ChangeSize(float, AnchorPoint) public Quad ChangeSize(float amount, AnchorPoint alignement) Parameters amount float alignement AnchorPoint Returns Quad ContainsCollider(Collider) public bool ContainsCollider(Collider collider) Parameters collider Collider Returns bool ContainsCollisionObject(CollisionObject) public bool ContainsCollisionObject(CollisionObject collisionObject) Parameters collisionObject CollisionObject Returns bool ContainsPoint(Vector2) public bool ContainsPoint(Vector2 p) Parameters p Vector2 Returns bool ContainsPoints(List<Vector2>) public bool ContainsPoints(List<Vector2> points) Parameters points List<Vector2> Returns bool ContainsPoints(Vector2, Vector2) public bool ContainsPoints(Vector2 u, Vector2 v) Parameters u Vector2 v Vector2 Returns bool ContainsPoints(Vector2, Vector2, Vector2) public bool ContainsPoints(Vector2 u, Vector2 v, Vector2 w) Parameters u Vector2 v Vector2 w Vector2 Returns bool ContainsPoints(Vector2, Vector2, Vector2, Vector2) public bool ContainsPoints(Vector2 u, Vector2 v, Vector2 w, Vector2 x) Parameters u Vector2 v Vector2 w Vector2 x Vector2 Returns bool ContainsQuadCircle(Vector2, Vector2, Vector2, Vector2, Vector2, float) public static bool ContainsQuadCircle(Vector2 qA, Vector2 qB, Vector2 qC, Vector2 qD, Vector2 circleCenter, float circleRadius) Parameters qA Vector2 qB Vector2 qC Vector2 qD Vector2 circleCenter Vector2 circleRadius float Returns bool ContainsQuadPoint(Vector2, Vector2, Vector2, Vector2, Vector2) public static bool ContainsQuadPoint(Vector2 qA, Vector2 qB, Vector2 qC, Vector2 qD, Vector2 point) Parameters qA Vector2 qB Vector2 qC Vector2 qD Vector2 point Vector2 Returns bool ContainsQuadPoints(Vector2, Vector2, Vector2, Vector2, List<Vector2>) public static bool ContainsQuadPoints(Vector2 qA, Vector2 qB, Vector2 qC, Vector2 qD, List<Vector2> points) Parameters qA Vector2 qB Vector2 qC Vector2 qD Vector2 points List<Vector2> Returns bool ContainsQuadPoints(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool ContainsQuadPoints(Vector2 qA, Vector2 qB, Vector2 qC, Vector2 qD, Vector2 u, Vector2 v) Parameters qA Vector2 qB Vector2 qC Vector2 qD Vector2 u Vector2 v Vector2 Returns bool ContainsQuadPoints(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool ContainsQuadPoints(Vector2 qA, Vector2 qB, Vector2 qC, Vector2 qD, Vector2 u, Vector2 v, Vector2 w) Parameters qA Vector2 qB Vector2 qC Vector2 qD Vector2 u Vector2 v Vector2 w Vector2 Returns bool ContainsQuadPoints(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool ContainsQuadPoints(Vector2 qA, Vector2 qB, Vector2 qC, Vector2 qD, Vector2 u, Vector2 v, Vector2 w, Vector2 x) Parameters qA Vector2 qB Vector2 qC Vector2 qD Vector2 u Vector2 v Vector2 w Vector2 x Vector2 Returns bool ContainsQuadPolygon(Vector2, Vector2, Vector2, Vector2, List<Vector2>) public static bool ContainsQuadPolygon(Vector2 qA, Vector2 qB, Vector2 qC, Vector2 qD, List<Vector2> polygon) Parameters qA Vector2 qB Vector2 qC Vector2 qD Vector2 polygon List<Vector2> Returns bool ContainsQuadPolyline(Vector2, Vector2, Vector2, Vector2, List<Vector2>) public static bool ContainsQuadPolyline(Vector2 qA, Vector2 qB, Vector2 qC, Vector2 qD, List<Vector2> polyline) Parameters qA Vector2 qB Vector2 qC Vector2 qD Vector2 polyline List<Vector2> Returns bool ContainsQuadQuad(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool ContainsQuadQuad(Vector2 qA1, Vector2 qB1, Vector2 qC1, Vector2 qD1, Vector2 qA2, Vector2 qB2, Vector2 qC2, Vector2 qD2) Parameters qA1 Vector2 qB1 Vector2 qC1 Vector2 qD1 Vector2 qA2 Vector2 qB2 Vector2 qC2 Vector2 qD2 Vector2 Returns bool ContainsQuadRect(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool ContainsQuadRect(Vector2 qA, Vector2 qB, Vector2 qC, Vector2 qD, Vector2 rA, Vector2 rB, Vector2 rC, Vector2 rD) Parameters qA Vector2 qB Vector2 qC Vector2 qD Vector2 rA Vector2 rB Vector2 rC Vector2 rD Vector2 Returns bool ContainsQuadSegment(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool ContainsQuadSegment(Vector2 qA, Vector2 qB, Vector2 qC, Vector2 qD, Vector2 segmentStart, Vector2 segmentEnd) Parameters qA Vector2 qB Vector2 qC Vector2 qD Vector2 segmentStart Vector2 segmentEnd Vector2 Returns bool ContainsQuadTriangle(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool ContainsQuadTriangle(Vector2 qA, Vector2 qB, Vector2 qC, Vector2 qD, Vector2 tA, Vector2 tB, Vector2 tc) Parameters qA Vector2 qB Vector2 qC Vector2 qD Vector2 tA Vector2 tB Vector2 tc Vector2 Returns bool ContainsShape(Circle) public bool ContainsShape(Circle circle) Parameters circle Circle Returns bool ContainsShape(Points) public bool ContainsShape(Points points) Parameters points Points Returns bool ContainsShape(Polygon) public bool ContainsShape(Polygon polygon) Parameters polygon Polygon Returns bool ContainsShape(Polyline) public bool ContainsShape(Polyline polyline) Parameters polyline Polyline Returns bool ContainsShape(Quad) public bool ContainsShape(Quad quad) Parameters quad Quad Returns bool ContainsShape(Rect) public bool ContainsShape(Rect rect) Parameters rect Rect Returns bool ContainsShape(Segment) public bool ContainsShape(Segment segment) Parameters segment Segment Returns bool ContainsShape(Triangle) public bool ContainsShape(Triangle triangle) Parameters triangle Triangle Returns bool Equals(Quad) Indicates whether the current object is equal to another object of the same type. public bool Equals(Quad other) Parameters other Quad An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. Floor() public Quad Floor() Returns Quad GetArea() public float GetArea() Returns float GetBoundingBox() public Rect GetBoundingBox() Returns Rect GetClosestPoint(Circle) public ClosestPointResult GetClosestPoint(Circle other) Parameters other Circle Returns ClosestPointResult GetClosestPoint(Line) public ClosestPointResult GetClosestPoint(Line other) Parameters other Line Returns ClosestPointResult GetClosestPoint(Polygon) public ClosestPointResult GetClosestPoint(Polygon other) Parameters other Polygon Returns ClosestPointResult GetClosestPoint(Polyline) public ClosestPointResult GetClosestPoint(Polyline other) Parameters other Polyline Returns ClosestPointResult GetClosestPoint(Quad) public ClosestPointResult GetClosestPoint(Quad other) Parameters other Quad Returns ClosestPointResult GetClosestPoint(Ray) public ClosestPointResult GetClosestPoint(Ray other) Parameters other Ray Returns ClosestPointResult GetClosestPoint(Rect) public ClosestPointResult GetClosestPoint(Rect other) Parameters other Rect Returns ClosestPointResult GetClosestPoint(Segment) public ClosestPointResult GetClosestPoint(Segment other) Parameters other Segment Returns ClosestPointResult GetClosestPoint(Segments) public ClosestPointResult GetClosestPoint(Segments other) Parameters other Segments Returns ClosestPointResult GetClosestPoint(Triangle) public ClosestPointResult GetClosestPoint(Triangle other) Parameters other Triangle Returns ClosestPointResult GetClosestPoint(Vector2, out float) public CollisionPoint GetClosestPoint(Vector2 p, out float disSquared) Parameters p Vector2 disSquared float Returns CollisionPoint GetClosestPoint(Vector2, out float, out int) public CollisionPoint GetClosestPoint(Vector2 p, out float disSquared, out int index) Parameters p Vector2 disSquared float index int Returns CollisionPoint GetClosestPointQuadPoint(Vector2, Vector2, Vector2, Vector2, Vector2, out float) public static Vector2 GetClosestPointQuadPoint(Vector2 a, Vector2 b, Vector2 c, Vector2 d, Vector2 p, out float disSquared) Parameters a Vector2 b Vector2 c Vector2 d Vector2 p Vector2 disSquared float Returns Vector2 GetClosestSegment(Vector2, out float) public (Segment segment, CollisionPoint segmentPoint) GetClosestSegment(Vector2 p, out float disSquared) Parameters p Vector2 disSquared float Returns (Segment segment, CollisionPoint segmentPoint) GetClosestVertex(Vector2, out float, out int) public Vector2 GetClosestVertex(Vector2 p, out float disSquared, out int index) Parameters p Vector2 disSquared float index int Returns Vector2 GetEdge(int) public Segment GetEdge(int index) Parameters index int Returns Segment GetEdges() public Segments GetEdges() Returns Segments GetFurthestVertex(Vector2, out float, out int) public Vector2 GetFurthestVertex(Vector2 p, out float disSquared, out int index) Parameters p Vector2 disSquared float index int Returns Vector2 GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. GetInterpolatedEdgePoints(float) public Points? GetInterpolatedEdgePoints(float t) Parameters t float Returns Points GetInterpolatedEdgePoints(float, int) public Points? GetInterpolatedEdgePoints(float t, int steps) Parameters t float steps int Returns Points GetPerimeter() public float GetPerimeter() Returns float GetPerimeterSquared() public float GetPerimeterSquared() Returns float GetPoint(AnchorPoint) public Vector2 GetPoint(AnchorPoint alignement) Parameters alignement AnchorPoint Returns Vector2 GetPoint(float) public Vector2 GetPoint(float alignement) Parameters alignement float Returns Vector2 GetPoint(float, float) public Vector2 GetPoint(float alignementX, float alignementY) Parameters alignementX float alignementY float Returns Vector2 GetProjectedShapePoints(Vector2) public Points? GetProjectedShapePoints(Vector2 v) Parameters v Vector2 Returns Points GetRandomEdge() public Segment GetRandomEdge() Returns Segment GetRandomPointInside() public Vector2 GetRandomPointInside() Returns Vector2 GetRandomPointOnEdge() public Vector2 GetRandomPointOnEdge() Returns Vector2 GetRandomPointsInside(int) public Points GetRandomPointsInside(int amount) Parameters amount int Returns Points GetRandomPointsOnEdge(int) public Points GetRandomPointsOnEdge(int amount) Parameters amount int Returns Points GetRandomVertex() public Vector2 GetRandomVertex() Returns Vector2 GetSegment(int) public Segment GetSegment(int index) Parameters index int Returns Segment GetVertex(int) public Vector2 GetVertex(int index) Parameters index int Returns Vector2 Intersect(Collider) public CollisionPoints? Intersect(Collider collider) Parameters collider Collider Returns CollisionPoints Intersect(Collider, ref CollisionPoints, bool) public int Intersect(Collider collider, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters collider Collider points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Circle) public CollisionPoints? IntersectShape(Circle c) Parameters c Circle Returns CollisionPoints IntersectShape(Circle, ref CollisionPoints, bool) public int IntersectShape(Circle c, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters c Circle points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Line) public CollisionPoints? IntersectShape(Line l) Parameters l Line Returns CollisionPoints IntersectShape(Line, ref CollisionPoints, bool) public int IntersectShape(Line l, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters l Line points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Polygon) public CollisionPoints? IntersectShape(Polygon p) Parameters p Polygon Returns CollisionPoints IntersectShape(Polygon, ref CollisionPoints, bool) public int IntersectShape(Polygon p, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters p Polygon points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Polyline) public CollisionPoints? IntersectShape(Polyline pl) Parameters pl Polyline Returns CollisionPoints IntersectShape(Polyline, ref CollisionPoints, bool) public int IntersectShape(Polyline pl, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters pl Polyline points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Quad) public CollisionPoints? IntersectShape(Quad q) Parameters q Quad Returns CollisionPoints IntersectShape(Quad, ref CollisionPoints, bool) public int IntersectShape(Quad q, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters q Quad points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Ray) public CollisionPoints? IntersectShape(Ray r) Parameters r Ray Returns CollisionPoints IntersectShape(Ray, ref CollisionPoints, bool) public int IntersectShape(Ray r, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters r Ray points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Rect) public CollisionPoints? IntersectShape(Rect r) Parameters r Rect Returns CollisionPoints IntersectShape(Rect, ref CollisionPoints, bool) public int IntersectShape(Rect r, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters r Rect points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Segment) public CollisionPoints? IntersectShape(Segment s) Parameters s Segment Returns CollisionPoints IntersectShape(Segment, ref CollisionPoints, bool) public int IntersectShape(Segment s, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters s Segment points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Segments) public CollisionPoints? IntersectShape(Segments segments) Parameters segments Segments Returns CollisionPoints IntersectShape(Segments, ref CollisionPoints, bool) public int IntersectShape(Segments shape, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters shape Segments points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Triangle) public CollisionPoints? IntersectShape(Triangle t) Parameters t Triangle Returns CollisionPoints IntersectShape(Triangle, ref CollisionPoints, bool) public int IntersectShape(Triangle t, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters t Triangle points CollisionPoints returnAfterFirstValid bool Returns int Overlap(Collider) public bool Overlap(Collider collider) Parameters collider Collider Returns bool OverlapCircle(Vector2, float) public bool OverlapCircle(Vector2 circleCenter, float circleRadius) Parameters circleCenter Vector2 circleRadius float Returns bool OverlapLine(Vector2, Vector2) public bool OverlapLine(Vector2 linePoint, Vector2 lineDirection) Parameters linePoint Vector2 lineDirection Vector2 Returns bool OverlapPolygon(List<Vector2>) public bool OverlapPolygon(List<Vector2> points) Parameters points List<Vector2> Returns bool OverlapPolyline(List<Vector2>) public bool OverlapPolyline(List<Vector2> points) Parameters points List<Vector2> Returns bool OverlapQuad(Vector2, Vector2, Vector2, Vector2) public bool OverlapQuad(Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters a Vector2 b Vector2 c Vector2 d Vector2 Returns bool OverlapQuadCircle(Vector2, Vector2, Vector2, Vector2, Vector2, float) public static bool OverlapQuadCircle(Vector2 a, Vector2 b, Vector2 c, Vector2 d, Vector2 circleCenter, float circleRadius) Parameters a Vector2 b Vector2 c Vector2 d Vector2 circleCenter Vector2 circleRadius float Returns bool OverlapQuadLine(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool OverlapQuadLine(Vector2 a, Vector2 b, Vector2 c, Vector2 d, Vector2 linePoint, Vector2 lineDirection) Parameters a Vector2 b Vector2 c Vector2 d Vector2 linePoint Vector2 lineDirection Vector2 Returns bool OverlapQuadPolygon(Vector2, Vector2, Vector2, Vector2, List<Vector2>) public static bool OverlapQuadPolygon(Vector2 a, Vector2 b, Vector2 c, Vector2 d, List<Vector2> points) Parameters a Vector2 b Vector2 c Vector2 d Vector2 points List<Vector2> Returns bool OverlapQuadPolyline(Vector2, Vector2, Vector2, Vector2, List<Vector2>) public static bool OverlapQuadPolyline(Vector2 a, Vector2 b, Vector2 c, Vector2 d, List<Vector2> points) Parameters a Vector2 b Vector2 c Vector2 d Vector2 points List<Vector2> Returns bool OverlapQuadQuad(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool OverlapQuadQuad(Vector2 a, Vector2 b, Vector2 c, Vector2 d, Vector2 qa, Vector2 qb, Vector2 qc, Vector2 qd) Parameters a Vector2 b Vector2 c Vector2 d Vector2 qa Vector2 qb Vector2 qc Vector2 qd Vector2 Returns bool OverlapQuadRay(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool OverlapQuadRay(Vector2 a, Vector2 b, Vector2 c, Vector2 d, Vector2 rayPoint, Vector2 rayDirection) Parameters a Vector2 b Vector2 c Vector2 d Vector2 rayPoint Vector2 rayDirection Vector2 Returns bool OverlapQuadRect(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool OverlapQuadRect(Vector2 a, Vector2 b, Vector2 c, Vector2 d, Vector2 ra, Vector2 rb, Vector2 rc, Vector2 rd) Parameters a Vector2 b Vector2 c Vector2 d Vector2 ra Vector2 rb Vector2 rc Vector2 rd Vector2 Returns bool OverlapQuadSegment(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool OverlapQuadSegment(Vector2 a, Vector2 b, Vector2 c, Vector2 d, Vector2 segmentStart, Vector2 segmentEnd) Parameters a Vector2 b Vector2 c Vector2 d Vector2 segmentStart Vector2 segmentEnd Vector2 Returns bool OverlapQuadSegments(Vector2, Vector2, Vector2, Vector2, List<Segment>) public static bool OverlapQuadSegments(Vector2 a, Vector2 b, Vector2 c, Vector2 d, List<Segment> segments) Parameters a Vector2 b Vector2 c Vector2 d Vector2 segments List<Segment> Returns bool OverlapQuadTriangle(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool OverlapQuadTriangle(Vector2 a, Vector2 b, Vector2 c, Vector2 d, Vector2 ta, Vector2 tb, Vector2 tc) Parameters a Vector2 b Vector2 c Vector2 d Vector2 ta Vector2 tb Vector2 tc Vector2 Returns bool OverlapRay(Vector2, Vector2) public bool OverlapRay(Vector2 rayPoint, Vector2 rayDirection) Parameters rayPoint Vector2 rayDirection Vector2 Returns bool OverlapRect(Vector2, Vector2, Vector2, Vector2) public bool OverlapRect(Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters a Vector2 b Vector2 c Vector2 d Vector2 Returns bool OverlapSegment(Vector2, Vector2) public bool OverlapSegment(Vector2 segmentStart, Vector2 segmentEnd) Parameters segmentStart Vector2 segmentEnd Vector2 Returns bool OverlapSegments(List<Segment>) public bool OverlapSegments(List<Segment> segments) Parameters segments List<Segment> Returns bool OverlapShape(Circle) public bool OverlapShape(Circle c) Parameters c Circle Returns bool OverlapShape(Line) public bool OverlapShape(Line line) Parameters line Line Returns bool OverlapShape(Polygon) public bool OverlapShape(Polygon poly) Parameters poly Polygon Returns bool OverlapShape(Polyline) public bool OverlapShape(Polyline pl) Parameters pl Polyline Returns bool OverlapShape(Quad) public bool OverlapShape(Quad q) Parameters q Quad Returns bool OverlapShape(Ray) public bool OverlapShape(Ray ray) Parameters ray Ray Returns bool OverlapShape(Rect) public bool OverlapShape(Rect r) Parameters r Rect Returns bool OverlapShape(Segment) public bool OverlapShape(Segment s) Parameters s Segment Returns bool OverlapShape(Segments) public bool OverlapShape(Segments segments) Parameters segments Segments Returns bool OverlapShape(Triangle) public bool OverlapShape(Triangle t) Parameters t Triangle Returns bool OverlapTriangle(Vector2, Vector2, Vector2) public bool OverlapTriangle(Vector2 a, Vector2 b, Vector2 c) Parameters a Vector2 b Vector2 c Vector2 Returns bool ProjectShape(Vector2) public Polygon? ProjectShape(Vector2 v) Parameters v Vector2 Returns Polygon Round() public Quad Round() Returns Quad ScaleSize(Size) public Quad ScaleSize(Size scale) Parameters scale Size Returns Quad ScaleSize(Size, AnchorPoint) public Quad ScaleSize(Size scale, AnchorPoint alignement) Parameters scale Size alignement AnchorPoint Returns Quad ScaleSize(float) public Quad ScaleSize(float scale) Parameters scale float Returns Quad ScaleSize(float, AnchorPoint) public Quad ScaleSize(float scale, AnchorPoint alignement) Parameters scale float alignement AnchorPoint Returns Quad SetPosition(Vector2) public Quad SetPosition(Vector2 newPosition) Parameters newPosition Vector2 Returns Quad SetPosition(Vector2, AnchorPoint) public Quad SetPosition(Vector2 newPosition, AnchorPoint alignement) Parameters newPosition Vector2 alignement AnchorPoint Returns Quad SetRotation(float) public Quad SetRotation(float angleRad) Parameters angleRad float Returns Quad SetRotation(float, AnchorPoint) public Quad SetRotation(float angleRad, AnchorPoint alignement) Parameters angleRad float alignement AnchorPoint Returns Quad SetSize(float) public Quad SetSize(float size) Parameters size float Returns Quad SetSize(float, AnchorPoint) public Quad SetSize(float size, AnchorPoint alignement) Parameters size float alignement AnchorPoint Returns Quad SetTransform(Transform2D) Moves the quad to transform.Position Rotates the moved quad to transform.RotationRad Sets the size of the rotated quad to transform.Size.Width public Quad SetTransform(Transform2D transform) Parameters transform Transform2D Returns Quad SetTransform(Transform2D, AnchorPoint) Moves the quad to transform.Position Rotates the moved quad to transform.RotationRad Sets the size of the rotated quad to transform.Size.Width public Quad SetTransform(Transform2D transform, AnchorPoint alignement) Parameters transform Transform2D alignement AnchorPoint Returns Quad ToPoints() public Points ToPoints() Returns Points ToPolygon() public Polygon ToPolygon() Returns Polygon ToPolyline() public Polyline ToPolyline() Returns Polyline Triangulate() public Triangulation Triangulate() Returns Triangulation Truncate() public Quad Truncate() Returns Quad Operators operator +(Quad, Quad) public static Quad operator +(Quad left, Quad right) Parameters left Quad right Quad Returns Quad operator +(Quad, Vector2) public static Quad operator +(Quad left, Vector2 right) Parameters left Quad right Vector2 Returns Quad operator /(Quad, Quad) public static Quad operator /(Quad left, Quad right) Parameters left Quad right Quad Returns Quad operator /(Quad, Vector2) public static Quad operator /(Quad left, Vector2 right) Parameters left Quad right Vector2 Returns Quad operator /(Quad, float) public static Quad operator /(Quad left, float right) Parameters left Quad right float Returns Quad operator ==(Quad, Quad) public static bool operator ==(Quad left, Quad right) Parameters left Quad right Quad Returns bool operator !=(Quad, Quad) public static bool operator !=(Quad left, Quad right) Parameters left Quad right Quad Returns bool operator *(Quad, Quad) public static Quad operator *(Quad left, Quad right) Parameters left Quad right Quad Returns Quad operator *(Quad, Vector2) public static Quad operator *(Quad left, Vector2 right) Parameters left Quad right Vector2 Returns Quad operator *(Quad, float) public static Quad operator *(Quad left, float right) Parameters left Quad right float Returns Quad operator -(Quad, Quad) public static Quad operator -(Quad left, Quad right) Parameters left Quad right Quad Returns Quad operator -(Quad, Vector2) public static Quad operator -(Quad left, Vector2 right) Parameters left Quad right Vector2 Returns Quad"
  },
  "api/ShapeEngine.Core.Shapes.QuadShape.html": {
    "href": "api/ShapeEngine.Core.Shapes.QuadShape.html",
    "title": "Class QuadShape | ShapeEngine",
    "summary": "Class QuadShape Namespace ShapeEngine.Core.Shapes Assembly ShapeEngine.dll public class QuadShape : ShapeContainer, IShape Inheritance object Shape ShapeContainer QuadShape Implements IShape Inherited Members ShapeContainer.Parent ShapeContainer.ChangeParent(ShapeContainer) ShapeContainer.AddChild(ShapeContainer) ShapeContainer.RemoveChild(ShapeContainer) ShapeContainer.InitializeShape(Transform2D) ShapeContainer.UpdateShape(float, Transform2D) ShapeContainer.DrawShape() ShapeContainer.OnChildInitialized(ShapeContainer) ShapeContainer.OnChildUpdated(ShapeContainer) ShapeContainer.OnChildDrawn(ShapeContainer) ShapeContainer.OnUpdateFinished() ShapeContainer.OnDrawFinished() ShapeContainer.OnAddedToParent(ShapeContainer) ShapeContainer.OnRemovedFromParent(ShapeContainer) Shape.Moves Shape.Rotates Shape.Scales Shape.Offset Shape.CurTransform Shape.PrevTransform Shape.RecalculateShape() Shape.OnInitialized() Shape.OnUpdate(float) Shape.OnDraw() Shape.OnShapeTransformChanged(bool) Shape.UpdateTransform(Transform2D) Shape.GetRayShape() Shape.GetLineShape() Shape.GetSegmentShape() Shape.GetCircleShape() Shape.GetTriangleShape() Shape.GetRectShape() Shape.GetPolygonShape() Shape.GetPolylineShape() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors QuadShape(Transform2D) public QuadShape(Transform2D offset) Parameters offset Transform2D QuadShape(Transform2D, AnchorPoint) public QuadShape(Transform2D offset, AnchorPoint alignement) Parameters offset Transform2D alignement AnchorPoint Properties Alignement public AnchorPoint Alignement { get; set; } Property Value AnchorPoint Methods GetQuadShape() public override Quad GetQuadShape() Returns Quad GetShapeType() public override ShapeType GetShapeType() Returns ShapeType"
  },
  "api/ShapeEngine.Core.Shapes.Ray.html": {
    "href": "api/ShapeEngine.Core.Shapes.Ray.html",
    "title": "Struct Ray | ShapeEngine",
    "summary": "Struct Ray Namespace ShapeEngine.Core.Shapes Assembly ShapeEngine.dll public readonly struct Ray Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ShapeRayDrawing.Draw(Ray, float, float, ColorRgba) Constructors Ray() public Ray() Ray(Vector2, bool) public Ray(Vector2 direction, bool flippedNormal = false) Parameters direction Vector2 flippedNormal bool Ray(Vector2, Vector2, bool) public Ray(Vector2 point, Vector2 direction, bool flippedNormal = false) Parameters point Vector2 direction Vector2 flippedNormal bool Ray(float, float, float, float, bool) public Ray(float x, float y, float dx, float dy, bool flippedNormal = false) Parameters x float y float dx float dy float flippedNormal bool Fields Direction public readonly Vector2 Direction Field Value Vector2 MaxLength public static float MaxLength Field Value float Normal public readonly Vector2 Normal Field Value Vector2 Point public readonly Vector2 Point Field Value Vector2 Properties IsValid public bool IsValid { get; } Property Value bool Methods ChangeDirection(Vector2) public Ray ChangeDirection(Vector2 amount) Parameters amount Vector2 Returns Ray ChangePoint(Vector2) public Ray ChangePoint(Vector2 amount) Parameters amount Vector2 Returns Ray ChangeRotation(float) public Ray ChangeRotation(float angleRad) Parameters angleRad float Returns Ray FlipNormal() public Ray FlipNormal() Returns Ray GetBoundingBox() public Rect GetBoundingBox() Returns Rect GetBoundingBox(float) public Rect GetBoundingBox(float length) Parameters length float Returns Rect GetClosestPoint(Circle) public ClosestPointResult GetClosestPoint(Circle other) Parameters other Circle Returns ClosestPointResult GetClosestPoint(Line) public ClosestPointResult GetClosestPoint(Line other) Parameters other Line Returns ClosestPointResult GetClosestPoint(Polygon) public ClosestPointResult GetClosestPoint(Polygon other) Parameters other Polygon Returns ClosestPointResult GetClosestPoint(Polyline) public ClosestPointResult GetClosestPoint(Polyline other) Parameters other Polyline Returns ClosestPointResult GetClosestPoint(Quad) public ClosestPointResult GetClosestPoint(Quad other) Parameters other Quad Returns ClosestPointResult GetClosestPoint(Ray) public ClosestPointResult GetClosestPoint(Ray other) Parameters other Ray Returns ClosestPointResult GetClosestPoint(Rect) public ClosestPointResult GetClosestPoint(Rect other) Parameters other Rect Returns ClosestPointResult GetClosestPoint(Segment) public ClosestPointResult GetClosestPoint(Segment other) Parameters other Segment Returns ClosestPointResult GetClosestPoint(Segments) public ClosestPointResult GetClosestPoint(Segments segments) Parameters segments Segments Returns ClosestPointResult GetClosestPoint(Triangle) public ClosestPointResult GetClosestPoint(Triangle other) Parameters other Triangle Returns ClosestPointResult GetClosestPoint(Vector2, out float) public CollisionPoint GetClosestPoint(Vector2 point, out float disSquared) Parameters point Vector2 disSquared float Returns CollisionPoint GetClosestPointRayCircle(Vector2, Vector2, Vector2, float, out float) public static (Vector2 self, Vector2 other) GetClosestPointRayCircle(Vector2 rayPoint, Vector2 rayDirection, Vector2 circleCenter, float circleRadius, out float disSquared) Parameters rayPoint Vector2 rayDirection Vector2 circleCenter Vector2 circleRadius float disSquared float Returns (Vector2 self, Vector2 other) GetClosestPointRayLine(Vector2, Vector2, Vector2, Vector2, out float) public static (Vector2 self, Vector2 other) GetClosestPointRayLine(Vector2 rayPoint, Vector2 rayDirection, Vector2 linePoint, Vector2 lineDirection, out float disSquared) Parameters rayPoint Vector2 rayDirection Vector2 linePoint Vector2 lineDirection Vector2 disSquared float Returns (Vector2 self, Vector2 other) GetClosestPointRayPoint(Vector2, Vector2, Vector2, out float) public static Vector2 GetClosestPointRayPoint(Vector2 rayPoint, Vector2 rayDirection, Vector2 point, out float disSquared) Parameters rayPoint Vector2 rayDirection Vector2 point Vector2 disSquared float Returns Vector2 GetClosestPointRayRay(Vector2, Vector2, Vector2, Vector2, out float) public static (Vector2 self, Vector2 other) GetClosestPointRayRay(Vector2 ray1Point, Vector2 ray1Direction, Vector2 ray2Point, Vector2 ray2Direction, out float disSquared) Parameters ray1Point Vector2 ray1Direction Vector2 ray2Point Vector2 ray2Direction Vector2 disSquared float Returns (Vector2 self, Vector2 other) GetClosestPointRaySegment(Vector2, Vector2, Vector2, Vector2, out float) public static (Vector2 self, Vector2 other) GetClosestPointRaySegment(Vector2 rayPoint, Vector2 rayDirection, Vector2 segmentStart, Vector2 segmentEnd, out float disSquared) Parameters rayPoint Vector2 rayDirection Vector2 segmentStart Vector2 segmentEnd Vector2 disSquared float Returns (Vector2 self, Vector2 other) GetNormal(Vector2, bool) public static Vector2 GetNormal(Vector2 direction, bool flippedNormal) Parameters direction Vector2 flippedNormal bool Returns Vector2 Intersect(Collider) public CollisionPoints? Intersect(Collider collider) Parameters collider Collider Returns CollisionPoints Intersect(Collider, ref CollisionPoints, bool) public int Intersect(Collider collider, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters collider Collider points CollisionPoints returnAfterFirstValid bool Returns int IntersectCircle(Circle) public (CollisionPoint a, CollisionPoint b) IntersectCircle(Circle circle) Parameters circle Circle Returns (CollisionPoint a, CollisionPoint b) IntersectCircle(Vector2, float) public (CollisionPoint a, CollisionPoint b) IntersectCircle(Vector2 circleCenter, float circleRadius) Parameters circleCenter Vector2 circleRadius float Returns (CollisionPoint a, CollisionPoint b) IntersectLine(Line) public CollisionPoint IntersectLine(Line line) Parameters line Line Returns CollisionPoint IntersectLine(Vector2, Vector2) public CollisionPoint IntersectLine(Vector2 linePoint, Vector2 lineDirection) Parameters linePoint Vector2 lineDirection Vector2 Returns CollisionPoint IntersectPolygon(Polygon, int) public CollisionPoints? IntersectPolygon(Polygon polygon, int maxCollisionPoints = -1) Parameters polygon Polygon maxCollisionPoints int Returns CollisionPoints IntersectPolygon(List<Vector2>, int) public CollisionPoints? IntersectPolygon(List<Vector2> points, int maxCollisionPoints = -1) Parameters points List<Vector2> maxCollisionPoints int Returns CollisionPoints IntersectPolyline(Polyline, int) public CollisionPoints? IntersectPolyline(Polyline polyline, int maxCollisionPoints = -1) Parameters polyline Polyline maxCollisionPoints int Returns CollisionPoints IntersectPolyline(List<Vector2>, int) public CollisionPoints? IntersectPolyline(List<Vector2> points, int maxCollisionPoints = -1) Parameters points List<Vector2> maxCollisionPoints int Returns CollisionPoints IntersectQuad(Quad) public (CollisionPoint a, CollisionPoint b) IntersectQuad(Quad quad) Parameters quad Quad Returns (CollisionPoint a, CollisionPoint b) IntersectQuad(Vector2, Vector2, Vector2, Vector2) public (CollisionPoint a, CollisionPoint b) IntersectQuad(Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters a Vector2 b Vector2 c Vector2 d Vector2 Returns (CollisionPoint a, CollisionPoint b) IntersectRay(Ray) public CollisionPoint IntersectRay(Ray ray) Parameters ray Ray Returns CollisionPoint IntersectRay(Vector2, Vector2) public CollisionPoint IntersectRay(Vector2 rayPoint, Vector2 rayDirection) Parameters rayPoint Vector2 rayDirection Vector2 Returns CollisionPoint IntersectRayCircle(Vector2, Vector2, Vector2, float) public static (CollisionPoint a, CollisionPoint b) IntersectRayCircle(Vector2 rayPoint, Vector2 rayDirection, Vector2 circleCenter, float radius) Parameters rayPoint Vector2 rayDirection Vector2 circleCenter Vector2 radius float Returns (CollisionPoint a, CollisionPoint b) IntersectRayLine(Vector2, Vector2, Vector2, Vector2) public static CollisionPoint IntersectRayLine(Vector2 rayPoint, Vector2 rayDirection, Vector2 linePoint, Vector2 lineDirection) Parameters rayPoint Vector2 rayDirection Vector2 linePoint Vector2 lineDirection Vector2 Returns CollisionPoint IntersectRayLine(Vector2, Vector2, Vector2, Vector2, Vector2) public static CollisionPoint IntersectRayLine(Vector2 rayPoint, Vector2 rayDirection, Vector2 linePoint, Vector2 lineDirection, Vector2 lineNormal) Parameters rayPoint Vector2 rayDirection Vector2 linePoint Vector2 lineDirection Vector2 lineNormal Vector2 Returns CollisionPoint IntersectRayLineInfo(Vector2, Vector2, Vector2, Vector2) public static (CollisionPoint p, float t) IntersectRayLineInfo(Vector2 rayPoint, Vector2 rayDirection, Vector2 linePoint, Vector2 lineDirection) Parameters rayPoint Vector2 rayDirection Vector2 linePoint Vector2 lineDirection Vector2 Returns (CollisionPoint p, float t) IntersectRayLineInfo(Vector2, Vector2, Vector2, Vector2, Vector2) public static (CollisionPoint p, float t) IntersectRayLineInfo(Vector2 rayPoint, Vector2 rayDirection, Vector2 linePoint, Vector2 lineDirection, Vector2 lineNormal) Parameters rayPoint Vector2 rayDirection Vector2 linePoint Vector2 lineDirection Vector2 lineNormal Vector2 Returns (CollisionPoint p, float t) IntersectRayPolygon(Vector2, Vector2, List<Vector2>, ref CollisionPoints, bool) public static int IntersectRayPolygon(Vector2 rayPoint, Vector2 rayDirection, List<Vector2> points, ref CollisionPoints result, bool returnAfterFirstValid = false) Parameters rayPoint Vector2 rayDirection Vector2 points List<Vector2> result CollisionPoints returnAfterFirstValid bool Returns int IntersectRayPolygon(Vector2, Vector2, List<Vector2>, int) public static CollisionPoints? IntersectRayPolygon(Vector2 rayPoint, Vector2 rayDirection, List<Vector2> points, int maxCollisionPoints = -1) Parameters rayPoint Vector2 rayDirection Vector2 points List<Vector2> maxCollisionPoints int Returns CollisionPoints IntersectRayPolyline(Vector2, Vector2, List<Vector2>, int) public static CollisionPoints? IntersectRayPolyline(Vector2 rayPoint, Vector2 rayDirection, List<Vector2> points, int maxCollisionPoints = -1) Parameters rayPoint Vector2 rayDirection Vector2 points List<Vector2> maxCollisionPoints int Returns CollisionPoints IntersectRayQuad(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static (CollisionPoint a, CollisionPoint b) IntersectRayQuad(Vector2 rayPoint, Vector2 rayDirection, Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters rayPoint Vector2 rayDirection Vector2 a Vector2 b Vector2 c Vector2 d Vector2 Returns (CollisionPoint a, CollisionPoint b) IntersectRayRay(Vector2, Vector2, Vector2, Vector2) public static CollisionPoint IntersectRayRay(Vector2 ray1Point, Vector2 ray1Direction, Vector2 ray2Point, Vector2 ray2Direction) Parameters ray1Point Vector2 ray1Direction Vector2 ray2Point Vector2 ray2Direction Vector2 Returns CollisionPoint IntersectRayRay(Vector2, Vector2, Vector2, Vector2, Vector2) public static CollisionPoint IntersectRayRay(Vector2 ray1Point, Vector2 ray1Direction, Vector2 ray2Point, Vector2 ray2Direction, Vector2 ray2Normal) Parameters ray1Point Vector2 ray1Direction Vector2 ray2Point Vector2 ray2Direction Vector2 ray2Normal Vector2 Returns CollisionPoint IntersectRayRayInfo(Vector2, Vector2, Vector2, Vector2) public static (CollisionPoint p, float t) IntersectRayRayInfo(Vector2 ray1Point, Vector2 ray1Direction, Vector2 ray2Point, Vector2 ray2Direction) Parameters ray1Point Vector2 ray1Direction Vector2 ray2Point Vector2 ray2Direction Vector2 Returns (CollisionPoint p, float t) IntersectRayRayInfo(Vector2, Vector2, Vector2, Vector2, Vector2) public static (CollisionPoint p, float t) IntersectRayRayInfo(Vector2 ray1Point, Vector2 ray1Direction, Vector2 ray2Point, Vector2 ray2Direction, Vector2 ray2Normal) Parameters ray1Point Vector2 ray1Direction Vector2 ray2Point Vector2 ray2Direction Vector2 ray2Normal Vector2 Returns (CollisionPoint p, float t) IntersectRayRect(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static (CollisionPoint a, CollisionPoint b) IntersectRayRect(Vector2 rayPoint, Vector2 rayDirection, Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters rayPoint Vector2 rayDirection Vector2 a Vector2 b Vector2 c Vector2 d Vector2 Returns (CollisionPoint a, CollisionPoint b) IntersectRaySegment(Vector2, Vector2, Vector2, Vector2) public static CollisionPoint IntersectRaySegment(Vector2 rayPoint, Vector2 rayDirection, Vector2 segmentStart, Vector2 segmentEnd) Parameters rayPoint Vector2 rayDirection Vector2 segmentStart Vector2 segmentEnd Vector2 Returns CollisionPoint IntersectRaySegment(Vector2, Vector2, Vector2, Vector2, Vector2) public static CollisionPoint IntersectRaySegment(Vector2 rayPoint, Vector2 rayDirection, Vector2 segmentStart, Vector2 segmentEnd, Vector2 segmentNormal) Parameters rayPoint Vector2 rayDirection Vector2 segmentStart Vector2 segmentEnd Vector2 segmentNormal Vector2 Returns CollisionPoint IntersectRaySegmentInfo(Vector2, Vector2, Vector2, Vector2) public static (CollisionPoint p, float t) IntersectRaySegmentInfo(Vector2 rayPoint, Vector2 rayDirection, Vector2 segmentStart, Vector2 segmentEnd) Parameters rayPoint Vector2 rayDirection Vector2 segmentStart Vector2 segmentEnd Vector2 Returns (CollisionPoint p, float t) IntersectRaySegmentInfo(Vector2, Vector2, Vector2, Vector2, Vector2) public static (CollisionPoint p, float t) IntersectRaySegmentInfo(Vector2 rayPoint, Vector2 rayDirection, Vector2 segmentStart, Vector2 segmentEnd, Vector2 segmentNormal) Parameters rayPoint Vector2 rayDirection Vector2 segmentStart Vector2 segmentEnd Vector2 segmentNormal Vector2 Returns (CollisionPoint p, float t) IntersectRaySegments(Vector2, Vector2, List<Segment>, int) public static CollisionPoints? IntersectRaySegments(Vector2 rayPoint, Vector2 rayDirection, List<Segment> segments, int maxCollisionPoints = -1) Parameters rayPoint Vector2 rayDirection Vector2 segments List<Segment> maxCollisionPoints int Returns CollisionPoints IntersectRayTriangle(Vector2, Vector2, Vector2, Vector2, Vector2) public static (CollisionPoint a, CollisionPoint b) IntersectRayTriangle(Vector2 rayPoint, Vector2 rayDirection, Vector2 a, Vector2 b, Vector2 c) Parameters rayPoint Vector2 rayDirection Vector2 a Vector2 b Vector2 c Vector2 Returns (CollisionPoint a, CollisionPoint b) IntersectRect(Rect) public (CollisionPoint a, CollisionPoint b) IntersectRect(Rect rect) Parameters rect Rect Returns (CollisionPoint a, CollisionPoint b) IntersectRect(Vector2, Vector2, Vector2, Vector2) public (CollisionPoint a, CollisionPoint b) IntersectRect(Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters a Vector2 b Vector2 c Vector2 d Vector2 Returns (CollisionPoint a, CollisionPoint b) IntersectSegment(Segment) public CollisionPoint IntersectSegment(Segment segment) Parameters segment Segment Returns CollisionPoint IntersectSegment(Vector2, Vector2) public CollisionPoint IntersectSegment(Vector2 segmentStart, Vector2 segmentEnd) Parameters segmentStart Vector2 segmentEnd Vector2 Returns CollisionPoint IntersectSegments(Segments, int) public CollisionPoints? IntersectSegments(Segments segments, int maxCollisionPoints = -1) Parameters segments Segments maxCollisionPoints int Returns CollisionPoints IntersectSegments(List<Segment>, int) public CollisionPoints? IntersectSegments(List<Segment> segments, int maxCollisionPoints = -1) Parameters segments List<Segment> maxCollisionPoints int Returns CollisionPoints IntersectShape(Circle) public CollisionPoints? IntersectShape(Circle circle) Parameters circle Circle Returns CollisionPoints IntersectShape(Circle, ref CollisionPoints, bool) public int IntersectShape(Circle c, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters c Circle points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Line) public CollisionPoints? IntersectShape(Line line) Parameters line Line Returns CollisionPoints IntersectShape(Line, ref CollisionPoints) public int IntersectShape(Line l, ref CollisionPoints points) Parameters l Line points CollisionPoints Returns int IntersectShape(Polygon, ref CollisionPoints, bool) public int IntersectShape(Polygon p, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters p Polygon points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Polygon, int) public CollisionPoints? IntersectShape(Polygon p, int maxCollisionPoints = -1) Parameters p Polygon maxCollisionPoints int Returns CollisionPoints IntersectShape(Polyline, ref CollisionPoints, bool) public int IntersectShape(Polyline pl, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters pl Polyline points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Polyline, int) public CollisionPoints? IntersectShape(Polyline pl, int maxCollisionPoints = -1) Parameters pl Polyline maxCollisionPoints int Returns CollisionPoints IntersectShape(Quad) public CollisionPoints? IntersectShape(Quad q) Parameters q Quad Returns CollisionPoints IntersectShape(Quad, ref CollisionPoints, bool) public int IntersectShape(Quad q, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters q Quad points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Ray) public CollisionPoints? IntersectShape(Ray ray) Parameters ray Ray Returns CollisionPoints IntersectShape(Ray, ref CollisionPoints) public int IntersectShape(Ray r, ref CollisionPoints points) Parameters r Ray points CollisionPoints Returns int IntersectShape(Rect) public CollisionPoints? IntersectShape(Rect r) Parameters r Rect Returns CollisionPoints IntersectShape(Rect, ref CollisionPoints, bool) public int IntersectShape(Rect r, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters r Rect points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Segment) public CollisionPoints? IntersectShape(Segment segment) Parameters segment Segment Returns CollisionPoints IntersectShape(Segment, ref CollisionPoints) public int IntersectShape(Segment s, ref CollisionPoints points) Parameters s Segment points CollisionPoints Returns int IntersectShape(Segments, ref CollisionPoints, bool) public int IntersectShape(Segments shape, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters shape Segments points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Segments, int) public CollisionPoints? IntersectShape(Segments segments, int maxCollisionPoints = -1) Parameters segments Segments maxCollisionPoints int Returns CollisionPoints IntersectShape(Triangle) public CollisionPoints? IntersectShape(Triangle t) Parameters t Triangle Returns CollisionPoints IntersectShape(Triangle, ref CollisionPoints, bool) public int IntersectShape(Triangle t, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters t Triangle points CollisionPoints returnAfterFirstValid bool Returns int IntersectTriangle(Triangle) public (CollisionPoint a, CollisionPoint b) IntersectTriangle(Triangle triangle) Parameters triangle Triangle Returns (CollisionPoint a, CollisionPoint b) IntersectTriangle(Vector2, Vector2, Vector2) public (CollisionPoint a, CollisionPoint b) IntersectTriangle(Vector2 a, Vector2 b, Vector2 c) Parameters a Vector2 b Vector2 c Vector2 Returns (CollisionPoint a, CollisionPoint b) IsNormalFlipped() public bool IsNormalFlipped() Returns bool IsPointOnRay(Vector2, Vector2, Vector2) public static bool IsPointOnRay(Vector2 point, Vector2 rayPoint, Vector2 rayDirection) Parameters point Vector2 rayPoint Vector2 rayDirection Vector2 Returns bool Overlap(Collider) public bool Overlap(Collider collider) Parameters collider Collider Returns bool OverlapCircle(Vector2, float) public bool OverlapCircle(Vector2 circleCenter, float circleRadius) Parameters circleCenter Vector2 circleRadius float Returns bool OverlapLine(Vector2, Vector2) public bool OverlapLine(Vector2 linePoint, Vector2 lineDirection) Parameters linePoint Vector2 lineDirection Vector2 Returns bool OverlapPoint(Vector2) public bool OverlapPoint(Vector2 p) Parameters p Vector2 Returns bool OverlapPolygon(List<Vector2>) public bool OverlapPolygon(List<Vector2> points) Parameters points List<Vector2> Returns bool OverlapPolyline(List<Vector2>) public bool OverlapPolyline(List<Vector2> points) Parameters points List<Vector2> Returns bool OverlapQuad(Vector2, Vector2, Vector2, Vector2) public bool OverlapQuad(Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters a Vector2 b Vector2 c Vector2 d Vector2 Returns bool OverlapRay(Vector2, Vector2) public bool OverlapRay(Vector2 rayPoint, Vector2 rayDirection) Parameters rayPoint Vector2 rayDirection Vector2 Returns bool OverlapRayCircle(Vector2, Vector2, Vector2, float) public static bool OverlapRayCircle(Vector2 rayPoint, Vector2 rayDirection, Vector2 circleCenter, float circleRadius) Parameters rayPoint Vector2 rayDirection Vector2 circleCenter Vector2 circleRadius float Returns bool OverlapRayLine(Vector2, Vector2, Vector2, Vector2) public static bool OverlapRayLine(Vector2 rayPoint, Vector2 rayDirection, Vector2 linePoint, Vector2 lineDirection) Parameters rayPoint Vector2 rayDirection Vector2 linePoint Vector2 lineDirection Vector2 Returns bool OverlapRayPolygon(Vector2, Vector2, List<Vector2>) public static bool OverlapRayPolygon(Vector2 rayPoint, Vector2 rayDirection, List<Vector2> points) Parameters rayPoint Vector2 rayDirection Vector2 points List<Vector2> Returns bool OverlapRayPolyline(Vector2, Vector2, List<Vector2>) public static bool OverlapRayPolyline(Vector2 rayPoint, Vector2 rayDirection, List<Vector2> points) Parameters rayPoint Vector2 rayDirection Vector2 points List<Vector2> Returns bool OverlapRayQuad(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool OverlapRayQuad(Vector2 rayPoint, Vector2 rayDirection, Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters rayPoint Vector2 rayDirection Vector2 a Vector2 b Vector2 c Vector2 d Vector2 Returns bool OverlapRayRay(Vector2, Vector2, Vector2, Vector2) public static bool OverlapRayRay(Vector2 ray1Point, Vector2 ray1Direction, Vector2 ray2Point, Vector2 ray2Direction) Parameters ray1Point Vector2 ray1Direction Vector2 ray2Point Vector2 ray2Direction Vector2 Returns bool OverlapRayRect(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool OverlapRayRect(Vector2 rayPoint, Vector2 rayDirection, Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters rayPoint Vector2 rayDirection Vector2 a Vector2 b Vector2 c Vector2 d Vector2 Returns bool OverlapRaySegment(Vector2, Vector2, Vector2, Vector2) public static bool OverlapRaySegment(Vector2 rayPoint, Vector2 rayDirection, Vector2 segmentStart, Vector2 segmentEnd) Parameters rayPoint Vector2 rayDirection Vector2 segmentStart Vector2 segmentEnd Vector2 Returns bool OverlapRaySegments(Vector2, Vector2, List<Segment>) public static bool OverlapRaySegments(Vector2 rayPoint, Vector2 rayDirection, List<Segment> segments) Parameters rayPoint Vector2 rayDirection Vector2 segments List<Segment> Returns bool OverlapRayTriangle(Vector2, Vector2, Vector2, Vector2, Vector2) public static bool OverlapRayTriangle(Vector2 rayPoint, Vector2 rayDirection, Vector2 a, Vector2 b, Vector2 c) Parameters rayPoint Vector2 rayDirection Vector2 a Vector2 b Vector2 c Vector2 Returns bool OverlapRect(Vector2, Vector2, Vector2, Vector2) public bool OverlapRect(Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters a Vector2 b Vector2 c Vector2 d Vector2 Returns bool OverlapSegment(Vector2, Vector2) public bool OverlapSegment(Vector2 segmentStart, Vector2 segmentEnd) Parameters segmentStart Vector2 segmentEnd Vector2 Returns bool OverlapSegments(List<Segment>) public bool OverlapSegments(List<Segment> segments) Parameters segments List<Segment> Returns bool OverlapShape(Circle) public bool OverlapShape(Circle circle) Parameters circle Circle Returns bool OverlapShape(Line) public bool OverlapShape(Line line) Parameters line Line Returns bool OverlapShape(Polygon) public bool OverlapShape(Polygon p) Parameters p Polygon Returns bool OverlapShape(Polyline) public bool OverlapShape(Polyline pl) Parameters pl Polyline Returns bool OverlapShape(Quad) public bool OverlapShape(Quad q) Parameters q Quad Returns bool OverlapShape(Ray) public bool OverlapShape(Ray ray) Parameters ray Ray Returns bool OverlapShape(Rect) public bool OverlapShape(Rect r) Parameters r Rect Returns bool OverlapShape(Segment) public bool OverlapShape(Segment segment) Parameters segment Segment Returns bool OverlapShape(Segments) public bool OverlapShape(Segments segments) Parameters segments Segments Returns bool OverlapShape(Triangle) public bool OverlapShape(Triangle t) Parameters t Triangle Returns bool OverlapTriangle(Vector2, Vector2, Vector2) public bool OverlapTriangle(Vector2 a, Vector2 b, Vector2 c) Parameters a Vector2 b Vector2 c Vector2 Returns bool RandomRay() public Ray RandomRay() Returns Ray RandomRay(Vector2, float, float, float, float) public Ray RandomRay(Vector2 origin, float minLength, float maxLength, float minAngleDeg, float maxAngleDeg) Parameters origin Vector2 minLength float maxLength float minAngleDeg float maxAngleDeg float Returns Ray RandomRay(float) public Ray RandomRay(float maxAngleDeg) Parameters maxAngleDeg float Returns Ray RandomRay(float, float) public Ray RandomRay(float minAngleDeg, float maxAngleDeg) Parameters minAngleDeg float maxAngleDeg float Returns Ray SetDirection(Vector2) public Ray SetDirection(Vector2 newDirection) Parameters newDirection Vector2 Returns Ray SetPoint(Vector2) public Ray SetPoint(Vector2 newPoint) Parameters newPoint Vector2 Returns Ray SetRotation(float) public Ray SetRotation(float angleRad) Parameters angleRad float Returns Ray ToLine() public Line ToLine() Returns Line ToSegment(float) public Segment ToSegment(float length) Parameters length float Returns Segment"
  },
  "api/ShapeEngine.Core.Shapes.Rect.Margins.html": {
    "href": "api/ShapeEngine.Core.Shapes.Rect.Margins.html",
    "title": "Struct Rect.Margins | ShapeEngine",
    "summary": "Struct Rect.Margins Namespace ShapeEngine.Core.Shapes Assembly ShapeEngine.dll public readonly struct Rect.Margins Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Margins() public Margins() Margins(Vector2, Vector2) public Margins(Vector2 horizontal, Vector2 vertical) Parameters horizontal Vector2 vertical Vector2 Margins(float) public Margins(float margin) Parameters margin float Margins(float, float) public Margins(float horizontal, float vertical) Parameters horizontal float vertical float Margins(float, float, float, float) public Margins(float top, float right, float bottom, float left) Parameters top float right float bottom float left float Fields Bottom public readonly float Bottom Field Value float Left public readonly float Left Field Value float Right public readonly float Right Field Value float Top public readonly float Top Field Value float Properties Valid public bool Valid { get; } Property Value bool"
  },
  "api/ShapeEngine.Core.Shapes.Rect.html": {
    "href": "api/ShapeEngine.Core.Shapes.Rect.html",
    "title": "Struct Rect | ShapeEngine",
    "summary": "Struct Rect Namespace ShapeEngine.Core.Shapes Assembly ShapeEngine.dll public readonly struct Rect : IEquatable<Rect> Implements IEquatable<Rect> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ShapeGappedDrawing.DrawGappedOutline(Rect, float, LineDrawingInfo, GappedOutlineDrawingInfo) ShapeRectDrawing.Draw(Rect, ColorRgba) ShapeRectDrawing.Draw(Rect, Vector2, float, ColorRgba) ShapeRectDrawing.DrawCorners(Rect, LineDrawingInfo, float) ShapeRectDrawing.DrawCorners(Rect, LineDrawingInfo, float, float, float, float) ShapeRectDrawing.DrawCornersRelative(Rect, LineDrawingInfo, float) ShapeRectDrawing.DrawCornersRelative(Rect, LineDrawingInfo, float, float, float, float) ShapeRectDrawing.DrawGrid(Rect, int, LineDrawingInfo) ShapeRectDrawing.DrawLines(Rect, LineDrawingInfo) ShapeRectDrawing.DrawLines(Rect, Vector2, float, LineDrawingInfo) ShapeRectDrawing.DrawLines(Rect, Vector2, float, float, ColorRgba, LineCapType, int) ShapeRectDrawing.DrawLines(Rect, float, ColorRgba) ShapeRectDrawing.DrawLines(Rect, float, ColorRgba, float, LineCapType, int) ShapeRectDrawing.DrawLinesPercentage(Rect, float, Vector2, float, LineDrawingInfo) ShapeRectDrawing.DrawLinesPercentage(Rect, float, Vector2, float, float, ColorRgba, LineCapType, int) ShapeRectDrawing.DrawLinesScaled(Rect, LineDrawingInfo, float, Vector2, float, float) ShapeRectDrawing.DrawRounded(Rect, float, int, ColorRgba) ShapeRectDrawing.DrawRoundedLines(Rect, float, float, int, ColorRgba) ShapeRectDrawing.DrawSlantedCorners(Rect, ColorRgba, float, float, float, float) ShapeRectDrawing.DrawSlantedCorners(Rect, Vector2, float, ColorRgba, float, float, float, float) ShapeRectDrawing.DrawSlantedCornersLines(Rect, LineDrawingInfo, float, float, float, float) ShapeRectDrawing.DrawSlantedCornersLines(Rect, Vector2, float, LineDrawingInfo, float, float, float, float) ShapeRectDrawing.DrawVertices(Rect, float, ColorRgba, int) ShapeStripedDrawing.DrawStriped(Rect, Circle, float, float, LineDrawingInfo, float) ShapeStripedDrawing.DrawStriped(Rect, Polygon, float, float, LineDrawingInfo, float) ShapeStripedDrawing.DrawStriped(Rect, Quad, float, float, LineDrawingInfo, float) ShapeStripedDrawing.DrawStriped(Rect, Rect, float, float, LineDrawingInfo, float) ShapeStripedDrawing.DrawStriped(Rect, Triangle, float, float, LineDrawingInfo, float) ShapeStripedDrawing.DrawStriped(Rect, CurveFloat, float, LineDrawingInfo) ShapeStripedDrawing.DrawStriped(Rect, CurveFloat, float, LineDrawingInfo, LineDrawingInfo) ShapeStripedDrawing.DrawStriped(Rect, CurveFloat, float, params LineDrawingInfo[]) ShapeStripedDrawing.DrawStriped(Rect, float, float, LineDrawingInfo, LineDrawingInfo) ShapeStripedDrawing.DrawStriped(Rect, float, float, LineDrawingInfo, float) ShapeStripedDrawing.DrawStriped(Rect, float, float, params LineDrawingInfo[]) ShapeUIDrawing.DrawBar(Rect, Vector2, float, float, ColorRgba, ColorRgba, float, float, float, float) ShapeUIDrawing.DrawBar(Rect, float, ColorRgba, ColorRgba, float, float, float, float) ShapeUIDrawing.DrawOutlineBar(Rect, Vector2, float, float, float, ColorRgba) ShapeUIDrawing.DrawOutlineBar(Rect, float, float, ColorRgba) ShapeClipper.ClipRect(Rect, Polygon, int) ShapeClipper.ToClipperRect(Rect) ShapeTween.Tween(Rect, Rect, float, TweenType) Constructors Rect(Rectangle) public Rect(Rectangle rect) Parameters rect Rectangle Rect(Vector2, Size) public Rect(Vector2 topLeft, Size size) Parameters topLeft Vector2 size Size Rect(Vector2, Size, AnchorPoint) public Rect(Vector2 position, Size size, AnchorPoint alignement) Parameters position Vector2 size Size alignement AnchorPoint Rect(Vector2, Vector2) public Rect(Vector2 topLeft, Vector2 bottomRight) Parameters topLeft Vector2 bottomRight Vector2 Rect(float, float, float, float) public Rect(float x, float y, float width, float height) Parameters x float y float width float height float Fields Height public readonly float Height Field Value float Width public readonly float Width Field Value float X public readonly float X Field Value float Y public readonly float Y Field Value float Properties A Top Left public Vector2 A { get; } Property Value Vector2 B Bottom Left public Vector2 B { get; } Property Value Vector2 Bottom public float Bottom { get; } Property Value float BottomLeft public Vector2 BottomLeft { get; } Property Value Vector2 BottomRight public Vector2 BottomRight { get; } Property Value Vector2 BottomSegment public Segment BottomSegment { get; } Property Value Segment C Bottom Right public Vector2 C { get; } Property Value Vector2 Center public Vector2 Center { get; } Property Value Vector2 Corners public (Vector2 tl, Vector2 bl, Vector2 br, Vector2 tr) Corners { get; } Property Value (Vector2 top, Vector2 right, Vector2 bottom, Vector2 left) D Top Right public Vector2 D { get; } Property Value Vector2 Empty public static Rect Empty { get; } Property Value Rect Left public float Left { get; } Property Value float LeftSegment public Segment LeftSegment { get; } Property Value Segment Rectangle public Rectangle Rectangle { get; } Property Value Rectangle Right public float Right { get; } Property Value float RightSegment public Segment RightSegment { get; } Property Value Segment Size public Size Size { get; } Property Value Size Top public float Top { get; } Property Value float TopLeft public Vector2 TopLeft { get; } Property Value Vector2 TopRight public Vector2 TopRight { get; } Property Value Vector2 TopSegment public Segment TopSegment { get; } Property Value Segment Methods Align(AnchorPoint) public Rect Align(AnchorPoint alignement) Parameters alignement AnchorPoint Returns Rect ApplyMargins(Margins) public Rect ApplyMargins(Rect.Margins margins) Parameters margins Rect.Margins Returns Rect ApplyMargins(float) public Rect ApplyMargins(float margin) Parameters margin float Returns Rect ApplyMargins(float, float, float, float) public Rect ApplyMargins(float left, float right, float top, float bottom) Parameters left float right float top float bottom float Returns Rect ApplyMarginsAbsolute(Margins) public Rect ApplyMarginsAbsolute(Rect.Margins margins) Parameters margins Rect.Margins Returns Rect ApplyMarginsAbsolute(float) public Rect ApplyMarginsAbsolute(float margin) Parameters margin float Returns Rect ApplyMarginsAbsolute(float, float, float, float) public Rect ApplyMarginsAbsolute(float left, float right, float top, float bottom) Parameters left float right float top float bottom float Returns Rect ApplyOffset(Transform2D, AnchorPoint) Moves the rect by offset.Position Changes the size of the moved rect by offset.ScaledSize public Rect ApplyOffset(Transform2D offset, AnchorPoint alignement) Parameters offset Transform2D alignement AnchorPoint Returns Rect BoundsCollision(Circle) public BoundsCollisionInfo BoundsCollision(Circle boundingCircle) Parameters boundingCircle Circle Returns BoundsCollisionInfo BoundsCollision(Rect) public BoundsCollisionInfo BoundsCollision(Rect boundingBox) Parameters boundingBox Rect Returns BoundsCollisionInfo BoundsWrapAround(Circle) public (bool outOfBounds, Vector2 newPos) BoundsWrapAround(Circle boundingCircle) Parameters boundingCircle Circle Returns (bool outOfBounds, Vector2 newPos) BoundsWrapAround(Rect) public (bool outOfBounds, Vector2 newPos) BoundsWrapAround(Rect boundingBox) Parameters boundingBox Rect Returns (bool outOfBounds, Vector2 newPos) Ceiling() public Rect Ceiling() Returns Rect ChangePosition(Vector2) public Rect ChangePosition(Vector2 amount) Parameters amount Vector2 Returns Rect ChangeSize(Size, AnchorPoint) public Rect ChangeSize(Size amount, AnchorPoint alignement) Parameters amount Size alignement AnchorPoint Returns Rect ChangeSize(float, AnchorPoint) public Rect ChangeSize(float amount, AnchorPoint alignement) Parameters amount float alignement AnchorPoint Returns Rect Clamp(Rect) public Rect Clamp(Rect bounds) Parameters bounds Rect Returns Rect Clamp(Vector2, Vector2) public Rect Clamp(Vector2 min, Vector2 max) Parameters min Vector2 max Vector2 Returns Rect ClampOnRect(Vector2) public Vector2 ClampOnRect(Vector2 p) Parameters p Vector2 Returns Vector2 ContainsCollider(Collider) public bool ContainsCollider(Collider collider) Parameters collider Collider Returns bool ContainsCollisionObject(CollisionObject) public bool ContainsCollisionObject(CollisionObject collisionObject) Parameters collisionObject CollisionObject Returns bool ContainsPoint(Vector2) public bool ContainsPoint(Vector2 p) Parameters p Vector2 Returns bool ContainsPoints(List<Vector2>) public bool ContainsPoints(List<Vector2> points) Parameters points List<Vector2> Returns bool ContainsPoints(Vector2, Vector2) public bool ContainsPoints(Vector2 u, Vector2 v) Parameters u Vector2 v Vector2 Returns bool ContainsPoints(Vector2, Vector2, Vector2) public bool ContainsPoints(Vector2 u, Vector2 v, Vector2 w) Parameters u Vector2 v Vector2 w Vector2 Returns bool ContainsPoints(Vector2, Vector2, Vector2, Vector2) public bool ContainsPoints(Vector2 u, Vector2 v, Vector2 w, Vector2 x) Parameters u Vector2 v Vector2 w Vector2 x Vector2 Returns bool ContainsRectCircle(Vector2, Vector2, Vector2, float) public static bool ContainsRectCircle(Vector2 topLeft, Vector2 bottomRight, Vector2 circleCenter, float circleRadius) Parameters topLeft Vector2 bottomRight Vector2 circleCenter Vector2 circleRadius float Returns bool ContainsRectPoint(Vector2, Vector2, Vector2) public static bool ContainsRectPoint(Vector2 topLeft, Vector2 bottomRight, Vector2 point) Parameters topLeft Vector2 bottomRight Vector2 point Vector2 Returns bool ContainsRectPoints(Vector2, Vector2, List<Vector2>) public static bool ContainsRectPoints(Vector2 topLeft, Vector2 bottomRight, List<Vector2> points) Parameters topLeft Vector2 bottomRight Vector2 points List<Vector2> Returns bool ContainsRectPoints(Vector2, Vector2, Vector2, Vector2) public static bool ContainsRectPoints(Vector2 topLeft, Vector2 bottomRight, Vector2 u, Vector2 v) Parameters topLeft Vector2 bottomRight Vector2 u Vector2 v Vector2 Returns bool ContainsRectPoints(Vector2, Vector2, Vector2, Vector2, Vector2) public static bool ContainsRectPoints(Vector2 topLeft, Vector2 bottomRight, Vector2 u, Vector2 v, Vector2 w) Parameters topLeft Vector2 bottomRight Vector2 u Vector2 v Vector2 w Vector2 Returns bool ContainsRectPoints(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool ContainsRectPoints(Vector2 topLeft, Vector2 bottomRight, Vector2 u, Vector2 v, Vector2 w, Vector2 x) Parameters topLeft Vector2 bottomRight Vector2 u Vector2 v Vector2 w Vector2 x Vector2 Returns bool ContainsRectPolygon(Vector2, Vector2, List<Vector2>) public static bool ContainsRectPolygon(Vector2 topLeft, Vector2 bottomRight, List<Vector2> polygon) Parameters topLeft Vector2 bottomRight Vector2 polygon List<Vector2> Returns bool ContainsRectPolyline(Vector2, Vector2, List<Vector2>) public static bool ContainsRectPolyline(Vector2 topLeft, Vector2 bottomRight, List<Vector2> polyline) Parameters topLeft Vector2 bottomRight Vector2 polyline List<Vector2> Returns bool ContainsRectQuad(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool ContainsRectQuad(Vector2 topLeft, Vector2 bottomRight, Vector2 qA, Vector2 qB, Vector2 qC, Vector2 qD) Parameters topLeft Vector2 bottomRight Vector2 qA Vector2 qB Vector2 qC Vector2 qD Vector2 Returns bool ContainsRectRect(Vector2, Vector2, Vector2, Vector2) public static bool ContainsRectRect(Vector2 topLeft1, Vector2 bottomRight1, Vector2 topLeft2, Vector2 bottomRight2) Parameters topLeft1 Vector2 bottomRight1 Vector2 topLeft2 Vector2 bottomRight2 Vector2 Returns bool ContainsRectSegment(Vector2, Vector2, Vector2, Vector2) public static bool ContainsRectSegment(Vector2 topLeft, Vector2 bottomRight, Vector2 segmentStart, Vector2 segmentEnd) Parameters topLeft Vector2 bottomRight Vector2 segmentStart Vector2 segmentEnd Vector2 Returns bool ContainsRectTriangle(Vector2, Vector2, Vector2, Vector2, Vector2) public static bool ContainsRectTriangle(Vector2 topLeft, Vector2 bottomRight, Vector2 tA, Vector2 tB, Vector2 tc) Parameters topLeft Vector2 bottomRight Vector2 tA Vector2 tB Vector2 tc Vector2 Returns bool ContainsShape(Circle) public bool ContainsShape(Circle circle) Parameters circle Circle Returns bool ContainsShape(Points) public bool ContainsShape(Points points) Parameters points Points Returns bool ContainsShape(Polygon) public bool ContainsShape(Polygon polygon) Parameters polygon Polygon Returns bool ContainsShape(Polyline) public bool ContainsShape(Polyline polyline) Parameters polyline Polyline Returns bool ContainsShape(Quad) public bool ContainsShape(Quad quad) Parameters quad Quad Returns bool ContainsShape(Rect) public bool ContainsShape(Rect rect) Parameters rect Rect Returns bool ContainsShape(Segment) public bool ContainsShape(Segment segment) Parameters segment Segment Returns bool ContainsShape(Triangle) public bool ContainsShape(Triangle triangle) Parameters triangle Triangle Returns bool Difference(Rect) Creates a rect that represents the intersection between a and b. If there is no intersection, an empty rect is returned. public Rect Difference(Rect rect) Parameters rect Rect Returns Rect Difference2(Rect) Creates a rect that represents the intersection between a and b. If there is no intersection, an empty rect is returned. public Rect Difference2(Rect other) Parameters other Rect Returns Rect Enlarge(Vector2) public Rect Enlarge(Vector2 p) Parameters p Vector2 Returns Rect Equals(Rect) Indicates whether the current object is equal to another object of the same type. public bool Equals(Rect other) Parameters other Rect An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. Fix(Vector2, Vector2) public static (Vector2 topLeft, Vector2 bottomRight) Fix(Vector2 topLeft, Vector2 bottomRight) Parameters topLeft Vector2 bottomRight Vector2 Returns (Vector2 self, Vector2 other) Floor() public Rect Floor() Returns Rect FromCircle(Circle) public static Rect FromCircle(Circle c) Parameters c Circle Returns Rect GetAbsolutePoint(AnchorPoint) public Vector2 GetAbsolutePoint(AnchorPoint anchor) Parameters anchor AnchorPoint Returns Vector2 GetAlignedRectsGrid(Grid, Size) public List<Rect>? GetAlignedRectsGrid(Grid grid, Size gap) Parameters grid Grid gap Size Returns List<Rect> GetAnchorPoint(Vector2) public AnchorPoint GetAnchorPoint(Vector2 point) Parameters point Vector2 Returns AnchorPoint GetArea() public float GetArea() Returns float GetClosestPoint(Circle) public ClosestPointResult GetClosestPoint(Circle other) Parameters other Circle Returns ClosestPointResult GetClosestPoint(Line) public ClosestPointResult GetClosestPoint(Line other) Parameters other Line Returns ClosestPointResult GetClosestPoint(Polygon) public ClosestPointResult GetClosestPoint(Polygon other) Parameters other Polygon Returns ClosestPointResult GetClosestPoint(Polyline) public ClosestPointResult GetClosestPoint(Polyline other) Parameters other Polyline Returns ClosestPointResult GetClosestPoint(Quad) public ClosestPointResult GetClosestPoint(Quad other) Parameters other Quad Returns ClosestPointResult GetClosestPoint(Ray) public ClosestPointResult GetClosestPoint(Ray other) Parameters other Ray Returns ClosestPointResult GetClosestPoint(Rect) public ClosestPointResult GetClosestPoint(Rect other) Parameters other Rect Returns ClosestPointResult GetClosestPoint(Segment) public ClosestPointResult GetClosestPoint(Segment other) Parameters other Segment Returns ClosestPointResult GetClosestPoint(Segments) public ClosestPointResult GetClosestPoint(Segments other) Parameters other Segments Returns ClosestPointResult GetClosestPoint(Triangle) public ClosestPointResult GetClosestPoint(Triangle other) Parameters other Triangle Returns ClosestPointResult GetClosestPoint(Vector2, out float) public CollisionPoint GetClosestPoint(Vector2 p, out float disSquared) Parameters p Vector2 disSquared float Returns CollisionPoint GetClosestPoint(Vector2, out float, out int) public CollisionPoint GetClosestPoint(Vector2 p, out float disSquared, out int index) Parameters p Vector2 disSquared float index int Returns CollisionPoint GetClosestPointRectPoint(Vector2, Vector2, Vector2, Vector2, Vector2, out float) public static Vector2 GetClosestPointRectPoint(Vector2 a, Vector2 b, Vector2 c, Vector2 d, Vector2 p, out float disSquared) Parameters a Vector2 b Vector2 c Vector2 d Vector2 p Vector2 disSquared float Returns Vector2 GetClosestSegment(Vector2, out float) public (Segment segment, CollisionPoint segmentPoint) GetClosestSegment(Vector2 p, out float disSquared) Parameters p Vector2 disSquared float Returns (Segment segment, CollisionPoint segmentPoint) GetClosestVertex(Vector2, out float, out int) public Vector2 GetClosestVertex(Vector2 p, out float disSquared, out int index) Parameters p Vector2 disSquared float index int Returns Vector2 GetCorner(int) Corners a numbered in ccw order starting from the top left. (tl, bl, br, tr) public Vector2 GetCorner(int corner) Parameters corner int Corner Index from 0 to 3 Returns Vector2 GetEdges() public Segments GetEdges() Returns Segments GetEdges(Vector2, Vector2, Vector2, Vector2) Returns the segments of a rect in ccw order. (tl -> bl, bl -> br, br -> tr, tr -> tl) public static Segments GetEdges(Vector2 tl, Vector2 bl, Vector2 br, Vector2 tr) Parameters tl Vector2 bl Vector2 br Vector2 tr Vector2 Returns Segments GetFurthestVertex(Vector2, out float, out int) public Vector2 GetFurthestVertex(Vector2 p, out float disSquared, out int index) Parameters p Vector2 disSquared float index int Returns Vector2 GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. GetHeightFactor(float) Returns a value between 0 - 1 for y axis based on where the point is within the rect. topleft is considered (0,0) and bottomright is considered (1,1). public float GetHeightFactor(float y) Parameters y float Returns float GetInterpolatedEdgePoints(float) public Points? GetInterpolatedEdgePoints(float t) Parameters t float Returns Points GetInterpolatedEdgePoints(float, int) public Points? GetInterpolatedEdgePoints(float t, int steps) Parameters t float steps int Returns Points GetNineTiles(Rect, Rect) Construct 9 rects out of an outer and inner rect. public static List<Rect> GetNineTiles(Rect inner, Rect outer) Parameters inner Rect The inner rect. Has to be inside of the outer rect. outer Rect The outer rect. Has to be bigger than the inner rect. Returns List<Rect> A list of rectangle in the order [TL,TC,TR,LC,C,RC,BL,BC,BR]. GetPerimeter() public float GetPerimeter() Returns float GetPerimeterSquared() public float GetPerimeterSquared() Returns float GetPoint(AnchorPoint) public Vector2 GetPoint(AnchorPoint alignement) Parameters alignement AnchorPoint Returns Vector2 GetPointsRelative(Vector2) Points are ordered in ccw order starting from the top left. (tl, bl, br, tr) public Polygon GetPointsRelative(Vector2 pos) Parameters pos Vector2 Returns Polygon GetProgressRect(float, float, float, float, float) Returns a new rect with margins applied based on f. Standard progress bar from left to right: Left: 0, Right: 1, Top: 0, Bottom: 0 Progress bar from right to left: Left: 1, Right: 0, Top: 0, Bottom: 0 Progress bar bottom to top: Left: 0, Right: 0, Top: 1, Bottom: 0 Progress bar from center to left and right: Left: 0.5f, Right: 0.5f, Top: 0, Bottom: 0 public Rect GetProgressRect(float f, float left = 1, float right = 0, float top = 0, float bottom = 0) Parameters f float The progress between 0 and 1. left float How much bar movement comes from the left. (0 - 1) right float How much bar movement comes from the right. (0 - 1) top float How much bar movement comes from the top. (0 - 1) bottom float How much bar movement comes from the bottom. (0 - 1) Returns Rect GetProjectedShapePoints(Vector2) public Points? GetProjectedShapePoints(Vector2 v) Parameters v Vector2 Returns Points GetRandomEdge() public Segment GetRandomEdge() Returns Segment GetRandomPointInside() public Vector2 GetRandomPointInside() Returns Vector2 GetRandomPointOnEdge() public Vector2 GetRandomPointOnEdge() Returns Vector2 GetRandomPointsInside(int) public Points GetRandomPointsInside(int amount) Parameters amount int Returns Points GetRandomPointsOnEdge(int) public Points GetRandomPointsOnEdge(int amount) Parameters amount int Returns Points GetRandomVertex() public Vector2 GetRandomVertex() Returns Vector2 GetSegment(int) public Segment GetSegment(int index) Parameters index int Returns Segment GetSlantedCornerPoints(float, float, float, float) public Polygon GetSlantedCornerPoints(float tlCorner, float trCorner, float brCorner, float blCorner) Parameters tlCorner float trCorner float brCorner float blCorner float Returns Polygon GetSlantedCornerPointsRelative(float, float, float, float) Get the points to draw a rectangle with slanted corners. The corner values are the percentage of the width/height of the rectange the should be used for the slant. public Polygon GetSlantedCornerPointsRelative(float tlCorner, float trCorner, float brCorner, float blCorner) Parameters tlCorner float Should be bewteen 0 - 1 trCorner float Should be bewteen 0 - 1 brCorner float Should be bewteen 0 - 1 blCorner float Should be bewteen 0 - 1 Returns Polygon Returns points in ccw order. GetWidthFactor(float) Returns a value between 0 - 1 for x axis based on where the point is within the rect. topleft is considered (0,0) and bottomright is considered (1,1). public float GetWidthFactor(float x) Parameters x float Returns float Intersect(Collider) public CollisionPoints? Intersect(Collider collider) Parameters collider Collider Returns CollisionPoints Intersect(Collider, ref CollisionPoints, bool) public int Intersect(Collider collider, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters collider Collider points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Circle) public CollisionPoints? IntersectShape(Circle circle) Parameters circle Circle Returns CollisionPoints IntersectShape(Circle, ref CollisionPoints, bool) public int IntersectShape(Circle circle, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters circle Circle points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Line) public CollisionPoints? IntersectShape(Line l) Parameters l Line Returns CollisionPoints IntersectShape(Line, ref CollisionPoints, bool) public int IntersectShape(Line l, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters l Line points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Polygon) public CollisionPoints? IntersectShape(Polygon p) Parameters p Polygon Returns CollisionPoints IntersectShape(Polygon, ref CollisionPoints, bool) public int IntersectShape(Polygon p, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters p Polygon points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Polyline) public CollisionPoints? IntersectShape(Polyline pl) Parameters pl Polyline Returns CollisionPoints IntersectShape(Polyline, ref CollisionPoints, bool) public int IntersectShape(Polyline pl, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters pl Polyline points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Quad) public CollisionPoints? IntersectShape(Quad q) Parameters q Quad Returns CollisionPoints IntersectShape(Quad, ref CollisionPoints, bool) public int IntersectShape(Quad q, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters q Quad points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Ray) public CollisionPoints? IntersectShape(Ray r) Parameters r Ray Returns CollisionPoints IntersectShape(Ray, ref CollisionPoints, bool) public int IntersectShape(Ray r, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters r Ray points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Rect) public CollisionPoints? IntersectShape(Rect r) Parameters r Rect Returns CollisionPoints IntersectShape(Rect, ref CollisionPoints, bool) public int IntersectShape(Rect r, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters r Rect points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Segment) public CollisionPoints? IntersectShape(Segment s) Parameters s Segment Returns CollisionPoints IntersectShape(Segment, ref CollisionPoints, bool) public int IntersectShape(Segment s, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters s Segment points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Segments) public CollisionPoints? IntersectShape(Segments segments) Parameters segments Segments Returns CollisionPoints IntersectShape(Segments, ref CollisionPoints, bool) public int IntersectShape(Segments shape, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters shape Segments points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Triangle) public CollisionPoints? IntersectShape(Triangle t) Parameters t Triangle Returns CollisionPoints IntersectShape(Triangle, ref CollisionPoints, bool) public int IntersectShape(Triangle t, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters t Triangle points CollisionPoints returnAfterFirstValid bool Returns int Lerp(Rect, float) public Rect Lerp(Rect to, float f) Parameters to Rect f float Returns Rect Overlap(Collider) public bool Overlap(Collider collider) Parameters collider Collider Returns bool OverlapCircle(Vector2, float) public bool OverlapCircle(Vector2 circleCenter, float circleRadius) Parameters circleCenter Vector2 circleRadius float Returns bool OverlapLine(Vector2, Vector2) public bool OverlapLine(Vector2 linePoint, Vector2 lineDirection) Parameters linePoint Vector2 lineDirection Vector2 Returns bool OverlapPolygon(List<Vector2>) public bool OverlapPolygon(List<Vector2> points) Parameters points List<Vector2> Returns bool OverlapPolyline(List<Vector2>) public bool OverlapPolyline(List<Vector2> points) Parameters points List<Vector2> Returns bool OverlapQuad(Vector2, Vector2, Vector2, Vector2) public bool OverlapQuad(Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters a Vector2 b Vector2 c Vector2 d Vector2 Returns bool OverlapRay(Vector2, Vector2) public bool OverlapRay(Vector2 rayPoint, Vector2 rayDirection) Parameters rayPoint Vector2 rayDirection Vector2 Returns bool OverlapRect(Vector2, Vector2, Vector2, Vector2) public bool OverlapRect(Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters a Vector2 b Vector2 c Vector2 d Vector2 Returns bool OverlapRectCircle(Vector2, Vector2, Vector2, Vector2, Vector2, float) public static bool OverlapRectCircle(Vector2 a, Vector2 b, Vector2 c, Vector2 d, Vector2 circleCenter, float circleRadius) Parameters a Vector2 b Vector2 c Vector2 d Vector2 circleCenter Vector2 circleRadius float Returns bool OverlapRectLine(Vector2, Vector2) public bool OverlapRectLine(Vector2 linePos, Vector2 lineDir) Parameters linePos Vector2 lineDir Vector2 Returns bool OverlapRectLine(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool OverlapRectLine(Vector2 a, Vector2 b, Vector2 c, Vector2 d, Vector2 linePoint, Vector2 lineDirection) Parameters a Vector2 b Vector2 c Vector2 d Vector2 linePoint Vector2 lineDirection Vector2 Returns bool OverlapRectPolygon(Vector2, Vector2, Vector2, Vector2, List<Vector2>) public static bool OverlapRectPolygon(Vector2 a, Vector2 b, Vector2 c, Vector2 d, List<Vector2> points) Parameters a Vector2 b Vector2 c Vector2 d Vector2 points List<Vector2> Returns bool OverlapRectPolyline(Vector2, Vector2, Vector2, Vector2, List<Vector2>) public static bool OverlapRectPolyline(Vector2 a, Vector2 b, Vector2 c, Vector2 d, List<Vector2> points) Parameters a Vector2 b Vector2 c Vector2 d Vector2 points List<Vector2> Returns bool OverlapRectQuad(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool OverlapRectQuad(Vector2 a, Vector2 b, Vector2 c, Vector2 d, Vector2 qa, Vector2 qb, Vector2 qc, Vector2 qd) Parameters a Vector2 b Vector2 c Vector2 d Vector2 qa Vector2 qb Vector2 qc Vector2 qd Vector2 Returns bool OverlapRectRay(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool OverlapRectRay(Vector2 a, Vector2 b, Vector2 c, Vector2 d, Vector2 rayPoint, Vector2 rayDirection) Parameters a Vector2 b Vector2 c Vector2 d Vector2 rayPoint Vector2 rayDirection Vector2 Returns bool OverlapRectRect(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool OverlapRectRect(Vector2 a, Vector2 b, Vector2 c, Vector2 d, Vector2 ra, Vector2 rb, Vector2 rc, Vector2 rd) Parameters a Vector2 b Vector2 c Vector2 d Vector2 ra Vector2 rb Vector2 rc Vector2 rd Vector2 Returns bool OverlapRectSegment(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool OverlapRectSegment(Vector2 a, Vector2 b, Vector2 c, Vector2 d, Vector2 segmentStart, Vector2 segmentEnd) Parameters a Vector2 b Vector2 c Vector2 d Vector2 segmentStart Vector2 segmentEnd Vector2 Returns bool OverlapRectSegments(Vector2, Vector2, Vector2, Vector2, List<Segment>) public static bool OverlapRectSegments(Vector2 a, Vector2 b, Vector2 c, Vector2 d, List<Segment> segments) Parameters a Vector2 b Vector2 c Vector2 d Vector2 segments List<Segment> Returns bool OverlapRectTriangle(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool OverlapRectTriangle(Vector2 a, Vector2 b, Vector2 c, Vector2 d, Vector2 ta, Vector2 tb, Vector2 tc) Parameters a Vector2 b Vector2 c Vector2 d Vector2 ta Vector2 tb Vector2 tc Vector2 Returns bool OverlapSegment(Vector2, Vector2) public bool OverlapSegment(Vector2 segmentStart, Vector2 segmentEnd) Parameters segmentStart Vector2 segmentEnd Vector2 Returns bool OverlapSegments(List<Segment>) public bool OverlapSegments(List<Segment> segments) Parameters segments List<Segment> Returns bool OverlapShape(Circle) public bool OverlapShape(Circle c) Parameters c Circle Returns bool OverlapShape(Line) public bool OverlapShape(Line line) Parameters line Line Returns bool OverlapShape(Polygon) public bool OverlapShape(Polygon poly) Parameters poly Polygon Returns bool OverlapShape(Polyline) public bool OverlapShape(Polyline pl) Parameters pl Polyline Returns bool OverlapShape(Quad) public bool OverlapShape(Quad q) Parameters q Quad Returns bool OverlapShape(Ray) public bool OverlapShape(Ray ray) Parameters ray Ray Returns bool OverlapShape(Rect) public bool OverlapShape(Rect b) Parameters b Rect Returns bool OverlapShape(Segment) public bool OverlapShape(Segment s) Parameters s Segment Returns bool OverlapShape(Segments) public bool OverlapShape(Segments segments) Parameters segments Segments Returns bool OverlapShape(Triangle) public bool OverlapShape(Triangle t) Parameters t Triangle Returns bool OverlapTriangle(Vector2, Vector2, Vector2) public bool OverlapTriangle(Vector2 a, Vector2 b, Vector2 c) Parameters a Vector2 b Vector2 c Vector2 Returns bool PointToAbsolute(Vector2) public Vector2 PointToAbsolute(Vector2 relativePoint) Parameters relativePoint Vector2 Returns Vector2 PointToRelative(Vector2) public Vector2 PointToRelative(Vector2 p) Parameters p Vector2 Returns Vector2 ProjectShape(Vector2) public Polygon? ProjectShape(Vector2 v) Parameters v Vector2 Returns Polygon Rotate(float, AnchorPoint) Points are ordered in ccw order starting with top left. (tl, bl, br, tr) public Polygon Rotate(float angleDeg, AnchorPoint alignement) Parameters angleDeg float alignement AnchorPoint Returns Polygon RotateCorners(Vector2, float) public (Vector2 tl, Vector2 bl, Vector2 br, Vector2 tr) RotateCorners(Vector2 pivot, float angleDeg) Parameters pivot Vector2 angleDeg float Returns (Vector2 top, Vector2 right, Vector2 bottom, Vector2 left) RotateList(float, AnchorPoint) public Points RotateList(float angleDeg, AnchorPoint alignement) Parameters angleDeg float alignement AnchorPoint Returns Points Round() public Rect Round() Returns Rect ScaleSize(Vector2, AnchorPoint) public Rect ScaleSize(Vector2 scale, AnchorPoint alignement) Parameters scale Vector2 alignement AnchorPoint Returns Rect ScaleSize(float, AnchorPoint) public Rect ScaleSize(float scale, AnchorPoint alignement) Parameters scale float alignement AnchorPoint Returns Rect ScaleSize(float, float) public Rect ScaleSize(float horizontalAmount, float verticalAmount) Parameters horizontalAmount float verticalAmount float Returns Rect SeperateAxis(Vector2, Vector2) public bool SeperateAxis(Vector2 axisStart, Vector2 axisEnd) Parameters axisStart Vector2 axisEnd Vector2 Returns bool SetPosition(Vector2) public Rect SetPosition(Vector2 newPosition) Parameters newPosition Vector2 Returns Rect SetPosition(Vector2, AnchorPoint) public Rect SetPosition(Vector2 newPosition, AnchorPoint alignement) Parameters newPosition Vector2 alignement AnchorPoint Returns Rect SetSize(Size) public Rect SetSize(Size newSize) Parameters newSize Size Returns Rect SetSize(Size, AnchorPoint) public Rect SetSize(Size newSize, AnchorPoint alignement) Parameters newSize Size alignement AnchorPoint Returns Rect SetSize(float, AnchorPoint) public Rect SetSize(float newSize, AnchorPoint alignement) Parameters newSize float alignement AnchorPoint Returns Rect SetTransform(Transform2D, AnchorPoint) Moves the rect to transform.Position Sets the size of the moved rect to transform.Size public Rect SetTransform(Transform2D transform, AnchorPoint alignement) Parameters transform Transform2D alignement AnchorPoint Returns Rect Split(int, int, bool) public List<Rect> Split(int columns, int rows, bool leftToRight = true) Parameters columns int rows int leftToRight bool Returns List<Rect> Split(float, float) public (Rect topLeft, Rect bottomLeft, Rect bottomRight, Rect TopRight) Split(float horizontal, float vertical) Parameters horizontal float vertical float Returns (Rect topLeft, Rect bottomLeft, Rect bottomRight, Rect TopRight) Split(float[], float[]) public List<Rect> Split(float[] horizontal, float[] vertical) Parameters horizontal float[] vertical float[] Returns List<Rect> SplitH(int) public List<Rect> SplitH(int columns) Parameters columns int Returns List<Rect> SplitH(float) public (Rect left, Rect right) SplitH(float f) Parameters f float Returns (Rect top, Rect bottom) SplitH(params float[]) Splits the rect according to the factors. The factors are accumulated and the total factor is capped at 1. Individual factor values range is between 0 and 1. public List<Rect> SplitH(params float[] factors) Parameters factors float[] Returns List<Rect> SplitV(int) public List<Rect> SplitV(int rows) Parameters rows int Returns List<Rect> SplitV(float) public (Rect top, Rect bottom) SplitV(float f) Parameters f float Returns (Rect top, Rect bottom) SplitV(params float[]) Splits the rect according to the factors. The factors are accumulated and the total factor is capped at 1. Individual factor values range is between 0 and 1. public List<Rect> SplitV(params float[] factors) Parameters factors float[] Returns List<Rect> ToPoints() public Points ToPoints() Returns Points ToPolygon() public Polygon ToPolygon() Returns Polygon ToPolyline() public Polyline ToPolyline() Returns Polyline Triangulate() public Triangulation Triangulate() Returns Triangulation Truncate() public Rect Truncate() Returns Rect Union(Rect) Creates a rectangle that represents the union between a and b. public Rect Union(Rect rect) Parameters rect Rect Returns Rect Union2(Rect) Creates a rectangle that represents the union between a and b. public Rect Union2(Rect other) Parameters other Rect Returns Rect Operators operator +(Rect, Rect) public static Rect operator +(Rect left, Rect right) Parameters left Rect right Rect Returns Rect operator +(Rect, Vector2) public static Rect operator +(Rect left, Vector2 right) Parameters left Rect right Vector2 Returns Rect operator +(Rect, float) public static Rect operator +(Rect left, float right) Parameters left Rect right float Returns Rect operator /(Rect, Rect) public static Rect operator /(Rect left, Rect right) Parameters left Rect right Rect Returns Rect operator /(Rect, Vector2) public static Rect operator /(Rect left, Vector2 right) Parameters left Rect right Vector2 Returns Rect operator /(Rect, float) public static Rect operator /(Rect left, float right) Parameters left Rect right float Returns Rect operator ==(Rect, Rect) public static bool operator ==(Rect left, Rect right) Parameters left Rect right Rect Returns bool operator !=(Rect, Rect) public static bool operator !=(Rect left, Rect right) Parameters left Rect right Rect Returns bool operator *(Rect, Rect) public static Rect operator *(Rect left, Rect right) Parameters left Rect right Rect Returns Rect operator *(Rect, Vector2) public static Rect operator *(Rect left, Vector2 right) Parameters left Rect right Vector2 Returns Rect operator *(Rect, float) public static Rect operator *(Rect left, float right) Parameters left Rect right float Returns Rect operator -(Rect, Rect) public static Rect operator -(Rect left, Rect right) Parameters left Rect right Rect Returns Rect operator -(Rect, Vector2) public static Rect operator -(Rect left, Vector2 right) Parameters left Rect right Vector2 Returns Rect operator -(Rect, float) public static Rect operator -(Rect left, float right) Parameters left Rect right float Returns Rect"
  },
  "api/ShapeEngine.Core.Shapes.RectShape.html": {
    "href": "api/ShapeEngine.Core.Shapes.RectShape.html",
    "title": "Class RectShape | ShapeEngine",
    "summary": "Class RectShape Namespace ShapeEngine.Core.Shapes Assembly ShapeEngine.dll public class RectShape : ShapeContainer, IShape Inheritance object Shape ShapeContainer RectShape Implements IShape Inherited Members ShapeContainer.Parent ShapeContainer.ChangeParent(ShapeContainer) ShapeContainer.AddChild(ShapeContainer) ShapeContainer.RemoveChild(ShapeContainer) ShapeContainer.InitializeShape(Transform2D) ShapeContainer.UpdateShape(float, Transform2D) ShapeContainer.DrawShape() ShapeContainer.OnChildInitialized(ShapeContainer) ShapeContainer.OnChildUpdated(ShapeContainer) ShapeContainer.OnChildDrawn(ShapeContainer) ShapeContainer.OnUpdateFinished() ShapeContainer.OnDrawFinished() ShapeContainer.OnAddedToParent(ShapeContainer) ShapeContainer.OnRemovedFromParent(ShapeContainer) Shape.Moves Shape.Rotates Shape.Scales Shape.Offset Shape.CurTransform Shape.PrevTransform Shape.RecalculateShape() Shape.OnInitialized() Shape.OnUpdate(float) Shape.OnDraw() Shape.OnShapeTransformChanged(bool) Shape.UpdateTransform(Transform2D) Shape.GetRayShape() Shape.GetLineShape() Shape.GetSegmentShape() Shape.GetCircleShape() Shape.GetTriangleShape() Shape.GetQuadShape() Shape.GetPolygonShape() Shape.GetPolylineShape() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RectShape(Transform2D) public RectShape(Transform2D offset) Parameters offset Transform2D RectShape(Transform2D, AnchorPoint) public RectShape(Transform2D offset, AnchorPoint alignement) Parameters offset Transform2D alignement AnchorPoint Properties Alignement public AnchorPoint Alignement { get; set; } Property Value AnchorPoint Methods GetRectShape() public override Rect GetRectShape() Returns Rect GetShapeType() public override ShapeType GetShapeType() Returns ShapeType"
  },
  "api/ShapeEngine.Core.Shapes.Segment.html": {
    "href": "api/ShapeEngine.Core.Shapes.Segment.html",
    "title": "Struct Segment | ShapeEngine",
    "summary": "Struct Segment Namespace ShapeEngine.Core.Shapes Assembly ShapeEngine.dll public readonly struct Segment : IEquatable<Segment> Implements IEquatable<Segment> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ShapeGappedDrawing.DrawGapped(Segment, float, LineDrawingInfo, GappedOutlineDrawingInfo) ShapeSegmentDrawing.Draw(Segment, LineDrawingInfo) ShapeSegmentDrawing.Draw(Segment, float, ColorRgba, LineCapType, int) ShapeSegmentDrawing.Draw(Segment, float, float, LineDrawingInfo) ShapeSegmentDrawing.DrawGlow(Segment, float, float, ColorRgba, ColorRgba, int, LineCapType, int) ShapeSegmentDrawing.DrawPercentage(Segment, float, LineDrawingInfo) ShapeSegmentDrawing.DrawPercentage(Segment, float, float, ColorRgba, LineCapType, int) ShapeSegmentDrawing.DrawScaled(Segment, LineDrawingInfo, float, float) ShapeSegmentDrawing.DrawScaled(Segment, float, float, LineDrawingInfo, float, float) ShapeSegmentDrawing.DrawVertices(Segment, float, ColorRgba, int) ShapeClipper.ToClipperPath(Segment) ShapeClipper.ToClipperPaths(Segment) Constructors Segment(Vector2, Vector2, bool) public Segment(Vector2 start, Vector2 end, bool flippedNormal = false) Parameters start Vector2 end Vector2 flippedNormal bool Segment(Vector2, float, float, float, bool) public Segment(Vector2 origin, float length, float rotRad, float originOffset = 0.5, bool flippedNormal = false) Parameters origin Vector2 length float rotRad float originOffset float flippedNormal bool Segment(float, float, float, float, bool) public Segment(float startX, float startY, float endX, float endY, bool flippedNormal = false) Parameters startX float startY float endX float endY float flippedNormal bool Fields End public readonly Vector2 End Field Value Vector2 Normal public readonly Vector2 Normal Field Value Vector2 Start public readonly Vector2 Start Field Value Vector2 Properties Center public Vector2 Center { get; } Property Value Vector2 Dir public Vector2 Dir { get; } Property Value Vector2 Displacement public Vector2 Displacement { get; } Property Value Vector2 Length public float Length { get; } Property Value float LengthSquared public float LengthSquared { get; } Property Value float Methods ApplyOffset(Transform2D, float) Moves the segment by transform.Position Rotates the moved segment by transform.RotationRad Changes length of the rotated segment by transform.Size.Width! public Segment ApplyOffset(Transform2D offset, float originF = 0.5) Parameters offset Transform2D originF float Returns Segment Ceiling() public Segment Ceiling() Returns Segment ChangeEnd(Vector2) public Segment ChangeEnd(Vector2 offset) Parameters offset Vector2 Returns Segment ChangeLength(float, float) Changes the length of the segment based on an origin point. OriginF 0 = Start, 0.5 = Center, 1 = End Splits the amount based on originF. public Segment ChangeLength(float amount, float originF = 0.5) Parameters amount float originF float Returns Segment ChangeLengthFromEnd(float) public Segment ChangeLengthFromEnd(float amount) Parameters amount float Returns Segment ChangeLengthFromStart(float) public Segment ChangeLengthFromStart(float amount) Parameters amount float Returns Segment ChangePosition(Vector2) public Segment ChangePosition(Vector2 offset) Parameters offset Vector2 Returns Segment ChangePosition(Vector2, float) public Segment ChangePosition(Vector2 offset, float f) Parameters offset Vector2 f float Returns Segment ChangePosition(float, float) public Segment ChangePosition(float x, float y) Parameters x float y float Returns Segment ChangeRotation(float, float) public Segment ChangeRotation(float angleRad, float originF = 0.5) Parameters angleRad float originF float Returns Segment ChangeStart(Vector2) public Segment ChangeStart(Vector2 offset) Parameters offset Vector2 Returns Segment CreateLightningSegments(int, float) public Segments CreateLightningSegments(int segments = 10, float maxSway = 80) Parameters segments int maxSway float Returns Segments CreateLightningSegments(float, float) public Segments CreateLightningSegments(float segmentLength = 5, float maxSway = 80) Parameters segmentLength float maxSway float Returns Segments DrawNormal(float, float, ColorRgba) public void DrawNormal(float lineThickness, float length, ColorRgba colorRgba) Parameters lineThickness float length float colorRgba ColorRgba Equals(Segment) Checks the equality of 2 segments with the direction. public bool Equals(Segment other) Parameters other Segment Returns bool Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. Floor() public Segment Floor() Returns Segment GetBoundingBox() public Rect GetBoundingBox() Returns Rect GetClosestPoint(Circle) public ClosestPointResult GetClosestPoint(Circle other) Parameters other Circle Returns ClosestPointResult GetClosestPoint(Line) public ClosestPointResult GetClosestPoint(Line other) Parameters other Line Returns ClosestPointResult GetClosestPoint(Polygon) public ClosestPointResult GetClosestPoint(Polygon other) Parameters other Polygon Returns ClosestPointResult GetClosestPoint(Polyline) public ClosestPointResult GetClosestPoint(Polyline other) Parameters other Polyline Returns ClosestPointResult GetClosestPoint(Quad) public ClosestPointResult GetClosestPoint(Quad other) Parameters other Quad Returns ClosestPointResult GetClosestPoint(Ray) public ClosestPointResult GetClosestPoint(Ray other) Parameters other Ray Returns ClosestPointResult GetClosestPoint(Rect) public ClosestPointResult GetClosestPoint(Rect other) Parameters other Rect Returns ClosestPointResult GetClosestPoint(Segment) public ClosestPointResult GetClosestPoint(Segment other) Parameters other Segment Returns ClosestPointResult GetClosestPoint(Segments) public ClosestPointResult GetClosestPoint(Segments segments) Parameters segments Segments Returns ClosestPointResult GetClosestPoint(Triangle) public ClosestPointResult GetClosestPoint(Triangle other) Parameters other Triangle Returns ClosestPointResult GetClosestPoint(Vector2, out float) public CollisionPoint GetClosestPoint(Vector2 p, out float disSquared) Parameters p Vector2 disSquared float Returns CollisionPoint GetClosestPointSegmentCircle(Vector2, Vector2, Vector2, float, out float) public static (Vector2 self, Vector2 other) GetClosestPointSegmentCircle(Vector2 segmentStart, Vector2 segmentEnd, Vector2 circleCenter, float circleRadius, out float disSquared) Parameters segmentStart Vector2 segmentEnd Vector2 circleCenter Vector2 circleRadius float disSquared float Returns (Vector2 self, Vector2 other) GetClosestPointSegmentLine(Vector2, Vector2, Vector2, Vector2, out float) public static (Vector2 self, Vector2 other) GetClosestPointSegmentLine(Vector2 segmentStart, Vector2 segmentEnd, Vector2 linePoint, Vector2 lineDirection, out float disSquared) Parameters segmentStart Vector2 segmentEnd Vector2 linePoint Vector2 lineDirection Vector2 disSquared float Returns (Vector2 self, Vector2 other) GetClosestPointSegmentPoint(Vector2, Vector2, Vector2, out float) public static Vector2 GetClosestPointSegmentPoint(Vector2 segmentStart, Vector2 segmentEnd, Vector2 p, out float disSquared) Parameters segmentStart Vector2 segmentEnd Vector2 p Vector2 disSquared float Returns Vector2 GetClosestPointSegmentRay(Vector2, Vector2, Vector2, Vector2, out float) public static (Vector2 self, Vector2 other) GetClosestPointSegmentRay(Vector2 segmentStart, Vector2 segmentEnd, Vector2 rayPoint, Vector2 rayDirection, out float disSquared) Parameters segmentStart Vector2 segmentEnd Vector2 rayPoint Vector2 rayDirection Vector2 disSquared float Returns (Vector2 self, Vector2 other) GetClosestPointSegmentSegment(Vector2, Vector2, Vector2, Vector2, out float) public static (Vector2 self, Vector2 other) GetClosestPointSegmentSegment(Vector2 segment1Start, Vector2 segment1End, Vector2 segment2Start, Vector2 segment2End, out float disSquared) Parameters segment1Start Vector2 segment1End Vector2 segment2Start Vector2 segment2End Vector2 disSquared float Returns (Vector2 self, Vector2 other) GetClosestVertex(Vector2, out float) public Vector2 GetClosestVertex(Vector2 p, out float disSquared) Parameters p Vector2 disSquared float Returns Vector2 GetEdges() public Segments GetEdges() Returns Segments GetFurthestVertex(Vector2, out float) public Vector2 GetFurthestVertex(Vector2 p, out float disSquared) Parameters p Vector2 disSquared float Returns Vector2 GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. GetNormal(Vector2, Vector2, bool) public static Vector2 GetNormal(Vector2 start, Vector2 end, bool flippedNormal) Parameters start Vector2 end Vector2 flippedNormal bool Returns Vector2 GetPoint(float) public Vector2 GetPoint(float f) Parameters f float Returns Vector2 GetProjectedShapePoints(Vector2) public Points? GetProjectedShapePoints(Vector2 v) Parameters v Vector2 Returns Points GetRandomPoint() public Vector2 GetRandomPoint() Returns Vector2 GetRandomPoints(int) public Points GetRandomPoints(int amount) Parameters amount int Returns Points GetRandomVertex() public Vector2 GetRandomVertex() Returns Vector2 GetVertices() public Points GetVertices() Returns Points Inflate(float, float) public Points Inflate(float thickness, float alignement = 0.5) Parameters thickness float alignement float Returns Points Intersect(Collider) public CollisionPoints? Intersect(Collider collider) Parameters collider Collider Returns CollisionPoints Intersect(Collider, ref CollisionPoints, bool) public int Intersect(Collider collider, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters collider Collider points CollisionPoints returnAfterFirstValid bool Returns int IntersectCircle(Circle) public (CollisionPoint a, CollisionPoint b) IntersectCircle(Circle circle) Parameters circle Circle Returns (CollisionPoint a, CollisionPoint b) IntersectCircle(Vector2, float) public (CollisionPoint a, CollisionPoint b) IntersectCircle(Vector2 circlePos, float circleRadius) Parameters circlePos Vector2 circleRadius float Returns (CollisionPoint a, CollisionPoint b) IntersectLine(Line) public CollisionPoint IntersectLine(Line line) Parameters line Line Returns CollisionPoint IntersectLine(Vector2, Vector2) public CollisionPoint IntersectLine(Vector2 linePos, Vector2 lineDir) Parameters linePos Vector2 lineDir Vector2 Returns CollisionPoint IntersectPolygon(Polygon, int) public CollisionPoints? IntersectPolygon(Polygon polygon, int maxCollisionPoints = -1) Parameters polygon Polygon maxCollisionPoints int Returns CollisionPoints IntersectPolygon(List<Vector2>, int) public CollisionPoints? IntersectPolygon(List<Vector2> points, int maxCollisionPoints = -1) Parameters points List<Vector2> maxCollisionPoints int Returns CollisionPoints IntersectPolyline(Polyline, int) public CollisionPoints? IntersectPolyline(Polyline polyline, int maxCollisionPoints = -1) Parameters polyline Polyline maxCollisionPoints int Returns CollisionPoints IntersectPolyline(List<Vector2>, int) public CollisionPoints? IntersectPolyline(List<Vector2> points, int maxCollisionPoints = -1) Parameters points List<Vector2> maxCollisionPoints int Returns CollisionPoints IntersectQuad(Quad) public (CollisionPoint a, CollisionPoint b) IntersectQuad(Quad quad) Parameters quad Quad Returns (CollisionPoint a, CollisionPoint b) IntersectQuad(Vector2, Vector2, Vector2, Vector2) public (CollisionPoint a, CollisionPoint b) IntersectQuad(Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters a Vector2 b Vector2 c Vector2 d Vector2 Returns (CollisionPoint a, CollisionPoint b) IntersectRay(Ray) public CollisionPoint IntersectRay(Ray ray) Parameters ray Ray Returns CollisionPoint IntersectRay(Vector2, Vector2) public CollisionPoint IntersectRay(Vector2 rayPos, Vector2 rayDir) Parameters rayPos Vector2 rayDir Vector2 Returns CollisionPoint IntersectRect(Rect) public (CollisionPoint a, CollisionPoint b) IntersectRect(Rect rect) Parameters rect Rect Returns (CollisionPoint a, CollisionPoint b) IntersectRect(Vector2, Vector2, Vector2, Vector2) public (CollisionPoint a, CollisionPoint b) IntersectRect(Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters a Vector2 b Vector2 c Vector2 d Vector2 Returns (CollisionPoint a, CollisionPoint b) IntersectSegment(Segment) public CollisionPoint IntersectSegment(Segment segment) Parameters segment Segment Returns CollisionPoint IntersectSegment(Vector2, Vector2) public CollisionPoint IntersectSegment(Vector2 segStart, Vector2 segEnd) Parameters segStart Vector2 segEnd Vector2 Returns CollisionPoint IntersectSegmentCircle(Vector2, Vector2, Vector2, float) public static (CollisionPoint a, CollisionPoint b) IntersectSegmentCircle(Vector2 segmentStart, Vector2 segmentEnd, Vector2 circleCenter, float radius) Parameters segmentStart Vector2 segmentEnd Vector2 circleCenter Vector2 radius float Returns (CollisionPoint a, CollisionPoint b) IntersectSegmentLine(Vector2, Vector2, Vector2, Vector2) public static CollisionPoint IntersectSegmentLine(Vector2 segmentStart, Vector2 segmentEnd, Vector2 linePoint, Vector2 lineDirection) Parameters segmentStart Vector2 segmentEnd Vector2 linePoint Vector2 lineDirection Vector2 Returns CollisionPoint IntersectSegmentLine(Vector2, Vector2, Vector2, Vector2, Vector2) public static CollisionPoint IntersectSegmentLine(Vector2 segmentStart, Vector2 segmentEnd, Vector2 linePoint, Vector2 lineDirection, Vector2 lineNormal) Parameters segmentStart Vector2 segmentEnd Vector2 linePoint Vector2 lineDirection Vector2 lineNormal Vector2 Returns CollisionPoint IntersectSegmentLineInfo(Vector2, Vector2, Vector2, Vector2) public static (CollisionPoint point, float time) IntersectSegmentLineInfo(Vector2 segmentStart, Vector2 segmentEnd, Vector2 linePoint, Vector2 lineDirection) Parameters segmentStart Vector2 segmentEnd Vector2 linePoint Vector2 lineDirection Vector2 Returns (CollisionPoint p, float t) IntersectSegmentLineInfo(Vector2, Vector2, Vector2, Vector2, Vector2) public static (CollisionPoint point, float time) IntersectSegmentLineInfo(Vector2 segmentStart, Vector2 segmentEnd, Vector2 linePoint, Vector2 lineDirection, Vector2 lineNormal) Parameters segmentStart Vector2 segmentEnd Vector2 linePoint Vector2 lineDirection Vector2 lineNormal Vector2 Returns (CollisionPoint p, float t) IntersectSegmentPolygon(Vector2, Vector2, List<Vector2>, int) public static CollisionPoints? IntersectSegmentPolygon(Vector2 segmentStart, Vector2 segmentEnd, List<Vector2> points, int maxCollisionPoints = -1) Parameters segmentStart Vector2 segmentEnd Vector2 points List<Vector2> maxCollisionPoints int Returns CollisionPoints IntersectSegmentPolyline(Vector2, Vector2, List<Vector2>, int) public static CollisionPoints? IntersectSegmentPolyline(Vector2 segmentStart, Vector2 segmentEnd, List<Vector2> points, int maxCollisionPoints = -1) Parameters segmentStart Vector2 segmentEnd Vector2 points List<Vector2> maxCollisionPoints int Returns CollisionPoints IntersectSegmentQuad(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static (CollisionPoint a, CollisionPoint b) IntersectSegmentQuad(Vector2 segmentStart, Vector2 segmentEnd, Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters segmentStart Vector2 segmentEnd Vector2 a Vector2 b Vector2 c Vector2 d Vector2 Returns (CollisionPoint a, CollisionPoint b) IntersectSegmentRay(Vector2, Vector2, Vector2, Vector2) public static CollisionPoint IntersectSegmentRay(Vector2 segmentStart, Vector2 segmentEnd, Vector2 rayPoint, Vector2 rayDirection) Parameters segmentStart Vector2 segmentEnd Vector2 rayPoint Vector2 rayDirection Vector2 Returns CollisionPoint IntersectSegmentRay(Vector2, Vector2, Vector2, Vector2, Vector2) public static CollisionPoint IntersectSegmentRay(Vector2 segmentStart, Vector2 segmentEnd, Vector2 rayPoint, Vector2 rayDirection, Vector2 rayNormal) Parameters segmentStart Vector2 segmentEnd Vector2 rayPoint Vector2 rayDirection Vector2 rayNormal Vector2 Returns CollisionPoint IntersectSegmentRayInfo(Vector2, Vector2, Vector2, Vector2) public static (CollisionPoint point, float time) IntersectSegmentRayInfo(Vector2 segmentStart, Vector2 segmentEnd, Vector2 rayPoint, Vector2 rayDirection) Parameters segmentStart Vector2 segmentEnd Vector2 rayPoint Vector2 rayDirection Vector2 Returns (CollisionPoint p, float t) IntersectSegmentRayInfo(Vector2, Vector2, Vector2, Vector2, Vector2) public static (CollisionPoint point, float time) IntersectSegmentRayInfo(Vector2 segmentStart, Vector2 segmentEnd, Vector2 rayPoint, Vector2 rayDirection, Vector2 rayNormal) Parameters segmentStart Vector2 segmentEnd Vector2 rayPoint Vector2 rayDirection Vector2 rayNormal Vector2 Returns (CollisionPoint p, float t) IntersectSegmentRect(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static (CollisionPoint a, CollisionPoint b) IntersectSegmentRect(Vector2 segmentStart, Vector2 segmentEnd, Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters segmentStart Vector2 segmentEnd Vector2 a Vector2 b Vector2 c Vector2 d Vector2 Returns (CollisionPoint a, CollisionPoint b) IntersectSegmentSegment(Vector2, Vector2, Vector2, Vector2) public static CollisionPoint IntersectSegmentSegment(Vector2 segment1Start, Vector2 segment1End, Vector2 segment2Start, Vector2 segment2End) Parameters segment1Start Vector2 segment1End Vector2 segment2Start Vector2 segment2End Vector2 Returns CollisionPoint IntersectSegmentSegment(Vector2, Vector2, Vector2, Vector2, Vector2) public static CollisionPoint IntersectSegmentSegment(Vector2 segment1Start, Vector2 segment1End, Vector2 segment2Start, Vector2 segment2End, Vector2 segment2Normal) Parameters segment1Start Vector2 segment1End Vector2 segment2Start Vector2 segment2End Vector2 segment2Normal Vector2 Returns CollisionPoint IntersectSegmentSegmentInfo(Vector2, Vector2, Vector2, Vector2) public static (CollisionPoint point, float time) IntersectSegmentSegmentInfo(Vector2 segment1Start, Vector2 segment1End, Vector2 segment2Start, Vector2 segment2End) Parameters segment1Start Vector2 segment1End Vector2 segment2Start Vector2 segment2End Vector2 Returns (CollisionPoint p, float t) IntersectSegmentSegmentInfo(Vector2, Vector2, Vector2, Vector2, Vector2) public static (CollisionPoint point, float time) IntersectSegmentSegmentInfo(Vector2 segment1Start, Vector2 segment1End, Vector2 segment2Start, Vector2 segment2End, Vector2 segment2Normal) Parameters segment1Start Vector2 segment1End Vector2 segment2Start Vector2 segment2End Vector2 segment2Normal Vector2 Returns (CollisionPoint p, float t) IntersectSegmentSegments(Vector2, Vector2, List<Segment>, int) public static CollisionPoints? IntersectSegmentSegments(Vector2 segmentStart, Vector2 segmentEnd, List<Segment> segments, int maxCollisionPoints = -1) Parameters segmentStart Vector2 segmentEnd Vector2 segments List<Segment> maxCollisionPoints int Returns CollisionPoints IntersectSegmentTriangle(Vector2, Vector2, Vector2, Vector2, Vector2) public static (CollisionPoint a, CollisionPoint b) IntersectSegmentTriangle(Vector2 segmentStart, Vector2 segmentEnd, Vector2 a, Vector2 b, Vector2 c) Parameters segmentStart Vector2 segmentEnd Vector2 a Vector2 b Vector2 c Vector2 Returns (CollisionPoint a, CollisionPoint b) IntersectSegments(Segments, int) public CollisionPoints? IntersectSegments(Segments segments, int maxCollisionPoints = -1) Parameters segments Segments maxCollisionPoints int Returns CollisionPoints IntersectSegments(List<Segment>, int) public CollisionPoints? IntersectSegments(List<Segment> segments, int maxCollisionPoints = -1) Parameters segments List<Segment> maxCollisionPoints int Returns CollisionPoints IntersectShape(Circle) public CollisionPoints? IntersectShape(Circle c) Parameters c Circle Returns CollisionPoints IntersectShape(Circle, ref CollisionPoints, bool) public int IntersectShape(Circle c, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters c Circle points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Line) public CollisionPoints? IntersectShape(Line l) Parameters l Line Returns CollisionPoints IntersectShape(Line, ref CollisionPoints) public int IntersectShape(Line l, ref CollisionPoints points) Parameters l Line points CollisionPoints Returns int IntersectShape(Polygon) public CollisionPoints? IntersectShape(Polygon p) Parameters p Polygon Returns CollisionPoints IntersectShape(Polygon, ref CollisionPoints, bool) public int IntersectShape(Polygon p, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters p Polygon points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Polyline) public CollisionPoints? IntersectShape(Polyline pl) Parameters pl Polyline Returns CollisionPoints IntersectShape(Polyline, ref CollisionPoints, bool) public int IntersectShape(Polyline pl, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters pl Polyline points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Quad) public CollisionPoints? IntersectShape(Quad q) Parameters q Quad Returns CollisionPoints IntersectShape(Quad, ref CollisionPoints, bool) public int IntersectShape(Quad q, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters q Quad points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Ray) public CollisionPoints? IntersectShape(Ray r) Parameters r Ray Returns CollisionPoints IntersectShape(Ray, ref CollisionPoints) public int IntersectShape(Ray r, ref CollisionPoints points) Parameters r Ray points CollisionPoints Returns int IntersectShape(Rect) public CollisionPoints? IntersectShape(Rect r) Parameters r Rect Returns CollisionPoints IntersectShape(Rect, ref CollisionPoints, bool) public int IntersectShape(Rect r, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters r Rect points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Segment) public CollisionPoints? IntersectShape(Segment s) Parameters s Segment Returns CollisionPoints IntersectShape(Segment, ref CollisionPoints) public int IntersectShape(Segment s, ref CollisionPoints points) Parameters s Segment points CollisionPoints Returns int IntersectShape(Segments) public CollisionPoints? IntersectShape(Segments shape) Parameters shape Segments Returns CollisionPoints IntersectShape(Segments, ref CollisionPoints, bool) public int IntersectShape(Segments shape, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters shape Segments points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Triangle) public CollisionPoints? IntersectShape(Triangle t) Parameters t Triangle Returns CollisionPoints IntersectShape(Triangle, ref CollisionPoints, bool) public int IntersectShape(Triangle t, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters t Triangle points CollisionPoints returnAfterFirstValid bool Returns int IntersectTriangle(Triangle) public (CollisionPoint a, CollisionPoint b) IntersectTriangle(Triangle triangle) Parameters triangle Triangle Returns (CollisionPoint a, CollisionPoint b) IntersectTriangle(Vector2, Vector2, Vector2) public (CollisionPoint a, CollisionPoint b) IntersectTriangle(Vector2 a, Vector2 b, Vector2 c) Parameters a Vector2 b Vector2 c Vector2 Returns (CollisionPoint a, CollisionPoint b) IsPointOnSegment(Vector2, Vector2, Vector2) public static bool IsPointOnSegment(Vector2 point, Vector2 start, Vector2 end) Parameters point Vector2 start Vector2 end Vector2 Returns bool IsSimilar(Segment) Checks the equality of 2 segments without the direction. public bool IsSimilar(Segment other) Parameters other Segment Returns bool Overlap(Collider) public bool Overlap(Collider collider) Parameters collider Collider Returns bool OverlapCircle(Vector2, float) public bool OverlapCircle(Vector2 circlePoint, float circleRadius) Parameters circlePoint Vector2 circleRadius float Returns bool OverlapLine(Vector2, Vector2) public bool OverlapLine(Vector2 linePoint, Vector2 lineDirection) Parameters linePoint Vector2 lineDirection Vector2 Returns bool OverlapPoint(Vector2) public bool OverlapPoint(Vector2 p) Parameters p Vector2 Returns bool OverlapPolygon(List<Vector2>) public bool OverlapPolygon(List<Vector2> points) Parameters points List<Vector2> Returns bool OverlapPolyline(List<Vector2>) public bool OverlapPolyline(List<Vector2> points) Parameters points List<Vector2> Returns bool OverlapQuad(Vector2, Vector2, Vector2, Vector2) public bool OverlapQuad(Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters a Vector2 b Vector2 c Vector2 d Vector2 Returns bool OverlapRay(Vector2, Vector2) public bool OverlapRay(Vector2 rayPoint, Vector2 rayDirection) Parameters rayPoint Vector2 rayDirection Vector2 Returns bool OverlapRect(Vector2, Vector2, Vector2, Vector2) public bool OverlapRect(Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters a Vector2 b Vector2 c Vector2 d Vector2 Returns bool OverlapSegment(Vector2, Vector2) public bool OverlapSegment(Vector2 segStart, Vector2 segEnd) Parameters segStart Vector2 segEnd Vector2 Returns bool OverlapSegmentCircle(Vector2, Vector2, Vector2, float) public static bool OverlapSegmentCircle(Vector2 segStart, Vector2 segEnd, Vector2 circlePos, float circleRadius) Parameters segStart Vector2 segEnd Vector2 circlePos Vector2 circleRadius float Returns bool OverlapSegmentLine(Vector2, Vector2, Vector2, Vector2) public static bool OverlapSegmentLine(Vector2 segmentStart, Vector2 segmentEnd, Vector2 linePos, Vector2 lineDir) Parameters segmentStart Vector2 segmentEnd Vector2 linePos Vector2 lineDir Vector2 Returns bool OverlapSegmentPolygon(Vector2, Vector2, List<Vector2>) public static bool OverlapSegmentPolygon(Vector2 segStart, Vector2 segEnd, List<Vector2> points) Parameters segStart Vector2 segEnd Vector2 points List<Vector2> Returns bool OverlapSegmentPolyline(Vector2, Vector2, List<Vector2>) public static bool OverlapSegmentPolyline(Vector2 segStart, Vector2 segEnd, List<Vector2> points) Parameters segStart Vector2 segEnd Vector2 points List<Vector2> Returns bool OverlapSegmentQuad(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool OverlapSegmentQuad(Vector2 segStart, Vector2 segEnd, Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters segStart Vector2 segEnd Vector2 a Vector2 b Vector2 c Vector2 d Vector2 Returns bool OverlapSegmentRay(Vector2, Vector2, Vector2, Vector2) public static bool OverlapSegmentRay(Vector2 segmentStart, Vector2 segmentEnd, Vector2 rayPoint, Vector2 rayDirection) Parameters segmentStart Vector2 segmentEnd Vector2 rayPoint Vector2 rayDirection Vector2 Returns bool OverlapSegmentRect(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool OverlapSegmentRect(Vector2 segStart, Vector2 segEnd, Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters segStart Vector2 segEnd Vector2 a Vector2 b Vector2 c Vector2 d Vector2 Returns bool OverlapSegmentSegment(Vector2, Vector2, Vector2, Vector2) public static bool OverlapSegmentSegment(Vector2 aStart, Vector2 aEnd, Vector2 bStart, Vector2 bEnd) Parameters aStart Vector2 aEnd Vector2 bStart Vector2 bEnd Vector2 Returns bool OverlapSegmentSegments(Vector2, Vector2, List<Segment>) public static bool OverlapSegmentSegments(Vector2 segStart, Vector2 segEnd, List<Segment> segments) Parameters segStart Vector2 segEnd Vector2 segments List<Segment> Returns bool OverlapSegmentTriangle(Vector2, Vector2, Vector2, Vector2, Vector2) public static bool OverlapSegmentTriangle(Vector2 segStart, Vector2 segEnd, Vector2 a, Vector2 b, Vector2 c) Parameters segStart Vector2 segEnd Vector2 a Vector2 b Vector2 c Vector2 Returns bool OverlapSegments(List<Segment>) public bool OverlapSegments(List<Segment> segments) Parameters segments List<Segment> Returns bool OverlapShape(Circle) public bool OverlapShape(Circle c) Parameters c Circle Returns bool OverlapShape(Line) public bool OverlapShape(Line l) Parameters l Line Returns bool OverlapShape(Polygon) public bool OverlapShape(Polygon poly) Parameters poly Polygon Returns bool OverlapShape(Polyline) public bool OverlapShape(Polyline pl) Parameters pl Polyline Returns bool OverlapShape(Quad) public bool OverlapShape(Quad q) Parameters q Quad Returns bool OverlapShape(Ray) public bool OverlapShape(Ray r) Parameters r Ray Returns bool OverlapShape(Rect) public bool OverlapShape(Rect r) Parameters r Rect Returns bool OverlapShape(Segment) public bool OverlapShape(Segment b) Parameters b Segment Returns bool OverlapShape(Segments) public bool OverlapShape(Segments segments) Parameters segments Segments Returns bool OverlapShape(Triangle) public bool OverlapShape(Triangle t) Parameters t Triangle Returns bool OverlapTriangle(Vector2, Vector2, Vector2) public bool OverlapTriangle(Vector2 a, Vector2 b, Vector2 c) Parameters a Vector2 b Vector2 c Vector2 Returns bool ProjectSegment(Vector2, Vector2, Vector2) public static ValueRange ProjectSegment(Vector2 aPos, Vector2 aEnd, Vector2 onto) Parameters aPos Vector2 aEnd Vector2 onto Vector2 Returns ValueRange ProjectShape(Vector2) public Polygon? ProjectShape(Vector2 v) Parameters v Vector2 Returns Polygon RotateEndTo(float) public Segment RotateEndTo(float toAngleRad) Parameters toAngleRad float Returns Segment RotateStartTo(float) public Segment RotateStartTo(float toAngleRad) Parameters toAngleRad float Returns Segment Round() public Segment Round() Returns Segment ScaleLength(Size, float) public Segment ScaleLength(Size scale, float originF = 0.5) Parameters scale Size originF float Returns Segment ScaleLength(Vector2, Vector2, float, float) public static (Vector2 newStart, Vector2 newEnd) ScaleLength(Vector2 start, Vector2 end, float scale, float originF = 0.5) Parameters start Vector2 end Vector2 scale float originF float Returns (Vector2 self, Vector2 other) ScaleLength(float, float) public Segment ScaleLength(float scale, float originF = 0.5) Parameters scale float originF float Returns Segment SegmentOnOneSide(Vector2, Vector2, Vector2, Vector2) public static bool SegmentOnOneSide(Vector2 axisPos, Vector2 axisDir, Vector2 segmentStart, Vector2 segmentEnd) Parameters axisPos Vector2 axisDir Vector2 segmentStart Vector2 segmentEnd Vector2 Returns bool SetEnd(Vector2) public Segment SetEnd(Vector2 position) Parameters position Vector2 Returns Segment SetLength(float, float) Sets the length of the segment based on an origin point. OriginF 0 = Start, 0.5 = Center, 1 = End Splits the length based on originF. public Segment SetLength(float length, float originF = 0.5) Parameters length float originF float Returns Segment SetLengthFromEnd(float) public Segment SetLengthFromEnd(float length) Parameters length float Returns Segment SetLengthFromStart(float) public Segment SetLengthFromStart(float length) Parameters length float Returns Segment SetPosition(Vector2, float) public Segment SetPosition(Vector2 position, float originF = 0.5) Parameters position Vector2 originF float Returns Segment SetRotation(float, float) public Segment SetRotation(float angleRad, float originF = 0.5) Parameters angleRad float originF float Returns Segment SetStart(Vector2) public Segment SetStart(Vector2 position) Parameters position Vector2 Returns Segment SetTransform(Transform2D, float) Moves the segment to transform.Position Rotates the moved segment to transform.RotationRad Set the length of the rotated segment to transform.Size.Width public Segment SetTransform(Transform2D transform, float originF = 0.5) Parameters transform Transform2D originF float Returns Segment Split(Vector2) public Segments Split(Vector2 splitPoint) Parameters splitPoint Vector2 Returns Segments Split(float) public Segments Split(float f) Parameters f float Returns Segments ToPolyline() public Polyline ToPolyline() Returns Polyline Truncate() public Segment Truncate() Returns Segment Operators operator +(Segment, Segment) public static Segment operator +(Segment left, Segment right) Parameters left Segment right Segment Returns Segment operator +(Segment, Vector2) public static Segment operator +(Segment left, Vector2 right) Parameters left Segment right Vector2 Returns Segment operator +(Segment, float) public static Segment operator +(Segment left, float right) Parameters left Segment right float Returns Segment operator /(Segment, Segment) public static Segment operator /(Segment left, Segment right) Parameters left Segment right Segment Returns Segment operator /(Segment, Vector2) public static Segment operator /(Segment left, Vector2 right) Parameters left Segment right Vector2 Returns Segment operator /(Segment, float) public static Segment operator /(Segment left, float right) Parameters left Segment right float Returns Segment operator ==(Segment, Segment) public static bool operator ==(Segment left, Segment right) Parameters left Segment right Segment Returns bool operator !=(Segment, Segment) public static bool operator !=(Segment left, Segment right) Parameters left Segment right Segment Returns bool operator *(Segment, Segment) public static Segment operator *(Segment left, Segment right) Parameters left Segment right Segment Returns Segment operator *(Segment, Vector2) public static Segment operator *(Segment left, Vector2 right) Parameters left Segment right Vector2 Returns Segment operator *(Segment, float) public static Segment operator *(Segment left, float right) Parameters left Segment right float Returns Segment operator -(Segment, Segment) public static Segment operator -(Segment left, Segment right) Parameters left Segment right Segment Returns Segment operator -(Segment, Vector2) public static Segment operator -(Segment left, Vector2 right) Parameters left Segment right Vector2 Returns Segment operator -(Segment, float) public static Segment operator -(Segment left, float right) Parameters left Segment right float Returns Segment"
  },
  "api/ShapeEngine.Core.Shapes.SegmentShape.html": {
    "href": "api/ShapeEngine.Core.Shapes.SegmentShape.html",
    "title": "Class SegmentShape | ShapeEngine",
    "summary": "Class SegmentShape Namespace ShapeEngine.Core.Shapes Assembly ShapeEngine.dll public class SegmentShape : ShapeContainer, IShape Inheritance object Shape ShapeContainer SegmentShape Implements IShape Inherited Members ShapeContainer.Parent ShapeContainer.ChangeParent(ShapeContainer) ShapeContainer.AddChild(ShapeContainer) ShapeContainer.RemoveChild(ShapeContainer) ShapeContainer.InitializeShape(Transform2D) ShapeContainer.UpdateShape(float, Transform2D) ShapeContainer.DrawShape() ShapeContainer.OnChildInitialized(ShapeContainer) ShapeContainer.OnChildUpdated(ShapeContainer) ShapeContainer.OnChildDrawn(ShapeContainer) ShapeContainer.OnUpdateFinished() ShapeContainer.OnDrawFinished() ShapeContainer.OnAddedToParent(ShapeContainer) ShapeContainer.OnRemovedFromParent(ShapeContainer) Shape.Moves Shape.Rotates Shape.Scales Shape.Offset Shape.CurTransform Shape.PrevTransform Shape.OnUpdate(float) Shape.OnDraw() Shape.OnShapeTransformChanged(bool) Shape.UpdateTransform(Transform2D) Shape.GetRayShape() Shape.GetLineShape() Shape.GetSegmentShape() Shape.GetTriangleShape() Shape.GetQuadShape() Shape.GetRectShape() Shape.GetPolygonShape() Shape.GetPolylineShape() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SegmentShape(Transform2D, Vector2, float) public SegmentShape(Transform2D offset, Vector2 dir, float originOffset = 0) Parameters offset Transform2D dir Vector2 originOffset float Properties Center public Vector2 Center { get; } Property Value Vector2 Dir public Vector2 Dir { get; set; } Property Value Vector2 Displacement public Vector2 Displacement { get; } Property Value Vector2 End public Vector2 End { get; } Property Value Vector2 OriginOffset 0 Start = Position / 0.5 Center = Position / 1 End = Position public float OriginOffset { get; set; } Property Value float Start public Vector2 Start { get; } Property Value Vector2 Methods GetCircleShape() public override Circle GetCircleShape() Returns Circle GetShapeType() public override ShapeType GetShapeType() Returns ShapeType OnInitialized() protected override void OnInitialized() RecalculateShape() public override void RecalculateShape()"
  },
  "api/ShapeEngine.Core.Shapes.Segments.html": {
    "href": "api/ShapeEngine.Core.Shapes.Segments.html",
    "title": "Class Segments | ShapeEngine",
    "summary": "Class Segments Namespace ShapeEngine.Core.Shapes Assembly ShapeEngine.dll public class Segments : ShapeList<Segment>, IList<Segment>, ICollection<Segment>, IReadOnlyList<Segment>, IReadOnlyCollection<Segment>, IEnumerable<Segment>, IList, ICollection, IEnumerable Inheritance object List<Segment> ShapeList<Segment> Segments Implements IList<Segment> ICollection<Segment> IReadOnlyList<Segment> IReadOnlyCollection<Segment> IEnumerable<Segment> IList ICollection IEnumerable Inherited Members ShapeList<Segment>.AddRange(params Segment[]) ShapeList<Segment>.Copy() ShapeList<Segment>.IsIndexValid(int) ShapeList<Segment>.GetRandomItem() ShapeList<Segment>.GetRandomItems(int) ShapeList<Segment>.GetItem(int) List<Segment>.Add(Segment) List<Segment>.AddRange(IEnumerable<Segment>) List<Segment>.AsReadOnly() List<Segment>.BinarySearch(int, int, Segment, IComparer<Segment>) List<Segment>.BinarySearch(Segment) List<Segment>.BinarySearch(Segment, IComparer<Segment>) List<Segment>.Clear() List<Segment>.Contains(Segment) List<Segment>.ConvertAll<TOutput>(Converter<Segment, TOutput>) List<Segment>.CopyTo(int, Segment[], int, int) List<Segment>.CopyTo(Segment[]) List<Segment>.CopyTo(Segment[], int) List<Segment>.EnsureCapacity(int) List<Segment>.Exists(Predicate<Segment>) List<Segment>.Find(Predicate<Segment>) List<Segment>.FindAll(Predicate<Segment>) List<Segment>.FindIndex(int, int, Predicate<Segment>) List<Segment>.FindIndex(int, Predicate<Segment>) List<Segment>.FindIndex(Predicate<Segment>) List<Segment>.FindLast(Predicate<Segment>) List<Segment>.FindLastIndex(int, int, Predicate<Segment>) List<Segment>.FindLastIndex(int, Predicate<Segment>) List<Segment>.FindLastIndex(Predicate<Segment>) List<Segment>.ForEach(Action<Segment>) List<Segment>.GetEnumerator() List<Segment>.GetRange(int, int) List<Segment>.IndexOf(Segment) List<Segment>.IndexOf(Segment, int) List<Segment>.IndexOf(Segment, int, int) List<Segment>.Insert(int, Segment) List<Segment>.InsertRange(int, IEnumerable<Segment>) List<Segment>.LastIndexOf(Segment) List<Segment>.LastIndexOf(Segment, int) List<Segment>.LastIndexOf(Segment, int, int) List<Segment>.Remove(Segment) List<Segment>.RemoveAll(Predicate<Segment>) List<Segment>.RemoveAt(int) List<Segment>.RemoveRange(int, int) List<Segment>.Reverse() List<Segment>.Reverse(int, int) List<Segment>.Slice(int, int) List<Segment>.Sort() List<Segment>.Sort(IComparer<Segment>) List<Segment>.Sort(Comparison<Segment>) List<Segment>.Sort(int, int, IComparer<Segment>) List<Segment>.ToArray() List<Segment>.TrimExcess() List<Segment>.TrueForAll(Predicate<Segment>) List<Segment>.Capacity List<Segment>.Count List<Segment>.this[int] object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ShapeSegmentDrawing.Draw(Segments, LineDrawingInfo) ShapeSegmentDrawing.Draw(Segments, float, List<ColorRgba>, LineCapType, int) ShapeSegmentDrawing.DrawGlow(Segments, float, float, ColorRgba, ColorRgba, int, LineCapType, int) Constructors Segments() public Segments() Segments(IEnumerable<Segment>) public Segments(IEnumerable<Segment> edges) Parameters edges IEnumerable<Segment> Segments(int) public Segments(int capacity) Parameters capacity int Methods ApplyOffset(Transform2D, float) public void ApplyOffset(Transform2D offset, float originF = 0.5) Parameters offset Transform2D originF float ApplyOffsetCopy(Transform2D, float) public Segments ApplyOffsetCopy(Transform2D offset, float originF = 0.5) Parameters offset Transform2D originF float Returns Segments ChangeLength(float, float) public void ChangeLength(float amount, float originF = 0.5) Parameters amount float originF float ChangeLengthCopy(float, float) public Segments ChangeLengthCopy(float amount, float originF = 0.5) Parameters amount float originF float Returns Segments ChangePosition(Vector2) public void ChangePosition(Vector2 offset) Parameters offset Vector2 ChangePositionCopy(Vector2) public Segments ChangePositionCopy(Vector2 offset) Parameters offset Vector2 Returns Segments ChangeRotation(float, float) public void ChangeRotation(float rad, float originF = 0.5) Parameters rad float originF float ChangeRotationCopy(float, float) public Segments ChangeRotationCopy(float rad, float originF = 0.5) Parameters rad float originF float Returns Segments ContainsSegment(Segment) public bool ContainsSegment(Segment seg) Parameters seg Segment Returns bool Returns true if seg is already in the list. ContainsSegmentSimilar(Segment) public bool ContainsSegmentSimilar(Segment seg) Parameters seg Segment Returns bool Returns true if similar segment is already in the list. Equals(Segments?) public bool Equals(Segments? other) Parameters other Segments Returns bool GetClosestPoint(Circle) public ClosestPointResult GetClosestPoint(Circle other) Parameters other Circle Returns ClosestPointResult GetClosestPoint(Line) public ClosestPointResult GetClosestPoint(Line other) Parameters other Line Returns ClosestPointResult GetClosestPoint(Polygon) public ClosestPointResult GetClosestPoint(Polygon other) Parameters other Polygon Returns ClosestPointResult GetClosestPoint(Polyline) public ClosestPointResult GetClosestPoint(Polyline other) Parameters other Polyline Returns ClosestPointResult GetClosestPoint(Quad) public ClosestPointResult GetClosestPoint(Quad other) Parameters other Quad Returns ClosestPointResult GetClosestPoint(Ray) public ClosestPointResult GetClosestPoint(Ray other) Parameters other Ray Returns ClosestPointResult GetClosestPoint(Rect) public ClosestPointResult GetClosestPoint(Rect other) Parameters other Rect Returns ClosestPointResult GetClosestPoint(Segment) public ClosestPointResult GetClosestPoint(Segment other) Parameters other Segment Returns ClosestPointResult GetClosestPoint(Segments) public ClosestPointResult GetClosestPoint(Segments other) Parameters other Segments Returns ClosestPointResult GetClosestPoint(Triangle) public ClosestPointResult GetClosestPoint(Triangle other) Parameters other Triangle Returns ClosestPointResult GetClosestPoint(Vector2, out float) public CollisionPoint GetClosestPoint(Vector2 p, out float disSquared) Parameters p Vector2 disSquared float Returns CollisionPoint GetClosestPoint(Vector2, out float, out int) public CollisionPoint GetClosestPoint(Vector2 p, out float disSquared, out int index) Parameters p Vector2 disSquared float index int Returns CollisionPoint GetClosestPointSegmentsPoint(List<Vector2>, Vector2, out float) public static Vector2 GetClosestPointSegmentsPoint(List<Vector2> points, Vector2 p, out float disSquared) Parameters points List<Vector2> p Vector2 disSquared float Returns Vector2 GetClosestSegment(Vector2, out float) public (Segment segment, CollisionPoint segmentPoint) GetClosestSegment(Vector2 p, out float disSquared) Parameters p Vector2 disSquared float Returns (Segment segment, CollisionPoint segmentPoint) GetClosestVertex(Vector2, out float, out int) public Vector2 GetClosestVertex(Vector2 p, out float disSquared, out int index) Parameters p Vector2 disSquared float index int Returns Vector2 GetCount(Segment) Counts how often the specified segment appears in the list. public int GetCount(Segment seg) Parameters seg Segment Returns int GetCountSimilar(Segment) Counts how often the specified segment appears in the list disregarding the direction of each segment. public int GetCountSimilar(Segment seg) Parameters seg Segment Returns int GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. GetRandomPoint() public Vector2 GetRandomPoint() Returns Vector2 GetRandomPoints(int) public Points GetRandomPoints(int amount) Parameters amount int Returns Points GetRandomSegment() public Segment GetRandomSegment() Returns Segment GetSegment(int) public Segment GetSegment(int index) Parameters index int Returns Segment GetUniquePoints() public Points GetUniquePoints() Returns Points GetUniqueSegments() public Segments GetUniqueSegments() Returns Segments IntersectShape(Circle) public CollisionPoints? IntersectShape(Circle c) Parameters c Circle Returns CollisionPoints IntersectShape(Circle, ref CollisionPoints, bool) public int IntersectShape(Circle c, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters c Circle points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Line) public CollisionPoints? IntersectShape(Line l) Parameters l Line Returns CollisionPoints IntersectShape(Line, ref CollisionPoints, bool) public int IntersectShape(Line l, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters l Line points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Ray) public CollisionPoints? IntersectShape(Ray r) Parameters r Ray Returns CollisionPoints IntersectShape(Ray, ref CollisionPoints, bool) public int IntersectShape(Ray r, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters r Ray points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Segment) public CollisionPoints? IntersectShape(Segment s) Parameters s Segment Returns CollisionPoints IntersectShape(Segment, ref CollisionPoints, bool) public int IntersectShape(Segment s, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters s Segment points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Segments) public CollisionPoints? IntersectShape(Segments shape) Parameters shape Segments Returns CollisionPoints IntersectShape(Segments, ref CollisionPoints, bool) public int IntersectShape(Segments shape, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters shape Segments points CollisionPoints returnAfterFirstValid bool Returns int OverlapCircle(Vector2, float) public bool OverlapCircle(Vector2 circleCenter, float circleRadius) Parameters circleCenter Vector2 circleRadius float Returns bool OverlapLine(Vector2, Vector2) public bool OverlapLine(Vector2 linePoint, Vector2 lineDirection) Parameters linePoint Vector2 lineDirection Vector2 Returns bool OverlapPolygon(List<Vector2>) public bool OverlapPolygon(List<Vector2> points) Parameters points List<Vector2> Returns bool OverlapPolyline(List<Vector2>) public bool OverlapPolyline(List<Vector2> points) Parameters points List<Vector2> Returns bool OverlapQuad(Vector2, Vector2, Vector2, Vector2) public bool OverlapQuad(Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters a Vector2 b Vector2 c Vector2 d Vector2 Returns bool OverlapRay(Vector2, Vector2) public bool OverlapRay(Vector2 rayPoint, Vector2 rayDirection) Parameters rayPoint Vector2 rayDirection Vector2 Returns bool OverlapRect(Vector2, Vector2, Vector2, Vector2) public bool OverlapRect(Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters a Vector2 b Vector2 c Vector2 d Vector2 Returns bool OverlapSegment(Vector2, Vector2) public bool OverlapSegment(Vector2 segmentStart, Vector2 segmentEnd) Parameters segmentStart Vector2 segmentEnd Vector2 Returns bool OverlapSegments(List<Segment>) public bool OverlapSegments(List<Segment> segments) Parameters segments List<Segment> Returns bool OverlapSegmentsCircle(List<Segment>, Vector2, float) public static bool OverlapSegmentsCircle(List<Segment> segments, Vector2 circleCenter, float circleRadius) Parameters segments List<Segment> circleCenter Vector2 circleRadius float Returns bool OverlapSegmentsLine(List<Segment>, Vector2, Vector2) public static bool OverlapSegmentsLine(List<Segment> segments, Vector2 linePoint, Vector2 lineDirection) Parameters segments List<Segment> linePoint Vector2 lineDirection Vector2 Returns bool OverlapSegmentsPolygon(List<Segment>, List<Vector2>) public static bool OverlapSegmentsPolygon(List<Segment> segments, List<Vector2> points) Parameters segments List<Segment> points List<Vector2> Returns bool OverlapSegmentsPolyline(List<Segment>, List<Vector2>) public static bool OverlapSegmentsPolyline(List<Segment> segments, List<Vector2> points) Parameters segments List<Segment> points List<Vector2> Returns bool OverlapSegmentsQuad(List<Segment>, Vector2, Vector2, Vector2, Vector2) public static bool OverlapSegmentsQuad(List<Segment> segments, Vector2 qa, Vector2 qb, Vector2 qc, Vector2 qd) Parameters segments List<Segment> qa Vector2 qb Vector2 qc Vector2 qd Vector2 Returns bool OverlapSegmentsRay(List<Segment>, Vector2, Vector2) public static bool OverlapSegmentsRay(List<Segment> segments, Vector2 rayPoint, Vector2 rayDirection) Parameters segments List<Segment> rayPoint Vector2 rayDirection Vector2 Returns bool OverlapSegmentsRect(List<Segment>, Vector2, Vector2, Vector2, Vector2) public static bool OverlapSegmentsRect(List<Segment> segments, Vector2 ra, Vector2 rb, Vector2 rc, Vector2 rd) Parameters segments List<Segment> ra Vector2 rb Vector2 rc Vector2 rd Vector2 Returns bool OverlapSegmentsSegment(List<Segment>, Vector2, Vector2) public static bool OverlapSegmentsSegment(List<Segment> segments, Vector2 segmentStart, Vector2 segmentEnd) Parameters segments List<Segment> segmentStart Vector2 segmentEnd Vector2 Returns bool OverlapSegmentsSegments(List<Segment>, List<Segment>) public static bool OverlapSegmentsSegments(List<Segment> segments1, List<Segment> segments2) Parameters segments1 List<Segment> segments2 List<Segment> Returns bool OverlapSegmentsTriangle(List<Segment>, Vector2, Vector2, Vector2) public static bool OverlapSegmentsTriangle(List<Segment> segments, Vector2 ta, Vector2 tb, Vector2 tc) Parameters segments List<Segment> ta Vector2 tb Vector2 tc Vector2 Returns bool OverlapShape(Circle) public bool OverlapShape(Circle c) Parameters c Circle Returns bool OverlapShape(Line) public bool OverlapShape(Line line) Parameters line Line Returns bool OverlapShape(Polygon) public bool OverlapShape(Polygon p) Parameters p Polygon Returns bool OverlapShape(Polyline) public bool OverlapShape(Polyline pl) Parameters pl Polyline Returns bool OverlapShape(Quad) public bool OverlapShape(Quad q) Parameters q Quad Returns bool OverlapShape(Ray) public bool OverlapShape(Ray ray) Parameters ray Ray Returns bool OverlapShape(Rect) public bool OverlapShape(Rect r) Parameters r Rect Returns bool OverlapShape(Segment) public bool OverlapShape(Segment s) Parameters s Segment Returns bool OverlapShape(Segments) public bool OverlapShape(Segments b) Parameters b Segments Returns bool OverlapShape(Triangle) public bool OverlapShape(Triangle t) Parameters t Triangle Returns bool OverlapTriangle(Vector2, Vector2, Vector2) public bool OverlapTriangle(Vector2 a, Vector2 b, Vector2 c) Parameters a Vector2 b Vector2 c Vector2 Returns bool ScaleLength(Size, float) public void ScaleLength(Size scale, float originF = 0.5) Parameters scale Size originF float ScaleLength(float, float) public void ScaleLength(float scale, float originF = 0.5) Parameters scale float originF float ScaleLengthCopy(Size, float) public Segments ScaleLengthCopy(Size scale, float originF = 0.5) Parameters scale Size originF float Returns Segments ScaleLengthCopy(float, float) public Segments ScaleLengthCopy(float scale, float originF = 0.5) Parameters scale float originF float Returns Segments SetLengthCopy(float, float) public Segments SetLengthCopy(float size, float originF = 0.5) Parameters size float originF float Returns Segments SetPosition(Vector2, float) public void SetPosition(Vector2 position, float originF = 0.5) Parameters position Vector2 originF float SetPositionCopy(Vector2, float) public Segments SetPositionCopy(Vector2 position, float originF = 0.5) Parameters position Vector2 originF float Returns Segments SetRotation(float, float) public void SetRotation(float rad, float originF = 0.5) Parameters rad float originF float SetRotationCopy(float, float) public Segments SetRotationCopy(float rad, float originF = 0.5) Parameters rad float originF float Returns Segments SetSize(float, float) public void SetSize(float length, float originF = 0.5) Parameters length float originF float SetTransform(Transform2D, float) public void SetTransform(Transform2D transform, float originF = 0.5) Parameters transform Transform2D originF float SetTransformCopy(Transform2D, float) public Segments SetTransformCopy(Transform2D transform, float originF = 0.5) Parameters transform Transform2D originF float Returns Segments"
  },
  "api/ShapeEngine.Core.Shapes.Shape.html": {
    "href": "api/ShapeEngine.Core.Shapes.Shape.html",
    "title": "Class Shape | ShapeEngine",
    "summary": "Class Shape Namespace ShapeEngine.Core.Shapes Assembly ShapeEngine.dll public abstract class Shape : IShape Inheritance object Shape Implements IShape Derived Collider ShapeContainer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Shape() protected Shape() Shape(Transform2D) protected Shape(Transform2D offset) Parameters offset Transform2D Shape(Vector2) protected Shape(Vector2 offset) Parameters offset Vector2 Fields Moves public bool Moves Field Value bool Rotates public bool Rotates Field Value bool Scales public bool Scales Field Value bool Properties CurTransform public Transform2D CurTransform { get; } Property Value Transform2D Offset public Transform2D Offset { get; set; } Property Value Transform2D PrevTransform public Transform2D PrevTransform { get; } Property Value Transform2D Methods DrawShape() public virtual void DrawShape() GetCircleShape() public virtual Circle GetCircleShape() Returns Circle GetLineShape() public virtual Line GetLineShape() Returns Line GetPolygonShape() public virtual Polygon GetPolygonShape() Returns Polygon GetPolylineShape() public virtual Polyline GetPolylineShape() Returns Polyline GetQuadShape() public virtual Quad GetQuadShape() Returns Quad GetRayShape() public virtual Ray GetRayShape() Returns Ray GetRectShape() public virtual Rect GetRectShape() Returns Rect GetSegmentShape() public virtual Segment GetSegmentShape() Returns Segment GetShapeType() public abstract ShapeType GetShapeType() Returns ShapeType GetTriangleShape() public virtual Triangle GetTriangleShape() Returns Triangle InitializeShape(Transform2D) public virtual void InitializeShape(Transform2D parentTransform) Parameters parentTransform Transform2D OnDraw() protected virtual void OnDraw() OnInitialized() protected virtual void OnInitialized() OnShapeTransformChanged(bool) Called each frame after the transform was actualized from the parents protected virtual void OnShapeTransformChanged(bool transformChanged) Parameters transformChanged bool OnUpdate(float) protected virtual void OnUpdate(float dt) Parameters dt float RecalculateShape() public virtual void RecalculateShape() UpdateShape(float, Transform2D) public virtual void UpdateShape(float dt, Transform2D parentTransform) Parameters dt float parentTransform Transform2D UpdateTransform(Transform2D) protected void UpdateTransform(Transform2D parentTransform) Parameters parentTransform Transform2D"
  },
  "api/ShapeEngine.Core.Shapes.ShapeContainer.html": {
    "href": "api/ShapeEngine.Core.Shapes.ShapeContainer.html",
    "title": "Class ShapeContainer | ShapeEngine",
    "summary": "Class ShapeContainer Namespace ShapeEngine.Core.Shapes Assembly ShapeEngine.dll public abstract class ShapeContainer : Shape, IShape Inheritance object Shape ShapeContainer Implements IShape Derived CircleShape PolyLineShape PolyShape QuadShape RectShape SegmentShape TriangleShape Inherited Members Shape.Moves Shape.Rotates Shape.Scales Shape.Offset Shape.CurTransform Shape.PrevTransform Shape.RecalculateShape() Shape.OnInitialized() Shape.OnUpdate(float) Shape.OnDraw() Shape.OnShapeTransformChanged(bool) Shape.UpdateTransform(Transform2D) Shape.GetShapeType() Shape.GetRayShape() Shape.GetLineShape() Shape.GetSegmentShape() Shape.GetCircleShape() Shape.GetTriangleShape() Shape.GetQuadShape() Shape.GetRectShape() Shape.GetPolygonShape() Shape.GetPolylineShape() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Parent public ShapeContainer? Parent { get; set; } Property Value ShapeContainer Methods AddChild(ShapeContainer) public bool AddChild(ShapeContainer child) Parameters child ShapeContainer Returns bool ChangeParent(ShapeContainer) public bool ChangeParent(ShapeContainer newParent) Parameters newParent ShapeContainer Returns bool DrawShape() public override void DrawShape() InitializeShape(Transform2D) public override void InitializeShape(Transform2D parentTransform) Parameters parentTransform Transform2D OnAddedToParent(ShapeContainer) protected virtual void OnAddedToParent(ShapeContainer parent) Parameters parent ShapeContainer OnChildDrawn(ShapeContainer) protected virtual void OnChildDrawn(ShapeContainer child) Parameters child ShapeContainer OnChildInitialized(ShapeContainer) protected virtual void OnChildInitialized(ShapeContainer child) Parameters child ShapeContainer OnChildUpdated(ShapeContainer) protected virtual void OnChildUpdated(ShapeContainer child) Parameters child ShapeContainer OnDrawFinished() protected virtual void OnDrawFinished() OnRemovedFromParent(ShapeContainer) protected virtual void OnRemovedFromParent(ShapeContainer parent) Parameters parent ShapeContainer OnUpdateFinished() protected virtual void OnUpdateFinished() RemoveChild(ShapeContainer) public bool RemoveChild(ShapeContainer child) Parameters child ShapeContainer Returns bool UpdateShape(float, Transform2D) public override void UpdateShape(float dt, Transform2D parentTransform) Parameters dt float parentTransform Transform2D"
  },
  "api/ShapeEngine.Core.Shapes.ShapeList-1.html": {
    "href": "api/ShapeEngine.Core.Shapes.ShapeList-1.html",
    "title": "Class ShapeList<T> | ShapeEngine",
    "summary": "Class ShapeList<T> Namespace ShapeEngine.Core.Shapes Assembly ShapeEngine.dll public class ShapeList<T> : List<T>, IList<T>, ICollection<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IList, ICollection, IEnumerable Type Parameters T Inheritance object List<T> ShapeList<T> Implements IList<T> ICollection<T> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IList ICollection IEnumerable Derived CollisionPoints Points Segments Triangulation Inherited Members List<T>.Add(T) List<T>.AddRange(IEnumerable<T>) List<T>.AsReadOnly() List<T>.BinarySearch(int, int, T, IComparer<T>) List<T>.BinarySearch(T) List<T>.BinarySearch(T, IComparer<T>) List<T>.Clear() List<T>.Contains(T) List<T>.ConvertAll<TOutput>(Converter<T, TOutput>) List<T>.CopyTo(int, T[], int, int) List<T>.CopyTo(T[]) List<T>.CopyTo(T[], int) List<T>.EnsureCapacity(int) List<T>.Exists(Predicate<T>) List<T>.Find(Predicate<T>) List<T>.FindAll(Predicate<T>) List<T>.FindIndex(int, int, Predicate<T>) List<T>.FindIndex(int, Predicate<T>) List<T>.FindIndex(Predicate<T>) List<T>.FindLast(Predicate<T>) List<T>.FindLastIndex(int, int, Predicate<T>) List<T>.FindLastIndex(int, Predicate<T>) List<T>.FindLastIndex(Predicate<T>) List<T>.ForEach(Action<T>) List<T>.GetEnumerator() List<T>.GetRange(int, int) List<T>.IndexOf(T) List<T>.IndexOf(T, int) List<T>.IndexOf(T, int, int) List<T>.Insert(int, T) List<T>.InsertRange(int, IEnumerable<T>) List<T>.LastIndexOf(T) List<T>.LastIndexOf(T, int) List<T>.LastIndexOf(T, int, int) List<T>.Remove(T) List<T>.RemoveAll(Predicate<T>) List<T>.RemoveAt(int) List<T>.RemoveRange(int, int) List<T>.Reverse() List<T>.Reverse(int, int) List<T>.Slice(int, int) List<T>.Sort() List<T>.Sort(IComparer<T>) List<T>.Sort(Comparison<T>) List<T>.Sort(int, int, IComparer<T>) List<T>.ToArray() List<T>.TrimExcess() List<T>.TrueForAll(Predicate<T>) List<T>.Capacity List<T>.Count List<T>.this[int] object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ShapeList() public ShapeList() ShapeList(int) public ShapeList(int capacity) Parameters capacity int Methods AddRange(params T[]) public void AddRange(params T[] items) Parameters items T[] Copy() Does not deep copy public virtual ShapeList<T> Copy() Returns ShapeList<T> GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. GetItem(int) public T? GetItem(int index) Parameters index int Returns T GetRandomItem() public T? GetRandomItem() Returns T GetRandomItems(int) public List<T> GetRandomItems(int amount) Parameters amount int Returns List<T> IsIndexValid(int) public bool IsIndexValid(int index) Parameters index int Returns bool"
  },
  "api/ShapeEngine.Core.Shapes.Triangle.html": {
    "href": "api/ShapeEngine.Core.Shapes.Triangle.html",
    "title": "Struct Triangle | ShapeEngine",
    "summary": "Struct Triangle Namespace ShapeEngine.Core.Shapes Assembly ShapeEngine.dll Class that represents a triangle by holding three points. Points a, b, c should be in ccw order! public readonly struct Triangle : IEquatable<Triangle> Implements IEquatable<Triangle> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ShapeGappedDrawing.DrawGappedOutline(Triangle, float, LineDrawingInfo, GappedOutlineDrawingInfo) ShapeStripedDrawing.DrawStriped(Triangle, Circle, float, float, LineDrawingInfo, float) ShapeStripedDrawing.DrawStriped(Triangle, Polygon, float, float, LineDrawingInfo, float) ShapeStripedDrawing.DrawStriped(Triangle, Quad, float, float, LineDrawingInfo, float) ShapeStripedDrawing.DrawStriped(Triangle, Rect, float, float, LineDrawingInfo, float) ShapeStripedDrawing.DrawStriped(Triangle, Triangle, float, float, LineDrawingInfo, float) ShapeStripedDrawing.DrawStriped(Triangle, CurveFloat, float, LineDrawingInfo) ShapeStripedDrawing.DrawStriped(Triangle, CurveFloat, float, LineDrawingInfo, LineDrawingInfo) ShapeStripedDrawing.DrawStriped(Triangle, CurveFloat, float, params LineDrawingInfo[]) ShapeStripedDrawing.DrawStriped(Triangle, float, float, LineDrawingInfo, LineDrawingInfo) ShapeStripedDrawing.DrawStriped(Triangle, float, float, LineDrawingInfo, float) ShapeStripedDrawing.DrawStriped(Triangle, float, float, params LineDrawingInfo[]) ShapeTriangleDrawing.Draw(Triangle, ColorRgba) ShapeTriangleDrawing.DrawLines(Triangle, LineDrawingInfo) ShapeTriangleDrawing.DrawLines(Triangle, LineDrawingInfo, float, Vector2) ShapeTriangleDrawing.DrawLines(Triangle, float, ColorRgba, LineCapType, int) ShapeTriangleDrawing.DrawLines(Triangle, float, ColorRgba, float, LineCapType, int) ShapeTriangleDrawing.DrawLinesPercentage(Triangle, float, LineDrawingInfo) ShapeTriangleDrawing.DrawLinesPercentage(Triangle, float, LineDrawingInfo, float, Vector2) ShapeTriangleDrawing.DrawLinesPercentage(Triangle, float, float, ColorRgba, LineCapType, int) ShapeTriangleDrawing.DrawLinesScaled(Triangle, LineDrawingInfo, float, Vector2, float, float) ShapeTriangleDrawing.DrawVertices(Triangle, float, ColorRgba, int) Constructors Triangle(Vector2, Segment) public Triangle(Vector2 p, Segment s) Parameters p Vector2 s Segment Triangle(Vector2, Vector2, Vector2) Points should be in ccw order! public Triangle(Vector2 a, Vector2 b, Vector2 c) Parameters a Vector2 b Vector2 c Vector2 Fields A public readonly Vector2 A Field Value Vector2 B public readonly Vector2 B Field Value Vector2 C public readonly Vector2 C Field Value Vector2 Properties SegmentAToB public Segment SegmentAToB { get; } Property Value Segment SegmentBToC public Segment SegmentBToC { get; } Property Value Segment SegmentCToA public Segment SegmentCToA { get; } Property Value Segment SideA public Vector2 SideA { get; } Property Value Vector2 SideB public Vector2 SideB { get; } Property Value Vector2 SideC public Vector2 SideC { get; } Property Value Vector2 Methods ApplyOffset(Transform2D) Moves the triangle by transform.Position Rotates the moved triangle by transform.RotationRad Changes the size of the rotated triangle by transform.Size.Width! public Triangle ApplyOffset(Transform2D offset) Parameters offset Transform2D Returns Triangle ApplyOffset(Transform2D, Vector2) Moves the triangle by transform.Position Rotates the moved triangle by transform.RotationRad Changes the size of the rotated triangle by transform.Size.Width! public Triangle ApplyOffset(Transform2D offset, Vector2 origin) Parameters offset Transform2D origin Vector2 Returns Triangle ApplyTransform(Transform2D) public Triangle ApplyTransform(Transform2D transform) Parameters transform Transform2D Returns Triangle AreaSigned(Vector2, Vector2, Vector2) public static float AreaSigned(Vector2 a, Vector2 b, Vector2 c) Parameters a Vector2 b Vector2 c Vector2 Returns float Ceiling() public Triangle Ceiling() Returns Triangle ChangePosition(Vector2) public Triangle ChangePosition(Vector2 offset) Parameters offset Vector2 Returns Triangle ChangeRotation(float) public Triangle ChangeRotation(float rad) Parameters rad float Returns Triangle ChangeRotation(float, Vector2) public Triangle ChangeRotation(float rad, Vector2 origin) Parameters rad float origin Vector2 Returns Triangle ChangeSize(float) public Triangle ChangeSize(float amount) Parameters amount float Returns Triangle ChangeSize(float, Vector2) public Triangle ChangeSize(float amount, Vector2 origin) Parameters amount float origin Vector2 Returns Triangle ConstructAdjacentTriangle(Vector2) Construct an adjacent triangle on the closest side to the point p. If p is inside the triangle, the triangle is returned. public Triangle ConstructAdjacentTriangle(Vector2 p) Parameters p Vector2 Returns Triangle ContainsCollider(Collider) public bool ContainsCollider(Collider collider) Parameters collider Collider Returns bool ContainsCollisionObject(CollisionObject) public bool ContainsCollisionObject(CollisionObject collisionObject) Parameters collisionObject CollisionObject Returns bool ContainsPoint(Vector2) public bool ContainsPoint(Vector2 p) Parameters p Vector2 Returns bool ContainsPoints(List<Vector2>) public bool ContainsPoints(List<Vector2> points) Parameters points List<Vector2> Returns bool ContainsPoints(Vector2, Vector2) public bool ContainsPoints(Vector2 u, Vector2 v) Parameters u Vector2 v Vector2 Returns bool ContainsPoints(Vector2, Vector2, Vector2) public bool ContainsPoints(Vector2 u, Vector2 v, Vector2 w) Parameters u Vector2 v Vector2 w Vector2 Returns bool ContainsPoints(Vector2, Vector2, Vector2, Vector2) public bool ContainsPoints(Vector2 u, Vector2 v, Vector2 w, Vector2 x) Parameters u Vector2 v Vector2 w Vector2 x Vector2 Returns bool ContainsShape(Circle) public bool ContainsShape(Circle circle) Parameters circle Circle Returns bool ContainsShape(Points) public bool ContainsShape(Points points) Parameters points Points Returns bool ContainsShape(Polygon) public bool ContainsShape(Polygon polygon) Parameters polygon Polygon Returns bool ContainsShape(Polyline) public bool ContainsShape(Polyline polyline) Parameters polyline Polyline Returns bool ContainsShape(Quad) public bool ContainsShape(Quad quad) Parameters quad Quad Returns bool ContainsShape(Rect) public bool ContainsShape(Rect rect) Parameters rect Rect Returns bool ContainsShape(Segment) public bool ContainsShape(Segment segment) Parameters segment Segment Returns bool ContainsShape(Triangle) public bool ContainsShape(Triangle triangle) Parameters triangle Triangle Returns bool ContainsTriangleCircle(Vector2, Vector2, Vector2, Vector2, float) public static bool ContainsTriangleCircle(Vector2 tA, Vector2 tB, Vector2 tC, Vector2 circleCenter, float circleRadius) Parameters tA Vector2 tB Vector2 tC Vector2 circleCenter Vector2 circleRadius float Returns bool ContainsTrianglePoint(Vector2, Vector2, Vector2, Vector2) public static bool ContainsTrianglePoint(Vector2 tA, Vector2 tB, Vector2 tC, Vector2 point) Parameters tA Vector2 tB Vector2 tC Vector2 point Vector2 Returns bool ContainsTrianglePoints(Vector2, Vector2, Vector2, List<Vector2>) public static bool ContainsTrianglePoints(Vector2 tA, Vector2 tB, Vector2 tC, List<Vector2> points) Parameters tA Vector2 tB Vector2 tC Vector2 points List<Vector2> Returns bool ContainsTrianglePoints(Vector2, Vector2, Vector2, Vector2, Vector2) public static bool ContainsTrianglePoints(Vector2 tA, Vector2 tB, Vector2 tC, Vector2 u, Vector2 v) Parameters tA Vector2 tB Vector2 tC Vector2 u Vector2 v Vector2 Returns bool ContainsTrianglePoints(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool ContainsTrianglePoints(Vector2 tA, Vector2 tB, Vector2 tC, Vector2 u, Vector2 v, Vector2 w) Parameters tA Vector2 tB Vector2 tC Vector2 u Vector2 v Vector2 w Vector2 Returns bool ContainsTrianglePoints(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool ContainsTrianglePoints(Vector2 tA, Vector2 tB, Vector2 tC, Vector2 u, Vector2 v, Vector2 w, Vector2 x) Parameters tA Vector2 tB Vector2 tC Vector2 u Vector2 v Vector2 w Vector2 x Vector2 Returns bool ContainsTrianglePolygon(Vector2, Vector2, Vector2, List<Vector2>) public static bool ContainsTrianglePolygon(Vector2 tA, Vector2 tB, Vector2 tC, List<Vector2> polygon) Parameters tA Vector2 tB Vector2 tC Vector2 polygon List<Vector2> Returns bool ContainsTrianglePolyline(Vector2, Vector2, Vector2, List<Vector2>) public static bool ContainsTrianglePolyline(Vector2 tA, Vector2 tB, Vector2 tC, List<Vector2> polyline) Parameters tA Vector2 tB Vector2 tC Vector2 polyline List<Vector2> Returns bool ContainsTriangleQuad(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool ContainsTriangleQuad(Vector2 tA, Vector2 tB, Vector2 tC, Vector2 qA, Vector2 qB, Vector2 qC, Vector2 qD) Parameters tA Vector2 tB Vector2 tC Vector2 qA Vector2 qB Vector2 qC Vector2 qD Vector2 Returns bool ContainsTriangleRect(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool ContainsTriangleRect(Vector2 tA, Vector2 tB, Vector2 tC, Vector2 rA, Vector2 rB, Vector2 rC, Vector2 rD) Parameters tA Vector2 tB Vector2 tC Vector2 rA Vector2 rB Vector2 rC Vector2 rD Vector2 Returns bool ContainsTriangleSegment(Vector2, Vector2, Vector2, Vector2, Vector2) public static bool ContainsTriangleSegment(Vector2 tA, Vector2 tB, Vector2 tC, Vector2 segmentStart, Vector2 segmentEnd) Parameters tA Vector2 tB Vector2 tC Vector2 segmentStart Vector2 segmentEnd Vector2 Returns bool ContainsTriangleTriangle(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool ContainsTriangleTriangle(Vector2 tA1, Vector2 tB1, Vector2 tC1, Vector2 tA2, Vector2 tB2, Vector2 tC2) Parameters tA1 Vector2 tB1 Vector2 tC1 Vector2 tA2 Vector2 tB2 Vector2 tC2 Vector2 Returns bool Equals(Triangle) Indicates whether the current object is equal to another object of the same type. public bool Equals(Triangle other) Parameters other Triangle An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. Floor() public Triangle Floor() Returns Triangle Generate(Vector2, float, float) public static Triangle Generate(Vector2 center, float minLength, float maxLength) Parameters center Vector2 minLength float maxLength float Returns Triangle GenerateRelative(float, float) public static Triangle GenerateRelative(float minLength, float maxLength) Parameters minLength float maxLength float Returns Triangle GetArea() public float GetArea() Returns float GetBoundingBox() public Rect GetBoundingBox() Returns Rect GetCentroid() public Vector2 GetCentroid() Returns Vector2 GetCircumCircle() public Circle GetCircumCircle() Returns Circle GetClosestPoint(Circle) public ClosestPointResult GetClosestPoint(Circle other) Parameters other Circle Returns ClosestPointResult GetClosestPoint(Line) public ClosestPointResult GetClosestPoint(Line other) Parameters other Line Returns ClosestPointResult GetClosestPoint(Polygon) public ClosestPointResult GetClosestPoint(Polygon other) Parameters other Polygon Returns ClosestPointResult GetClosestPoint(Polyline) public ClosestPointResult GetClosestPoint(Polyline other) Parameters other Polyline Returns ClosestPointResult GetClosestPoint(Quad) public ClosestPointResult GetClosestPoint(Quad other) Parameters other Quad Returns ClosestPointResult GetClosestPoint(Ray) public ClosestPointResult GetClosestPoint(Ray other) Parameters other Ray Returns ClosestPointResult GetClosestPoint(Rect) public ClosestPointResult GetClosestPoint(Rect other) Parameters other Rect Returns ClosestPointResult GetClosestPoint(Segment) public ClosestPointResult GetClosestPoint(Segment other) Parameters other Segment Returns ClosestPointResult GetClosestPoint(Segments) public ClosestPointResult GetClosestPoint(Segments other) Parameters other Segments Returns ClosestPointResult GetClosestPoint(Triangle) public ClosestPointResult GetClosestPoint(Triangle other) Parameters other Triangle Returns ClosestPointResult GetClosestPoint(Vector2, out float) public CollisionPoint GetClosestPoint(Vector2 p, out float disSquared) Parameters p Vector2 disSquared float Returns CollisionPoint GetClosestPoint(Vector2, out float, out int) public CollisionPoint GetClosestPoint(Vector2 p, out float disSquared, out int index) Parameters p Vector2 disSquared float index int Returns CollisionPoint GetClosestPointTrianglePoint(Vector2, Vector2, Vector2, Vector2, out float) public static Vector2 GetClosestPointTrianglePoint(Vector2 a, Vector2 b, Vector2 c, Vector2 p, out float disSquared) Parameters a Vector2 b Vector2 c Vector2 p Vector2 disSquared float Returns Vector2 GetClosestSegment(Vector2, out float) public (Segment segment, CollisionPoint segmentPoint) GetClosestSegment(Vector2 p, out float disSquared) Parameters p Vector2 disSquared float Returns (Segment segment, CollisionPoint segmentPoint) GetClosestVertex(Vector2, out float, out int) public Vector2 GetClosestVertex(Vector2 p, out float disSquared, out int index) Parameters p Vector2 disSquared float index int Returns Vector2 GetEdges() public Segments GetEdges() Returns Segments GetFurthestVertex(Vector2, out float, out int) public Vector2 GetFurthestVertex(Vector2 p, out float disSquared, out int index) Parameters p Vector2 disSquared float index int Returns Vector2 GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. GetInsideTriangle(float, float, float) public Triangle GetInsideTriangle(float abF, float bcF, float caF) Parameters abF float bcF float caF float Returns Triangle GetInterpolatedEdgePoints(float) public Points? GetInterpolatedEdgePoints(float t) Parameters t float Returns Points GetInterpolatedEdgePoints(float, int) public Points? GetInterpolatedEdgePoints(float t, int steps) Parameters t float steps int Returns Points GetPerimeter() public float GetPerimeter() Returns float GetPerimeterSquared() public float GetPerimeterSquared() Returns float GetPoint(float, float) Returns a point inside the triangle. public Vector2 GetPoint(float f1, float f2) Parameters f1 float First value in the range 0 - 1. f2 float Second value in the range 0 - 1. Returns Vector2 GetProjectedShapePoints(Vector2) public Points? GetProjectedShapePoints(Vector2 v) Parameters v Vector2 Returns Points GetRandomEdge() public Segment GetRandomEdge() Returns Segment GetRandomPointInside() public Vector2 GetRandomPointInside() Returns Vector2 GetRandomPointOnEdge() public Vector2 GetRandomPointOnEdge() Returns Vector2 GetRandomPointsInside(int) public Points GetRandomPointsInside(int amount) Parameters amount int Returns Points GetRandomPointsOnEdge(int) public Points GetRandomPointsOnEdge(int amount) Parameters amount int Returns Points GetRandomVertex() public Vector2 GetRandomVertex() Returns Vector2 GetSegment(int) public Segment GetSegment(int index) Parameters index int Returns Segment Intersect(Collider) public CollisionPoints? Intersect(Collider collider) Parameters collider Collider Returns CollisionPoints Intersect(Collider, ref CollisionPoints, bool) public int Intersect(Collider collider, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters collider Collider points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Circle) public CollisionPoints? IntersectShape(Circle c) Parameters c Circle Returns CollisionPoints IntersectShape(Circle, ref CollisionPoints, bool) public int IntersectShape(Circle c, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters c Circle points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Line) public CollisionPoints? IntersectShape(Line l) Parameters l Line Returns CollisionPoints IntersectShape(Line, ref CollisionPoints, bool) public int IntersectShape(Line l, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters l Line points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Polygon) public CollisionPoints? IntersectShape(Polygon p) Parameters p Polygon Returns CollisionPoints IntersectShape(Polygon, ref CollisionPoints, bool) public int IntersectShape(Polygon p, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters p Polygon points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Polyline) public CollisionPoints? IntersectShape(Polyline pl) Parameters pl Polyline Returns CollisionPoints IntersectShape(Polyline, ref CollisionPoints, bool) public int IntersectShape(Polyline pl, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters pl Polyline points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Quad) public CollisionPoints? IntersectShape(Quad q) Parameters q Quad Returns CollisionPoints IntersectShape(Quad, ref CollisionPoints, bool) public int IntersectShape(Quad q, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters q Quad points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Ray) public CollisionPoints? IntersectShape(Ray r) Parameters r Ray Returns CollisionPoints IntersectShape(Ray, ref CollisionPoints, bool) public int IntersectShape(Ray r, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters r Ray points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Rect) public CollisionPoints? IntersectShape(Rect r) Parameters r Rect Returns CollisionPoints IntersectShape(Rect, ref CollisionPoints, bool) public int IntersectShape(Rect r, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters r Rect points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Segment) public CollisionPoints? IntersectShape(Segment s) Parameters s Segment Returns CollisionPoints IntersectShape(Segment, ref CollisionPoints, bool) public int IntersectShape(Segment s, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters s Segment points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Segments) public CollisionPoints? IntersectShape(Segments segments) Parameters segments Segments Returns CollisionPoints IntersectShape(Segments, ref CollisionPoints, bool) public int IntersectShape(Segments shape, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters shape Segments points CollisionPoints returnAfterFirstValid bool Returns int IntersectShape(Triangle) public CollisionPoints? IntersectShape(Triangle t) Parameters t Triangle Returns CollisionPoints IntersectShape(Triangle, ref CollisionPoints, bool) public int IntersectShape(Triangle t, ref CollisionPoints points, bool returnAfterFirstValid = false) Parameters t Triangle points CollisionPoints returnAfterFirstValid bool Returns int IsNarrow(float) public bool IsNarrow(float narrowValue = 0.2) Parameters narrowValue float Returns bool IsSimilar(Triangle) public bool IsSimilar(Triangle other) Parameters other Triangle Returns bool IsValid() public bool IsValid() Returns bool Overlap(Collider) public bool Overlap(Collider collider) Parameters collider Collider Returns bool OverlapCircle(Vector2, float) public bool OverlapCircle(Vector2 circleCenter, float circleRadius) Parameters circleCenter Vector2 circleRadius float Returns bool OverlapLine(Vector2, Vector2) public bool OverlapLine(Vector2 linePoint, Vector2 lineDirection) Parameters linePoint Vector2 lineDirection Vector2 Returns bool OverlapPolygon(List<Vector2>) public bool OverlapPolygon(List<Vector2> points) Parameters points List<Vector2> Returns bool OverlapPolyline(List<Vector2>) public bool OverlapPolyline(List<Vector2> points) Parameters points List<Vector2> Returns bool OverlapQuad(Vector2, Vector2, Vector2, Vector2) public bool OverlapQuad(Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters a Vector2 b Vector2 c Vector2 d Vector2 Returns bool OverlapRay(Vector2, Vector2) public bool OverlapRay(Vector2 rayPoint, Vector2 rayDirection) Parameters rayPoint Vector2 rayDirection Vector2 Returns bool OverlapRect(Vector2, Vector2, Vector2, Vector2) public bool OverlapRect(Vector2 a, Vector2 b, Vector2 c, Vector2 d) Parameters a Vector2 b Vector2 c Vector2 d Vector2 Returns bool OverlapSegment(Vector2, Vector2) public bool OverlapSegment(Vector2 segmentStart, Vector2 segmentEnd) Parameters segmentStart Vector2 segmentEnd Vector2 Returns bool OverlapSegments(List<Segment>) public bool OverlapSegments(List<Segment> segments) Parameters segments List<Segment> Returns bool OverlapShape(Circle) public bool OverlapShape(Circle c) Parameters c Circle Returns bool OverlapShape(Line) public bool OverlapShape(Line line) Parameters line Line Returns bool OverlapShape(Polygon) public bool OverlapShape(Polygon poly) Parameters poly Polygon Returns bool OverlapShape(Polyline) public bool OverlapShape(Polyline pl) Parameters pl Polyline Returns bool OverlapShape(Quad) public bool OverlapShape(Quad q) Parameters q Quad Returns bool OverlapShape(Ray) public bool OverlapShape(Ray ray) Parameters ray Ray Returns bool OverlapShape(Rect) public bool OverlapShape(Rect r) Parameters r Rect Returns bool OverlapShape(Segment) public bool OverlapShape(Segment s) Parameters s Segment Returns bool OverlapShape(Segments) public bool OverlapShape(Segments segments) Parameters segments Segments Returns bool OverlapShape(Triangle) public bool OverlapShape(Triangle b) Parameters b Triangle Returns bool OverlapTriangle(Vector2, Vector2, Vector2) public bool OverlapTriangle(Vector2 a, Vector2 b, Vector2 c) Parameters a Vector2 b Vector2 c Vector2 Returns bool OverlapTriangleCircle(Vector2, Vector2, Vector2, Vector2, float) public static bool OverlapTriangleCircle(Vector2 a, Vector2 b, Vector2 c, Vector2 circleCenter, float circleRadius) Parameters a Vector2 b Vector2 c Vector2 circleCenter Vector2 circleRadius float Returns bool OverlapTriangleLine(Vector2, Vector2, Vector2, Vector2, Vector2) public static bool OverlapTriangleLine(Vector2 a, Vector2 b, Vector2 c, Vector2 linePoint, Vector2 lineDirection) Parameters a Vector2 b Vector2 c Vector2 linePoint Vector2 lineDirection Vector2 Returns bool OverlapTrianglePolygon(Vector2, Vector2, Vector2, List<Vector2>) public static bool OverlapTrianglePolygon(Vector2 a, Vector2 b, Vector2 c, List<Vector2> points) Parameters a Vector2 b Vector2 c Vector2 points List<Vector2> Returns bool OverlapTrianglePolyline(Vector2, Vector2, Vector2, List<Vector2>) public static bool OverlapTrianglePolyline(Vector2 a, Vector2 b, Vector2 c, List<Vector2> points) Parameters a Vector2 b Vector2 c Vector2 points List<Vector2> Returns bool OverlapTriangleQuad(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool OverlapTriangleQuad(Vector2 a, Vector2 b, Vector2 c, Vector2 qa, Vector2 qb, Vector2 qc, Vector2 qd) Parameters a Vector2 b Vector2 c Vector2 qa Vector2 qb Vector2 qc Vector2 qd Vector2 Returns bool OverlapTriangleRay(Vector2, Vector2, Vector2, Vector2, Vector2) public static bool OverlapTriangleRay(Vector2 a, Vector2 b, Vector2 c, Vector2 rayPoint, Vector2 rayDirection) Parameters a Vector2 b Vector2 c Vector2 rayPoint Vector2 rayDirection Vector2 Returns bool OverlapTriangleRect(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool OverlapTriangleRect(Vector2 a, Vector2 b, Vector2 c, Vector2 ra, Vector2 rb, Vector2 rc, Vector2 rd) Parameters a Vector2 b Vector2 c Vector2 ra Vector2 rb Vector2 rc Vector2 rd Vector2 Returns bool OverlapTriangleSegment(Vector2, Vector2, Vector2, Vector2, Vector2) public static bool OverlapTriangleSegment(Vector2 a, Vector2 b, Vector2 c, Vector2 segmentStart, Vector2 segmentEnd) Parameters a Vector2 b Vector2 c Vector2 segmentStart Vector2 segmentEnd Vector2 Returns bool OverlapTriangleSegments(Vector2, Vector2, Vector2, List<Segment>) public static bool OverlapTriangleSegments(Vector2 a, Vector2 b, Vector2 c, List<Segment> segments) Parameters a Vector2 b Vector2 c Vector2 segments List<Segment> Returns bool OverlapTriangleTriangle(Vector2, Vector2, Vector2, Vector2, Vector2, Vector2) public static bool OverlapTriangleTriangle(Vector2 a1, Vector2 b1, Vector2 c1, Vector2 a2, Vector2 b2, Vector2 c2) Parameters a1 Vector2 b1 Vector2 c1 Vector2 a2 Vector2 b2 Vector2 c2 Vector2 Returns bool ProjectShape(Vector2) public Polygon? ProjectShape(Vector2 v) Parameters v Vector2 Returns Polygon Round() public Triangle Round() Returns Triangle ScaleSize(Size) public Triangle ScaleSize(Size scale) Parameters scale Size Returns Triangle ScaleSize(Size, Vector2) public Triangle ScaleSize(Size scale, Vector2 origin) Parameters scale Size origin Vector2 Returns Triangle ScaleSize(float) public Triangle ScaleSize(float scale) Parameters scale float Returns Triangle ScaleSize(float, Vector2) public Triangle ScaleSize(float scale, Vector2 origin) Parameters scale float origin Vector2 Returns Triangle SetPosition(Vector2) public Triangle SetPosition(Vector2 position) Parameters position Vector2 Returns Triangle SetPosition(Vector2, Vector2) public Triangle SetPosition(Vector2 position, Vector2 origin) Parameters position Vector2 origin Vector2 Returns Triangle SetRotation(float) public Triangle SetRotation(float rad) Parameters rad float Returns Triangle SetRotation(float, Vector2) public Triangle SetRotation(float rad, Vector2 origin) Parameters rad float origin Vector2 Returns Triangle SetSize(float) public Triangle SetSize(float size) Parameters size float Returns Triangle SetSize(float, Vector2) public Triangle SetSize(float size, Vector2 origin) Parameters size float origin Vector2 Returns Triangle SetTransform(Transform2D) Moves the triangle to transform.Position Rotates the moved triangle to transform.RotationRad Sets the size of the rotated triangle to transform.ScaledSize.Length public Triangle SetTransform(Transform2D transform) Parameters transform Transform2D Returns Triangle SetTransform(Transform2D, Vector2) Moves the triangle to transform.Position Rotates the moved triangle to transform.RotationRad Sets the size of the rotated triangle to transform.ScaledSize.Length public Triangle SetTransform(Transform2D transform, Vector2 origin) Parameters transform Transform2D origin Vector2 Returns Triangle SharesVertex(Triangle) public bool SharesVertex(Triangle t) Parameters t Triangle Returns bool SharesVertex(IEnumerable<Vector2>) public bool SharesVertex(IEnumerable<Vector2> points) Parameters points IEnumerable<Vector2> Returns bool SharesVertex(Vector2) public bool SharesVertex(Vector2 p) Parameters p Vector2 Returns bool ToPoints() public Points ToPoints() Returns Points ToPolygon() public Polygon ToPolygon() Returns Polygon ToPolyline() public Polyline ToPolyline() Returns Polyline Triangulate() public Triangulation Triangulate() Returns Triangulation Triangulate(int) public Triangulation Triangulate(int pointCount) Parameters pointCount int Returns Triangulation Triangulate(Vector2) public Triangulation Triangulate(Vector2 p) Parameters p Vector2 Returns Triangulation Triangulate(float) public Triangulation Triangulate(float minArea) Parameters minArea float Returns Triangulation Truncate() public Triangle Truncate() Returns Triangle Operators operator +(Triangle, Triangle) public static Triangle operator +(Triangle left, Triangle right) Parameters left Triangle right Triangle Returns Triangle operator +(Triangle, Vector2) public static Triangle operator +(Triangle left, Vector2 right) Parameters left Triangle right Vector2 Returns Triangle operator +(Triangle, float) public static Triangle operator +(Triangle left, float right) Parameters left Triangle right float Returns Triangle operator /(Triangle, Triangle) public static Triangle operator /(Triangle left, Triangle right) Parameters left Triangle right Triangle Returns Triangle operator /(Triangle, Vector2) public static Triangle operator /(Triangle left, Vector2 right) Parameters left Triangle right Vector2 Returns Triangle operator /(Triangle, float) public static Triangle operator /(Triangle left, float right) Parameters left Triangle right float Returns Triangle operator ==(Triangle, Triangle) public static bool operator ==(Triangle left, Triangle right) Parameters left Triangle right Triangle Returns bool operator !=(Triangle, Triangle) public static bool operator !=(Triangle left, Triangle right) Parameters left Triangle right Triangle Returns bool operator *(Triangle, Triangle) public static Triangle operator *(Triangle left, Triangle right) Parameters left Triangle right Triangle Returns Triangle operator *(Triangle, Vector2) public static Triangle operator *(Triangle left, Vector2 right) Parameters left Triangle right Vector2 Returns Triangle operator *(Triangle, float) public static Triangle operator *(Triangle left, float right) Parameters left Triangle right float Returns Triangle operator -(Triangle, Triangle) public static Triangle operator -(Triangle left, Triangle right) Parameters left Triangle right Triangle Returns Triangle operator -(Triangle, Vector2) public static Triangle operator -(Triangle left, Vector2 right) Parameters left Triangle right Vector2 Returns Triangle operator -(Triangle, float) public static Triangle operator -(Triangle left, float right) Parameters left Triangle right float Returns Triangle"
  },
  "api/ShapeEngine.Core.Shapes.TriangleShape.html": {
    "href": "api/ShapeEngine.Core.Shapes.TriangleShape.html",
    "title": "Class TriangleShape | ShapeEngine",
    "summary": "Class TriangleShape Namespace ShapeEngine.Core.Shapes Assembly ShapeEngine.dll public class TriangleShape : ShapeContainer, IShape Inheritance object Shape ShapeContainer TriangleShape Implements IShape Inherited Members ShapeContainer.Parent ShapeContainer.ChangeParent(ShapeContainer) ShapeContainer.AddChild(ShapeContainer) ShapeContainer.RemoveChild(ShapeContainer) ShapeContainer.InitializeShape(Transform2D) ShapeContainer.UpdateShape(float, Transform2D) ShapeContainer.DrawShape() ShapeContainer.OnChildInitialized(ShapeContainer) ShapeContainer.OnChildUpdated(ShapeContainer) ShapeContainer.OnChildDrawn(ShapeContainer) ShapeContainer.OnUpdateFinished() ShapeContainer.OnDrawFinished() ShapeContainer.OnAddedToParent(ShapeContainer) ShapeContainer.OnRemovedFromParent(ShapeContainer) Shape.Moves Shape.Rotates Shape.Scales Shape.Offset Shape.CurTransform Shape.PrevTransform Shape.RecalculateShape() Shape.OnInitialized() Shape.OnUpdate(float) Shape.OnDraw() Shape.OnShapeTransformChanged(bool) Shape.UpdateTransform(Transform2D) Shape.GetRayShape() Shape.GetLineShape() Shape.GetSegmentShape() Shape.GetCircleShape() Shape.GetQuadShape() Shape.GetRectShape() Shape.GetPolygonShape() Shape.GetPolylineShape() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TriangleShape(Transform2D, List<Vector2>) public TriangleShape(Transform2D offset, List<Vector2> relativePoints) Parameters offset Transform2D relativePoints List<Vector2> TriangleShape(Transform2D, Vector2, Vector2, Vector2) public TriangleShape(Transform2D offset, Vector2 relA, Vector2 relB, Vector2 relC) Parameters offset Transform2D relA Vector2 relB Vector2 relC Vector2 TriangleShape(Transform2D, Vector2[]) public TriangleShape(Transform2D offset, Vector2[] relativePoints) Parameters offset Transform2D relativePoints Vector2[] Properties AAbsolute public Vector2 AAbsolute { get; } Property Value Vector2 ARelative public Vector2 ARelative { get; set; } Property Value Vector2 BAbsolute public Vector2 BAbsolute { get; } Property Value Vector2 BRelative public Vector2 BRelative { get; set; } Property Value Vector2 CAbsolute public Vector2 CAbsolute { get; } Property Value Vector2 CRelative public Vector2 CRelative { get; set; } Property Value Vector2 Methods GetShapeType() public override ShapeType GetShapeType() Returns ShapeType GetTriangleShape() public override Triangle GetTriangleShape() Returns Triangle"
  },
  "api/ShapeEngine.Core.Shapes.Triangulation.html": {
    "href": "api/ShapeEngine.Core.Shapes.Triangulation.html",
    "title": "Class Triangulation | ShapeEngine",
    "summary": "Class Triangulation Namespace ShapeEngine.Core.Shapes Assembly ShapeEngine.dll public class Triangulation : ShapeList<Triangle>, IList<Triangle>, ICollection<Triangle>, IReadOnlyList<Triangle>, IReadOnlyCollection<Triangle>, IEnumerable<Triangle>, IList, ICollection, IEnumerable Inheritance object List<Triangle> ShapeList<Triangle> Triangulation Implements IList<Triangle> ICollection<Triangle> IReadOnlyList<Triangle> IReadOnlyCollection<Triangle> IEnumerable<Triangle> IList ICollection IEnumerable Inherited Members ShapeList<Triangle>.AddRange(params Triangle[]) ShapeList<Triangle>.Copy() ShapeList<Triangle>.IsIndexValid(int) ShapeList<Triangle>.GetRandomItem() ShapeList<Triangle>.GetRandomItems(int) ShapeList<Triangle>.GetItem(int) List<Triangle>.Add(Triangle) List<Triangle>.AddRange(IEnumerable<Triangle>) List<Triangle>.AsReadOnly() List<Triangle>.BinarySearch(int, int, Triangle, IComparer<Triangle>) List<Triangle>.BinarySearch(Triangle) List<Triangle>.BinarySearch(Triangle, IComparer<Triangle>) List<Triangle>.Clear() List<Triangle>.Contains(Triangle) List<Triangle>.ConvertAll<TOutput>(Converter<Triangle, TOutput>) List<Triangle>.CopyTo(int, Triangle[], int, int) List<Triangle>.CopyTo(Triangle[]) List<Triangle>.CopyTo(Triangle[], int) List<Triangle>.EnsureCapacity(int) List<Triangle>.Exists(Predicate<Triangle>) List<Triangle>.Find(Predicate<Triangle>) List<Triangle>.FindAll(Predicate<Triangle>) List<Triangle>.FindIndex(int, int, Predicate<Triangle>) List<Triangle>.FindIndex(int, Predicate<Triangle>) List<Triangle>.FindIndex(Predicate<Triangle>) List<Triangle>.FindLast(Predicate<Triangle>) List<Triangle>.FindLastIndex(int, int, Predicate<Triangle>) List<Triangle>.FindLastIndex(int, Predicate<Triangle>) List<Triangle>.FindLastIndex(Predicate<Triangle>) List<Triangle>.ForEach(Action<Triangle>) List<Triangle>.GetEnumerator() List<Triangle>.GetRange(int, int) List<Triangle>.IndexOf(Triangle) List<Triangle>.IndexOf(Triangle, int) List<Triangle>.IndexOf(Triangle, int, int) List<Triangle>.Insert(int, Triangle) List<Triangle>.InsertRange(int, IEnumerable<Triangle>) List<Triangle>.LastIndexOf(Triangle) List<Triangle>.LastIndexOf(Triangle, int) List<Triangle>.LastIndexOf(Triangle, int, int) List<Triangle>.Remove(Triangle) List<Triangle>.RemoveAll(Predicate<Triangle>) List<Triangle>.RemoveAt(int) List<Triangle>.RemoveRange(int, int) List<Triangle>.Reverse() List<Triangle>.Reverse(int, int) List<Triangle>.Slice(int, int) List<Triangle>.Sort() List<Triangle>.Sort(IComparer<Triangle>) List<Triangle>.Sort(Comparison<Triangle>) List<Triangle>.Sort(int, int, IComparer<Triangle>) List<Triangle>.ToArray() List<Triangle>.TrimExcess() List<Triangle>.TrueForAll(Predicate<Triangle>) List<Triangle>.Capacity List<Triangle>.Count List<Triangle>.this[int] object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ShapeTriangleDrawing.Draw(Triangulation, ColorRgba) ShapeTriangleDrawing.DrawLines(Triangulation, LineDrawingInfo) ShapeTriangleDrawing.DrawLines(Triangulation, float, ColorRgba, LineCapType, int) Constructors Triangulation() public Triangulation() Triangulation(IEnumerable<Triangle>) public Triangulation(IEnumerable<Triangle> triangles) Parameters triangles IEnumerable<Triangle> Triangulation(int) public Triangulation(int capacity) Parameters capacity int Methods ApplyOffset(Transform2D, Vector2) public void ApplyOffset(Transform2D offset, Vector2 origin) Parameters offset Transform2D origin Vector2 ApplyOffsetCopy(Transform2D, Vector2) public Triangulation ApplyOffsetCopy(Transform2D offset, Vector2 origin) Parameters offset Transform2D origin Vector2 Returns Triangulation ChangePosition(Vector2) public void ChangePosition(Vector2 offset) Parameters offset Vector2 ChangePositionCopy(Vector2) public Triangulation ChangePositionCopy(Vector2 offset) Parameters offset Vector2 Returns Triangulation ChangeRotation(float) public void ChangeRotation(float rad) Parameters rad float ChangeRotation(float, Vector2) public void ChangeRotation(float rad, Vector2 origin) Parameters rad float origin Vector2 ChangeRotationCopy(float) public Triangulation ChangeRotationCopy(float rad) Parameters rad float Returns Triangulation ChangeRotationCopy(float, Vector2) public Triangulation ChangeRotationCopy(float rad, Vector2 origin) Parameters rad float origin Vector2 Returns Triangulation ChangeSize(float) public void ChangeSize(float amount) Parameters amount float ChangeSize(float, Vector2) public void ChangeSize(float amount, Vector2 origin) Parameters amount float origin Vector2 ChangeSizeCopy(float) public Triangulation ChangeSizeCopy(float amount) Parameters amount float Returns Triangulation ChangeSizeCopy(float, Vector2) public Triangulation ChangeSizeCopy(float amount, Vector2 origin) Parameters amount float origin Vector2 Returns Triangulation ContainsPoint(Vector2) public bool ContainsPoint(Vector2 p) Parameters p Vector2 Returns bool ContainsPoint(Vector2, out int) public bool ContainsPoint(Vector2 p, out int triangleIndex) Parameters p Vector2 triangleIndex int Returns bool Equals(Triangulation?) public bool Equals(Triangulation? other) Parameters other Triangulation Returns bool Get(float) Get a new triangulation with triangles with an area >= areaThreshold. public Triangulation Get(float areaThreshold) Parameters areaThreshold float Returns Triangulation GetArea() Get the total area of all triangles in this triangulation. public float GetArea() Returns float GetClosestPoint(Circle, out int) public ClosestPointResult GetClosestPoint(Circle other, out int triangleIndex) Parameters other Circle triangleIndex int Returns ClosestPointResult GetClosestPoint(Line, out int) public ClosestPointResult GetClosestPoint(Line other, out int triangleIndex) Parameters other Line triangleIndex int Returns ClosestPointResult GetClosestPoint(Polygon, out int) public ClosestPointResult GetClosestPoint(Polygon other, out int triangleIndex) Parameters other Polygon triangleIndex int Returns ClosestPointResult GetClosestPoint(Polyline, out int) public ClosestPointResult GetClosestPoint(Polyline other, out int triangleIndex) Parameters other Polyline triangleIndex int Returns ClosestPointResult GetClosestPoint(Quad, out int) public ClosestPointResult GetClosestPoint(Quad other, out int triangleIndex) Parameters other Quad triangleIndex int Returns ClosestPointResult GetClosestPoint(Ray, out int) public ClosestPointResult GetClosestPoint(Ray other, out int triangleIndex) Parameters other Ray triangleIndex int Returns ClosestPointResult GetClosestPoint(Rect, out int) public ClosestPointResult GetClosestPoint(Rect other, out int triangleIndex) Parameters other Rect triangleIndex int Returns ClosestPointResult GetClosestPoint(Segment, out int) public ClosestPointResult GetClosestPoint(Segment other, out int triangleIndex) Parameters other Segment triangleIndex int Returns ClosestPointResult GetClosestPoint(Segments, out int) public ClosestPointResult GetClosestPoint(Segments other, out int triangleIndex) Parameters other Segments triangleIndex int Returns ClosestPointResult GetClosestPoint(Triangle, out int) public ClosestPointResult GetClosestPoint(Triangle other, out int triangleIndex) Parameters other Triangle triangleIndex int Returns ClosestPointResult GetClosestPoint(Vector2) public ClosestPointResult GetClosestPoint(Vector2 p) Parameters p Vector2 Returns ClosestPointResult GetClosestPoint(Vector2, out float) public CollisionPoint GetClosestPoint(Vector2 p, out float disSquared) Parameters p Vector2 disSquared float Returns CollisionPoint GetClosestPoint(Vector2, out float, out int, out int) public CollisionPoint GetClosestPoint(Vector2 p, out float disSquared, out int triangleIndex, out int segmentIndex) Parameters p Vector2 disSquared float triangleIndex int segmentIndex int Returns CollisionPoint GetClosestPointTriangulationPoint(List<Triangle>, Vector2, out float) public static CollisionPoint GetClosestPointTriangulationPoint(List<Triangle> triangles, Vector2 p, out float disSquared) Parameters triangles List<Triangle> p Vector2 disSquared float Returns CollisionPoint GetClosestSegment(Vector2, out float, out int) public (Segment segment, CollisionPoint segmentPoint) GetClosestSegment(Vector2 p, out float disSquared, out int triangleIndex) Parameters p Vector2 disSquared float triangleIndex int Returns (Segment segment, CollisionPoint segmentPoint) GetClosestTriangle(Vector2, out float, out int) public (CollisionPoint point, Triangle triangle) GetClosestTriangle(Vector2 p, out float disSquared, out int triangleIndex) Parameters p Vector2 disSquared float triangleIndex int Returns (CollisionPoint point, Triangle triangle) GetClosestVertex(Vector2, out float, out int, out int) public Vector2 GetClosestVertex(Vector2 p, out float disSquared, out int triangleIndex, out int segmentIndex) Parameters p Vector2 disSquared float triangleIndex int segmentIndex int Returns Vector2 GetContainingTriangles(Vector2) public Triangulation GetContainingTriangles(Vector2 p) Parameters p Vector2 Returns Triangulation GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. GetSegment(int, int) public Segment GetSegment(int triangleIndex, int segmentIndex) Parameters triangleIndex int segmentIndex int Returns Segment GetUniquePoints() public Points GetUniquePoints() Returns Points GetUniqueSegments() public Segments GetUniqueSegments() Returns Segments GetUniqueTriangles() public Triangulation GetUniqueTriangles() Returns Triangulation Intersect(Collider) Find all triangles that intersect the specified collider. public Dictionary<int, CollisionPoints>? Intersect(Collider collider) Parameters collider Collider The collider to check the triangles against. Returns Dictionary<int, CollisionPoints> Returns a dictionary where the key represents the index of the triangle and the value represents the found collision points. IntersectShape(Circle) Find all triangles that intersect the specified shape. public Dictionary<int, CollisionPoints>? IntersectShape(Circle shape) Parameters shape Circle The shape to check the triangles against. Returns Dictionary<int, CollisionPoints> Returns a dictionary where the key represents the index of the triangle and the value represents the found collision points. IntersectShape(Line) Find all triangles that intersect the specified shape. public Dictionary<int, CollisionPoints>? IntersectShape(Line shape) Parameters shape Line The shape to check the triangles against. Returns Dictionary<int, CollisionPoints> Returns a dictionary where the key represents the index of the triangle and the value represents the found collision points. IntersectShape(Polygon) Find all triangles that intersect the specified shape. public Dictionary<int, CollisionPoints>? IntersectShape(Polygon shape) Parameters shape Polygon The shape to check the triangles against. Returns Dictionary<int, CollisionPoints> Returns a dictionary where the key represents the index of the triangle and the value represents the found collision points. IntersectShape(Polyline) Find all triangles that intersect the specified shape. public Dictionary<int, CollisionPoints>? IntersectShape(Polyline shape) Parameters shape Polyline The shape to check the triangles against. Returns Dictionary<int, CollisionPoints> Returns a dictionary where the key represents the index of the triangle and the value represents the found collision points. IntersectShape(Quad) Find all triangles that intersect the specified shape. public Dictionary<int, CollisionPoints>? IntersectShape(Quad shape) Parameters shape Quad The shape to check the triangles against. Returns Dictionary<int, CollisionPoints> Returns a dictionary where the key represents the index of the triangle and the value represents the found collision points. IntersectShape(Ray) Find all triangles that intersect the specified shape. public Dictionary<int, CollisionPoints>? IntersectShape(Ray shape) Parameters shape Ray The shape to check the triangles against. Returns Dictionary<int, CollisionPoints> Returns a dictionary where the key represents the index of the triangle and the value represents the found collision points. IntersectShape(Rect) Find all triangles that intersect the specified shape. public Dictionary<int, CollisionPoints>? IntersectShape(Rect shape) Parameters shape Rect The shape to check the triangles against. Returns Dictionary<int, CollisionPoints> Returns a dictionary where the key represents the index of the triangle and the value represents the found collision points. IntersectShape(Segment) Find all triangles that intersect the specified shape. public Dictionary<int, CollisionPoints>? IntersectShape(Segment shape) Parameters shape Segment The shape to check the triangles against. Returns Dictionary<int, CollisionPoints> Returns a dictionary where the key represents the index of the triangle and the value represents the found collision points. IntersectShape(Segments) Find all triangles that intersect the specified shape. public Dictionary<int, CollisionPoints>? IntersectShape(Segments shape) Parameters shape Segments The shape to check the triangles against. Returns Dictionary<int, CollisionPoints> Returns a dictionary where the key represents the index of the triangle and the value represents the found collision points. IntersectShape(Triangle) Find all triangles that intersect the specified shape. public Dictionary<int, CollisionPoints>? IntersectShape(Triangle shape) Parameters shape Triangle The shape to check the triangles against. Returns Dictionary<int, CollisionPoints> Returns a dictionary where the key represents the index of the triangle and the value represents the found collision points. Overlap(Collider) Find if any triangle in this collection overlaps the specified shape. public bool Overlap(Collider collider) Parameters collider Collider Returns bool Returns true after the first overlap is found. If no overlap is found, returns false. Overlap(Collider, out List<int>?) Find all triangles in this collection that overlap the specified shape. public bool Overlap(Collider collider, out List<int>? triangleIndices) Parameters collider Collider The collider to check against. triangleIndices List<int> All triangle indices that overlap the specified collider. Returns bool Return true if at least 1 overlap was found, otherwise return false. Does not return early. All triangle have to be checked. OverlapShape(Circle) Find if any triangle in this collection overlaps the specified shape. public bool OverlapShape(Circle shape) Parameters shape Circle Returns bool Returns true after the first overlap is found. If no overlap is found, returns false. OverlapShape(Circle, out List<int>?) Find all triangles in this collection that overlap the specified shape. public bool OverlapShape(Circle shape, out List<int>? triangleIndices) Parameters shape Circle The shape to check against. triangleIndices List<int> All triangle indices that overlap the specified shape. Returns bool Return true if at least 1 overlap was found, otherwise return false. Does not return early. All triangle have to be checked. OverlapShape(Line) Find if any triangle in this collection overlaps the specified shape. public bool OverlapShape(Line shape) Parameters shape Line Returns bool Returns true after the first overlap is found. If no overlap is found, returns false. OverlapShape(Line, out List<int>?) Find all triangles in this collection that overlap the specified shape. public bool OverlapShape(Line shape, out List<int>? triangleIndices) Parameters shape Line The shape to check against. triangleIndices List<int> All triangle indices that overlap the specified shape. Returns bool Return true if at least 1 overlap was found, otherwise return false. Does not return early. All triangle have to be checked. OverlapShape(Polygon) Find if any triangle in this collection overlaps the specified shape. public bool OverlapShape(Polygon shape) Parameters shape Polygon Returns bool Returns true after the first overlap is found. If no overlap is found, returns false. OverlapShape(Polygon, out List<int>?) Find all triangles in this collection that overlap the specified shape. public bool OverlapShape(Polygon shape, out List<int>? triangleIndices) Parameters shape Polygon The shape to check against. triangleIndices List<int> All triangle indices that overlap the specified shape. Returns bool Return true if at least 1 overlap was found, otherwise return false. Does not return early. All triangle have to be checked. OverlapShape(Polyline) Find if any triangle in this collection overlaps the specified shape. public bool OverlapShape(Polyline shape) Parameters shape Polyline Returns bool Returns true after the first overlap is found. If no overlap is found, returns false. OverlapShape(Polyline, out List<int>?) Find all triangles in this collection that overlap the specified shape. public bool OverlapShape(Polyline shape, out List<int>? triangleIndices) Parameters shape Polyline The shape to check against. triangleIndices List<int> All triangle indices that overlap the specified shape. Returns bool Return true if at least 1 overlap was found, otherwise return false. Does not return early. All triangle have to be checked. OverlapShape(Quad) Find if any triangle in this collection overlaps the specified shape. public bool OverlapShape(Quad shape) Parameters shape Quad Returns bool Returns true after the first overlap is found. If no overlap is found, returns false. OverlapShape(Quad, out List<int>?) Find all triangles in this collection that overlap the specified shape. public bool OverlapShape(Quad shape, out List<int>? triangleIndices) Parameters shape Quad The shape to check against. triangleIndices List<int> All triangle indices that overlap the specified shape. Returns bool Return true if at least 1 overlap was found, otherwise return false. Does not return early. All triangle have to be checked. OverlapShape(Ray) Find if any triangle in this collection overlaps the specified shape. public bool OverlapShape(Ray shape) Parameters shape Ray Returns bool Returns true after the first overlap is found. If no overlap is found, returns false. OverlapShape(Ray, out List<int>?) Find all triangles in this collection that overlap the specified shape. public bool OverlapShape(Ray shape, out List<int>? triangleIndices) Parameters shape Ray The shape to check against. triangleIndices List<int> All triangle indices that overlap the specified shape. Returns bool Return true if at least 1 overlap was found, otherwise return false. Does not return early. All triangle have to be checked. OverlapShape(Rect) Find if any triangle in this collection overlaps the specified shape. public bool OverlapShape(Rect shape) Parameters shape Rect Returns bool Returns true after the first overlap is found. If no overlap is found, returns false. OverlapShape(Rect, out List<int>?) Find all triangles in this collection that overlap the specified shape. public bool OverlapShape(Rect shape, out List<int>? triangleIndices) Parameters shape Rect The shape to check against. triangleIndices List<int> All triangle indices that overlap the specified shape. Returns bool Return true if at least 1 overlap was found, otherwise return false. Does not return early. All triangle have to be checked. OverlapShape(Segment) Find if any triangle in this collection overlaps the specified shape. public bool OverlapShape(Segment shape) Parameters shape Segment Returns bool Returns true after the first overlap is found. If no overlap is found, returns false. OverlapShape(Segment, out List<int>?) Find all triangles in this collection that overlap the specified shape. public bool OverlapShape(Segment shape, out List<int>? triangleIndices) Parameters shape Segment The shape to check against. triangleIndices List<int> All triangle indices that overlap the specified shape. Returns bool Return true if at least 1 overlap was found, otherwise return false. Does not return early. All triangle have to be checked. OverlapShape(Segments) Find if any triangle in this collection overlaps the specified shape. public bool OverlapShape(Segments segments) Parameters segments Segments Returns bool Returns true after the first overlap is found. If no overlap is found, returns false. OverlapShape(Segments, out List<int>?) Find all triangles in this collection that overlap the specified segments. public bool OverlapShape(Segments segments, out List<int>? triangleIndices) Parameters segments Segments The segments to check against. triangleIndices List<int> All triangle indices that overlap the specified segments. Returns bool Return true if at least 1 overlap was found, otherwise return false. Does not return early. All triangle have to be checked. OverlapShape(Triangle) Find if any triangle in this collection overlaps the specified shape. public bool OverlapShape(Triangle shape) Parameters shape Triangle Returns bool Returns true after the first overlap is found. If no overlap is found, returns false. OverlapShape(Triangle, out List<int>?) Find all triangles in this collection that overlap the specified shape. public bool OverlapShape(Triangle shape, out List<int>? triangleIndices) Parameters shape Triangle The shape to check against. triangleIndices List<int> All triangle indices that overlap the specified shape. Returns bool Return true if at least 1 overlap was found, otherwise return false. Does not return early. All triangle have to be checked. Remove(float) Remove all triangles with an area less than the threshold. If threshold is smaller or equal to 0, nothing happens. public int Remove(float areaThreshold) Parameters areaThreshold float Returns int ScaleSize(Size) public void ScaleSize(Size scale) Parameters scale Size ScaleSize(Size, Vector2) public void ScaleSize(Size scale, Vector2 origin) Parameters scale Size origin Vector2 ScaleSize(float) public void ScaleSize(float scale) Parameters scale float ScaleSize(float, Vector2) public void ScaleSize(float scale, Vector2 origin) Parameters scale float origin Vector2 ScaleSizeCopy(Size) public Triangulation ScaleSizeCopy(Size scale) Parameters scale Size Returns Triangulation ScaleSizeCopy(Size, Vector2) public Triangulation ScaleSizeCopy(Size scale, Vector2 origin) Parameters scale Size origin Vector2 Returns Triangulation ScaleSizeCopy(float) public Triangulation ScaleSizeCopy(float scale) Parameters scale float Returns Triangulation ScaleSizeCopy(float, Vector2) public Triangulation ScaleSizeCopy(float scale, Vector2 origin) Parameters scale float origin Vector2 Returns Triangulation SetPosition(Vector2, Vector2) public void SetPosition(Vector2 position, Vector2 origin) Parameters position Vector2 origin Vector2 SetPositionCopy(Vector2, Vector2) public Triangulation SetPositionCopy(Vector2 position, Vector2 origin) Parameters position Vector2 origin Vector2 Returns Triangulation SetRotation(float) public void SetRotation(float rad) Parameters rad float SetRotation(float, Vector2) public void SetRotation(float rad, Vector2 origin) Parameters rad float origin Vector2 SetRotationCopy(float) public Triangulation SetRotationCopy(float rad) Parameters rad float Returns Triangulation SetRotationCopy(float, Vector2) public Triangulation SetRotationCopy(float rad, Vector2 origin) Parameters rad float origin Vector2 Returns Triangulation SetSize(float) public void SetSize(float size) Parameters size float SetSize(float, Vector2) public void SetSize(float size, Vector2 origin) Parameters size float origin Vector2 SetSizeCopy(float) public Triangulation SetSizeCopy(float size) Parameters size float Returns Triangulation SetSizeCopy(float, Vector2) public Triangulation SetSizeCopy(float size, Vector2 origin) Parameters size float origin Vector2 Returns Triangulation SetTransform(Transform2D, Vector2) public void SetTransform(Transform2D transform, Vector2 origin) Parameters transform Transform2D origin Vector2 SetTransformCopy(Transform2D, Vector2) public Triangulation SetTransformCopy(Transform2D transform, Vector2 origin) Parameters transform Transform2D origin Vector2 Returns Triangulation Subdivide(float) Subdivide the triangulation until all triangles are smaller than min area. public Triangulation Subdivide(float minArea) Parameters minArea float A triangle will always be subdivided if the area is bigger than min area.s Returns Triangulation Subdivide(float, float, float, float) Subdivide the triangles further based on the parameters. public Triangulation Subdivide(float minArea, float maxArea, float keepChance = 0.5, float narrowValue = 0.2) Parameters minArea float Triangles with an area smaller than min area will never be subdivided. maxArea float Triangles with an area bigger than maxArea will always be subdivided. keepChance float The chance to keep a triangle and not subdivide it. narrowValue float Triangles that are considered narrow will not be subdivided. Returns Triangulation"
  },
  "api/ShapeEngine.Core.Shapes.html": {
    "href": "api/ShapeEngine.Core.Shapes.html",
    "title": "Namespace ShapeEngine.Core.Shapes | ShapeEngine",
    "summary": "Namespace ShapeEngine.Core.Shapes Classes CircleSector CircleShape FractureHelper FractureInfo Points PolyLineShape PolyShape Polygon Points shoud be in CCW order. Polyline QuadShape RectShape SegmentShape Segments Shape ShapeContainer ShapeList<T> TriangleShape Triangulation Structs Circle Line Quad Points should be in CCW order (A -> B -> C -> D) Ray Rect Rect.Margins Segment Triangle Class that represents a triangle by holding three points. Points a, b, c should be in ccw order!"
  },
  "api/ShapeEngine.Core.SlowMotion.html": {
    "href": "api/ShapeEngine.Core.SlowMotion.html",
    "title": "Class SlowMotion | ShapeEngine",
    "summary": "Class SlowMotion Namespace ShapeEngine.Core Assembly ShapeEngine.dll public sealed class SlowMotion Inheritance object SlowMotion Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields TagDefault public const uint TagDefault = 0 Field Value uint Methods Add(float, float) public uint Add(float factor, float duration) Parameters factor float duration float Returns uint Add(float, float, uint) public uint Add(float factor, float duration, uint tag) Parameters factor float duration float tag uint Returns uint ApplyState(SlowMotionState) public void ApplyState(SlowMotionState state) Parameters state SlowMotionState Clear() public SlowMotionState Clear() Returns SlowMotionState Clear(params uint[]) public SlowMotionState Clear(params uint[] tags) Parameters tags uint[] Returns SlowMotionState GetFactor(uint) public float GetFactor(uint tag) Parameters tag uint Returns float GetFactor(params uint[]) public float GetFactor(params uint[] tags) Parameters tags uint[] Returns float HasTag(uint) public bool HasTag(uint tag) Parameters tag uint Returns bool Remove(uint) public bool Remove(uint id) Parameters id uint Returns bool Remove(uint, uint) public void Remove(uint id, uint tag) Parameters id uint tag uint RemoveTag(uint) public bool RemoveTag(uint tag) Parameters tag uint Returns bool Update(float) public void Update(float dt) Parameters dt float"
  },
  "api/ShapeEngine.Core.SlowMotionState.html": {
    "href": "api/ShapeEngine.Core.SlowMotionState.html",
    "title": "Class SlowMotionState | ShapeEngine",
    "summary": "Class SlowMotionState Namespace ShapeEngine.Core Assembly ShapeEngine.dll public sealed class SlowMotionState Inheritance object SlowMotionState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ShapeEngine.Core.SpawnArea.html": {
    "href": "api/ShapeEngine.Core.SpawnArea.html",
    "title": "Class SpawnArea | ShapeEngine",
    "summary": "Class SpawnArea Namespace ShapeEngine.Core Assembly ShapeEngine.dll Provides a simple area for managing adding/removing, updating, and drawing of area objects. Does not provide a collision system. public class SpawnArea : IUpdateable, IDrawable, IBounds Inheritance object SpawnArea Implements IUpdateable IDrawable IBounds Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SpawnArea(Rect) public SpawnArea(Rect bounds) Parameters bounds Rect SpawnArea(float, float, float, float) public SpawnArea(float x, float y, float w, float h) Parameters x float y float w float h float Fields NewLayerStartCapacity public int NewLayerStartCapacity Field Value int Properties Bounds public Rect Bounds { get; protected set; } Property Value Rect Count public int Count { get; } Property Value int ParallaxePosition public Vector2 ParallaxePosition { get; set; } Property Value Vector2 Methods AddGameObject(GameObject) public void AddGameObject(GameObject gameObject) Parameters gameObject GameObject AddGameObjects(params GameObject[]) public void AddGameObjects(params GameObject[] areaObjects) Parameters areaObjects GameObject[] AddGameObjects(IEnumerable<GameObject>) public void AddGameObjects(IEnumerable<GameObject> areaObjects) Parameters areaObjects IEnumerable<GameObject> Clear() public virtual void Clear() ClearArea(Rect, BitFlag) public void ClearArea(Rect area, BitFlag areaLayerMask) Parameters area Rect areaLayerMask BitFlag ClearLayer(uint) public virtual void ClearLayer(uint layer) Parameters layer uint Close() public virtual void Close() DrawDebug(ColorRgba, ColorRgba, ColorRgba) public virtual void DrawDebug(ColorRgba bounds, ColorRgba border, ColorRgba fill) Parameters bounds ColorRgba border ColorRgba fill ColorRgba DrawGame(ScreenInfo) Draw the game here. Is affected by screen shaders and the camera. public virtual void DrawGame(ScreenInfo game) Parameters game ScreenInfo DrawGameUI(ScreenInfo) Draw to the game ui here. Is affected by screen shaders but NOT by the camera. public virtual void DrawGameUI(ScreenInfo gameUi) Parameters gameUi ScreenInfo FixedUpdate(GameTime, ScreenInfo, ScreenInfo, ScreenInfo) Only called when fixed framerate is enabled. Called in fixed interval. public virtual void FixedUpdate(GameTime fixedTime, ScreenInfo game, ScreenInfo gameUi, ScreenInfo ui) Parameters fixedTime GameTime game ScreenInfo gameUi ScreenInfo ui ScreenInfo GameObjectWasAdded(GameObject) protected virtual void GameObjectWasAdded(GameObject obj) Parameters obj GameObject GameObjectWasRemoved(GameObject) protected virtual void GameObjectWasRemoved(GameObject obj) Parameters obj GameObject GetAllGameObjects() public List<GameObject>? GetAllGameObjects() Returns List<GameObject> GetAllGameObjects(ref List<GameObject>) public void GetAllGameObjects(ref List<GameObject> result) Parameters result List<GameObject> GetAllGameObjects(Predicate<GameObject>) public List<GameObject>? GetAllGameObjects(Predicate<GameObject> match) Parameters match Predicate<GameObject> Returns List<GameObject> GetAllGameObjects(Predicate<GameObject>, ref List<GameObject>) public void GetAllGameObjects(Predicate<GameObject> match, ref List<GameObject> result) Parameters match Predicate<GameObject> result List<GameObject> GetGameObjects(BitFlag, ref List<GameObject>) public void GetGameObjects(BitFlag layerMask, ref List<GameObject> result) Parameters layerMask BitFlag result List<GameObject> GetGameObjects(BitFlag, Predicate<GameObject>, ref List<GameObject>) public void GetGameObjects(BitFlag layerMask, Predicate<GameObject> match, ref List<GameObject> result) Parameters layerMask BitFlag match Predicate<GameObject> result List<GameObject> GetGameObjects(uint, Predicate<GameObject>) public List<GameObject>? GetGameObjects(uint layer, Predicate<GameObject> match) Parameters layer uint match Predicate<GameObject> Returns List<GameObject> GetGameObjects(uint, Predicate<GameObject>, ref List<GameObject>) public void GetGameObjects(uint layer, Predicate<GameObject> match, ref List<GameObject> result) Parameters layer uint match Predicate<GameObject> result List<GameObject> HasLayer(uint) public bool HasLayer(uint layer) Parameters layer uint Returns bool InterpolateFixedUpdate(GameTime, ScreenInfo, ScreenInfo, ScreenInfo, float) Only called when fixed framerate is enabled. Called every frame after fixed update calls. public virtual void InterpolateFixedUpdate(GameTime time, ScreenInfo game, ScreenInfo gameUi, ScreenInfo ui, float f) Parameters time GameTime game ScreenInfo gameUi ScreenInfo ui ScreenInfo f float PreFixedUpdate(GameTime, ScreenInfo, ScreenInfo, ScreenInfo) public virtual void PreFixedUpdate(GameTime time, ScreenInfo game, ScreenInfo gameUi, ScreenInfo ui) Parameters time GameTime game ScreenInfo gameUi ScreenInfo ui ScreenInfo RemoveGameObject(GameObject) public bool RemoveGameObject(GameObject gameObject) Parameters gameObject GameObject Returns bool RemoveGameObjects(params GameObject[]) public void RemoveGameObjects(params GameObject[] areaObjects) Parameters areaObjects GameObject[] RemoveGameObjects(BitFlag, ref List<GameObject>) public void RemoveGameObjects(BitFlag layerMask, ref List<GameObject> result) Parameters layerMask BitFlag result List<GameObject> RemoveGameObjects(BitFlag, Predicate<GameObject>, ref List<GameObject>) public void RemoveGameObjects(BitFlag layerMask, Predicate<GameObject> match, ref List<GameObject> result) Parameters layerMask BitFlag match Predicate<GameObject> result List<GameObject> RemoveGameObjects(IEnumerable<GameObject>) public void RemoveGameObjects(IEnumerable<GameObject> areaObjects) Parameters areaObjects IEnumerable<GameObject> RemoveGameObjects(Predicate<GameObject>) public void RemoveGameObjects(Predicate<GameObject> match) Parameters match Predicate<GameObject> RemoveGameObjects(uint, Predicate<GameObject>, ref List<GameObject>) public void RemoveGameObjects(uint layer, Predicate<GameObject> match, ref List<GameObject> result) Parameters layer uint match Predicate<GameObject> result List<GameObject> ResizeBounds(Rect) public virtual void ResizeBounds(Rect newBounds) Parameters newBounds Rect Start() public virtual void Start() Update(GameTime, ScreenInfo, ScreenInfo, ScreenInfo) Called every frame. Called before FixedUpdate if fixed framerate is enabled. public virtual void Update(GameTime time, ScreenInfo game, ScreenInfo gameUi, ScreenInfo ui) Parameters time GameTime game ScreenInfo gameUi ScreenInfo ui ScreenInfo Events OnGameObjectAdded public event Action<GameObject>? OnGameObjectAdded Event Type Action<GameObject> OnGameObjectRemoved public event Action<GameObject>? OnGameObjectRemoved Event Type Action<GameObject>"
  },
  "api/ShapeEngine.Core.Structs.AnchorPoint.html": {
    "href": "api/ShapeEngine.Core.Structs.AnchorPoint.html",
    "title": "Struct AnchorPoint | ShapeEngine",
    "summary": "Struct AnchorPoint Namespace ShapeEngine.Core.Structs Assembly ShapeEngine.dll Used for ui anchor points and rect alignments. 0, 0 is top left, 1, 1 is bottom right. public readonly struct AnchorPoint : IEquatable<AnchorPoint> Implements IEquatable<AnchorPoint> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors AnchorPoint() public AnchorPoint() AnchorPoint(Vector2) public AnchorPoint(Vector2 v) Parameters v Vector2 AnchorPoint(float) public AnchorPoint(float v) Parameters v float AnchorPoint(float, float) Used for ui anchor points and rect alignments. 0, 0 is top left, 1, 1 is bottom right. public AnchorPoint(float x, float y) Parameters x float Range 0 - 1. 0 is left, 0.5 is center, 1 is right. y float Range 0 - 1. 0 is top, 0.5 is center, 1 is bottom. Fields BottomCenter public static AnchorPoint BottomCenter Field Value AnchorPoint BottomLeft public static AnchorPoint BottomLeft Field Value AnchorPoint BottomRight public static AnchorPoint BottomRight Field Value AnchorPoint Center public static AnchorPoint Center Field Value AnchorPoint Left public static AnchorPoint Left Field Value AnchorPoint One public static AnchorPoint One Field Value AnchorPoint Right public static AnchorPoint Right Field Value AnchorPoint TopCenter public static AnchorPoint TopCenter Field Value AnchorPoint TopLeft public static AnchorPoint TopLeft Field Value AnchorPoint TopRight public static AnchorPoint TopRight Field Value AnchorPoint X public readonly float X Field Value float Y public readonly float Y Field Value float Zero public static AnchorPoint Zero Field Value AnchorPoint Methods ChangeX(float) public AnchorPoint ChangeX(float amount) Parameters amount float Returns AnchorPoint ChangeY(float) public AnchorPoint ChangeY(float amount) Parameters amount float Returns AnchorPoint Equals(AnchorPoint) Indicates whether the current object is equal to another object of the same type. public bool Equals(AnchorPoint other) Parameters other AnchorPoint An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. Flip() public AnchorPoint Flip() Returns AnchorPoint GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. GetKeypadAnchorPosition(int) Returns a vector2 between 0,0 and 1,1. 7 , 8 , 9 4 , 5 , 6 1 , 2 , 3 7 is top left and returns 0, 0 3 is bottom right and returns 1, 1 public static AnchorPoint GetKeypadAnchorPosition(int keypadNumber) Parameters keypadNumber int Returns AnchorPoint GetKeypadAnchorPositionReversed(int) Returns a vector2 between 0,0 and 1,1. 1 , 2 , 3 4 , 5 , 6 7 , 8 , 9 1 is top left and returns 0, 0 9 is bottom right and returns 1, 1 public static AnchorPoint GetKeypadAnchorPositionReversed(int keypadNumber) Parameters keypadNumber int Returns AnchorPoint Invert() public AnchorPoint Invert() Returns AnchorPoint InvertX() public AnchorPoint InvertX() Returns AnchorPoint InvertY() public AnchorPoint InvertY() Returns AnchorPoint Random() public AnchorPoint Random() Returns AnchorPoint Random(float) public AnchorPoint Random(float max) Parameters max float Returns AnchorPoint Random(float, float) public AnchorPoint Random(float min, float max) Parameters min float max float Returns AnchorPoint Random(float, float, float, float) public AnchorPoint Random(float minX, float maxX, float minY, float maxY) Parameters minX float maxX float minY float maxY float Returns AnchorPoint SetX(float) public AnchorPoint SetX(float x) Parameters x float Returns AnchorPoint SetY(float) public AnchorPoint SetY(float y) Parameters y float Returns AnchorPoint ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. ToVector2() public Vector2 ToVector2() Returns Vector2 Operators operator +(AnchorPoint, AnchorPoint) public static AnchorPoint operator +(AnchorPoint left, AnchorPoint right) Parameters left AnchorPoint right AnchorPoint Returns AnchorPoint operator +(AnchorPoint, Vector2) public static Vector2 operator +(AnchorPoint left, Vector2 right) Parameters left AnchorPoint right Vector2 Returns Vector2 operator +(AnchorPoint, float) public static AnchorPoint operator +(AnchorPoint left, float right) Parameters left AnchorPoint right float Returns AnchorPoint operator +(Vector2, AnchorPoint) public static Vector2 operator +(Vector2 left, AnchorPoint right) Parameters left Vector2 right AnchorPoint Returns Vector2 operator /(AnchorPoint, AnchorPoint) public static AnchorPoint operator /(AnchorPoint left, AnchorPoint right) Parameters left AnchorPoint right AnchorPoint Returns AnchorPoint operator /(AnchorPoint, Vector2) public static Vector2 operator /(AnchorPoint left, Vector2 right) Parameters left AnchorPoint right Vector2 Returns Vector2 operator /(AnchorPoint, float) public static AnchorPoint operator /(AnchorPoint left, float right) Parameters left AnchorPoint right float Returns AnchorPoint operator /(Vector2, AnchorPoint) public static Vector2 operator /(Vector2 left, AnchorPoint right) Parameters left Vector2 right AnchorPoint Returns Vector2 operator ==(AnchorPoint, AnchorPoint) public static bool operator ==(AnchorPoint left, AnchorPoint right) Parameters left AnchorPoint right AnchorPoint Returns bool operator !=(AnchorPoint, AnchorPoint) public static bool operator !=(AnchorPoint left, AnchorPoint right) Parameters left AnchorPoint right AnchorPoint Returns bool operator *(AnchorPoint, AnchorPoint) public static AnchorPoint operator *(AnchorPoint left, AnchorPoint right) Parameters left AnchorPoint right AnchorPoint Returns AnchorPoint operator *(AnchorPoint, Vector2) public static Vector2 operator *(AnchorPoint left, Vector2 right) Parameters left AnchorPoint right Vector2 Returns Vector2 operator *(AnchorPoint, float) public static AnchorPoint operator *(AnchorPoint left, float right) Parameters left AnchorPoint right float Returns AnchorPoint operator *(Vector2, AnchorPoint) public static Vector2 operator *(Vector2 left, AnchorPoint right) Parameters left Vector2 right AnchorPoint Returns Vector2 operator -(AnchorPoint, AnchorPoint) public static AnchorPoint operator -(AnchorPoint left, AnchorPoint right) Parameters left AnchorPoint right AnchorPoint Returns AnchorPoint operator -(AnchorPoint, Vector2) public static Vector2 operator -(AnchorPoint left, Vector2 right) Parameters left AnchorPoint right Vector2 Returns Vector2 operator -(AnchorPoint, float) public static AnchorPoint operator -(AnchorPoint left, float right) Parameters left AnchorPoint right float Returns AnchorPoint operator -(Vector2, AnchorPoint) public static Vector2 operator -(Vector2 left, AnchorPoint right) Parameters left Vector2 right AnchorPoint Returns Vector2"
  },
  "api/ShapeEngine.Core.Structs.BitFlag.html": {
    "href": "api/ShapeEngine.Core.Structs.BitFlag.html",
    "title": "Struct BitFlag | ShapeEngine",
    "summary": "Struct BitFlag Namespace ShapeEngine.Core.Structs Assembly ShapeEngine.dll public readonly struct BitFlag : IBitwiseOperators<BitFlag, BitFlag, BitFlag>, IBitwiseOperators<BitFlag, uint, BitFlag> Implements IBitwiseOperators<BitFlag, BitFlag, BitFlag> IBitwiseOperators<BitFlag, uint, BitFlag> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors BitFlag(uint) public BitFlag(uint value) Parameters value uint BitFlag(params uint[]) public BitFlag(params uint[] values) Parameters values uint[] Fields Flag public readonly uint Flag Field Value uint Properties Empty public static BitFlag Empty { get; } Property Value BitFlag EmptyUintFlag public static uint EmptyUintFlag { get; } Property Value uint NextFlag public static uint NextFlag { get; } Property Value uint NextFlagInt public static int NextFlagInt { get; } Property Value int Methods Add(BitFlag) public BitFlag Add(BitFlag value) Parameters value BitFlag Returns BitFlag Add(params BitFlag[]) public BitFlag Add(params BitFlag[] values) Parameters values BitFlag[] Returns BitFlag Add(uint) public BitFlag Add(uint value) Parameters value uint Returns BitFlag Add(params uint[]) public BitFlag Add(params uint[] values) Parameters values uint[] Returns BitFlag AddIntFlag(int, int) public static int AddIntFlag(int flag, int value) Parameters flag int value int Returns int AddIntFlag(int, params int[]) public static int AddIntFlag(int flag, params int[] values) Parameters flag int values int[] Returns int AddUintFlag(uint, uint) public static uint AddUintFlag(uint flag, uint value) Parameters flag uint value uint Returns uint AddUintFlag(uint, params uint[]) public static uint AddUintFlag(uint flag, params uint[] values) Parameters flag uint values uint[] Returns uint Clear() public static BitFlag Clear() Returns BitFlag EmptyIntFlag() public static int EmptyIntFlag() Returns int Get(uint) public static BitFlag Get(uint power) Parameters power uint Returns BitFlag GetFlagInt(int) public static int GetFlagInt(int power) Parameters power int Returns int GetFlagUint(uint) public static uint GetFlagUint(uint power) Parameters power uint Returns uint Has(BitFlag) public bool Has(BitFlag value) Parameters value BitFlag Returns bool Has(uint) public bool Has(uint value) Parameters value uint Returns bool HasIntFlag(int, int) public static bool HasIntFlag(int flag, int value) Parameters flag int value int Returns bool HasUintFlag(uint, uint) public static bool HasUintFlag(uint flag, uint value) Parameters flag uint value uint Returns bool IsEmpty() public bool IsEmpty() Returns bool Remove(BitFlag) public BitFlag Remove(BitFlag value) Parameters value BitFlag Returns BitFlag Remove(params BitFlag[]) public BitFlag Remove(params BitFlag[] values) Parameters values BitFlag[] Returns BitFlag Remove(uint) public BitFlag Remove(uint value) Parameters value uint Returns BitFlag Remove(params uint[]) public BitFlag Remove(params uint[] values) Parameters values uint[] Returns BitFlag RemoveIntFlag(int, int) public static int RemoveIntFlag(int flag, int value) Parameters flag int value int Returns int RemoveIntFlag(int, params int[]) public static int RemoveIntFlag(int flag, params int[] values) Parameters flag int values int[] Returns int RemoveUintFlag(uint, uint) public static uint RemoveUintFlag(uint flag, uint value) Parameters flag uint value uint Returns uint RemoveUintFlag(uint, params uint[]) public static uint RemoveUintFlag(uint flag, params uint[] values) Parameters flag uint values uint[] Returns uint Set(BitFlag) public BitFlag Set(BitFlag value) Parameters value BitFlag Returns BitFlag Set(uint) public BitFlag Set(uint value) Parameters value uint Returns BitFlag SetIntFlag(int, int) public static int SetIntFlag(int flag, int value) Parameters flag int value int Returns int SetUintFlag(uint, uint) public static uint SetUintFlag(uint flag, uint value) Parameters flag uint value uint Returns uint Operators operator &(BitFlag, BitFlag) Computes the bitwise-and of two values. public static BitFlag operator &(BitFlag left, BitFlag right) Parameters left BitFlag The value to and with right. right BitFlag The value to and with left. Returns BitFlag The bitwise-and of left and right. operator &(BitFlag, uint) Computes the bitwise-and of two values. public static BitFlag operator &(BitFlag left, uint right) Parameters left BitFlag The value to and with right. right uint The value to and with left. Returns BitFlag The bitwise-and of left and right. operator &(uint, BitFlag) public static BitFlag operator &(uint left, BitFlag right) Parameters left uint right BitFlag Returns BitFlag operator |(BitFlag, BitFlag) Computes the bitwise-or of two values. public static BitFlag operator |(BitFlag left, BitFlag right) Parameters left BitFlag The value to or with right. right BitFlag The value to or with left. Returns BitFlag The bitwise-or of left and right. operator |(BitFlag, uint) Computes the bitwise-or of two values. public static BitFlag operator |(BitFlag left, uint right) Parameters left BitFlag The value to or with right. right uint The value to or with left. Returns BitFlag The bitwise-or of left and right. operator |(uint, BitFlag) public static BitFlag operator |(uint left, BitFlag right) Parameters left uint right BitFlag Returns BitFlag operator ^(BitFlag, BitFlag) Computes the exclusive-or of two values. public static BitFlag operator ^(BitFlag left, BitFlag right) Parameters left BitFlag The value to xor with right. right BitFlag The value to xor with left. Returns BitFlag The exclusive-or of left and right. operator ^(BitFlag, uint) Computes the exclusive-or of two values. public static BitFlag operator ^(BitFlag left, uint right) Parameters left BitFlag The value to xor with right. right uint The value to xor with left. Returns BitFlag The exclusive-or of left and right. operator ^(uint, BitFlag) public static BitFlag operator ^(uint left, BitFlag right) Parameters left uint right BitFlag Returns BitFlag operator ~(BitFlag) Computes the ones-complement representation of a given value. public static BitFlag operator ~(BitFlag value) Parameters value BitFlag The value for which to compute the ones-complement. Returns BitFlag The ones-complement of value."
  },
  "api/ShapeEngine.Core.Structs.BoundsCollisionInfo.html": {
    "href": "api/ShapeEngine.Core.Structs.BoundsCollisionInfo.html",
    "title": "Struct BoundsCollisionInfo | ShapeEngine",
    "summary": "Struct BoundsCollisionInfo Namespace ShapeEngine.Core.Structs Assembly ShapeEngine.dll public readonly struct BoundsCollisionInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors BoundsCollisionInfo() public BoundsCollisionInfo() BoundsCollisionInfo(Vector2, CollisionPoint, CollisionPoint) public BoundsCollisionInfo(Vector2 safePosition, CollisionPoint horizontal, CollisionPoint vertical) Parameters safePosition Vector2 horizontal CollisionPoint vertical CollisionPoint Fields Horizontal The collision point where the object left the bounds on the horizontal plane (left to right). public readonly CollisionPoint Horizontal Field Value CollisionPoint SafePosition The closest position within the bounds. public readonly Vector2 SafePosition Field Value Vector2 Vertical The collision point where the object left the bounds on the vertical plane (top to bottom). public readonly CollisionPoint Vertical Field Value CollisionPoint Properties Valid public bool Valid { get; } Property Value bool Methods GetHorizontal(Vector2, CollisionPoint) public static BoundsCollisionInfo GetHorizontal(Vector2 safePosition, CollisionPoint horizontal) Parameters safePosition Vector2 horizontal CollisionPoint Returns BoundsCollisionInfo GetVertical(Vector2, CollisionPoint) public static BoundsCollisionInfo GetVertical(Vector2 safePosition, CollisionPoint vertical) Parameters safePosition Vector2 vertical CollisionPoint Returns BoundsCollisionInfo"
  },
  "api/ShapeEngine.Core.Structs.ClosestPointResult.html": {
    "href": "api/ShapeEngine.Core.Structs.ClosestPointResult.html",
    "title": "Struct ClosestPointResult | ShapeEngine",
    "summary": "Struct ClosestPointResult Namespace ShapeEngine.Core.Structs Assembly ShapeEngine.dll public readonly struct ClosestPointResult Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ClosestPointResult() public ClosestPointResult() ClosestPointResult(CollisionPoint, CollisionPoint, float, int, int) public ClosestPointResult(CollisionPoint self, CollisionPoint other, float distanceSquared, int segmentIndex = -1, int otherSegmentIndex = -1) Parameters self CollisionPoint other CollisionPoint distanceSquared float segmentIndex int otherSegmentIndex int Fields DistanceSquared public readonly float DistanceSquared Field Value float Other public readonly CollisionPoint Other Field Value CollisionPoint OtherSegmentIndex public readonly int OtherSegmentIndex Field Value int SegmentIndex public readonly int SegmentIndex Field Value int Self public readonly CollisionPoint Self Field Value CollisionPoint Properties Valid public bool Valid { get; } Property Value bool Methods IsCloser(ClosestPointResult) public bool IsCloser(ClosestPointResult other) Parameters other ClosestPointResult Returns bool IsCloser(float) public bool IsCloser(float distanceSquared) Parameters distanceSquared float Returns bool SetOtherSegmentIndex(int) public ClosestPointResult SetOtherSegmentIndex(int index) Parameters index int Returns ClosestPointResult SetSegmentIndex(int) public ClosestPointResult SetSegmentIndex(int index) Parameters index int Returns ClosestPointResult Switch() public ClosestPointResult Switch() Returns ClosestPointResult"
  },
  "api/ShapeEngine.Core.Structs.CollisionPoint.html": {
    "href": "api/ShapeEngine.Core.Structs.CollisionPoint.html",
    "title": "Struct CollisionPoint | ShapeEngine",
    "summary": "Struct CollisionPoint Namespace ShapeEngine.Core.Structs Assembly ShapeEngine.dll public readonly struct CollisionPoint : IEquatable<CollisionPoint> Implements IEquatable<CollisionPoint> Inherited Members ValueType.Equals(object) ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors CollisionPoint() public CollisionPoint() CollisionPoint(Vector2, Vector2) public CollisionPoint(Vector2 p, Vector2 n) Parameters p Vector2 n Vector2 Fields Normal public readonly Vector2 Normal Field Value Vector2 Point public readonly Vector2 Point Field Value Vector2 Properties Valid public bool Valid { get; } Property Value bool Methods Combine(CollisionPoint) public CollisionPoint Combine(CollisionPoint other) Parameters other CollisionPoint Returns CollisionPoint Combine(CollisionPoint, CollisionPoint) public static CollisionPoint Combine(CollisionPoint a, CollisionPoint b) Parameters a CollisionPoint b CollisionPoint Returns CollisionPoint Combine(params CollisionPoint[]) public static CollisionPoint Combine(params CollisionPoint[] points) Parameters points CollisionPoint[] Returns CollisionPoint Equals(CollisionPoint) Indicates whether the current object is equal to another object of the same type. public bool Equals(CollisionPoint other) Parameters other CollisionPoint An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. FlipNormal() public CollisionPoint FlipNormal() Returns CollisionPoint FlipNormal(Vector2) public CollisionPoint FlipNormal(Vector2 referencePoint) Parameters referencePoint Vector2 Returns CollisionPoint GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. GetNormalLine() public Line GetNormalLine() Returns Line GetNormalRay() public Ray GetNormalRay() Returns Ray GetNormalSegment(float) public Segment GetNormalSegment(float length) Parameters length float Returns Segment IsCloser(CollisionPoint, Vector2, float, out float) public static bool IsCloser(CollisionPoint p, Vector2 referencePoint, float curMinDisSquared, out float newMinDisSquared) Parameters p CollisionPoint referencePoint Vector2 curMinDisSquared float newMinDisSquared float Returns bool IsFurther(CollisionPoint, Vector2, float, out float) public static bool IsFurther(CollisionPoint p, Vector2 referencePoint, float curMaxDisSquared, out float newMaxDisSquared) Parameters p CollisionPoint referencePoint Vector2 curMaxDisSquared float newMaxDisSquared float Returns bool IsNormalFacing(Vector2) public bool IsNormalFacing(Vector2 referenceDir) Parameters referenceDir Vector2 Returns bool IsNormalFacingPoint(Vector2) public bool IsNormalFacingPoint(Vector2 referencePoint) Parameters referencePoint Vector2 Returns bool IsPointingAway(CollisionPoint, Vector2, float, out float) Returns true if the reference direction is pointing in the opposite direction as the normal of the collision point. Dot values smaller than 0 mean pointing away. public static bool IsPointingAway(CollisionPoint p, Vector2 referenceDir, float curDot, out float newDot) Parameters p CollisionPoint The collision point to check. referenceDir Vector2 The reference direction to check against. curDot float The cur minimum dot value from the previous collision points. If 0 return true automatically with the new dot. newDot float The new minimum dot value. If the normal from p is pointing more in the opposite direction of the reference direction than cur dot suggests. Returns bool IsPointingTowards(CollisionPoint, Vector2, float, out float) Returns true if the reference direction is pointing in the same direction as the normal of the collision point. Dot values greater than 0 mean pointing towards. public static bool IsPointingTowards(CollisionPoint p, Vector2 referenceDir, float curDot, out float newDot) Parameters p CollisionPoint The collision point to check. referenceDir Vector2 The reference direction to check against. curDot float The cur maximum dot value from the previous collision points. If 0 returns true automatically with the new dot. newDot float The new maximum dot value. If the normal of p is pointing more in the same direction of the reference direction than cur dot suggests. Returns bool RotateNormal(float) public CollisionPoint RotateNormal(float angleRad) Parameters angleRad float Returns CollisionPoint RotateNormalDeg(float) public CollisionPoint RotateNormalDeg(float angleDeg) Parameters angleDeg float Returns CollisionPoint SetNormal(Vector2) public CollisionPoint SetNormal(Vector2 newNormal) Parameters newNormal Vector2 Returns CollisionPoint SetPoint(Vector2) public CollisionPoint SetPoint(Vector2 newPoint) Parameters newPoint Vector2 Returns CollisionPoint Operators operator +(CollisionPoint, CollisionPoint) Add point a to point b, and add normal a to normal b and normailze it. public static CollisionPoint operator +(CollisionPoint a, CollisionPoint b) Parameters a CollisionPoint b CollisionPoint Returns CollisionPoint operator +(CollisionPoint, Vector2) Add vector b to point a, and keep normal unchanged. public static CollisionPoint operator +(CollisionPoint a, Vector2 b) Parameters a CollisionPoint b Vector2 Returns CollisionPoint operator /(CollisionPoint, Vector2) Divide point a by vector b, and keep normal unchanged. public static CollisionPoint operator /(CollisionPoint a, Vector2 b) Parameters a CollisionPoint b Vector2 Returns CollisionPoint operator /(CollisionPoint, float) Divide point a by scalar, and keep normal unchanged. public static CollisionPoint operator /(CollisionPoint a, float scalar) Parameters a CollisionPoint scalar float Returns CollisionPoint operator *(CollisionPoint, Vector2) Multiply point a by vector b, and keep normal unchanged. public static CollisionPoint operator *(CollisionPoint a, Vector2 b) Parameters a CollisionPoint b Vector2 Returns CollisionPoint operator *(CollisionPoint, float) Multiply point a by scalar, and keep normal unchanged. public static CollisionPoint operator *(CollisionPoint a, float scalar) Parameters a CollisionPoint scalar float Returns CollisionPoint operator -(CollisionPoint, CollisionPoint) Subtract point b from point a, and subtract normal b from normal a and normailze it. public static CollisionPoint operator -(CollisionPoint a, CollisionPoint b) Parameters a CollisionPoint b CollisionPoint Returns CollisionPoint operator -(CollisionPoint, Vector2) Subtract vector b from point a, and keep normal unchanged. public static CollisionPoint operator -(CollisionPoint a, Vector2 b) Parameters a CollisionPoint b Vector2 Returns CollisionPoint"
  },
  "api/ShapeEngine.Core.Structs.CollisionPointValidationResult.html": {
    "href": "api/ShapeEngine.Core.Structs.CollisionPointValidationResult.html",
    "title": "Struct CollisionPointValidationResult | ShapeEngine",
    "summary": "Struct CollisionPointValidationResult Namespace ShapeEngine.Core.Structs Assembly ShapeEngine.dll public readonly struct CollisionPointValidationResult Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors CollisionPointValidationResult() public CollisionPointValidationResult() CollisionPointValidationResult(CollisionPoint, CollisionPoint, CollisionPoint, CollisionPoint) public CollisionPointValidationResult(CollisionPoint combined, CollisionPoint closest, CollisionPoint furthest, CollisionPoint pointingTowards) Parameters combined CollisionPoint closest CollisionPoint furthest CollisionPoint pointingTowards CollisionPoint Fields Closest public readonly CollisionPoint Closest Field Value CollisionPoint Combined public readonly CollisionPoint Combined Field Value CollisionPoint Furthest public readonly CollisionPoint Furthest Field Value CollisionPoint PointingTowards public readonly CollisionPoint PointingTowards Field Value CollisionPoint"
  },
  "api/ShapeEngine.Core.Structs.Curve-1.html": {
    "href": "api/ShapeEngine.Core.Structs.Curve-1.html",
    "title": "Class Curve<T> | ShapeEngine",
    "summary": "Class Curve<T> Namespace ShapeEngine.Core.Structs Assembly ShapeEngine.dll public abstract class Curve<T> : SortedList<float, T>, IDictionary<float, T>, ICollection<KeyValuePair<float, T>>, IReadOnlyDictionary<float, T>, IReadOnlyCollection<KeyValuePair<float, T>>, IEnumerable<KeyValuePair<float, T>>, IDictionary, ICollection, IEnumerable Type Parameters T Inheritance object SortedList<float, T> Curve<T> Implements IDictionary<float, T> ICollection<KeyValuePair<float, T>> IReadOnlyDictionary<float, T> IReadOnlyCollection<KeyValuePair<float, T>> IEnumerable<KeyValuePair<float, T>> IDictionary ICollection IEnumerable Derived CurveColor CurveFloat CurveInt CurveVector2 Inherited Members SortedList<float, T>.Add(float, T) SortedList<float, T>.Clear() SortedList<float, T>.ContainsKey(float) SortedList<float, T>.ContainsValue(T) SortedList<float, T>.GetEnumerator() SortedList<float, T>.GetKeyAtIndex(int) SortedList<float, T>.GetValueAtIndex(int) SortedList<float, T>.IndexOfKey(float) SortedList<float, T>.IndexOfValue(T) SortedList<float, T>.Remove(float) SortedList<float, T>.RemoveAt(int) SortedList<float, T>.SetValueAtIndex(int, T) SortedList<float, T>.TrimExcess() SortedList<float, T>.TryGetValue(float, out T) SortedList<float, T>.Capacity SortedList<float, T>.Comparer SortedList<float, T>.Count SortedList<float, T>.this[float] SortedList<float, T>.Keys SortedList<float, T>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Curve(int) protected Curve(int capacity) Parameters capacity int Properties HasKeys public bool HasKeys { get; } Property Value bool Methods Add(float, T) public bool Add(float time, T key) Parameters time float key T Returns bool Add(params (float time, T key)[]) public int Add(params (float time, T key)[] keys) Parameters keys (float time, T key)[] Returns int GetDefaultValue() protected abstract T GetDefaultValue() Returns T GetIndex(float) public int GetIndex(float time) Parameters time float Returns int GetValue(float, out T) public bool GetValue(float time, out T value) Parameters time float value T Returns bool Interpolate(T, T, float) protected abstract T Interpolate(T a, T b, float time) Parameters a T b T time float Returns T Remove(float, float) public int Remove(float time, float tolerance) Parameters time float tolerance float Returns int Remove(T) public bool Remove(T value) Parameters value T Returns bool Remove(params T[]) public int Remove(params T[] values) Parameters values T[] Returns int RemoveTimeRange(float, float) public int RemoveTimeRange(float timeStart, float timeEnd) Parameters timeStart float timeEnd float Returns int Sample(float) public T Sample(float time) Parameters time float Returns T Sample(float, out T) public bool Sample(float time, out T value) Parameters time float value T Returns bool SampleMany(params float[]) public List<T>? SampleMany(params float[] times) Parameters times float[] Returns List<T>"
  },
  "api/ShapeEngine.Core.Structs.CurveColor.html": {
    "href": "api/ShapeEngine.Core.Structs.CurveColor.html",
    "title": "Class CurveColor | ShapeEngine",
    "summary": "Class CurveColor Namespace ShapeEngine.Core.Structs Assembly ShapeEngine.dll public class CurveColor : Curve<ColorRgba>, IDictionary<float, ColorRgba>, ICollection<KeyValuePair<float, ColorRgba>>, IReadOnlyDictionary<float, ColorRgba>, IReadOnlyCollection<KeyValuePair<float, ColorRgba>>, IEnumerable<KeyValuePair<float, ColorRgba>>, IDictionary, ICollection, IEnumerable Inheritance object SortedList<float, ColorRgba> Curve<ColorRgba> CurveColor Implements IDictionary<float, ColorRgba> ICollection<KeyValuePair<float, ColorRgba>> IReadOnlyDictionary<float, ColorRgba> IReadOnlyCollection<KeyValuePair<float, ColorRgba>> IEnumerable<KeyValuePair<float, ColorRgba>> IDictionary ICollection IEnumerable Inherited Members Curve<ColorRgba>.HasKeys Curve<ColorRgba>.Add(float, ColorRgba) Curve<ColorRgba>.Add(params (float time, ColorRgba key)[]) Curve<ColorRgba>.GetIndex(float) Curve<ColorRgba>.GetValue(float, out ColorRgba) Curve<ColorRgba>.RemoveTimeRange(float, float) Curve<ColorRgba>.Remove(float, float) Curve<ColorRgba>.Remove(ColorRgba) Curve<ColorRgba>.Remove(params ColorRgba[]) Curve<ColorRgba>.Sample(float, out ColorRgba) Curve<ColorRgba>.Sample(float) Curve<ColorRgba>.SampleMany(params float[]) SortedList<float, ColorRgba>.Add(float, ColorRgba) SortedList<float, ColorRgba>.Clear() SortedList<float, ColorRgba>.ContainsKey(float) SortedList<float, ColorRgba>.ContainsValue(ColorRgba) SortedList<float, ColorRgba>.GetEnumerator() SortedList<float, ColorRgba>.GetKeyAtIndex(int) SortedList<float, ColorRgba>.GetValueAtIndex(int) SortedList<float, ColorRgba>.IndexOfKey(float) SortedList<float, ColorRgba>.IndexOfValue(ColorRgba) SortedList<float, ColorRgba>.Remove(float) SortedList<float, ColorRgba>.RemoveAt(int) SortedList<float, ColorRgba>.SetValueAtIndex(int, ColorRgba) SortedList<float, ColorRgba>.TrimExcess() SortedList<float, ColorRgba>.TryGetValue(float, out ColorRgba) SortedList<float, ColorRgba>.Capacity SortedList<float, ColorRgba>.Comparer SortedList<float, ColorRgba>.Count SortedList<float, ColorRgba>.this[float] SortedList<float, ColorRgba>.Keys SortedList<float, ColorRgba>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CurveColor(int) public CurveColor(int capacity) Parameters capacity int Methods GetDefaultValue() protected override ColorRgba GetDefaultValue() Returns ColorRgba Interpolate(ColorRgba, ColorRgba, float) protected override ColorRgba Interpolate(ColorRgba a, ColorRgba b, float time) Parameters a ColorRgba b ColorRgba time float Returns ColorRgba"
  },
  "api/ShapeEngine.Core.Structs.CurveFloat.html": {
    "href": "api/ShapeEngine.Core.Structs.CurveFloat.html",
    "title": "Class CurveFloat | ShapeEngine",
    "summary": "Class CurveFloat Namespace ShapeEngine.Core.Structs Assembly ShapeEngine.dll public class CurveFloat : Curve<float>, IDictionary<float, float>, ICollection<KeyValuePair<float, float>>, IReadOnlyDictionary<float, float>, IReadOnlyCollection<KeyValuePair<float, float>>, IEnumerable<KeyValuePair<float, float>>, IDictionary, ICollection, IEnumerable Inheritance object SortedList<float, float> Curve<float> CurveFloat Implements IDictionary<float, float> ICollection<KeyValuePair<float, float>> IReadOnlyDictionary<float, float> IReadOnlyCollection<KeyValuePair<float, float>> IEnumerable<KeyValuePair<float, float>> IDictionary ICollection IEnumerable Inherited Members Curve<float>.HasKeys Curve<float>.Add(float, float) Curve<float>.Add(params (float time, float key)[]) Curve<float>.GetIndex(float) Curve<float>.GetValue(float, out float) Curve<float>.RemoveTimeRange(float, float) Curve<float>.Remove(float, float) Curve<float>.Remove(float) Curve<float>.Remove(params float[]) Curve<float>.Sample(float, out float) Curve<float>.Sample(float) Curve<float>.SampleMany(params float[]) SortedList<float, float>.Add(float, float) SortedList<float, float>.Clear() SortedList<float, float>.ContainsKey(float) SortedList<float, float>.ContainsValue(float) SortedList<float, float>.GetEnumerator() SortedList<float, float>.GetKeyAtIndex(int) SortedList<float, float>.GetValueAtIndex(int) SortedList<float, float>.IndexOfKey(float) SortedList<float, float>.IndexOfValue(float) SortedList<float, float>.Remove(float) SortedList<float, float>.RemoveAt(int) SortedList<float, float>.SetValueAtIndex(int, float) SortedList<float, float>.TrimExcess() SortedList<float, float>.TryGetValue(float, out float) SortedList<float, float>.Capacity SortedList<float, float>.Comparer SortedList<float, float>.Count SortedList<float, float>.this[float] SortedList<float, float>.Keys SortedList<float, float>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CurveFloat(int) public CurveFloat(int capacity) Parameters capacity int Methods GetDefaultValue() protected override float GetDefaultValue() Returns float Interpolate(float, float, float) protected override float Interpolate(float a, float b, float time) Parameters a float b float time float Returns float"
  },
  "api/ShapeEngine.Core.Structs.CurveInt.html": {
    "href": "api/ShapeEngine.Core.Structs.CurveInt.html",
    "title": "Class CurveInt | ShapeEngine",
    "summary": "Class CurveInt Namespace ShapeEngine.Core.Structs Assembly ShapeEngine.dll public class CurveInt : Curve<int>, IDictionary<float, int>, ICollection<KeyValuePair<float, int>>, IReadOnlyDictionary<float, int>, IReadOnlyCollection<KeyValuePair<float, int>>, IEnumerable<KeyValuePair<float, int>>, IDictionary, ICollection, IEnumerable Inheritance object SortedList<float, int> Curve<int> CurveInt Implements IDictionary<float, int> ICollection<KeyValuePair<float, int>> IReadOnlyDictionary<float, int> IReadOnlyCollection<KeyValuePair<float, int>> IEnumerable<KeyValuePair<float, int>> IDictionary ICollection IEnumerable Inherited Members Curve<int>.HasKeys Curve<int>.Add(float, int) Curve<int>.Add(params (float time, int key)[]) Curve<int>.GetIndex(float) Curve<int>.GetValue(float, out int) Curve<int>.RemoveTimeRange(float, float) Curve<int>.Remove(float, float) Curve<int>.Remove(int) Curve<int>.Remove(params int[]) Curve<int>.Sample(float, out int) Curve<int>.Sample(float) Curve<int>.SampleMany(params float[]) SortedList<float, int>.Add(float, int) SortedList<float, int>.Clear() SortedList<float, int>.ContainsKey(float) SortedList<float, int>.ContainsValue(int) SortedList<float, int>.GetEnumerator() SortedList<float, int>.GetKeyAtIndex(int) SortedList<float, int>.GetValueAtIndex(int) SortedList<float, int>.IndexOfKey(float) SortedList<float, int>.IndexOfValue(int) SortedList<float, int>.Remove(float) SortedList<float, int>.RemoveAt(int) SortedList<float, int>.SetValueAtIndex(int, int) SortedList<float, int>.TrimExcess() SortedList<float, int>.TryGetValue(float, out int) SortedList<float, int>.Capacity SortedList<float, int>.Comparer SortedList<float, int>.Count SortedList<float, int>.this[float] SortedList<float, int>.Keys SortedList<float, int>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CurveInt(int) public CurveInt(int capacity) Parameters capacity int Methods GetDefaultValue() protected override int GetDefaultValue() Returns int Interpolate(int, int, float) protected override int Interpolate(int a, int b, float time) Parameters a int b int time float Returns int"
  },
  "api/ShapeEngine.Core.Structs.CurveVector2.html": {
    "href": "api/ShapeEngine.Core.Structs.CurveVector2.html",
    "title": "Class CurveVector2 | ShapeEngine",
    "summary": "Class CurveVector2 Namespace ShapeEngine.Core.Structs Assembly ShapeEngine.dll public class CurveVector2 : Curve<Vector2>, IDictionary<float, Vector2>, ICollection<KeyValuePair<float, Vector2>>, IReadOnlyDictionary<float, Vector2>, IReadOnlyCollection<KeyValuePair<float, Vector2>>, IEnumerable<KeyValuePair<float, Vector2>>, IDictionary, ICollection, IEnumerable Inheritance object SortedList<float, Vector2> Curve<Vector2> CurveVector2 Implements IDictionary<float, Vector2> ICollection<KeyValuePair<float, Vector2>> IReadOnlyDictionary<float, Vector2> IReadOnlyCollection<KeyValuePair<float, Vector2>> IEnumerable<KeyValuePair<float, Vector2>> IDictionary ICollection IEnumerable Inherited Members Curve<Vector2>.HasKeys Curve<Vector2>.Add(float, Vector2) Curve<Vector2>.Add(params (float time, Vector2 key)[]) Curve<Vector2>.GetIndex(float) Curve<Vector2>.GetValue(float, out Vector2) Curve<Vector2>.RemoveTimeRange(float, float) Curve<Vector2>.Remove(float, float) Curve<Vector2>.Remove(Vector2) Curve<Vector2>.Remove(params Vector2[]) Curve<Vector2>.Sample(float, out Vector2) Curve<Vector2>.Sample(float) Curve<Vector2>.SampleMany(params float[]) SortedList<float, Vector2>.Add(float, Vector2) SortedList<float, Vector2>.Clear() SortedList<float, Vector2>.ContainsKey(float) SortedList<float, Vector2>.ContainsValue(Vector2) SortedList<float, Vector2>.GetEnumerator() SortedList<float, Vector2>.GetKeyAtIndex(int) SortedList<float, Vector2>.GetValueAtIndex(int) SortedList<float, Vector2>.IndexOfKey(float) SortedList<float, Vector2>.IndexOfValue(Vector2) SortedList<float, Vector2>.Remove(float) SortedList<float, Vector2>.RemoveAt(int) SortedList<float, Vector2>.SetValueAtIndex(int, Vector2) SortedList<float, Vector2>.TrimExcess() SortedList<float, Vector2>.TryGetValue(float, out Vector2) SortedList<float, Vector2>.Capacity SortedList<float, Vector2>.Comparer SortedList<float, Vector2>.Count SortedList<float, Vector2>.this[float] SortedList<float, Vector2>.Keys SortedList<float, Vector2>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CurveVector2(int) public CurveVector2(int capacity) Parameters capacity int Methods GetDefaultValue() protected override Vector2 GetDefaultValue() Returns Vector2 Interpolate(Vector2, Vector2, float) protected override Vector2 Interpolate(Vector2 a, Vector2 b, float time) Parameters a Vector2 b Vector2 time float Returns Vector2"
  },
  "api/ShapeEngine.Core.Structs.DimensionConversionFactors.html": {
    "href": "api/ShapeEngine.Core.Structs.DimensionConversionFactors.html",
    "title": "Struct DimensionConversionFactors | ShapeEngine",
    "summary": "Struct DimensionConversionFactors Namespace ShapeEngine.Core.Structs Assembly ShapeEngine.dll public readonly struct DimensionConversionFactors Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors DimensionConversionFactors() public DimensionConversionFactors() DimensionConversionFactors(Dimensions, Dimensions) public DimensionConversionFactors(Dimensions from, Dimensions to) Parameters from Dimensions to Dimensions Fields AreaFactor public readonly float AreaFactor Field Value float AreaSideFactor public readonly float AreaSideFactor Field Value float Factor public readonly Vector2 Factor Field Value Vector2 From public readonly Dimensions From Field Value Dimensions To public readonly Dimensions To Field Value Dimensions Valid public readonly bool Valid Field Value bool"
  },
  "api/ShapeEngine.Core.Structs.Dimensions.html": {
    "href": "api/ShapeEngine.Core.Structs.Dimensions.html",
    "title": "Struct Dimensions | ShapeEngine",
    "summary": "Struct Dimensions Namespace ShapeEngine.Core.Structs Assembly ShapeEngine.dll public readonly struct Dimensions : IEquatable<Dimensions>, IFormattable Implements IEquatable<Dimensions> IFormattable Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Dimensions() public Dimensions() Dimensions(int) public Dimensions(int value) Parameters value int Dimensions(int, int) public Dimensions(int width, int height) Parameters width int height int Dimensions(Vector2) public Dimensions(Vector2 v) Parameters v Vector2 Dimensions(float) public Dimensions(float value) Parameters value float Dimensions(float, float) public Dimensions(float width, float height) Parameters width float height float Fields Height public readonly int Height Field Value int Width public readonly int Width Field Value int Properties Area public float Area { get; } Property Value float MaxDimension public int MaxDimension { get; } Property Value int MinDimension public int MinDimension { get; } Property Value int RatioH public float RatioH { get; } Property Value float RatioW public float RatioW { get; } Property Value float Methods Abs(Dimensions) public static Dimensions Abs(Dimensions value) Parameters value Dimensions Returns Dimensions Clamp(Dimensions, Dimensions, Dimensions) public static Dimensions Clamp(Dimensions value1, Dimensions min, Dimensions max) Parameters value1 Dimensions min Dimensions max Dimensions Returns Dimensions Equals(Dimensions) Indicates whether the current object is equal to another object of the same type. public bool Equals(Dimensions other) Parameters other Dimensions An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetConversionFactors(Dimensions) public DimensionConversionFactors GetConversionFactors(Dimensions to) Parameters to Dimensions Returns DimensionConversionFactors GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. GetInvalidDimension() public static Dimensions GetInvalidDimension() Returns Dimensions IsValid() public bool IsValid() Returns bool Lerp(Dimensions, Dimensions, float) public static Dimensions Lerp(Dimensions value1, Dimensions value2, float amount) Parameters value1 Dimensions value2 Dimensions amount float Returns Dimensions MatchAspectRatio(Dimensions) public Dimensions MatchAspectRatio(Dimensions targetDimensions) Parameters targetDimensions Dimensions Returns Dimensions Max(Dimensions, Dimensions) public static Dimensions Max(Dimensions value1, Dimensions value2) Parameters value1 Dimensions value2 Dimensions Returns Dimensions Min(Dimensions, Dimensions) public static Dimensions Min(Dimensions value1, Dimensions value2) Parameters value1 Dimensions value2 Dimensions Returns Dimensions ScaleFactor(Dimensions) public Vector2 ScaleFactor(Dimensions to) Parameters to Dimensions Returns Vector2 ScaleFactorArea(Dimensions) public float ScaleFactorArea(Dimensions to) Parameters to Dimensions Returns float ScaleFactorAreaSide(Dimensions) public float ScaleFactorAreaSide(Dimensions to) Parameters to Dimensions Returns float ToSize() public Size ToSize() Returns Size ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. ToString(string?) public string ToString(string? format) Parameters format string Returns string ToString(string?, IFormatProvider?) Formats the value of the current instance using the specified format. public string ToString(string? format, IFormatProvider? formatProvider) Parameters format string The format to use. -or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the IFormattable implementation. formatProvider IFormatProvider The provider to use to format the value. -or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system. Returns string The value of the current instance in the specified format. ToVector2() public Vector2 ToVector2() Returns Vector2 Operators operator +(Dimensions, Dimensions) public static Dimensions operator +(Dimensions left, Dimensions right) Parameters left Dimensions right Dimensions Returns Dimensions operator +(Dimensions, int) public static Dimensions operator +(Dimensions left, int right) Parameters left Dimensions right int Returns Dimensions operator +(Dimensions, float) public static Dimensions operator +(Dimensions left, float right) Parameters left Dimensions right float Returns Dimensions operator /(Dimensions, Dimensions) public static Dimensions operator /(Dimensions left, Dimensions right) Parameters left Dimensions right Dimensions Returns Dimensions operator /(Dimensions, int) public static Dimensions operator /(Dimensions value1, int value2) Parameters value1 Dimensions value2 int Returns Dimensions operator /(Dimensions, float) public static Dimensions operator /(Dimensions value1, float value2) Parameters value1 Dimensions value2 float Returns Dimensions operator ==(Dimensions, Dimensions) public static bool operator ==(Dimensions left, Dimensions right) Parameters left Dimensions right Dimensions Returns bool operator !=(Dimensions, Dimensions) public static bool operator !=(Dimensions left, Dimensions right) Parameters left Dimensions right Dimensions Returns bool operator *(Dimensions, Dimensions) public static Dimensions operator *(Dimensions left, Dimensions right) Parameters left Dimensions right Dimensions Returns Dimensions operator *(Dimensions, float) public static Dimensions operator *(Dimensions left, float right) Parameters left Dimensions right float Returns Dimensions operator *(float, Dimensions) public static Dimensions operator *(float left, Dimensions right) Parameters left float right Dimensions Returns Dimensions operator -(Dimensions, Dimensions) public static Dimensions operator -(Dimensions left, Dimensions right) Parameters left Dimensions right Dimensions Returns Dimensions operator -(Dimensions, int) public static Dimensions operator -(Dimensions left, int right) Parameters left Dimensions right int Returns Dimensions operator -(Dimensions, float) public static Dimensions operator -(Dimensions left, float right) Parameters left Dimensions right float Returns Dimensions operator -(Dimensions) public static Dimensions operator -(Dimensions value) Parameters value Dimensions Returns Dimensions"
  },
  "api/ShapeEngine.Core.Structs.Direction.html": {
    "href": "api/ShapeEngine.Core.Structs.Direction.html",
    "title": "Struct Direction | ShapeEngine",
    "summary": "Struct Direction Namespace ShapeEngine.Core.Structs Assembly ShapeEngine.dll public readonly struct Direction : IEquatable<Direction> Implements IEquatable<Direction> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Direction() public Direction() Direction(int, int) public Direction(int hor, int vert) Parameters hor int vert int Direction(Vector2) public Direction(Vector2 dir) Parameters dir Vector2 Fields Horizontal public readonly int Horizontal Field Value int Vertical public readonly int Vertical Field Value int Properties Down public static Direction Down { get; } Property Value Direction DownLeft public static Direction DownLeft { get; } Property Value Direction DownRight public static Direction DownRight { get; } Property Value Direction Empty public static Direction Empty { get; } Property Value Direction IsDown public bool IsDown { get; } Property Value bool IsDownLeft public bool IsDownLeft { get; } Property Value bool IsDownRight public bool IsDownRight { get; } Property Value bool IsHorizontal public bool IsHorizontal { get; } Property Value bool IsLeft public bool IsLeft { get; } Property Value bool IsRight public bool IsRight { get; } Property Value bool IsUp public bool IsUp { get; } Property Value bool IsUpLeft public bool IsUpLeft { get; } Property Value bool IsUpRight public bool IsUpRight { get; } Property Value bool IsValid public bool IsValid { get; } Property Value bool IsVertical public bool IsVertical { get; } Property Value bool Left public static Direction Left { get; } Property Value Direction Right public static Direction Right { get; } Property Value Direction Signed public Direction Signed { get; } Property Value Direction Up public static Direction Up { get; } Property Value Direction UpLeft public static Direction UpLeft { get; } Property Value Direction UpRight public static Direction UpRight { get; } Property Value Direction Methods Equals(Direction) Indicates whether the current object is equal to another object of the same type. public bool Equals(Direction other) Parameters other Direction An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Invert() public Direction Invert() Returns Direction ToAlignement() public AnchorPoint ToAlignement() Returns AnchorPoint ToInvertedAlignement() Inverts the direction and then calculates the alignement public AnchorPoint ToInvertedAlignement() Returns AnchorPoint ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. ToVector2() public Vector2 ToVector2() Returns Vector2 Operators operator +(Direction, Direction) public static Direction operator +(Direction left, Direction right) Parameters left Direction right Direction Returns Direction operator +(Direction, int) public static Direction operator +(Direction left, int right) Parameters left Direction right int Returns Direction operator /(Direction, Direction) public static Direction operator /(Direction left, Direction right) Parameters left Direction right Direction Returns Direction operator /(Direction, int) public static Direction operator /(Direction left, int right) Parameters left Direction right int Returns Direction operator ==(Direction, Direction) public static bool operator ==(Direction left, Direction right) Parameters left Direction right Direction Returns bool operator !=(Direction, Direction) public static bool operator !=(Direction left, Direction right) Parameters left Direction right Direction Returns bool operator *(Direction, Direction) public static Direction operator *(Direction left, Direction right) Parameters left Direction right Direction Returns Direction operator *(Direction, int) public static Direction operator *(Direction left, int right) Parameters left Direction right int Returns Direction operator -(Direction, Direction) public static Direction operator -(Direction left, Direction right) Parameters left Direction right Direction Returns Direction operator -(Direction, int) public static Direction operator -(Direction left, int right) Parameters left Direction right int Returns Direction"
  },
  "api/ShapeEngine.Core.Structs.ExitCode.html": {
    "href": "api/ShapeEngine.Core.Structs.ExitCode.html",
    "title": "Struct ExitCode | ShapeEngine",
    "summary": "Struct ExitCode Namespace ShapeEngine.Core.Structs Assembly ShapeEngine.dll Returned by the Run() function in the GameLoop class. public readonly struct ExitCode Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ExitCode(bool) public ExitCode(bool restart) Parameters restart bool Fields Restart public readonly bool Restart Field Value bool"
  },
  "api/ShapeEngine.Core.Structs.GameSettings.html": {
    "href": "api/ShapeEngine.Core.Structs.GameSettings.html",
    "title": "Struct GameSettings | ShapeEngine",
    "summary": "Struct GameSettings Namespace ShapeEngine.Core.Structs Assembly ShapeEngine.dll public readonly struct GameSettings Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors GameSettings(Dimensions, int, TextureFilter, ShaderSupportType, bool) public GameSettings(Dimensions fixedDimensions, int fixedFramerate, TextureFilter textureFilter, ShaderSupportType shaderSupportType, bool nearestScaling = false) Parameters fixedDimensions Dimensions fixedFramerate int textureFilter TextureFilter shaderSupportType ShaderSupportType nearestScaling bool GameSettings(int, TextureFilter, ShaderSupportType) public GameSettings(int fixedFramerate, TextureFilter textureFilter, ShaderSupportType shaderSupportType) Parameters fixedFramerate int textureFilter TextureFilter shaderSupportType ShaderSupportType GameSettings(float, int, TextureFilter, ShaderSupportType) public GameSettings(float pixelationFactor, int fixedFramerate, TextureFilter textureFilter, ShaderSupportType shaderSupportType) Parameters pixelationFactor float fixedFramerate int textureFilter TextureFilter shaderSupportType ShaderSupportType Fields FixedDimensions public readonly Dimensions FixedDimensions Field Value Dimensions FixedFramerate public readonly int FixedFramerate Field Value int PixelationFactor public readonly float PixelationFactor Field Value float ScreenTextureMode public readonly ScreenTextureMode ScreenTextureMode Field Value ScreenTextureMode ShaderSupportType public readonly ShaderSupportType ShaderSupportType Field Value ShaderSupportType TextureFilter public readonly TextureFilter TextureFilter Field Value TextureFilter Properties FixedMode public static GameSettings FixedMode { get; } Property Value GameSettings FixedNearestMode public static GameSettings FixedNearestMode { get; } Property Value GameSettings PixelationMode public static GameSettings PixelationMode { get; } Property Value GameSettings StretchMode public static GameSettings StretchMode { get; } Property Value GameSettings"
  },
  "api/ShapeEngine.Core.Structs.GameTime.html": {
    "href": "api/ShapeEngine.Core.Structs.GameTime.html",
    "title": "Struct GameTime | ShapeEngine",
    "summary": "Struct GameTime Namespace ShapeEngine.Core.Structs Assembly ShapeEngine.dll public readonly struct GameTime Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors GameTime() public GameTime() GameTime(double, int, double) public GameTime(double totalSeconds, int totalFrames, double elapsedSeconds) Parameters totalSeconds double totalFrames int elapsedSeconds double Fields ElapsedSeconds Seconds since last frame public readonly double ElapsedSeconds Field Value double TotalFrames Frames since start of application public readonly int TotalFrames Field Value int TotalSeconds Seconds since start of application public readonly double TotalSeconds Field Value double Properties Delta Elapsed seconds in float instead of double. public float Delta { get; } Property Value float ElapsedMicroSeconds 1/1000000 of a seconds (1.000.000 (1 Million) micro seconds = 1 second) public double ElapsedMicroSeconds { get; } Property Value double ElapsedMilliSeconds 1/1000 of a seconds (1000 (1 Thousand) milli seconds = 1 second) public double ElapsedMilliSeconds { get; } Property Value double ElapsedNanoSeconds 1/1000000000 of a seconds (1.000.000.000 (1 Billion) nano seconds = 1 second) public double ElapsedNanoSeconds { get; } Property Value double Fps public int Fps { get; } Property Value int TotalDays public double TotalDays { get; } Property Value double TotalHours public double TotalHours { get; } Property Value double TotalMicroSeconds 1/1000000 of a seconds (1.000.000 (1 Million) micro seconds = 1 second) public double TotalMicroSeconds { get; } Property Value double TotalMilliSeconds 1/1000 of a seconds (1000 (1 Thousand) milli seconds = 1 second) public double TotalMilliSeconds { get; } Property Value double TotalMinutes public double TotalMinutes { get; } Property Value double TotalNanoSeconds 1/1000000000 of a seconds (1.000.000.000 (1 Billion) nano seconds = 1 second) public double TotalNanoSeconds { get; } Property Value double Methods Tick(double) public GameTime Tick(double dt) Parameters dt double Returns GameTime TickF(float) public GameTime TickF(float dt) Parameters dt float Returns GameTime ToDays(double) public static double ToDays(double seconds) Parameters seconds double Returns double ToHours(double) public static double ToHours(double seconds) Parameters seconds double Returns double ToMicroSeconds(double) 1/1000000 of a seconds (1.000.000 (1 Million) micro seconds = 1 second) public static double ToMicroSeconds(double seconds) Parameters seconds double Returns double ToMilliSeconds(double) 1/1000 of a seconds (1000 (1 Thousand) milli seconds = 1 second) public static double ToMilliSeconds(double seconds) Parameters seconds double Returns double ToMinutes(double) public static double ToMinutes(double seconds) Parameters seconds double Returns double ToNanoSeconds(double) 1/1000000000 of a seconds (1.000.000.000 (1 Billion) nano seconds = 1 second) public static double ToNanoSeconds(double seconds) Parameters seconds double Returns double"
  },
  "api/ShapeEngine.Core.Structs.GappedOutlineDrawingInfo.html": {
    "href": "api/ShapeEngine.Core.Structs.GappedOutlineDrawingInfo.html",
    "title": "Struct GappedOutlineDrawingInfo | ShapeEngine",
    "summary": "Struct GappedOutlineDrawingInfo Namespace ShapeEngine.Core.Structs Assembly ShapeEngine.dll Used for DrawGappedOutline functions. public readonly struct GappedOutlineDrawingInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors GappedOutlineDrawingInfo(int, float, float) public GappedOutlineDrawingInfo(int gaps, float startOffset = 0, float gapPerimeterPercentage = 0.5) Parameters gaps int The count of outline areas that are not drawn. The count of outline areas drawn always equals the count of gaps. startOffset float Value between 0 and 1 to change where the first part is drawn (useful for animating it). The offset value is wrapped between 0 and 1. 1.5 would result in 0.5. -0.2 would result in 0.8. gapPerimeterPercentage float How much of the total perimeter should be not drawn. 1 - gapPercentage equals the total amount of perimeter drawn. If 0 normal outline is drawn, if 1 nothing is drawn. Fields GapPerimeterPercentage public readonly float GapPerimeterPercentage Field Value float Gaps public readonly int Gaps Field Value int StartOffset public readonly float StartOffset Field Value float Properties IsValid public bool IsValid { get; } Property Value bool Methods ChangeGapPerimeterPercentage(float) public GappedOutlineDrawingInfo ChangeGapPerimeterPercentage(float newGapPerimeterPercentage) Parameters newGapPerimeterPercentage float Returns GappedOutlineDrawingInfo ChangeGaps(int) public GappedOutlineDrawingInfo ChangeGaps(int newGaps) Parameters newGaps int Returns GappedOutlineDrawingInfo ChangeStartOffset(float) public GappedOutlineDrawingInfo ChangeStartOffset(float newStartOffset) Parameters newStartOffset float Returns GappedOutlineDrawingInfo MoveStartOffset(float) public GappedOutlineDrawingInfo MoveStartOffset(float amount) Parameters amount float Returns GappedOutlineDrawingInfo"
  },
  "api/ShapeEngine.Core.Structs.Grid.Coordinates.html": {
    "href": "api/ShapeEngine.Core.Structs.Grid.Coordinates.html",
    "title": "Struct Grid.Coordinates | ShapeEngine",
    "summary": "Struct Grid.Coordinates Namespace ShapeEngine.Core.Structs Assembly ShapeEngine.dll public readonly struct Grid.Coordinates : IEquatable<Grid.Coordinates> Implements IEquatable<Grid.Coordinates> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Coordinates() public Coordinates() Coordinates(int, int) public Coordinates(int col, int row) Parameters col int row int Fields Col public readonly int Col Field Value int Row public readonly int Row Field Value int Properties Count public int Count { get; } Property Value int Distance public int Distance { get; } Property Value int IsValid public bool IsValid { get; } Property Value bool Methods Equals(Coordinates) Indicates whether the current object is equal to another object of the same type. public bool Equals(Grid.Coordinates other) Parameters other Grid.Coordinates An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. ToVector2() public Vector2 ToVector2() Returns Vector2 Operators operator +(Coordinates, Direction) public static Grid.Coordinates operator +(Grid.Coordinates left, Direction right) Parameters left Grid.Coordinates right Direction Returns Grid.Coordinates operator +(Coordinates, Coordinates) public static Grid.Coordinates operator +(Grid.Coordinates left, Grid.Coordinates right) Parameters left Grid.Coordinates right Grid.Coordinates Returns Grid.Coordinates operator +(Coordinates, int) public static Grid.Coordinates operator +(Grid.Coordinates left, int right) Parameters left Grid.Coordinates right int Returns Grid.Coordinates operator /(Coordinates, Direction) public static Grid.Coordinates operator /(Grid.Coordinates left, Direction right) Parameters left Grid.Coordinates right Direction Returns Grid.Coordinates operator /(Coordinates, Coordinates) public static Grid.Coordinates operator /(Grid.Coordinates left, Grid.Coordinates right) Parameters left Grid.Coordinates right Grid.Coordinates Returns Grid.Coordinates operator /(Coordinates, int) public static Grid.Coordinates operator /(Grid.Coordinates left, int right) Parameters left Grid.Coordinates right int Returns Grid.Coordinates operator ==(Coordinates, Coordinates) public static bool operator ==(Grid.Coordinates left, Grid.Coordinates right) Parameters left Grid.Coordinates right Grid.Coordinates Returns bool operator !=(Coordinates, Coordinates) public static bool operator !=(Grid.Coordinates left, Grid.Coordinates right) Parameters left Grid.Coordinates right Grid.Coordinates Returns bool operator *(Coordinates, Direction) public static Grid.Coordinates operator *(Grid.Coordinates left, Direction right) Parameters left Grid.Coordinates right Direction Returns Grid.Coordinates operator *(Coordinates, Coordinates) public static Grid.Coordinates operator *(Grid.Coordinates left, Grid.Coordinates right) Parameters left Grid.Coordinates right Grid.Coordinates Returns Grid.Coordinates operator *(Coordinates, int) public static Grid.Coordinates operator *(Grid.Coordinates left, int right) Parameters left Grid.Coordinates right int Returns Grid.Coordinates operator -(Coordinates, Direction) public static Grid.Coordinates operator -(Grid.Coordinates left, Direction right) Parameters left Grid.Coordinates right Direction Returns Grid.Coordinates operator -(Coordinates, Coordinates) public static Grid.Coordinates operator -(Grid.Coordinates left, Grid.Coordinates right) Parameters left Grid.Coordinates right Grid.Coordinates Returns Grid.Coordinates operator -(Coordinates, int) public static Grid.Coordinates operator -(Grid.Coordinates left, int right) Parameters left Grid.Coordinates right int Returns Grid.Coordinates"
  },
  "api/ShapeEngine.Core.Structs.Grid.html": {
    "href": "api/ShapeEngine.Core.Structs.Grid.html",
    "title": "Struct Grid | ShapeEngine",
    "summary": "Struct Grid Namespace ShapeEngine.Core.Structs Assembly ShapeEngine.dll public readonly struct Grid : IEquatable<Grid> Implements IEquatable<Grid> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ShapeRectDrawing.Draw(Grid, Rect, float, ColorRgba) Constructors Grid() public Grid() Grid(int, int) public Grid(int cols, int rows) Parameters cols int rows int Grid(int, int, bool, bool) public Grid(int cols, int rows, bool horizontalReversed = false, bool verticalReversed = false) Parameters cols int rows int horizontalReversed bool verticalReversed bool Grid(int, int, bool, bool, bool) public Grid(int cols, int rows, bool horizontalReversed = false, bool verticalReversed = false, bool isTopToBottomFirst = false) Parameters cols int rows int horizontalReversed bool verticalReversed bool isTopToBottomFirst bool Fields Cols public readonly int Cols Field Value int IsTopToBottomFirst public readonly bool IsTopToBottomFirst Field Value bool Placement public readonly Direction Placement Field Value Direction Rows public readonly int Rows Field Value int Properties Count public int Count { get; } Property Value int IsGrid public bool IsGrid { get; } Property Value bool IsHorizontal public bool IsHorizontal { get; } Property Value bool IsLeftToRightFirst public bool IsLeftToRightFirst { get; } Property Value bool IsValid public bool IsValid { get; } Property Value bool IsVertical public bool IsVertical { get; } Property Value bool Methods AreCoordinatesInside(Coordinates) public bool AreCoordinatesInside(Grid.Coordinates coordinates) Parameters coordinates Grid.Coordinates Returns bool ClampCoordinates(Coordinates) public Grid.Coordinates ClampCoordinates(Grid.Coordinates coordinates) Parameters coordinates Grid.Coordinates Returns Grid.Coordinates CoordinatesToIndex(Coordinates) public int CoordinatesToIndex(Grid.Coordinates coordinates) Parameters coordinates Grid.Coordinates Returns int Equals(Grid) Indicates whether the current object is equal to another object of the same type. public bool Equals(Grid other) Parameters other Grid An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetCellCoordinate(Vector2, Rect) public Grid.Coordinates GetCellCoordinate(Vector2 pos, Rect bounds) Parameters pos Vector2 bounds Rect Returns Grid.Coordinates GetCellCoordinateUnclamped(Vector2, Rect) public Grid.Coordinates GetCellCoordinateUnclamped(Vector2 pos, Rect bounds) Parameters pos Vector2 bounds Rect Returns Grid.Coordinates GetCellIndex(Vector2, Rect) public int GetCellIndex(Vector2 pos, Rect bounds) Parameters pos Vector2 bounds Rect Returns int GetCellIndexUnclamped(Vector2, Rect) public int GetCellIndexUnclamped(Vector2 pos, Rect bounds) Parameters pos Vector2 bounds Rect Returns int GetCellIndices(Rect, Rect, ref HashSet<int>) public int GetCellIndices(Rect rect, Rect bounds, ref HashSet<int> indices) Parameters rect Rect bounds Rect indices HashSet<int> Returns int GetCellSize(Rect) public Size GetCellSize(Rect bounds) Parameters bounds Rect Returns Size GetDirection(Coordinates) public Direction GetDirection(Grid.Coordinates coordinates) Parameters coordinates Grid.Coordinates Returns Direction GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. GetHorizontalGrid(int, bool) public static Grid GetHorizontalGrid(int cols, bool reversed) Parameters cols int reversed bool Returns Grid GetNextDirection() Get the direction for what is considered the next item. Standard Vertical Grid with 1 column that is top to bottom first would return new Direction(0, 1) public Direction GetNextDirection() Returns Direction GetPosition(Rect, Coordinates) public Vector2 GetPosition(Rect bounds, Grid.Coordinates coordinates) Parameters bounds Rect coordinates Grid.Coordinates Returns Vector2 GetPreviousDirection() Get the direction for what is considered the previous item. Standard Vertical Grid with 1 column that is top to bottom first would return new Direction(0, -1) public Direction GetPreviousDirection() Returns Direction GetRect(Rect, Coordinates) public Rect GetRect(Rect bounds, Grid.Coordinates coordinates) Parameters bounds Rect coordinates Grid.Coordinates Returns Rect GetRects(Rect, ref List<Rect>) public int GetRects(Rect bounds, ref List<Rect> result) Parameters bounds Rect result List<Rect> Returns int GetVerticalGrid(int, bool) public static Grid GetVerticalGrid(int rows, bool reversed) Parameters rows int reversed bool Returns Grid IndexToCoordinates(int) public Grid.Coordinates IndexToCoordinates(int index) Parameters index int Returns Grid.Coordinates IsIndexInBounds(int) public bool IsIndexInBounds(int index) Parameters index int Returns bool ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. Operators operator ==(Grid, Grid) public static bool operator ==(Grid left, Grid right) Parameters left Grid right Grid Returns bool operator !=(Grid, Grid) public static bool operator !=(Grid left, Grid right) Parameters left Grid right Grid Returns bool"
  },
  "api/ShapeEngine.Core.Structs.LineCapType.html": {
    "href": "api/ShapeEngine.Core.Structs.LineCapType.html",
    "title": "Enum LineCapType | ShapeEngine",
    "summary": "Enum LineCapType Namespace ShapeEngine.Core.Structs Assembly ShapeEngine.dll Determines how the end of a line is drawn. public enum LineCapType Fields Capped = 2 The line remains the same length and is drawn with a cap. Roundness is determined by the cap points. CappedExtended = 3 The line is extended by the thickness and is drawn with a cap. Roundness is determined by the cap points. Extended = 1 The line is extended by the thickness without any cap. None = 0 Line is drawn exactly from start to end without any cap."
  },
  "api/ShapeEngine.Core.Structs.LineDrawingInfo.html": {
    "href": "api/ShapeEngine.Core.Structs.LineDrawingInfo.html",
    "title": "Struct LineDrawingInfo | ShapeEngine",
    "summary": "Struct LineDrawingInfo Namespace ShapeEngine.Core.Structs Assembly ShapeEngine.dll Used for defining how a line is drawn. public readonly struct LineDrawingInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors LineDrawingInfo(float, ColorRgba) public LineDrawingInfo(float thickness, ColorRgba color) Parameters thickness float color ColorRgba LineDrawingInfo(float, ColorRgba, LineCapType, int) public LineDrawingInfo(float thickness, ColorRgba color, LineCapType capType, int capPoints) Parameters thickness float color ColorRgba capType LineCapType capPoints int Fields CapPoints public readonly int CapPoints Field Value int CapType The end cap type of the line. public readonly LineCapType CapType Field Value LineCapType Color The color of the line. public readonly ColorRgba Color Field Value ColorRgba LineMinThickness The minimal possible line thickness. All thickness values a clamped to this value if lower. public static float LineMinThickness Field Value float Thickness The thickness of the line. public readonly float Thickness Field Value float Properties Default Create Default LineDrawingInfo. (Thickness = 1f, Color = White, LineCapType = None, CapPoints = 0) public static LineDrawingInfo Default { get; } Property Value LineDrawingInfo Line Create Default LineDrawingInfo. (Thickness = 1f, Color = White, LineCapType = Extended, CapPoints = 0) public static LineDrawingInfo Line { get; } Property Value LineDrawingInfo Outline Create Default LineDrawingInfo. (Thickness = 1f, Color = White, LineCapType = CappedExtended, CapPoints = 4) public static LineDrawingInfo Outline { get; } Property Value LineDrawingInfo Methods Capped(float, ColorRgba, int) Create a line info with \"Capped\" LineCapType. public static LineDrawingInfo Capped(float thickness, ColorRgba color, int capPoints) Parameters thickness float color ColorRgba capPoints int Returns LineDrawingInfo CappedExtended(float, ColorRgba, int) Create a line info with \"CappedExtended\" LineCapType. public static LineDrawingInfo CappedExtended(float thickness, ColorRgba color, int capPoints) Parameters thickness float color ColorRgba capPoints int Returns LineDrawingInfo ChangeCapPoints(int) public LineDrawingInfo ChangeCapPoints(int newCapPoints) Parameters newCapPoints int Returns LineDrawingInfo ChangeCapType(LineCapType) public LineDrawingInfo ChangeCapType(LineCapType newCapType) Parameters newCapType LineCapType Returns LineDrawingInfo ChangeColor(ColorRgba) public LineDrawingInfo ChangeColor(ColorRgba newColor) Parameters newColor ColorRgba Returns LineDrawingInfo ChangeThickness(float) public LineDrawingInfo ChangeThickness(float newThickness) Parameters newThickness float Returns LineDrawingInfo ExpDecayLerp(LineDrawingInfo, float, float) public LineDrawingInfo ExpDecayLerp(LineDrawingInfo to, float f, float dt) Parameters to LineDrawingInfo f float dt float Returns LineDrawingInfo Extended(float, ColorRgba) Create a line info with \"Extended\" LineCapType. public static LineDrawingInfo Extended(float thickness, ColorRgba color) Parameters thickness float color ColorRgba Returns LineDrawingInfo Lerp(LineDrawingInfo, float) public LineDrawingInfo Lerp(LineDrawingInfo to, float f) Parameters to LineDrawingInfo f float Returns LineDrawingInfo None(float, ColorRgba) Create a line info with \"None\" LineCapType. public static LineDrawingInfo None(float thickness, ColorRgba color) Parameters thickness float color ColorRgba Returns LineDrawingInfo PowLerp(LineDrawingInfo, float, float) public LineDrawingInfo PowLerp(LineDrawingInfo to, float remainder, float dt) Parameters to LineDrawingInfo remainder float dt float Returns LineDrawingInfo"
  },
  "api/ShapeEngine.Core.Structs.NinePatchRect.html": {
    "href": "api/ShapeEngine.Core.Structs.NinePatchRect.html",
    "title": "Struct NinePatchRect | ShapeEngine",
    "summary": "Struct NinePatchRect Namespace ShapeEngine.Core.Structs Assembly ShapeEngine.dll public readonly struct NinePatchRect Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ShapeRectDrawing.Draw(NinePatchRect, ColorRgba) ShapeRectDrawing.Draw(NinePatchRect, ColorRgba, ColorRgba) ShapeRectDrawing.DrawLines(NinePatchRect, float, ColorRgba) ShapeRectDrawing.DrawLines(NinePatchRect, float, float, ColorRgba, ColorRgba) Constructors NinePatchRect(Rect) public NinePatchRect(Rect source) Parameters source Rect NinePatchRect(Rect, float, float, float, float) public NinePatchRect(Rect source, float h1, float h2, float v1, float v2) Parameters source Rect h1 float h2 float v1 float v2 float NinePatchRect(Rect, float, float, float, float, float, float) public NinePatchRect(Rect source, float h1, float h2, float v1, float v2, float marginH, float marginV) Parameters source Rect h1 float h2 float v1 float v2 float marginH float marginV float NinePatchRect(NinePatchRect, float, float) public NinePatchRect(NinePatchRect npr, float marginH, float marginV) Parameters npr NinePatchRect marginH float marginV float NinePatchRect(IReadOnlyList<Rect>) public NinePatchRect(IReadOnlyList<Rect> rects) Parameters rects IReadOnlyList<Rect> Fields BottomCenter public readonly Rect BottomCenter Field Value Rect BottomLeft public readonly Rect BottomLeft Field Value Rect BottomRight public readonly Rect BottomRight Field Value Rect Center public readonly Rect Center Field Value Rect CenterLeft public readonly Rect CenterLeft Field Value Rect CenterRight public readonly Rect CenterRight Field Value Rect TopCenter public readonly Rect TopCenter Field Value Rect TopLeft public readonly Rect TopLeft Field Value Rect TopRight public readonly Rect TopRight Field Value Rect Properties Bottom public Rect Bottom { get; } Property Value Rect BottomLeftQuadrant public Rect BottomLeftQuadrant { get; } Property Value Rect BottomQuadrant public Rect BottomQuadrant { get; } Property Value Rect BottomRightQuadrant public Rect BottomRightQuadrant { get; } Property Value Rect CenterH public Rect CenterH { get; } Property Value Rect CenterV public Rect CenterV { get; } Property Value Rect Left public Rect Left { get; } Property Value Rect LeftQuadrant public Rect LeftQuadrant { get; } Property Value Rect Rects public List<Rect> Rects { get; } Property Value List<Rect> Right public Rect Right { get; } Property Value Rect RightQuadrant public Rect RightQuadrant { get; } Property Value Rect Source public Rect Source { get; } Property Value Rect Top public Rect Top { get; } Property Value Rect TopLeftQuadrant public Rect TopLeftQuadrant { get; } Property Value Rect TopQuadrant public Rect TopQuadrant { get; } Property Value Rect TopRightQuadrant public Rect TopRightQuadrant { get; } Property Value Rect"
  },
  "api/ShapeEngine.Core.Structs.PolarCoordinates.html": {
    "href": "api/ShapeEngine.Core.Structs.PolarCoordinates.html",
    "title": "Struct PolarCoordinates | ShapeEngine",
    "summary": "Struct PolarCoordinates Namespace ShapeEngine.Core.Structs Assembly ShapeEngine.dll public readonly struct PolarCoordinates Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors PolarCoordinates() public PolarCoordinates() PolarCoordinates(Vector2) public PolarCoordinates(Vector2 v) Parameters v Vector2 PolarCoordinates(float) public PolarCoordinates(float angleRad) Parameters angleRad float PolarCoordinates(float, float) public PolarCoordinates(float radius, float angleRad) Parameters radius float angleRad float Fields AngleRad public readonly float AngleRad Field Value float Radius public readonly float Radius Field Value float Properties Down public static PolarCoordinates Down { get; } Property Value PolarCoordinates Left public static PolarCoordinates Left { get; } Property Value PolarCoordinates Right public static PolarCoordinates Right { get; } Property Value PolarCoordinates Up public static PolarCoordinates Up { get; } Property Value PolarCoordinates Methods ChangeAngleDeg(float) public PolarCoordinates ChangeAngleDeg(float amount) Parameters amount float Returns PolarCoordinates ChangeAngleRad(float) public PolarCoordinates ChangeAngleRad(float amount) Parameters amount float Returns PolarCoordinates ChangeRadius(float) public PolarCoordinates ChangeRadius(float amount) Parameters amount float Returns PolarCoordinates Flip() public PolarCoordinates Flip() Returns PolarCoordinates GetVector2(float) public static Vector2 GetVector2(float angleRad) Parameters angleRad float Returns Vector2 GetVector2(float, float) public static Vector2 GetVector2(float radius, float angleRad) Parameters radius float angleRad float Returns Vector2 Radar(Vector2, Vector2, float) Transform the target position to polar coordinates useful for minimap / radar. public PolarCoordinates Radar(Vector2 origin, Vector2 target, float maxRange) Parameters origin Vector2 The origin of the radar. target Vector2 The target location. maxRange float The max range of the radar. Returns PolarCoordinates Returns relative polar coordinates for the target. The radius is in 0 - 1 range if target is within max range. Random() public static PolarCoordinates Random() Returns PolarCoordinates Random(float, float) public static PolarCoordinates Random(float minR, float maxR) Parameters minR float maxR float Returns PolarCoordinates ScaleRadius(float) public PolarCoordinates ScaleRadius(float factor) Parameters factor float Returns PolarCoordinates SetAngleDeg(float) public PolarCoordinates SetAngleDeg(float newAngle) Parameters newAngle float Returns PolarCoordinates SetAngleRad(float) public PolarCoordinates SetAngleRad(float newAngle) Parameters newAngle float Returns PolarCoordinates SetRadius(float) public PolarCoordinates SetRadius(float newRadius) Parameters newRadius float Returns PolarCoordinates ToVector2() public Vector2 ToVector2() Returns Vector2 ToVector2(Vector2) public Vector2 ToVector2(Vector2 origin) Parameters origin Vector2 Returns Vector2 Unit(float) public static PolarCoordinates Unit(float angleRad) Parameters angleRad float Returns PolarCoordinates Zero() public static PolarCoordinates Zero() Returns PolarCoordinates Operators operator +(PolarCoordinates, PolarCoordinates) public static PolarCoordinates operator +(PolarCoordinates left, PolarCoordinates right) Parameters left PolarCoordinates right PolarCoordinates Returns PolarCoordinates operator +(PolarCoordinates, Vector2) public static PolarCoordinates operator +(PolarCoordinates left, Vector2 right) Parameters left PolarCoordinates right Vector2 Returns PolarCoordinates operator +(PolarCoordinates, float) public static PolarCoordinates operator +(PolarCoordinates left, float right) Parameters left PolarCoordinates right float Returns PolarCoordinates operator +(Vector2, PolarCoordinates) public static Vector2 operator +(Vector2 left, PolarCoordinates right) Parameters left Vector2 right PolarCoordinates Returns Vector2 operator /(PolarCoordinates, PolarCoordinates) public static PolarCoordinates operator /(PolarCoordinates left, PolarCoordinates right) Parameters left PolarCoordinates right PolarCoordinates Returns PolarCoordinates operator /(PolarCoordinates, Vector2) public static PolarCoordinates operator /(PolarCoordinates left, Vector2 right) Parameters left PolarCoordinates right Vector2 Returns PolarCoordinates operator /(PolarCoordinates, float) public static PolarCoordinates operator /(PolarCoordinates left, float right) Parameters left PolarCoordinates right float Returns PolarCoordinates operator /(Vector2, PolarCoordinates) public static Vector2 operator /(Vector2 left, PolarCoordinates right) Parameters left Vector2 right PolarCoordinates Returns Vector2 operator *(PolarCoordinates, PolarCoordinates) public static PolarCoordinates operator *(PolarCoordinates left, PolarCoordinates right) Parameters left PolarCoordinates right PolarCoordinates Returns PolarCoordinates operator *(PolarCoordinates, Vector2) public static PolarCoordinates operator *(PolarCoordinates left, Vector2 right) Parameters left PolarCoordinates right Vector2 Returns PolarCoordinates operator *(PolarCoordinates, float) public static PolarCoordinates operator *(PolarCoordinates left, float right) Parameters left PolarCoordinates right float Returns PolarCoordinates operator *(Vector2, PolarCoordinates) public static Vector2 operator *(Vector2 left, PolarCoordinates right) Parameters left Vector2 right PolarCoordinates Returns Vector2 operator -(PolarCoordinates, PolarCoordinates) public static PolarCoordinates operator -(PolarCoordinates left, PolarCoordinates right) Parameters left PolarCoordinates right PolarCoordinates Returns PolarCoordinates operator -(PolarCoordinates, Vector2) public static PolarCoordinates operator -(PolarCoordinates left, Vector2 right) Parameters left PolarCoordinates right Vector2 Returns PolarCoordinates operator -(PolarCoordinates, float) public static PolarCoordinates operator -(PolarCoordinates left, float right) Parameters left PolarCoordinates right float Returns PolarCoordinates operator -(Vector2, PolarCoordinates) public static Vector2 operator -(Vector2 left, PolarCoordinates right) Parameters left Vector2 right PolarCoordinates Returns Vector2"
  },
  "api/ShapeEngine.Core.Structs.ScreenInfo.html": {
    "href": "api/ShapeEngine.Core.Structs.ScreenInfo.html",
    "title": "Struct ScreenInfo | ShapeEngine",
    "summary": "Struct ScreenInfo Namespace ShapeEngine.Core.Structs Assembly ShapeEngine.dll public readonly struct ScreenInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ScreenInfo(Rect, Vector2) public ScreenInfo(Rect area, Vector2 mousePos) Parameters area Rect mousePos Vector2 Fields Area public readonly Rect Area Field Value Rect MousePos public readonly Vector2 MousePos Field Value Vector2 Properties RelativeMousePosition Returns the mouse position in a range between 0 and 1. 0,0 is the topleft corner of the area 1, 1 is the bottom right corner of the area public Vector2 RelativeMousePosition { get; } Property Value Vector2"
  },
  "api/ShapeEngine.Core.Structs.Size.html": {
    "href": "api/ShapeEngine.Core.Structs.Size.html",
    "title": "Struct Size | ShapeEngine",
    "summary": "Struct Size Namespace ShapeEngine.Core.Structs Assembly ShapeEngine.dll public readonly struct Size : IEquatable<Size> Implements IEquatable<Size> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Size() public Size() Size(float) public Size(float size) Parameters size float Size(float, float) public Size(float w, float h) Parameters w float h float Fields Height public readonly float Height Field Value float Width public readonly float Width Field Value float Properties Area public float Area { get; } Property Value float IsSquare public bool IsSquare { get; } Property Value bool Length Returns Width! public float Length { get; } Property Value float Positive public bool Positive { get; } Property Value bool Radius Returns Width! public float Radius { get; } Property Value float Zero public static Size Zero { get; } Property Value Size Methods Ceil() public Size Ceil() Returns Size ChangeLength(float) Changes width only! public Size ChangeLength(float amount) Parameters amount float Returns Size ChangeRadius(float) Changes width only! public Size ChangeRadius(float amount) Parameters amount float Returns Size Clamp(Size, Size) public Size Clamp(Size min, Size max) Parameters min Size max Size Returns Size Clamp(float, float) public Size Clamp(float min, float max) Parameters min float max float Returns Size Equals(Size) Indicates whether the current object is equal to another object of the same type. public bool Equals(Size other) Parameters other Size An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. ExpDecayLerp(Size, float, float) public Size ExpDecayLerp(Size to, float f, float dt) Parameters to Size f float dt float Returns Size ExpDecayLerpComplex(Size, float, float) public Size ExpDecayLerpComplex(Size to, float decay, float dt) Parameters to Size decay float dt float Returns Size Floor() public Size Floor() Returns Size GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Lerp(Size, float) public Size Lerp(Size to, float f) Parameters to Size f float Returns Size Lerp(float, float) public Size Lerp(float to, float f) Parameters to float f float Returns Size Max() public float Max() Returns float Max(Size) public Size Max(Size other) Parameters other Size Returns Size MaxArea(Size) public Size MaxArea(Size other) Parameters other Size Returns Size Min() public float Min() Returns float Min(Size) public Size Min(Size other) Parameters other Size Returns Size MinArea(Size) public Size MinArea(Size other) Parameters other Size Returns Size MoveTowards(Size, float) public Size MoveTowards(Size to, float speed) Parameters to Size speed float Returns Size PowLerp(Size, float, float) public Size PowLerp(Size to, float remainder, float dt) Parameters to Size remainder float dt float Returns Size Round() public Size Round() Returns Size Round(int) public Size Round(int decimals) Parameters decimals int Returns Size SetLength(float) Changes width only! public Size SetLength(float newLength) Parameters newLength float Returns Size SetRadius(float) Changes width only! public Size SetRadius(float newRadius) Parameters newRadius float Returns Size Switch() public Size Switch() Returns Size ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. ToVector2() public Vector2 ToVector2() Returns Vector2 Truncate() public Size Truncate() Returns Size Operators operator +(AnchorPoint, Size) public static Size operator +(AnchorPoint left, Size right) Parameters left AnchorPoint right Size Returns Size operator +(Size, AnchorPoint) public static Size operator +(Size left, AnchorPoint right) Parameters left Size right AnchorPoint Returns Size operator +(Size, Direction) public static Size operator +(Size left, Direction right) Parameters left Size right Direction Returns Size operator +(Size, Size) public static Size operator +(Size left, Size right) Parameters left Size right Size Returns Size operator +(Size, Vector2) public static Size operator +(Size left, Vector2 right) Parameters left Size right Vector2 Returns Size operator +(Size, float) public static Size operator +(Size left, float right) Parameters left Size right float Returns Size operator +(Vector2, Size) public static Vector2 operator +(Vector2 left, Size right) Parameters left Vector2 right Size Returns Vector2 operator /(AnchorPoint, Size) public static Size operator /(AnchorPoint left, Size right) Parameters left AnchorPoint right Size Returns Size operator /(Size, AnchorPoint) public static Size operator /(Size left, AnchorPoint right) Parameters left Size right AnchorPoint Returns Size operator /(Size, Direction) public static Size operator /(Size left, Direction right) Parameters left Size right Direction Returns Size operator /(Size, Size) public static Size operator /(Size left, Size right) Parameters left Size right Size Returns Size operator /(Size, Vector2) public static Size operator /(Size left, Vector2 right) Parameters left Size right Vector2 Returns Size operator /(Size, float) public static Size operator /(Size left, float right) Parameters left Size right float Returns Size operator /(Vector2, Size) public static Vector2 operator /(Vector2 left, Size right) Parameters left Vector2 right Size Returns Vector2 operator ==(Size, Size) public static bool operator ==(Size left, Size right) Parameters left Size right Size Returns bool operator ==(Size, Vector2) public static bool operator ==(Size left, Vector2 right) Parameters left Size right Vector2 Returns bool operator ==(Vector2, Size) public static bool operator ==(Vector2 left, Size right) Parameters left Vector2 right Size Returns bool operator !=(Size, Size) public static bool operator !=(Size left, Size right) Parameters left Size right Size Returns bool operator !=(Size, Vector2) public static bool operator !=(Size left, Vector2 right) Parameters left Size right Vector2 Returns bool operator !=(Vector2, Size) public static bool operator !=(Vector2 left, Size right) Parameters left Vector2 right Size Returns bool operator *(AnchorPoint, Size) public static Size operator *(AnchorPoint left, Size right) Parameters left AnchorPoint right Size Returns Size operator *(Size, AnchorPoint) public static Size operator *(Size left, AnchorPoint right) Parameters left Size right AnchorPoint Returns Size operator *(Size, Direction) public static Size operator *(Size left, Direction right) Parameters left Size right Direction Returns Size operator *(Size, Size) public static Size operator *(Size left, Size right) Parameters left Size right Size Returns Size operator *(Size, Vector2) public static Size operator *(Size left, Vector2 right) Parameters left Size right Vector2 Returns Size operator *(Size, float) public static Size operator *(Size left, float right) Parameters left Size right float Returns Size operator *(Vector2, Size) public static Vector2 operator *(Vector2 left, Size right) Parameters left Vector2 right Size Returns Vector2 operator -(AnchorPoint, Size) public static Size operator -(AnchorPoint left, Size right) Parameters left AnchorPoint right Size Returns Size operator -(Size, AnchorPoint) public static Size operator -(Size left, AnchorPoint right) Parameters left Size right AnchorPoint Returns Size operator -(Size, Direction) public static Size operator -(Size left, Direction right) Parameters left Size right Direction Returns Size operator -(Size, Size) public static Size operator -(Size left, Size right) Parameters left Size right Size Returns Size operator -(Size, Vector2) public static Size operator -(Size left, Vector2 right) Parameters left Size right Vector2 Returns Size operator -(Size, float) public static Size operator -(Size left, float right) Parameters left Size right float Returns Size operator -(Vector2, Size) public static Vector2 operator -(Vector2 left, Size right) Parameters left Vector2 right Size Returns Vector2"
  },
  "api/ShapeEngine.Core.Structs.Transform2D.html": {
    "href": "api/ShapeEngine.Core.Structs.Transform2D.html",
    "title": "Struct Transform2D | ShapeEngine",
    "summary": "Struct Transform2D Namespace ShapeEngine.Core.Structs Assembly ShapeEngine.dll public readonly struct Transform2D : IEquatable<Transform2D> Implements IEquatable<Transform2D> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Transform2D() public Transform2D() Transform2D(Vector2) public Transform2D(Vector2 pos) Parameters pos Vector2 Transform2D(Vector2, float) public Transform2D(Vector2 pos, float rotRad) Parameters pos Vector2 rotRad float Transform2D(Vector2, float, Size) public Transform2D(Vector2 pos, float rotRad, Size baseSize) Parameters pos Vector2 rotRad float baseSize Size Transform2D(Vector2, float, Size, Vector2) public Transform2D(Vector2 pos, float rotRad, Size baseSize, Vector2 scale2d) Parameters pos Vector2 rotRad float baseSize Size scale2d Vector2 Transform2D(Vector2, float, Size, float) public Transform2D(Vector2 pos, float rotRad, Size baseSize, float scale) Parameters pos Vector2 rotRad float baseSize Size scale float Transform2D(Vector2, float, Size, float, float) public Transform2D(Vector2 pos, float rotRad, Size baseSize, float scaleX, float scaleY) Parameters pos Vector2 rotRad float baseSize Size scaleX float scaleY float Transform2D(Vector2, float, float) public Transform2D(Vector2 pos, float rotRad, float scale) Parameters pos Vector2 rotRad float scale float Transform2D(Vector2, float, float, float) public Transform2D(Vector2 pos, float rotRad, float scaleX, float scaleY) Parameters pos Vector2 rotRad float scaleX float scaleY float Transform2D(float) public Transform2D(float rotRad) Parameters rotRad float Fields BaseSize public readonly Size BaseSize Field Value Size Position public readonly Vector2 Position Field Value Vector2 RotationRad public readonly float RotationRad Field Value float Scale2d public readonly Vector2 Scale2d Field Value Vector2 ScaledSize public readonly Size ScaledSize Field Value Size Properties RotationDeg public float RotationDeg { get; } Property Value float Scale Is the same as ScaleX. Can be used if only 1 component scale is needed. public float Scale { get; } Property Value float ScaleX public float ScaleX { get; } Property Value float ScaleY public float ScaleY { get; } Property Value float Methods AddOffset(Transform2D) public Transform2D AddOffset(Transform2D offset) Parameters offset Transform2D Returns Transform2D ApplyTransformTo(Vector2) public Vector2 ApplyTransformTo(Vector2 relative) Parameters relative Vector2 Returns Vector2 ChangePosition(Vector2) public Transform2D ChangePosition(Vector2 amount) Parameters amount Vector2 Returns Transform2D ChangePositionX(float) public Transform2D ChangePositionX(float amount) Parameters amount float Returns Transform2D ChangePositionY(float) public Transform2D ChangePositionY(float amount) Parameters amount float Returns Transform2D ChangeRotationDeg(float) public Transform2D ChangeRotationDeg(float amount) Parameters amount float Returns Transform2D ChangeRotationRad(float) public Transform2D ChangeRotationRad(float amount) Parameters amount float Returns Transform2D ChangeScale(float) public Transform2D ChangeScale(float amount) Parameters amount float Returns Transform2D ChangeScale2d(Vector2) public Transform2D ChangeScale2d(Vector2 amount) Parameters amount Vector2 Returns Transform2D ChangeSize(Size) public Transform2D ChangeSize(Size amount) Parameters amount Size Returns Transform2D ChangeSize(float) public Transform2D ChangeSize(float amount) Parameters amount float Returns Transform2D ChangeSizeX(float) public Transform2D ChangeSizeX(float amount) Parameters amount float Returns Transform2D ChangeSizeY(float) public Transform2D ChangeSizeY(float amount) Parameters amount float Returns Transform2D Divide(float) public Transform2D Divide(float divisor) Parameters divisor float Returns Transform2D Equals(Transform2D) Indicates whether the current object is equal to another object of the same type. public bool Equals(Transform2D other) Parameters other Transform2D An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. ExpDecayLerp(Transform2D, float, float) public Transform2D ExpDecayLerp(Transform2D to, float f, float dt) Parameters to Transform2D f float dt float Returns Transform2D ExpDecayLerpComplex(Transform2D, float, float) public Transform2D ExpDecayLerpComplex(Transform2D to, float decay, float dt) Parameters to Transform2D decay float dt float Returns Transform2D GetChildTransform(Transform2D) Gets a relative transform (offset) and turns it into an absolute transform to be used by the child. public Transform2D GetChildTransform(Transform2D childOffset) Parameters childOffset Transform2D The relative offset of the child to the parent. Returns Transform2D The absolute transform based on the parent transform and the child offset. GetDirection() public Vector2 GetDirection() Returns Vector2 GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. IsEmpty() public bool IsEmpty() Returns bool Lerp(Transform2D, float) public Transform2D Lerp(Transform2D to, float f) Parameters to Transform2D f float Returns Transform2D Multiply(float) public Transform2D Multiply(float factor) Parameters factor float Returns Transform2D MultiplyScale(float) public Transform2D MultiplyScale(float factor) Parameters factor float Returns Transform2D MultiplyScale2d(Vector2) public Transform2D MultiplyScale2d(Vector2 factor) Parameters factor Vector2 Returns Transform2D PowLerp(Transform2D, float, float) public Transform2D PowLerp(Transform2D to, float remainder, float dt) Parameters to Transform2D remainder float dt float Returns Transform2D RemoveOffset(Transform2D) public Transform2D RemoveOffset(Transform2D offset) Parameters offset Transform2D Returns Transform2D RevertPosition(Vector2) public Vector2 RevertPosition(Vector2 position) Parameters position Vector2 Returns Vector2 SetPosition(Vector2) public Transform2D SetPosition(Vector2 newPosition) Parameters newPosition Vector2 Returns Transform2D SetRotationDeg(float) public Transform2D SetRotationDeg(float newRotationDeg) Parameters newRotationDeg float Returns Transform2D SetRotationRad(float) public Transform2D SetRotationRad(float newRotationRad) Parameters newRotationRad float Returns Transform2D SetScale(float) public Transform2D SetScale(float newScale) Parameters newScale float Returns Transform2D SetSize(Size) public Transform2D SetSize(Size newSize) Parameters newSize Size Returns Transform2D SetSize(float) public Transform2D SetSize(float newSize) Parameters newSize float Returns Transform2D UpdateTransform(Transform2D, Transform2D, bool, bool, bool) Calculates an absolute transform for a child based on an offset and a parent transform. public static Transform2D UpdateTransform(Transform2D parentTransform, Transform2D childOffset, bool moves = true, bool rotates = true, bool scales = true) Parameters parentTransform Transform2D The absolute transform of the parent. childOffset Transform2D The relative offset of the child to the parent. moves bool Dictates if the child stays in a fixed location or moves with the parent. rotates bool Dictates if the child rotates with the parent. scales bool Dictates if the child scales with the parent. Returns Transform2D The absolute transform based on the parent transform and the child offset. WrapRotationRad() public Transform2D WrapRotationRad() Returns Transform2D Operators operator +(Transform2D, Size) Applies to BaseSize only! public static Transform2D operator +(Transform2D left, Size right) Parameters left Transform2D right Size Returns Transform2D operator +(Transform2D, Transform2D) public static Transform2D operator +(Transform2D left, Transform2D right) Parameters left Transform2D right Transform2D Returns Transform2D operator +(Transform2D, Vector2) Applies to Position only! public static Transform2D operator +(Transform2D left, Vector2 right) Parameters left Transform2D right Vector2 Returns Transform2D operator +(Transform2D, float) Applies to rotation only! public static Transform2D operator +(Transform2D left, float right) Parameters left Transform2D right float Returns Transform2D operator /(Transform2D, Size) Applies to BaseSize only! public static Transform2D operator /(Transform2D left, Size right) Parameters left Transform2D right Size Returns Transform2D operator /(Transform2D, Transform2D) public static Transform2D operator /(Transform2D left, Transform2D right) Parameters left Transform2D right Transform2D Returns Transform2D operator /(Transform2D, Vector2) Applies to Position only! public static Transform2D operator /(Transform2D left, Vector2 right) Parameters left Transform2D right Vector2 Returns Transform2D operator /(Transform2D, float) Applies to rotation only! public static Transform2D operator /(Transform2D left, float right) Parameters left Transform2D right float Returns Transform2D operator ==(Transform2D, Transform2D) public static bool operator ==(Transform2D left, Transform2D right) Parameters left Transform2D right Transform2D Returns bool operator !=(Transform2D, Transform2D) public static bool operator !=(Transform2D left, Transform2D right) Parameters left Transform2D right Transform2D Returns bool operator *(Transform2D, Size) Applies to BaseSize only! public static Transform2D operator *(Transform2D left, Size right) Parameters left Transform2D right Size Returns Transform2D operator *(Transform2D, Transform2D) public static Transform2D operator *(Transform2D left, Transform2D right) Parameters left Transform2D right Transform2D Returns Transform2D operator *(Transform2D, Vector2) Applies to Position only! public static Transform2D operator *(Transform2D left, Vector2 right) Parameters left Transform2D right Vector2 Returns Transform2D operator *(Transform2D, float) Applies to rotation only! public static Transform2D operator *(Transform2D left, float right) Parameters left Transform2D right float Returns Transform2D operator -(Transform2D, Size) Applies to BaseSize only! public static Transform2D operator -(Transform2D left, Size right) Parameters left Transform2D right Size Returns Transform2D operator -(Transform2D, Transform2D) public static Transform2D operator -(Transform2D left, Transform2D right) Parameters left Transform2D right Transform2D Returns Transform2D operator -(Transform2D, Vector2) Applies to Position only! public static Transform2D operator -(Transform2D left, Vector2 right) Parameters left Transform2D right Vector2 Returns Transform2D operator -(Transform2D, float) Applies to rotation only! public static Transform2D operator -(Transform2D left, float right) Parameters left Transform2D right float Returns Transform2D"
  },
  "api/ShapeEngine.Core.Structs.TransformMatrix2D.html": {
    "href": "api/ShapeEngine.Core.Structs.TransformMatrix2D.html",
    "title": "Struct TransformMatrix2D | ShapeEngine",
    "summary": "Struct TransformMatrix2D Namespace ShapeEngine.Core.Structs Assembly ShapeEngine.dll public struct TransformMatrix2D : IEquatable<TransformMatrix2D> Implements IEquatable<TransformMatrix2D> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors TransformMatrix2D(Vector2, Vector2, Vector2) Constructs a transformation matrix from 3 vectors (matrix columns). public TransformMatrix2D(Vector2 xAxis, Vector2 yAxis, Vector2 originPos) Parameters xAxis Vector2 The X vector, or column index 0. yAxis Vector2 The Y vector, or column index 1. originPos Vector2 The origin vector, or column index 2. TransformMatrix2D(float, Vector2) Constructs a transformation matrix from a rotationRad value and origin vector. public TransformMatrix2D(float rotationRad, Vector2 origin) Parameters rotationRad float The rotation of the new transform, in radians. origin Vector2 The origin vector, or column index 2. TransformMatrix2D(float, Vector2, float, Vector2) Constructs a transformation matrix from a rotationRad value, scale vector, skew value, and origin vector. public TransformMatrix2D(float rotationRad, Vector2 scale, float skew, Vector2 origin) Parameters rotationRad float The rotation of the new transform, in radians. scale Vector2 The scale of the new transform. skew float The skew of the new transform, in radians. origin Vector2 The origin vector, or column index 2. TransformMatrix2D(float, float, float, float, float, float) Constructs a transformation matrix from the given components. Arguments are named such that xy is equal to calling X.Y. public TransformMatrix2D(float xx, float xy, float yx, float yy, float ox, float oy) Parameters xx float The X component of the X column vector, accessed via t.X.X or [0][0]. xy float The Y component of the X column vector, accessed via t.X.Y or [0][1]. yx float The X component of the Y column vector, accessed via t.Y.X or [1][0]. yy float The Y component of the Y column vector, accessed via t.Y.Y or [1][1]. ox float The X component of the origin vector, accessed via t.Origin.X or [2][0]. oy float The Y component of the origin vector, accessed via t.Origin.Y or [2][1]. Fields Origin The origin vector (column 2, the third column). Equivalent to array index [2]. The origin vector represents translation. public Vector2 Origin Field Value Vector2 X The basis matrix's X vector (column 0). Equivalent to array index [0]. public Vector2 X Field Value Vector2 Y The basis matrix's Y vector (column 1). Equivalent to array index [1]. public Vector2 Y Field Value Vector2 Properties FlipX The transform that will flip something along the X axis. public static TransformMatrix2D FlipX { get; } Property Value TransformMatrix2D Equivalent to new TransformMatrix2D(Vector2.Left, Vector2.Down, Vector2.Zero). FlipY The transform that will flip something along the Y axis. public static TransformMatrix2D FlipY { get; } Property Value TransformMatrix2D Equivalent to new TransformMatrix2D(Vector2.Right, Vector2.Up, Vector2.Zero). Identity The identity transform, with no translation, rotation, or scaling applied. This is used as a replacement for TransformMatrix2D() in GDScript. Do not use new TransformMatrix2D() with no arguments in C#, because it sets all values to zero. public static TransformMatrix2D Identity { get; } Property Value TransformMatrix2D Equivalent to new TransformMatrix2D(Vector2.Right, Vector2.Down, Vector2.Zero). this[int] Access whole columns in the form of Vector2. The third column is the Origin vector. public Vector2 this[int column] { readonly get; set; } Parameters column int Which column vector. Property Value Vector2 Exceptions ArgumentOutOfRangeException column is not 0, 1 or 2. this[int, int] Access matrix elements in column-major order. The third column is the Origin vector. public float this[int column, int row] { readonly get; set; } Parameters column int Which column, the matrix horizontal position. row int Which row, the matrix vertical position. Property Value float Rotation Returns the transform's rotation (in radians). public readonly float Rotation { get; } Property Value float Scale Returns the scale. public readonly Vector2 Scale { get; } Property Value Vector2 Skew Returns the transform's skew (in radians). public readonly float Skew { get; } Property Value float Methods AffineInverse() Returns the inverse of the transform, under the assumption that the basis is invertible (must have non-zero determinant). public readonly TransformMatrix2D AffineInverse() Returns TransformMatrix2D The inverse transformation matrix. See Also Inverse() BasisXform(Vector2) Returns a vector transformed (multiplied) by the basis matrix. This method does not account for translation (the Origin vector). public readonly Vector2 BasisXform(Vector2 v) Parameters v Vector2 A vector to transform. Returns Vector2 The transformed vector. See Also BasisXformInv(Vector2) BasisXformInv(Vector2) Returns a vector transformed (multiplied) by the inverse basis matrix, under the assumption that the basis is orthonormal (i.e. rotation/reflection is fine, scaling/skew is not). This method does not account for translation (the Origin vector). transform.BasisXformInv(vector) is equivalent to transform.Inverse().BasisXform(vector). See Inverse(). For non-orthonormal transforms (e.g. with scaling) transform.AffineInverse().BasisXform(vector) can be used instead. See AffineInverse(). public readonly Vector2 BasisXformInv(Vector2 v) Parameters v Vector2 A vector to inversely transform. Returns Vector2 The inversely transformed vector. See Also BasisXform(Vector2) Equals(TransformMatrix2D) Returns true if the transforms are exactly equal. Note Due to floating-point precision errors, consider using IsEqualApprox(TransformMatrix2D) instead, which is more reliable. public readonly bool Equals(TransformMatrix2D other) Parameters other TransformMatrix2D The other transform to compare. Returns bool Whether or not the matrices are exactly equal. Equals(object?) Returns true if the transform is exactly equal to the given object (obj). Note Due to floating-point precision errors, consider using IsEqualApprox(TransformMatrix2D) instead, which is more reliable. public override readonly bool Equals(object? obj) Parameters obj object The object to compare with. Returns bool Whether or not the transform and the object are exactly equal. GetHashCode() Serves as the hash function for TransformMatrix2D. public override readonly int GetHashCode() Returns int A hash code for this transform. InterpolateWith(TransformMatrix2D, float) Interpolates this transform to the other transform by weight. public readonly TransformMatrix2D InterpolateWith(TransformMatrix2D transform, float weight) Parameters transform TransformMatrix2D The other transform. weight float A value on the range of 0.0 to 1.0, representing the amount of interpolation. Returns TransformMatrix2D The interpolated transform. Inverse() Returns the inverse of the transform, under the assumption that the transformation basis is orthonormal (i.e. rotation/reflection is fine, scaling/skew is not). Use AffineInverse() for non-orthonormal transforms (e.g. with scaling). public readonly TransformMatrix2D Inverse() Returns TransformMatrix2D The inverse matrix. IsEqualApprox(TransformMatrix2D) Returns true if this transform and other are approximately equal, by running Vector2.IsEqualApprox(Vector2) on each component. public readonly bool IsEqualApprox(TransformMatrix2D other) Parameters other TransformMatrix2D The other transform to compare. Returns bool Whether or not the matrices are approximately equal. IsFinite() Returns true if this transform is finite, by calling Mathf.IsFinite(real_t) on each component. public readonly bool IsFinite() Returns bool Whether this vector is finite or not. Orthonormalized() Returns the transform with the basis orthogonal (90 degrees), and normalized axis vectors (scale of 1 or -1). public readonly TransformMatrix2D Orthonormalized() Returns TransformMatrix2D The orthonormalized transform. Rotated(float) Rotates the transform by angleRad (in radians). The operation is done in the parent/global frame, equivalent to multiplying the matrix from the left. public readonly TransformMatrix2D Rotated(float angleRad) Parameters angleRad float The angle to rotate, in radians. Returns TransformMatrix2D The rotated transformation matrix. RotatedLocal(float) Rotates the transform by angleRad (in radians). The operation is done in the local frame, equivalent to multiplying the matrix from the right. public readonly TransformMatrix2D RotatedLocal(float angleRad) Parameters angleRad float The angle to rotate, in radians. Returns TransformMatrix2D The rotated transformation matrix. Scaled(Vector2) Scales the transform by the given scaling factor. The operation is done in the parent/global frame, equivalent to multiplying the matrix from the left. public readonly TransformMatrix2D Scaled(Vector2 scale) Parameters scale Vector2 The scale to introduce. Returns TransformMatrix2D The scaled transformation matrix. ScaledLocal(Vector2) Scales the transform by the given scaling factor. The operation is done in the local frame, equivalent to multiplying the matrix from the right. public readonly TransformMatrix2D ScaledLocal(Vector2 scale) Parameters scale Vector2 The scale to introduce. Returns TransformMatrix2D The scaled transformation matrix. ToString() Converts this TransformMatrix2D to a string. public override readonly string ToString() Returns string A string representation of this transform. ToString(string?) Converts this TransformMatrix2D to a string with the given format. public readonly string ToString(string? format) Parameters format string Returns string A string representation of this transform. Translated(Vector2) Translates the transform by the given offset. The operation is done in the parent/global frame, equivalent to multiplying the matrix from the left. public readonly TransformMatrix2D Translated(Vector2 offset) Parameters offset Vector2 The offset to translate by. Returns TransformMatrix2D The translated matrix. TranslatedLocal(Vector2) Translates the transform by the given offset. The operation is done in the local frame, equivalent to multiplying the matrix from the right. public readonly TransformMatrix2D TranslatedLocal(Vector2 offset) Parameters offset Vector2 The offset to translate by. Returns TransformMatrix2D The translated matrix. Operators operator ==(TransformMatrix2D, TransformMatrix2D) Returns true if the transforms are exactly equal. Note Due to floating-point precision errors, consider using IsEqualApprox(TransformMatrix2D) instead, which is more reliable. public static bool operator ==(TransformMatrix2D left, TransformMatrix2D right) Parameters left TransformMatrix2D The left transform. right TransformMatrix2D The right transform. Returns bool Whether or not the transforms are exactly equal. operator !=(TransformMatrix2D, TransformMatrix2D) Returns true if the transforms are not equal. Note Due to floating-point precision errors, consider using IsEqualApprox(TransformMatrix2D) instead, which is more reliable. public static bool operator !=(TransformMatrix2D left, TransformMatrix2D right) Parameters left TransformMatrix2D The left transform. right TransformMatrix2D The right transform. Returns bool Whether or not the transforms are not equal. operator *(TransformMatrix2D, TransformMatrix2D) Composes these two transformation matrices by multiplying them together. This has the effect of transforming the second transform (the child) by the first transform (the parent). public static TransformMatrix2D operator *(TransformMatrix2D left, TransformMatrix2D right) Parameters left TransformMatrix2D The parent transform. right TransformMatrix2D The child transform. Returns TransformMatrix2D The composed transform. operator *(TransformMatrix2D, Vector2) Returns a Vector2 transformed (multiplied) by the transformation matrix. public static Vector2 operator *(TransformMatrix2D transform, Vector2 vector) Parameters transform TransformMatrix2D The transformation to apply. vector Vector2 A Vector2 to transform. Returns Vector2 The transformed Vector2. operator *(TransformMatrix2D, Vector2[]) Returns a copy of the given Vector2[] transformed (multiplied) by the transformation matrix. public static Vector2[] operator *(TransformMatrix2D transform, Vector2[] array) Parameters transform TransformMatrix2D The transformation to apply. array Vector2[] A Vector2[] to transform. Returns Vector2[] The transformed copy of the Vector2[]. operator *(Vector2, TransformMatrix2D) Returns a Vector2 transformed (multiplied) by the inverse transformation matrix, under the assumption that the transformation basis is orthonormal (i.e. rotation/reflection is fine, scaling/skew is not). vector * transform is equivalent to transform.Inverse() * vector. See Inverse(). For transforming by inverse of an affine transformation (e.g. with scaling) transform.AffineInverse() * vector can be used instead. See AffineInverse(). public static Vector2 operator *(Vector2 vector, TransformMatrix2D transform) Parameters vector Vector2 A Vector2 to inversely transform. transform TransformMatrix2D The transformation to apply. Returns Vector2 The inversely transformed Vector2. operator *(Vector2[], TransformMatrix2D) Returns a copy of the given Vector2[] transformed (multiplied) by the inverse transformation matrix, under the assumption that the transformation basis is orthonormal (i.e. rotation/reflection is fine, scaling/skew is not). array * transform is equivalent to transform.Inverse() * array. See Inverse(). For transforming by inverse of an affine transformation (e.g. with scaling) transform.AffineInverse() * array can be used instead. See AffineInverse(). public static Vector2[] operator *(Vector2[] array, TransformMatrix2D transform) Parameters array Vector2[] A Vector2[] to inversely transform. transform TransformMatrix2D The transformation to apply. Returns Vector2[] The inversely transformed copy of the Vector2[]."
  },
  "api/ShapeEngine.Core.Structs.ValueRange.html": {
    "href": "api/ShapeEngine.Core.Structs.ValueRange.html",
    "title": "Struct ValueRange | ShapeEngine",
    "summary": "Struct ValueRange Namespace ShapeEngine.Core.Structs Assembly ShapeEngine.dll public readonly struct ValueRange Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ValueRange() public ValueRange() ValueRange(int, int) public ValueRange(int min, int max) Parameters min int max int ValueRange(Vector2) public ValueRange(Vector2 range) Parameters range Vector2 ValueRange(float) public ValueRange(float max) Parameters max float ValueRange(float, float) public ValueRange(float min, float max) Parameters min float max float Fields Max public readonly float Max Field Value float Min public readonly float Min Field Value float Methods Clamp(float) public float Clamp(float value) Parameters value float Returns float GetFactor(float) public float GetFactor(float value) Parameters value float Returns float HasPositiveRange() Returns if min and max are not equal and positive. public bool HasPositiveRange() Returns bool HasRange() Returns true if min and max are not equal. public bool HasRange() Returns bool Inverse(float) public float Inverse(float value) Parameters value float Returns float Lerp(float) public float Lerp(float f) Parameters f float Returns float OverlapValueRange(ValueRange) public bool OverlapValueRange(ValueRange other) Parameters other ValueRange Returns bool OverlapValueRange(float, float, float, float) public static bool OverlapValueRange(float aMin, float aMax, float bMin, float bMax) Parameters aMin float aMax float bMin float bMax float Returns bool Rand() public float Rand() Returns float Remap(ValueRange, float) public float Remap(ValueRange to, float value) Parameters to ValueRange value float Returns float Remap(float, float, float) public float Remap(float newMin, float newMax, float value) Parameters newMin float newMax float value float Returns float Set(float, float) public ValueRange Set(float min, float max) Parameters min float max float Returns ValueRange SetMax(float) public ValueRange SetMax(float max) Parameters max float Returns ValueRange SetMin(float) public ValueRange SetMin(float min) Parameters min float Returns ValueRange ToValueRangeInt() public ValueRangeInt ToValueRangeInt() Returns ValueRangeInt ToVector2() public Vector2 ToVector2() Returns Vector2 Operators operator +(ValueRange, ValueRange) public static ValueRange operator +(ValueRange left, ValueRange right) Parameters left ValueRange right ValueRange Returns ValueRange operator +(ValueRange, ValueRangeInt) public static ValueRange operator +(ValueRange left, ValueRangeInt right) Parameters left ValueRange right ValueRangeInt Returns ValueRange operator +(ValueRange, int) public static ValueRange operator +(ValueRange left, int right) Parameters left ValueRange right int Returns ValueRange operator +(ValueRange, float) public static ValueRange operator +(ValueRange left, float right) Parameters left ValueRange right float Returns ValueRange operator /(ValueRange, ValueRange) public static ValueRange operator /(ValueRange left, ValueRange right) Parameters left ValueRange right ValueRange Returns ValueRange operator /(ValueRange, ValueRangeInt) public static ValueRange operator /(ValueRange left, ValueRangeInt right) Parameters left ValueRange right ValueRangeInt Returns ValueRange operator /(ValueRange, int) public static ValueRange operator /(ValueRange left, int right) Parameters left ValueRange right int Returns ValueRange operator /(ValueRange, float) public static ValueRange operator /(ValueRange left, float right) Parameters left ValueRange right float Returns ValueRange operator *(ValueRange, ValueRange) public static ValueRange operator *(ValueRange left, ValueRange right) Parameters left ValueRange right ValueRange Returns ValueRange operator *(ValueRange, ValueRangeInt) public static ValueRange operator *(ValueRange left, ValueRangeInt right) Parameters left ValueRange right ValueRangeInt Returns ValueRange operator *(ValueRange, int) public static ValueRange operator *(ValueRange left, int right) Parameters left ValueRange right int Returns ValueRange operator *(ValueRange, float) public static ValueRange operator *(ValueRange left, float right) Parameters left ValueRange right float Returns ValueRange operator -(ValueRange, ValueRange) public static ValueRange operator -(ValueRange left, ValueRange right) Parameters left ValueRange right ValueRange Returns ValueRange operator -(ValueRange, ValueRangeInt) public static ValueRange operator -(ValueRange left, ValueRangeInt right) Parameters left ValueRange right ValueRangeInt Returns ValueRange operator -(ValueRange, int) public static ValueRange operator -(ValueRange left, int right) Parameters left ValueRange right int Returns ValueRange operator -(ValueRange, float) public static ValueRange operator -(ValueRange left, float right) Parameters left ValueRange right float Returns ValueRange"
  },
  "api/ShapeEngine.Core.Structs.ValueRangeInt.html": {
    "href": "api/ShapeEngine.Core.Structs.ValueRangeInt.html",
    "title": "Struct ValueRangeInt | ShapeEngine",
    "summary": "Struct ValueRangeInt Namespace ShapeEngine.Core.Structs Assembly ShapeEngine.dll public readonly struct ValueRangeInt Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ValueRangeInt() public ValueRangeInt() ValueRangeInt(int) public ValueRangeInt(int max) Parameters max int ValueRangeInt(int, int) public ValueRangeInt(int min, int max) Parameters min int max int ValueRangeInt(Vector2) public ValueRangeInt(Vector2 range) Parameters range Vector2 ValueRangeInt(float, float) public ValueRangeInt(float min, float max) Parameters min float max float Fields Max public readonly int Max Field Value int Min public readonly int Min Field Value int Methods Clamp(int) public int Clamp(int value) Parameters value int Returns int Inverse(int) public float Inverse(int value) Parameters value int Returns float Lerp(float) public int Lerp(float f) Parameters f float Returns int OverlapValueRange(ValueRangeInt) public bool OverlapValueRange(ValueRangeInt other) Parameters other ValueRangeInt Returns bool Rand() public int Rand() Returns int Remap(ValueRangeInt, int) public int Remap(ValueRangeInt to, int value) Parameters to ValueRangeInt value int Returns int Remap(int, int, int) public int Remap(int newMin, int newMax, int value) Parameters newMin int newMax int value int Returns int Set(int, int) public ValueRangeInt Set(int min, int max) Parameters min int max int Returns ValueRangeInt SetMax(int) public ValueRangeInt SetMax(int max) Parameters max int Returns ValueRangeInt SetMin(int) public ValueRangeInt SetMin(int min) Parameters min int Returns ValueRangeInt ToValueRange() public ValueRange ToValueRange() Returns ValueRange ToVector2() public Vector2 ToVector2() Returns Vector2 Operators operator +(ValueRangeInt, ValueRange) public static ValueRangeInt operator +(ValueRangeInt left, ValueRange right) Parameters left ValueRangeInt right ValueRange Returns ValueRangeInt operator +(ValueRangeInt, ValueRangeInt) public static ValueRangeInt operator +(ValueRangeInt left, ValueRangeInt right) Parameters left ValueRangeInt right ValueRangeInt Returns ValueRangeInt operator +(ValueRangeInt, int) public static ValueRangeInt operator +(ValueRangeInt left, int right) Parameters left ValueRangeInt right int Returns ValueRangeInt operator +(ValueRangeInt, float) public static ValueRangeInt operator +(ValueRangeInt left, float right) Parameters left ValueRangeInt right float Returns ValueRangeInt operator /(ValueRangeInt, ValueRange) public static ValueRangeInt operator /(ValueRangeInt left, ValueRange right) Parameters left ValueRangeInt right ValueRange Returns ValueRangeInt operator /(ValueRangeInt, ValueRangeInt) public static ValueRangeInt operator /(ValueRangeInt left, ValueRangeInt right) Parameters left ValueRangeInt right ValueRangeInt Returns ValueRangeInt operator /(ValueRangeInt, int) public static ValueRangeInt operator /(ValueRangeInt left, int right) Parameters left ValueRangeInt right int Returns ValueRangeInt operator /(ValueRangeInt, float) public static ValueRangeInt operator /(ValueRangeInt left, float right) Parameters left ValueRangeInt right float Returns ValueRangeInt operator *(ValueRangeInt, ValueRange) public static ValueRangeInt operator *(ValueRangeInt left, ValueRange right) Parameters left ValueRangeInt right ValueRange Returns ValueRangeInt operator *(ValueRangeInt, ValueRangeInt) public static ValueRangeInt operator *(ValueRangeInt left, ValueRangeInt right) Parameters left ValueRangeInt right ValueRangeInt Returns ValueRangeInt operator *(ValueRangeInt, int) public static ValueRangeInt operator *(ValueRangeInt left, int right) Parameters left ValueRangeInt right int Returns ValueRangeInt operator *(ValueRangeInt, float) public static ValueRangeInt operator *(ValueRangeInt left, float right) Parameters left ValueRangeInt right float Returns ValueRangeInt operator -(ValueRangeInt, ValueRange) public static ValueRangeInt operator -(ValueRangeInt left, ValueRange right) Parameters left ValueRangeInt right ValueRange Returns ValueRangeInt operator -(ValueRangeInt, ValueRangeInt) public static ValueRangeInt operator -(ValueRangeInt left, ValueRangeInt right) Parameters left ValueRangeInt right ValueRangeInt Returns ValueRangeInt operator -(ValueRangeInt, int) public static ValueRangeInt operator -(ValueRangeInt left, int right) Parameters left ValueRangeInt right int Returns ValueRangeInt operator -(ValueRangeInt, float) public static ValueRangeInt operator -(ValueRangeInt left, float right) Parameters left ValueRangeInt right float Returns ValueRangeInt"
  },
  "api/ShapeEngine.Core.Structs.WindowSettings.html": {
    "href": "api/ShapeEngine.Core.Structs.WindowSettings.html",
    "title": "Struct WindowSettings | ShapeEngine",
    "summary": "Struct WindowSettings Namespace ShapeEngine.Core.Structs Assembly ShapeEngine.dll public struct WindowSettings Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields FrameRateLimit public int FrameRateLimit Field Value int FramebufferTransparent public bool FramebufferTransparent Field Value bool FullscreenAutoRestoring Should fullscreen be automatically left when window loses focus and should the window be restored to fullscreen when window gains focus again. public bool FullscreenAutoRestoring Field Value bool HighDPI Currently High DPI mode does not work correctly in raylib and until it is fixed it should be set to false! public bool HighDPI Field Value bool MaxFramerate public int MaxFramerate Field Value int MinFramerate public int MinFramerate Field Value int Monitor public int Monitor Field Value int MouseEnabled public bool MouseEnabled Field Value bool MouseVisible public bool MouseVisible Field Value bool Msaa4x public bool Msaa4x Field Value bool Title public string Title Field Value string Topmost public bool Topmost Field Value bool Vsync public bool Vsync Field Value bool WindowBorder public WindowBorder WindowBorder Field Value WindowBorder WindowMinSize public Dimensions WindowMinSize Field Value Dimensions WindowOpacity public float WindowOpacity Field Value float WindowSize public Dimensions WindowSize Field Value Dimensions Properties Default public static WindowSettings Default { get; } Property Value WindowSettings"
  },
  "api/ShapeEngine.Core.Structs.html": {
    "href": "api/ShapeEngine.Core.Structs.html",
    "title": "Namespace ShapeEngine.Core.Structs | ShapeEngine",
    "summary": "Namespace ShapeEngine.Core.Structs Classes CurveColor CurveFloat CurveInt CurveVector2 Curve<T> Structs AnchorPoint Used for ui anchor points and rect alignments. 0, 0 is top left, 1, 1 is bottom right. BitFlag BoundsCollisionInfo ClosestPointResult CollisionPoint CollisionPointValidationResult DimensionConversionFactors Dimensions Direction ExitCode Returned by the Run() function in the GameLoop class. GameSettings GameTime GappedOutlineDrawingInfo Used for DrawGappedOutline functions. Grid Grid.Coordinates LineDrawingInfo Used for defining how a line is drawn. NinePatchRect PolarCoordinates ScreenInfo Size Transform2D TransformMatrix2D ValueRange ValueRangeInt WindowSettings Enums LineCapType Determines how the end of a line is drawn."
  },
  "api/ShapeEngine.Core.TextureSurface.html": {
    "href": "api/ShapeEngine.Core.TextureSurface.html",
    "title": "Class TextureSurface | ShapeEngine",
    "summary": "Class TextureSurface Namespace ShapeEngine.Core Assembly ShapeEngine.dll Allows you to create a render texture and draw to its surface. The texture can not be resized after creation and has to be manually unloaded. Multiple functions allow you to draw to the texture (or part of it) to the screen. UseBegin/EndDraw to draw to the texture with any drawing functions. public class TextureSurface Inheritance object TextureSurface Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TextureSurface(int, int) Allows you to create a render texture and draw to its surface. The texture can not be resized after creation and has to be manually unloaded. Multiple functions allow you to draw to the texture (or part of it) to the screen. UseBegin/EndDraw to draw to the texture with any drawing functions. public TextureSurface(int width, int height) Parameters width int The width of the texture. Must be bigger than 0. height int The height of the texture. Must be bigger than 0. Properties Rect public Rect Rect { get; } Property Value Rect Methods BeginDraw() public void BeginDraw() BeginDraw(ColorRgba) public void BeginDraw(ColorRgba clearColor) Parameters clearColor ColorRgba Draw(Rect, ColorRgba) public void Draw(Rect destination, ColorRgba tint) Parameters destination Rect tint ColorRgba Draw(Rect, Rect, ColorRgba) public void Draw(Rect source, Rect destination, ColorRgba tint) Parameters source Rect destination Rect tint ColorRgba Draw(Rect, Vector2, AnchorPoint, ColorRgba) public void Draw(Rect source, Vector2 position, AnchorPoint anchorPoint, ColorRgba tint) Parameters source Rect position Vector2 anchorPoint AnchorPoint tint ColorRgba Draw(Rect, Vector2, float, float, AnchorPoint, ColorRgba) public void Draw(Rect source, Vector2 position, float scale, float rotationDeg, AnchorPoint origin, ColorRgba tint) Parameters source Rect position Vector2 scale float rotationDeg float origin AnchorPoint tint ColorRgba Draw(int, int, ColorRgba) public void Draw(int x, int y, ColorRgba tint) Parameters x int y int tint ColorRgba Draw(Vector2, ColorRgba) public void Draw(Vector2 position, ColorRgba tint) Parameters position Vector2 tint ColorRgba Draw(Vector2, AnchorPoint, ColorRgba) public void Draw(Vector2 position, AnchorPoint anchorPoint, ColorRgba tint) Parameters position Vector2 anchorPoint AnchorPoint tint ColorRgba Draw(Vector2, AnchorPoint, float, ColorRgba) public void Draw(Vector2 position, AnchorPoint anchorPoint, float scale, ColorRgba tint) Parameters position Vector2 anchorPoint AnchorPoint scale float tint ColorRgba Draw(Vector2, float, ColorRgba) public void Draw(Vector2 position, float scale, ColorRgba tint) Parameters position Vector2 scale float tint ColorRgba Draw(Vector2, float, float, AnchorPoint, ColorRgba) public void Draw(Vector2 position, float scale, float rotationDeg, AnchorPoint origin, ColorRgba tint) Parameters position Vector2 scale float rotationDeg float origin AnchorPoint tint ColorRgba EndDraw() public void EndDraw() SetTextureFilter(TextureFilter) public void SetTextureFilter(TextureFilter filter) Parameters filter TextureFilter Unload() public void Unload()"
  },
  "api/ShapeEngine.Core.WindowBorder.html": {
    "href": "api/ShapeEngine.Core.WindowBorder.html",
    "title": "Enum WindowBorder | ShapeEngine",
    "summary": "Enum WindowBorder Namespace ShapeEngine.Core Assembly ShapeEngine.dll public enum WindowBorder Fields Fixed = 1 Resizabled = 0 Undecorated = 2"
  },
  "api/ShapeEngine.Core.WindowDisplayState.html": {
    "href": "api/ShapeEngine.Core.WindowDisplayState.html",
    "title": "Enum WindowDisplayState | ShapeEngine",
    "summary": "Enum WindowDisplayState Namespace ShapeEngine.Core Assembly ShapeEngine.dll public enum WindowDisplayState Fields BorderlessFullscreen = 4 Fullscreen = 3 Maximized = 2 Minimized = 1 Normal = 0"
  },
  "api/ShapeEngine.Core.html": {
    "href": "api/ShapeEngine.Core.html",
    "title": "Namespace ShapeEngine.Core | ShapeEngine",
    "summary": "Namespace ShapeEngine.Core Classes Game GameObject GameWindow PhysicsObject Scene SceneEmpty Shake SlowMotion SlowMotionState SpawnArea Provides a simple area for managing adding/removing, updating, and drawing of area objects. Does not provide a collision system. TextureSurface Allows you to create a render texture and draw to its surface. The texture can not be resized after creation and has to be manually unloaded. Multiple functions allow you to draw to the texture (or part of it) to the screen. UseBegin/EndDraw to draw to the texture with any drawing functions. Enums WindowBorder WindowDisplayState"
  },
  "api/ShapeEngine.Effects.Effect.html": {
    "href": "api/ShapeEngine.Effects.Effect.html",
    "title": "Class Effect | ShapeEngine",
    "summary": "Class Effect Namespace ShapeEngine.Effects Assembly ShapeEngine.dll public class Effect : EffectObject, IUpdateable, IDrawable Inheritance object GameObject EffectObject Effect Implements IUpdateable IDrawable Derived TextEffect Inherited Members EffectObject.TweenType EffectObject.LifetimeF EffectObject.lifetimeTimer EffectObject.TryKill(string, GameObject) EffectObject.GetBoundingBox() EffectObject.GetTweenFloat(float, float) EffectObject.GetTweenVector2(Vector2, Vector2) EffectObject.GetTweenColor(ColorRgba, ColorRgba) EffectObject.Update(GameTime, ScreenInfo, ScreenInfo, ScreenInfo) GameObject.OnKilled GameObject.OnRevived GameObject.Transform GameObject.IsDead GameObject.InterpolateFixedUpdate(GameTime, ScreenInfo, ScreenInfo, ScreenInfo, float) GameObject.IsDrawingToGame(Rect) GameObject.IsDrawingToGameUI(Rect) GameObject.Layer GameObject.UpdateParallaxe(Vector2) GameObject.IsInLayer(uint) GameObject.OnSpawned(SpawnArea) GameObject.OnDespawned(SpawnArea) GameObject.HasLeftBounds(Rect) GameObject.Kill(string, GameObject) GameObject.WasKilled(string, GameObject) GameObject.Revive(string, GameObject) GameObject.WasRevived(string, GameObject) GameObject.TryRevive(string, GameObject) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Effect(Vector2, Size, float) public Effect(Vector2 pos, Size size, float rotRad) Parameters pos Vector2 size Size rotRad float Effect(Vector2, Size, float, float) public Effect(Vector2 pos, Size size, float rotRad, float lifeTime) Parameters pos Vector2 size Size rotRad float lifeTime float Properties RotRad public float RotRad { get; set; } Property Value float Methods DrawGame(ScreenInfo) Draw the game here. Is affected by screen shaders and the camera. public override void DrawGame(ScreenInfo game) Parameters game ScreenInfo DrawGameUI(ScreenInfo) Draw to the game ui here. Is affected by screen shaders but NOT by the camera. public override void DrawGameUI(ScreenInfo gameUi) Parameters gameUi ScreenInfo FixedUpdate(GameTime, ScreenInfo, ScreenInfo, ScreenInfo) Only called when fixed framerate is enabled. Called in fixed interval. public override void FixedUpdate(GameTime fixedTime, ScreenInfo game, ScreenInfo gameUi, ScreenInfo ui) Parameters fixedTime GameTime game ScreenInfo gameUi ScreenInfo ui ScreenInfo"
  },
  "api/ShapeEngine.Effects.EffectObject.html": {
    "href": "api/ShapeEngine.Effects.EffectObject.html",
    "title": "Class EffectObject | ShapeEngine",
    "summary": "Class EffectObject Namespace ShapeEngine.Effects Assembly ShapeEngine.dll public abstract class EffectObject : GameObject, IUpdateable, IDrawable Inheritance object GameObject EffectObject Implements IUpdateable IDrawable Derived Effect Inherited Members GameObject.OnKilled GameObject.OnRevived GameObject.Transform GameObject.IsDead GameObject.FixedUpdate(GameTime, ScreenInfo, ScreenInfo, ScreenInfo) GameObject.InterpolateFixedUpdate(GameTime, ScreenInfo, ScreenInfo, ScreenInfo, float) GameObject.DrawGame(ScreenInfo) GameObject.DrawGameUI(ScreenInfo) GameObject.IsDrawingToGame(Rect) GameObject.IsDrawingToGameUI(Rect) GameObject.Layer GameObject.UpdateParallaxe(Vector2) GameObject.IsInLayer(uint) GameObject.OnSpawned(SpawnArea) GameObject.OnDespawned(SpawnArea) GameObject.HasLeftBounds(Rect) GameObject.Kill(string, GameObject) GameObject.WasKilled(string, GameObject) GameObject.Revive(string, GameObject) GameObject.WasRevived(string, GameObject) GameObject.TryRevive(string, GameObject) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EffectObject(Vector2, Size) public EffectObject(Vector2 pos, Size size) Parameters pos Vector2 size Size EffectObject(Vector2, Size, float) public EffectObject(Vector2 pos, Size size, float lifeTime) Parameters pos Vector2 size Size lifeTime float Fields lifetimeTimer protected BasicTimer lifetimeTimer Field Value BasicTimer Properties LifetimeF public float LifetimeF { get; } Property Value float TweenType public TweenType TweenType { get; set; } Property Value TweenType Methods GetBoundingBox() public override Rect GetBoundingBox() Returns Rect GetTweenColor(ColorRgba, ColorRgba) protected ColorRgba GetTweenColor(ColorRgba startColorRgba, ColorRgba endColorRgba) Parameters startColorRgba ColorRgba endColorRgba ColorRgba Returns ColorRgba GetTweenFloat(float, float) protected float GetTweenFloat(float start, float end) Parameters start float end float Returns float GetTweenVector2(Vector2, Vector2) protected Vector2 GetTweenVector2(Vector2 start, Vector2 end) Parameters start Vector2 end Vector2 Returns Vector2 TryKill(string?, GameObject?) protected override bool TryKill(string? killMessage = null, GameObject? killer = null) Parameters killMessage string killer GameObject Returns bool Update(GameTime, ScreenInfo, ScreenInfo, ScreenInfo) Called every frame. Called before FixedUpdate if fixed framerate is enabled. public override void Update(GameTime time, ScreenInfo game, ScreenInfo gameUi, ScreenInfo ui) Parameters time GameTime game ScreenInfo gameUi ScreenInfo ui ScreenInfo"
  },
  "api/ShapeEngine.Effects.TextEffect.html": {
    "href": "api/ShapeEngine.Effects.TextEffect.html",
    "title": "Class TextEffect | ShapeEngine",
    "summary": "Class TextEffect Namespace ShapeEngine.Effects Assembly ShapeEngine.dll public class TextEffect : Effect, IUpdateable, IDrawable Inheritance object GameObject EffectObject Effect TextEffect Implements IUpdateable IDrawable Inherited Members Effect.RotRad Effect.FixedUpdate(GameTime, ScreenInfo, ScreenInfo, ScreenInfo) Effect.DrawGame(ScreenInfo) Effect.DrawGameUI(ScreenInfo) EffectObject.TweenType EffectObject.LifetimeF EffectObject.lifetimeTimer EffectObject.TryKill(string, GameObject) EffectObject.GetBoundingBox() EffectObject.GetTweenFloat(float, float) EffectObject.GetTweenVector2(Vector2, Vector2) EffectObject.GetTweenColor(ColorRgba, ColorRgba) EffectObject.Update(GameTime, ScreenInfo, ScreenInfo, ScreenInfo) GameObject.OnKilled GameObject.OnRevived GameObject.Transform GameObject.IsDead GameObject.InterpolateFixedUpdate(GameTime, ScreenInfo, ScreenInfo, ScreenInfo, float) GameObject.IsDrawingToGame(Rect) GameObject.IsDrawingToGameUI(Rect) GameObject.Layer GameObject.UpdateParallaxe(Vector2) GameObject.IsInLayer(uint) GameObject.OnSpawned(SpawnArea) GameObject.OnDespawned(SpawnArea) GameObject.HasLeftBounds(Rect) GameObject.Kill(string, GameObject) GameObject.WasKilled(string, GameObject) GameObject.Revive(string, GameObject) GameObject.WasRevived(string, GameObject) GameObject.TryRevive(string, GameObject) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TextEffect(Vector2, Size, float, string) public TextEffect(Vector2 pos, Size size, float rotRad, string text) Parameters pos Vector2 size Size rotRad float text string TextEffect(Vector2, Size, float, string, float) public TextEffect(Vector2 pos, Size size, float rotRad, string text, float lifeTime) Parameters pos Vector2 size Size rotRad float text string lifeTime float Properties Text public string Text { get; set; } Property Value string Methods DrawText(TextFont, AnchorPoint) protected void DrawText(TextFont textFont, AnchorPoint alignement) Parameters textFont TextFont alignement AnchorPoint"
  },
  "api/ShapeEngine.Effects.html": {
    "href": "api/ShapeEngine.Effects.html",
    "title": "Namespace ShapeEngine.Effects | ShapeEngine",
    "summary": "Namespace ShapeEngine.Effects Classes Effect EffectObject TextEffect"
  },
  "api/ShapeEngine.Input.IInputType.html": {
    "href": "api/ShapeEngine.Input.IInputType.html",
    "title": "Interface IInputType | ShapeEngine",
    "summary": "Interface IInputType Namespace ShapeEngine.Input Assembly ShapeEngine.dll public interface IInputType Methods Copy() IInputType Copy() Returns IInputType Create(ShapeGamepadAxis, float) public static IInputType Create(ShapeGamepadAxis gamepadAxis, float deadzone = 0.2) Parameters gamepadAxis ShapeGamepadAxis deadzone float Returns IInputType Create(ShapeGamepadButton, ShapeGamepadButton, float) public static IInputType Create(ShapeGamepadButton neg, ShapeGamepadButton pos, float deadzone = 0.2) Parameters neg ShapeGamepadButton pos ShapeGamepadButton deadzone float Returns IInputType Create(ShapeGamepadButton, float) public static IInputType Create(ShapeGamepadButton button, float deadzone = 0.2) Parameters button ShapeGamepadButton deadzone float Returns IInputType Create(ShapeKeyboardButton) public static IInputType Create(ShapeKeyboardButton button) Parameters button ShapeKeyboardButton Returns IInputType Create(ShapeKeyboardButton, ShapeKeyboardButton) public static IInputType Create(ShapeKeyboardButton neg, ShapeKeyboardButton pos) Parameters neg ShapeKeyboardButton pos ShapeKeyboardButton Returns IInputType Create(ShapeMouseAxis, float) public static IInputType Create(ShapeMouseAxis mouseAxis, float deadzone = 0.2) Parameters mouseAxis ShapeMouseAxis deadzone float Returns IInputType Create(ShapeMouseButton) public static IInputType Create(ShapeMouseButton button) Parameters button ShapeMouseButton Returns IInputType Create(ShapeMouseButton, ShapeMouseButton, float) public static IInputType Create(ShapeMouseButton neg, ShapeMouseButton pos, float deadzone = 0.2) Parameters neg ShapeMouseButton pos ShapeMouseButton deadzone float Returns IInputType Create(ShapeMouseWheelAxis, float) public static IInputType Create(ShapeMouseWheelAxis mouseWheelAxis, float deadzone = 0.2) Parameters mouseWheelAxis ShapeMouseWheelAxis deadzone float Returns IInputType GetDeadzone() float GetDeadzone() Returns float GetInputDevice() InputDeviceType GetInputDevice() Returns InputDeviceType GetName(bool) string GetName(bool shorthand = true) Parameters shorthand bool Returns string GetState(InputState, ShapeGamepadDevice?) InputState GetState(InputState prev, ShapeGamepadDevice? gamepad = null) Parameters prev InputState gamepad ShapeGamepadDevice Returns InputState GetState(ShapeGamepadDevice?) InputState GetState(ShapeGamepadDevice? gamepad = null) Parameters gamepad ShapeGamepadDevice Returns InputState SetDeadzone(float) void SetDeadzone(float value) Parameters value float"
  },
  "api/ShapeEngine.Input.IModifierKey.html": {
    "href": "api/ShapeEngine.Input.IModifierKey.html",
    "title": "Interface IModifierKey | ShapeEngine",
    "summary": "Interface IModifierKey Namespace ShapeEngine.Input Assembly ShapeEngine.dll public interface IModifierKey Methods GetInputDevice() InputDeviceType GetInputDevice() Returns InputDeviceType GetModifierKeyNames(IModifierKey[], ModifierKeyOperator, bool) public static string GetModifierKeyNames(IModifierKey[] modifierKeys, ModifierKeyOperator modifierOperator, bool shorthand = true) Parameters modifierKeys IModifierKey[] modifierOperator ModifierKeyOperator shorthand bool Returns string GetModifierKeyNames(StringBuilder, IModifierKey[], ModifierKeyOperator, bool) public static void GetModifierKeyNames(StringBuilder sb, IModifierKey[] modifierKeys, ModifierKeyOperator modifierOperator, bool shorthand = true) Parameters sb StringBuilder modifierKeys IModifierKey[] modifierOperator ModifierKeyOperator shorthand bool GetName(bool) string GetName(bool shorthand = true) Parameters shorthand bool Returns string IsActive(ModifierKeyOperator, IModifierKey[], ShapeGamepadDevice?) public static bool IsActive(ModifierKeyOperator modifierOperator, IModifierKey[] modifierKeys, ShapeGamepadDevice? gamepad = null) Parameters modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] gamepad ShapeGamepadDevice Returns bool IsActive(ShapeGamepadDevice?) bool IsActive(ShapeGamepadDevice? gamepad = null) Parameters gamepad ShapeGamepadDevice Returns bool"
  },
  "api/ShapeEngine.Input.InputAction.html": {
    "href": "api/ShapeEngine.Input.InputAction.html",
    "title": "Class InputAction | ShapeEngine",
    "summary": "Class InputAction Namespace ShapeEngine.Input Assembly ShapeEngine.dll public class InputAction Inheritance object InputAction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InputAction() public InputAction() InputAction(params IInputType[]) public InputAction(params IInputType[] inputTypes) Parameters inputTypes IInputType[] InputAction(uint) public InputAction(uint accessTag) Parameters accessTag uint InputAction(uint, params IInputType[]) public InputAction(uint accessTag, params IInputType[] inputTypes) Parameters accessTag uint inputTypes IInputType[] InputAction(uint, ShapeGamepadDevice) public InputAction(uint accessTag, ShapeGamepadDevice gamepad) Parameters accessTag uint gamepad ShapeGamepadDevice InputAction(uint, ShapeGamepadDevice, params IInputType[]) public InputAction(uint accessTag, ShapeGamepadDevice gamepad, params IInputType[] inputTypes) Parameters accessTag uint gamepad ShapeGamepadDevice inputTypes IInputType[] Fields AllAccessTag public static readonly uint AllAccessTag Field Value uint DefaultAccessTag public static readonly uint DefaultAccessTag Field Value uint Enabled public bool Enabled Field Value bool Gamepad public ShapeGamepadDevice? Gamepad Field Value ShapeGamepadDevice Title public string Title Field Value string Properties AccessTag public uint AccessTag { get; } Property Value uint AxisGravity How fast an axis moves towards 0 after no input is detected. Used for calculating InputState.Axis values. public float AxisGravity { get; set; } Property Value float AxisSensitivity How fast an axis moves towards the max value (1 / -1) in seconds. Used for calculating InputState.Axis values. public float AxisSensitivity { get; set; } Property Value float HoldDuration public float HoldDuration { get; set; } Property Value float ID public uint ID { get; } Property Value uint Locked public static bool Locked { get; } Property Value bool MultiTapDuration public float MultiTapDuration { get; set; } Property Value float MultiTapTarget public int MultiTapTarget { get; set; } Property Value int NextTag public static uint NextTag { get; } Property Value uint State public InputState State { get; } Property Value InputState Methods AddInput(IInputType) public void AddInput(IInputType newType) Parameters newType IInputType AddInputs(params IInputType[]) public void AddInputs(params IInputType[] inputTypes) Parameters inputTypes IInputType[] ClearInputs() public void ClearInputs() ClearState() public void ClearState() Consume() public InputState Consume() Returns InputState Copy() Copies this instance and all inputs contained. A new ID is generated for the copy. public InputAction Copy() Returns InputAction GetActionDescriptions(InputDeviceType, bool, int, params InputAction[]) public static List<string> GetActionDescriptions(InputDeviceType inputDeviceType, bool shorthand, int typesPerActionCount, params InputAction[] actions) Parameters inputDeviceType InputDeviceType shorthand bool typesPerActionCount int actions InputAction[] Returns List<string> GetActionDescriptions(InputDeviceType, bool, int, List<InputAction>) public static List<string> GetActionDescriptions(InputDeviceType inputDeviceType, bool shorthand, int typesPerActionCount, List<InputAction> actions) Parameters inputDeviceType InputDeviceType shorthand bool typesPerActionCount int actions List<InputAction> Returns List<string> GetGamepadIndex() public int GetGamepadIndex() Returns int GetInputTypeDescription(InputDeviceType, bool, int, bool, bool) Generate a description for this action based on the parameters. Layout-> \"Title: [type a][type b][type c] ...\" public string GetInputTypeDescription(InputDeviceType deviceType, bool shorthand, int count = 1, bool useTitle = false, bool brackets = true) Parameters deviceType InputDeviceType Only input types of the specified device are used. shorthand bool Should the shorthand name or full name of the input type be used? count int Limits the amount input types used. If count is smaller or equal to 0 all input types are used. useTitle bool Should the title of this input action be used as a prefix? \"Title: [input type]\" brackets bool Should the input type be encapsulated in square brackets [\"Input Type\"]?\" Returns string The combined names of all input types. GetInputTypeDescription(bool, int, bool) Generate a description for this action based on the parameters. Layout-> \"Title: [type a][type b][type c] ...\" public string GetInputTypeDescription(bool shorthand, int count = 1, bool useTitle = false) Parameters shorthand bool Should the shorthand name or full name of the input type be used? count int Limits the amount input types used. If count is smaller or equal to 0 all input types are used. useTitle bool Should the title of this input action be used as a prefix? \"Title: [input type]\" Returns string The combined names of all input types. GetInputTypeDescriptionPerDevice(bool, int, bool) Generate a description for this action based on the parameters. Layout-> \"Title: [type a][type b][type c] ...\" public string GetInputTypeDescriptionPerDevice(bool shorthand, int count = 1, bool useTitle = false) Parameters shorthand bool Should the shorthand name or full name of the input type be used? count int Limits the amount input types used per input device. A count of 1 means 1 input type per available input device is used. If count is smaller or equal to 0 all input types are used. useTitle bool Should the title of this input action be used as a prefix? \"Title: [input type]\" Returns string The combined names of all input types. GetInputTypeNames(InputDeviceType, bool, int) Get the names of all input types used in this input action. public List<string> GetInputTypeNames(InputDeviceType deviceType, bool shorthand = true, int count = -1) Parameters deviceType InputDeviceType Only input types of the specified device are used. shorthand bool Should the shorthand name or full name of the input type be used? count int Limits the amount input types used. If count is smaller or equal to 0 all input types are used. Returns List<string> A list of all the input type names found in the action based on the parameters GetInputTypeNames(bool) Get a list of a input device and name for each input type used in this action. public List<InputName> GetInputTypeNames(bool shorthand = true) Parameters shorthand bool Should the shorthand name or full name of the input type be used? Returns List<InputName> A list of all the input types device and name found GetInputTypeNamesLimited(bool, int) Get the names of all input types used in this input action. public List<string> GetInputTypeNamesLimited(bool shorthand = true, int count = -1) Parameters shorthand bool Should the shorthand name or full name of the input type be used? count int Limits the amount input types used. If count is smaller or equal to 0 all input types are used. Returns List<string> A list of all the input type names found in the action based on the parameters GetInputTypeNamesLimitedPerDevice(bool, int) Get the names of all input types used in this input action. public List<string> GetInputTypeNamesLimitedPerDevice(bool shorthand = true, int count = -1) Parameters shorthand bool Should the shorthand name or full name of the input type be used? count int Limits the amount input types used per input device. If count is smaller or equal to 0 all input types are used. Returns List<string> A list of all the input type names found in the action based on the parameters GetInputs() public List<IInputType> GetInputs() Returns List<IInputType> GetInputs(InputDeviceType) public List<IInputType> GetInputs(InputDeviceType filter) Parameters filter InputDeviceType Returns List<IInputType> GetInputs(InputDeviceType, int) public List<IInputType> GetInputs(InputDeviceType filter, int maxCount) Parameters filter InputDeviceType maxCount int Returns List<IInputType> GetInputs(int) public List<IInputType> GetInputs(int maxCount) Parameters maxCount int Returns List<IInputType> GetInputsCopied() public List<IInputType> GetInputsCopied() Returns List<IInputType> GetInputsCopied(InputDeviceType) public List<IInputType> GetInputsCopied(InputDeviceType filter) Parameters filter InputDeviceType Returns List<IInputType> GetState(ShapeGamepadAxis, uint, int, float) public static InputState GetState(ShapeGamepadAxis axis, uint accessTag, int gamepadIndex, float deadzone = 0.2) Parameters axis ShapeGamepadAxis accessTag uint gamepadIndex int deadzone float Returns InputState GetState(ShapeGamepadButton, ShapeGamepadButton, uint, int, float) public static InputState GetState(ShapeGamepadButton neg, ShapeGamepadButton pos, uint accessTag, int gamepadIndex, float deadzone = 0.2) Parameters neg ShapeGamepadButton pos ShapeGamepadButton accessTag uint gamepadIndex int deadzone float Returns InputState GetState(ShapeGamepadButton, uint, int, float) public static InputState GetState(ShapeGamepadButton button, uint accessTag, int gamepadIndex, float deadzone = 0.2) Parameters button ShapeGamepadButton accessTag uint gamepadIndex int deadzone float Returns InputState GetState(ShapeKeyboardButton, ShapeKeyboardButton, uint) public static InputState GetState(ShapeKeyboardButton neg, ShapeKeyboardButton pos, uint accessTag) Parameters neg ShapeKeyboardButton pos ShapeKeyboardButton accessTag uint Returns InputState GetState(ShapeKeyboardButton, uint) public static InputState GetState(ShapeKeyboardButton button, uint accessTag) Parameters button ShapeKeyboardButton accessTag uint Returns InputState GetState(ShapeMouseButton, ShapeMouseButton, uint) public static InputState GetState(ShapeMouseButton neg, ShapeMouseButton pos, uint accessTag) Parameters neg ShapeMouseButton pos ShapeMouseButton accessTag uint Returns InputState GetState(ShapeMouseButton, uint) public static InputState GetState(ShapeMouseButton button, uint accessTag) Parameters button ShapeMouseButton accessTag uint Returns InputState GetState(ShapeMouseWheelAxis, uint, float) public static InputState GetState(ShapeMouseWheelAxis axis, uint accessTag, float deadzone = 1) Parameters axis ShapeMouseWheelAxis accessTag uint deadzone float Returns InputState HasAccess(InputAction) public static bool HasAccess(InputAction action) Parameters action InputAction Returns bool HasAccess(uint) public static bool HasAccess(uint tag) Parameters tag uint Returns bool HasInput(IInputType) public bool HasInput(IInputType inputType) Parameters inputType IInputType Returns bool HasInput(InputDeviceType) public bool HasInput(InputDeviceType inputDeviceType) Parameters inputDeviceType InputDeviceType Returns bool IsInputAvailable(uint) public static bool IsInputAvailable(uint tag) Parameters tag uint Returns bool Lock() public static void Lock() Lock(BitFlag, BitFlag) public static void Lock(BitFlag whitelist, BitFlag blacklist) Parameters whitelist BitFlag blacklist BitFlag LockBlacklist(BitFlag) public static void LockBlacklist(BitFlag blacklist) Parameters blacklist BitFlag LockWhitelist(BitFlag) public static void LockWhitelist(BitFlag whitelist) Parameters whitelist BitFlag RemoveInput(IInputType) public bool RemoveInput(IInputType inputType) Parameters inputType IInputType Returns bool RemoveInputs(InputDeviceType) public List<IInputType> RemoveInputs(InputDeviceType filter) Parameters filter InputDeviceType Returns List<IInputType> Unlock() public static void Unlock() Update(float) public void Update(float dt) Parameters dt float UpdateActions(float, ShapeGamepadDevice?, params InputAction[]) public static void UpdateActions(float dt, ShapeGamepadDevice? gamepad, params InputAction[] actions) Parameters dt float gamepad ShapeGamepadDevice actions InputAction[] UpdateActions(float, ShapeGamepadDevice?, List<InputAction>) public static void UpdateActions(float dt, ShapeGamepadDevice? gamepad, List<InputAction> actions) Parameters dt float gamepad ShapeGamepadDevice actions List<InputAction>"
  },
  "api/ShapeEngine.Input.InputDeviceType.html": {
    "href": "api/ShapeEngine.Input.InputDeviceType.html",
    "title": "Enum InputDeviceType | ShapeEngine",
    "summary": "Enum InputDeviceType Namespace ShapeEngine.Input Assembly ShapeEngine.dll public enum InputDeviceType Fields Gamepad = 3 Keyboard = 1 Mouse = 2"
  },
  "api/ShapeEngine.Input.InputEvent.html": {
    "href": "api/ShapeEngine.Input.InputEvent.html",
    "title": "Class InputEvent | ShapeEngine",
    "summary": "Class InputEvent Namespace ShapeEngine.Input Assembly ShapeEngine.dll public class InputEvent Inheritance object InputEvent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InputEvent(ShapeGamepadDevice, ShapeGamepadButton) public InputEvent(ShapeGamepadDevice gamepad, ShapeGamepadButton button) Parameters gamepad ShapeGamepadDevice button ShapeGamepadButton InputEvent(ShapeKeyboardButton) public InputEvent(ShapeKeyboardButton button) Parameters button ShapeKeyboardButton InputEvent(ShapeMouseButton) public InputEvent(ShapeMouseButton button) Parameters button ShapeMouseButton Fields Gamepad public readonly ShapeGamepadDevice? Gamepad Field Value ShapeGamepadDevice GamepadButton public readonly ShapeGamepadButton GamepadButton Field Value ShapeGamepadButton KeyboardButton public readonly ShapeKeyboardButton KeyboardButton Field Value ShapeKeyboardButton MouseButton public readonly ShapeMouseButton MouseButton Field Value ShapeMouseButton Type public readonly InputDeviceType Type Field Value InputDeviceType Properties IsGamepad public bool IsGamepad { get; } Property Value bool IsKeyboard public bool IsKeyboard { get; } Property Value bool IsMouse public bool IsMouse { get; } Property Value bool"
  },
  "api/ShapeEngine.Input.InputEventHandler.InputEventCallback.html": {
    "href": "api/ShapeEngine.Input.InputEventHandler.InputEventCallback.html",
    "title": "Delegate InputEventHandler.InputEventCallback | ShapeEngine",
    "summary": "Delegate InputEventHandler.InputEventCallback Namespace ShapeEngine.Input Assembly ShapeEngine.dll Callback for receiving input events. Should return if input event should propagate further down. public delegate bool InputEventHandler.InputEventCallback(InputEvent inputEvent) Parameters inputEvent InputEvent Callback for receiving input events. Should return if input event should propagate further down. Returns bool Callback for receiving input events. Should return if input event should propagate further down."
  },
  "api/ShapeEngine.Input.InputEventHandler.html": {
    "href": "api/ShapeEngine.Input.InputEventHandler.html",
    "title": "Class InputEventHandler | ShapeEngine",
    "summary": "Class InputEventHandler Namespace ShapeEngine.Input Assembly ShapeEngine.dll public class InputEventHandler Inheritance object InputEventHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InputEventHandler(ShapeKeyboardDevice, ShapeMouseDevice, ShapeGamepadDeviceManager) public InputEventHandler(ShapeKeyboardDevice keyboard, ShapeMouseDevice mouse, ShapeGamepadDeviceManager gamepadManager) Parameters keyboard ShapeKeyboardDevice mouse ShapeMouseDevice gamepadManager ShapeGamepadDeviceManager Methods AddListener(InputEventCallback, uint) Register a callback to be notified when a button was pressed/ released on a keyboard, mouse, or gamepad. public bool AddListener(InputEventHandler.InputEventCallback callback, uint order) Parameters callback InputEventHandler.InputEventCallback The callback for input events. order uint Lower order comes first. Returns bool Returns if adding was successfull. RemoveListener(InputEventCallback) Remove the specified callback listener. public bool RemoveListener(InputEventHandler.InputEventCallback callback) Parameters callback InputEventHandler.InputEventCallback The callback to removed. Returns bool Returns if removal was successfull."
  },
  "api/ShapeEngine.Input.InputName.html": {
    "href": "api/ShapeEngine.Input.InputName.html",
    "title": "Struct InputName | ShapeEngine",
    "summary": "Struct InputName Namespace ShapeEngine.Input Assembly ShapeEngine.dll public readonly struct InputName Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors InputName(string, InputDeviceType) public InputName(string name, InputDeviceType inputDeviceType) Parameters name string inputDeviceType InputDeviceType Fields InputDeviceType public readonly InputDeviceType InputDeviceType Field Value InputDeviceType Name public readonly string Name Field Value string"
  },
  "api/ShapeEngine.Input.InputState.html": {
    "href": "api/ShapeEngine.Input.InputState.html",
    "title": "Struct InputState | ShapeEngine",
    "summary": "Struct InputState Namespace ShapeEngine.Input Assembly ShapeEngine.dll public readonly struct InputState Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors InputState() public InputState() InputState(InputState, InputState) public InputState(InputState prev, InputState cur) Parameters prev InputState cur InputState InputState(InputState, InputState, InputDeviceType) public InputState(InputState prev, InputState cur, InputDeviceType inputDeviceType) Parameters prev InputState cur InputState inputDeviceType InputDeviceType InputState(InputState, float, float) public InputState(InputState state, float holdF, float multiTapF) Parameters state InputState holdF float multiTapF float InputState(bool, bool, float, int, InputDeviceType) public InputState(bool down, bool up, float axisRaw, int gamepad, InputDeviceType inputDeviceType) Parameters down bool up bool axisRaw float gamepad int inputDeviceType InputDeviceType Fields Axis public readonly float Axis Field Value float AxisRaw public readonly float AxisRaw Field Value float Consumed public readonly bool Consumed Field Value bool Down public readonly bool Down Field Value bool Gamepad public readonly int Gamepad Field Value int HoldF public readonly float HoldF Field Value float HoldState public readonly MultiTapState HoldState Field Value MultiTapState InputDeviceType public readonly InputDeviceType InputDeviceType Field Value InputDeviceType MultiTapF public readonly float MultiTapF Field Value float MultiTapState public readonly MultiTapState MultiTapState Field Value MultiTapState Pressed public readonly bool Pressed Field Value bool Released public readonly bool Released Field Value bool Up public readonly bool Up Field Value bool Methods Accumulate(InputState) public InputState Accumulate(InputState other) Parameters other InputState Returns InputState AdjustAxis(float) public InputState AdjustAxis(float value) Parameters value float Returns InputState Consume() public InputState Consume() Returns InputState GetPressedType() public PressedType GetPressedType() Returns PressedType"
  },
  "api/ShapeEngine.Input.InputTypeGamepadAxis.html": {
    "href": "api/ShapeEngine.Input.InputTypeGamepadAxis.html",
    "title": "Class InputTypeGamepadAxis | ShapeEngine",
    "summary": "Class InputTypeGamepadAxis Namespace ShapeEngine.Input Assembly ShapeEngine.dll public class InputTypeGamepadAxis : IInputType Inheritance object InputTypeGamepadAxis Implements IInputType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InputTypeGamepadAxis(ShapeGamepadAxis, float) public InputTypeGamepadAxis(ShapeGamepadAxis axis, float deadzone = 0.1) Parameters axis ShapeGamepadAxis deadzone float InputTypeGamepadAxis(ShapeGamepadAxis, float, ModifierKeyOperator, IModifierKey) public InputTypeGamepadAxis(ShapeGamepadAxis axis, float deadzone, ModifierKeyOperator modifierOperator, IModifierKey modifierKey) Parameters axis ShapeGamepadAxis deadzone float modifierOperator ModifierKeyOperator modifierKey IModifierKey InputTypeGamepadAxis(ShapeGamepadAxis, float, ModifierKeyOperator, params IModifierKey[]) public InputTypeGamepadAxis(ShapeGamepadAxis axis, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters axis ShapeGamepadAxis deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Methods Copy() public IInputType Copy() Returns IInputType GetDeadzone() public float GetDeadzone() Returns float GetInputDevice() public InputDeviceType GetInputDevice() Returns InputDeviceType GetName(bool) public virtual string GetName(bool shorthand = true) Parameters shorthand bool Returns string GetState(InputState, ShapeGamepadDevice?) public InputState GetState(InputState prev, ShapeGamepadDevice? gamepad) Parameters prev InputState gamepad ShapeGamepadDevice Returns InputState GetState(ShapeGamepadDevice?) public InputState GetState(ShapeGamepadDevice? gamepad) Parameters gamepad ShapeGamepadDevice Returns InputState SetDeadzone(float) public void SetDeadzone(float value) Parameters value float"
  },
  "api/ShapeEngine.Input.InputTypeGamepadButton.html": {
    "href": "api/ShapeEngine.Input.InputTypeGamepadButton.html",
    "title": "Class InputTypeGamepadButton | ShapeEngine",
    "summary": "Class InputTypeGamepadButton Namespace ShapeEngine.Input Assembly ShapeEngine.dll public class InputTypeGamepadButton : IInputType Inheritance object InputTypeGamepadButton Implements IInputType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InputTypeGamepadButton(ShapeGamepadButton, float) public InputTypeGamepadButton(ShapeGamepadButton button, float deadzone = 0.1) Parameters button ShapeGamepadButton deadzone float InputTypeGamepadButton(ShapeGamepadButton, float, ModifierKeyOperator, IModifierKey) public InputTypeGamepadButton(ShapeGamepadButton button, float deadzone, ModifierKeyOperator modifierOperator, IModifierKey modifierKey) Parameters button ShapeGamepadButton deadzone float modifierOperator ModifierKeyOperator modifierKey IModifierKey InputTypeGamepadButton(ShapeGamepadButton, float, ModifierKeyOperator, params IModifierKey[]) public InputTypeGamepadButton(ShapeGamepadButton button, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters button ShapeGamepadButton deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Methods Copy() public IInputType Copy() Returns IInputType GetDeadzone() public float GetDeadzone() Returns float GetInputDevice() public InputDeviceType GetInputDevice() Returns InputDeviceType GetName(bool) public virtual string GetName(bool shorthand = true) Parameters shorthand bool Returns string GetState(InputState, ShapeGamepadDevice?) public InputState GetState(InputState prev, ShapeGamepadDevice? gamepad) Parameters prev InputState gamepad ShapeGamepadDevice Returns InputState GetState(ShapeGamepadDevice?) public InputState GetState(ShapeGamepadDevice? gamepad) Parameters gamepad ShapeGamepadDevice Returns InputState SetDeadzone(float) public void SetDeadzone(float value) Parameters value float"
  },
  "api/ShapeEngine.Input.InputTypeGamepadButtonAxis.html": {
    "href": "api/ShapeEngine.Input.InputTypeGamepadButtonAxis.html",
    "title": "Class InputTypeGamepadButtonAxis | ShapeEngine",
    "summary": "Class InputTypeGamepadButtonAxis Namespace ShapeEngine.Input Assembly ShapeEngine.dll public class InputTypeGamepadButtonAxis : IInputType Inheritance object InputTypeGamepadButtonAxis Implements IInputType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InputTypeGamepadButtonAxis(ShapeGamepadButton, ShapeGamepadButton, float) public InputTypeGamepadButtonAxis(ShapeGamepadButton neg, ShapeGamepadButton pos, float deadzone = 0.1) Parameters neg ShapeGamepadButton pos ShapeGamepadButton deadzone float InputTypeGamepadButtonAxis(ShapeGamepadButton, ShapeGamepadButton, float, ModifierKeyOperator, IModifierKey) public InputTypeGamepadButtonAxis(ShapeGamepadButton neg, ShapeGamepadButton pos, float deadzone, ModifierKeyOperator modifierOperator, IModifierKey modifierKey) Parameters neg ShapeGamepadButton pos ShapeGamepadButton deadzone float modifierOperator ModifierKeyOperator modifierKey IModifierKey InputTypeGamepadButtonAxis(ShapeGamepadButton, ShapeGamepadButton, float, ModifierKeyOperator, params IModifierKey[]) public InputTypeGamepadButtonAxis(ShapeGamepadButton neg, ShapeGamepadButton pos, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters neg ShapeGamepadButton pos ShapeGamepadButton deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Methods Copy() public IInputType Copy() Returns IInputType GetDeadzone() public float GetDeadzone() Returns float GetInputDevice() public InputDeviceType GetInputDevice() Returns InputDeviceType GetName(bool) public virtual string GetName(bool shorthand = true) Parameters shorthand bool Returns string GetState(InputState, ShapeGamepadDevice?) public InputState GetState(InputState prev, ShapeGamepadDevice? gamepad) Parameters prev InputState gamepad ShapeGamepadDevice Returns InputState GetState(ShapeGamepadDevice?) public InputState GetState(ShapeGamepadDevice? gamepad) Parameters gamepad ShapeGamepadDevice Returns InputState SetDeadzone(float) public void SetDeadzone(float value) Parameters value float"
  },
  "api/ShapeEngine.Input.InputTypeKeyboardButton.html": {
    "href": "api/ShapeEngine.Input.InputTypeKeyboardButton.html",
    "title": "Class InputTypeKeyboardButton | ShapeEngine",
    "summary": "Class InputTypeKeyboardButton Namespace ShapeEngine.Input Assembly ShapeEngine.dll public sealed class InputTypeKeyboardButton : IInputType Inheritance object InputTypeKeyboardButton Implements IInputType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors InputTypeKeyboardButton(ShapeKeyboardButton) public InputTypeKeyboardButton(ShapeKeyboardButton button) Parameters button ShapeKeyboardButton InputTypeKeyboardButton(ShapeKeyboardButton, ModifierKeyOperator, IModifierKey) public InputTypeKeyboardButton(ShapeKeyboardButton button, ModifierKeyOperator modifierOperator, IModifierKey modifierKey) Parameters button ShapeKeyboardButton modifierOperator ModifierKeyOperator modifierKey IModifierKey InputTypeKeyboardButton(ShapeKeyboardButton, ModifierKeyOperator, params IModifierKey[]) public InputTypeKeyboardButton(ShapeKeyboardButton button, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters button ShapeKeyboardButton modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Methods Copy() public IInputType Copy() Returns IInputType GetDeadzone() public float GetDeadzone() Returns float GetInputDevice() public InputDeviceType GetInputDevice() Returns InputDeviceType GetName(bool) public string GetName(bool shorthand = true) Parameters shorthand bool Returns string GetState(InputState, ShapeGamepadDevice?) public InputState GetState(InputState prev, ShapeGamepadDevice? gamepad = null) Parameters prev InputState gamepad ShapeGamepadDevice Returns InputState GetState(ShapeGamepadDevice?) public InputState GetState(ShapeGamepadDevice? gamepad = null) Parameters gamepad ShapeGamepadDevice Returns InputState SetDeadzone(float) public void SetDeadzone(float value) Parameters value float"
  },
  "api/ShapeEngine.Input.InputTypeKeyboardButtonAxis.html": {
    "href": "api/ShapeEngine.Input.InputTypeKeyboardButtonAxis.html",
    "title": "Class InputTypeKeyboardButtonAxis | ShapeEngine",
    "summary": "Class InputTypeKeyboardButtonAxis Namespace ShapeEngine.Input Assembly ShapeEngine.dll public class InputTypeKeyboardButtonAxis : IInputType Inheritance object InputTypeKeyboardButtonAxis Implements IInputType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InputTypeKeyboardButtonAxis(ShapeKeyboardButton, ShapeKeyboardButton) public InputTypeKeyboardButtonAxis(ShapeKeyboardButton neg, ShapeKeyboardButton pos) Parameters neg ShapeKeyboardButton pos ShapeKeyboardButton InputTypeKeyboardButtonAxis(ShapeKeyboardButton, ShapeKeyboardButton, ModifierKeyOperator, IModifierKey) public InputTypeKeyboardButtonAxis(ShapeKeyboardButton neg, ShapeKeyboardButton pos, ModifierKeyOperator modifierOperator, IModifierKey modifierKey) Parameters neg ShapeKeyboardButton pos ShapeKeyboardButton modifierOperator ModifierKeyOperator modifierKey IModifierKey InputTypeKeyboardButtonAxis(ShapeKeyboardButton, ShapeKeyboardButton, ModifierKeyOperator, params IModifierKey[]) public InputTypeKeyboardButtonAxis(ShapeKeyboardButton neg, ShapeKeyboardButton pos, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters neg ShapeKeyboardButton pos ShapeKeyboardButton modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Methods Copy() public IInputType Copy() Returns IInputType GetDeadzone() public float GetDeadzone() Returns float GetInputDevice() public InputDeviceType GetInputDevice() Returns InputDeviceType GetName(bool) public virtual string GetName(bool shorthand = true) Parameters shorthand bool Returns string GetState(InputState, ShapeGamepadDevice?) public InputState GetState(InputState prev, ShapeGamepadDevice? gamepad = null) Parameters prev InputState gamepad ShapeGamepadDevice Returns InputState GetState(ShapeGamepadDevice?) public InputState GetState(ShapeGamepadDevice? gamepad = null) Parameters gamepad ShapeGamepadDevice Returns InputState SetDeadzone(float) public void SetDeadzone(float value) Parameters value float"
  },
  "api/ShapeEngine.Input.InputTypeMouseAxis.html": {
    "href": "api/ShapeEngine.Input.InputTypeMouseAxis.html",
    "title": "Class InputTypeMouseAxis | ShapeEngine",
    "summary": "Class InputTypeMouseAxis Namespace ShapeEngine.Input Assembly ShapeEngine.dll public sealed class InputTypeMouseAxis : IInputType Inheritance object InputTypeMouseAxis Implements IInputType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors InputTypeMouseAxis(ShapeMouseAxis, float) public InputTypeMouseAxis(ShapeMouseAxis axis, float deadzone = 0.5) Parameters axis ShapeMouseAxis deadzone float InputTypeMouseAxis(ShapeMouseAxis, float, ModifierKeyOperator, IModifierKey) public InputTypeMouseAxis(ShapeMouseAxis axis, float deadzone, ModifierKeyOperator modifierOperator, IModifierKey modifierKey) Parameters axis ShapeMouseAxis deadzone float modifierOperator ModifierKeyOperator modifierKey IModifierKey InputTypeMouseAxis(ShapeMouseAxis, float, ModifierKeyOperator, params IModifierKey[]) public InputTypeMouseAxis(ShapeMouseAxis axis, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters axis ShapeMouseAxis deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Methods Copy() public IInputType Copy() Returns IInputType GetDeadzone() public float GetDeadzone() Returns float GetInputDevice() public InputDeviceType GetInputDevice() Returns InputDeviceType GetName(bool) public string GetName(bool shorthand = true) Parameters shorthand bool Returns string GetState(InputState, ShapeGamepadDevice?) public InputState GetState(InputState prev, ShapeGamepadDevice? gamepad = null) Parameters prev InputState gamepad ShapeGamepadDevice Returns InputState GetState(ShapeGamepadDevice?) public InputState GetState(ShapeGamepadDevice? gamepad = null) Parameters gamepad ShapeGamepadDevice Returns InputState SetDeadzone(float) public void SetDeadzone(float value) Parameters value float"
  },
  "api/ShapeEngine.Input.InputTypeMouseButton.html": {
    "href": "api/ShapeEngine.Input.InputTypeMouseButton.html",
    "title": "Class InputTypeMouseButton | ShapeEngine",
    "summary": "Class InputTypeMouseButton Namespace ShapeEngine.Input Assembly ShapeEngine.dll public class InputTypeMouseButton : IInputType Inheritance object InputTypeMouseButton Implements IInputType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InputTypeMouseButton(ShapeMouseButton, float) public InputTypeMouseButton(ShapeMouseButton button, float deadzone = 0) Parameters button ShapeMouseButton deadzone float InputTypeMouseButton(ShapeMouseButton, float, ModifierKeyOperator, IModifierKey) public InputTypeMouseButton(ShapeMouseButton button, float deadzone, ModifierKeyOperator modifierOperator, IModifierKey modifierKey) Parameters button ShapeMouseButton deadzone float modifierOperator ModifierKeyOperator modifierKey IModifierKey InputTypeMouseButton(ShapeMouseButton, float, ModifierKeyOperator, params IModifierKey[]) public InputTypeMouseButton(ShapeMouseButton button, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters button ShapeMouseButton deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Methods Copy() public IInputType Copy() Returns IInputType GetDeadzone() public float GetDeadzone() Returns float GetInputDevice() public InputDeviceType GetInputDevice() Returns InputDeviceType GetName(bool) public virtual string GetName(bool shorthand = true) Parameters shorthand bool Returns string GetState(InputState, ShapeGamepadDevice?) public InputState GetState(InputState prev, ShapeGamepadDevice? gamepad = null) Parameters prev InputState gamepad ShapeGamepadDevice Returns InputState GetState(ShapeGamepadDevice?) public InputState GetState(ShapeGamepadDevice? gamepad = null) Parameters gamepad ShapeGamepadDevice Returns InputState SetDeadzone(float) public void SetDeadzone(float value) Parameters value float"
  },
  "api/ShapeEngine.Input.InputTypeMouseButtonAxis.html": {
    "href": "api/ShapeEngine.Input.InputTypeMouseButtonAxis.html",
    "title": "Class InputTypeMouseButtonAxis | ShapeEngine",
    "summary": "Class InputTypeMouseButtonAxis Namespace ShapeEngine.Input Assembly ShapeEngine.dll public class InputTypeMouseButtonAxis : IInputType Inheritance object InputTypeMouseButtonAxis Implements IInputType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InputTypeMouseButtonAxis(ShapeMouseButton, ShapeMouseButton, float) public InputTypeMouseButtonAxis(ShapeMouseButton neg, ShapeMouseButton pos, float deadzone = 0) Parameters neg ShapeMouseButton pos ShapeMouseButton deadzone float InputTypeMouseButtonAxis(ShapeMouseButton, ShapeMouseButton, float, ModifierKeyOperator, IModifierKey) public InputTypeMouseButtonAxis(ShapeMouseButton neg, ShapeMouseButton pos, float deadzone, ModifierKeyOperator modifierOperator, IModifierKey modifierKey) Parameters neg ShapeMouseButton pos ShapeMouseButton deadzone float modifierOperator ModifierKeyOperator modifierKey IModifierKey InputTypeMouseButtonAxis(ShapeMouseButton, ShapeMouseButton, float, ModifierKeyOperator, params IModifierKey[]) public InputTypeMouseButtonAxis(ShapeMouseButton neg, ShapeMouseButton pos, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters neg ShapeMouseButton pos ShapeMouseButton deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Methods Copy() public IInputType Copy() Returns IInputType GetDeadzone() public float GetDeadzone() Returns float GetInputDevice() public InputDeviceType GetInputDevice() Returns InputDeviceType GetName(bool) public virtual string GetName(bool shorthand = true) Parameters shorthand bool Returns string GetState(InputState, ShapeGamepadDevice?) public InputState GetState(InputState prev, ShapeGamepadDevice? gamepad = null) Parameters prev InputState gamepad ShapeGamepadDevice Returns InputState GetState(ShapeGamepadDevice?) public InputState GetState(ShapeGamepadDevice? gamepad = null) Parameters gamepad ShapeGamepadDevice Returns InputState SetDeadzone(float) public void SetDeadzone(float value) Parameters value float"
  },
  "api/ShapeEngine.Input.InputTypeMouseWheelAxis.html": {
    "href": "api/ShapeEngine.Input.InputTypeMouseWheelAxis.html",
    "title": "Class InputTypeMouseWheelAxis | ShapeEngine",
    "summary": "Class InputTypeMouseWheelAxis Namespace ShapeEngine.Input Assembly ShapeEngine.dll public class InputTypeMouseWheelAxis : IInputType Inheritance object InputTypeMouseWheelAxis Implements IInputType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InputTypeMouseWheelAxis(ShapeMouseWheelAxis, float) public InputTypeMouseWheelAxis(ShapeMouseWheelAxis axis, float deadzone = 0.2) Parameters axis ShapeMouseWheelAxis deadzone float InputTypeMouseWheelAxis(ShapeMouseWheelAxis, float, ModifierKeyOperator, IModifierKey) public InputTypeMouseWheelAxis(ShapeMouseWheelAxis axis, float deadzone, ModifierKeyOperator modifierOperator, IModifierKey modifierKey) Parameters axis ShapeMouseWheelAxis deadzone float modifierOperator ModifierKeyOperator modifierKey IModifierKey InputTypeMouseWheelAxis(ShapeMouseWheelAxis, float, ModifierKeyOperator, params IModifierKey[]) public InputTypeMouseWheelAxis(ShapeMouseWheelAxis axis, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters axis ShapeMouseWheelAxis deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Methods Copy() public IInputType Copy() Returns IInputType GetDeadzone() public float GetDeadzone() Returns float GetInputDevice() public InputDeviceType GetInputDevice() Returns InputDeviceType GetName(bool) public virtual string GetName(bool shorthand = true) Parameters shorthand bool Returns string GetState(InputState, ShapeGamepadDevice?) public InputState GetState(InputState prev, ShapeGamepadDevice? gamepad = null) Parameters prev InputState gamepad ShapeGamepadDevice Returns InputState GetState(ShapeGamepadDevice?) public InputState GetState(ShapeGamepadDevice? gamepad = null) Parameters gamepad ShapeGamepadDevice Returns InputState SetDeadzone(float) public void SetDeadzone(float value) Parameters value float"
  },
  "api/ShapeEngine.Input.ModifierKeyGamepadButton.html": {
    "href": "api/ShapeEngine.Input.ModifierKeyGamepadButton.html",
    "title": "Class ModifierKeyGamepadButton | ShapeEngine",
    "summary": "Class ModifierKeyGamepadButton Namespace ShapeEngine.Input Assembly ShapeEngine.dll public class ModifierKeyGamepadButton : IModifierKey Inheritance object ModifierKeyGamepadButton Implements IModifierKey Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ModifierKeyGamepadButton(ShapeGamepadButton, bool) public ModifierKeyGamepadButton(ShapeGamepadButton modifierKey, bool reverseModifier = false) Parameters modifierKey ShapeGamepadButton reverseModifier bool Methods GetInputDevice() public InputDeviceType GetInputDevice() Returns InputDeviceType GetName(bool) public string GetName(bool shorthand = true) Parameters shorthand bool Returns string IsActive(ShapeGamepadDevice?) public bool IsActive(ShapeGamepadDevice? gamepad) Parameters gamepad ShapeGamepadDevice Returns bool"
  },
  "api/ShapeEngine.Input.ModifierKeyKeyboardButton.html": {
    "href": "api/ShapeEngine.Input.ModifierKeyKeyboardButton.html",
    "title": "Class ModifierKeyKeyboardButton | ShapeEngine",
    "summary": "Class ModifierKeyKeyboardButton Namespace ShapeEngine.Input Assembly ShapeEngine.dll public class ModifierKeyKeyboardButton : IModifierKey Inheritance object ModifierKeyKeyboardButton Implements IModifierKey Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ModifierKeyKeyboardButton(ShapeKeyboardButton, bool) public ModifierKeyKeyboardButton(ShapeKeyboardButton modifierKey, bool reverseModifier = false) Parameters modifierKey ShapeKeyboardButton reverseModifier bool Methods GetInputDevice() public InputDeviceType GetInputDevice() Returns InputDeviceType GetName(bool) public string GetName(bool shorthand = true) Parameters shorthand bool Returns string IsActive(ShapeGamepadDevice?) public bool IsActive(ShapeGamepadDevice? gamepad = null) Parameters gamepad ShapeGamepadDevice Returns bool"
  },
  "api/ShapeEngine.Input.ModifierKeyMouseButton.html": {
    "href": "api/ShapeEngine.Input.ModifierKeyMouseButton.html",
    "title": "Class ModifierKeyMouseButton | ShapeEngine",
    "summary": "Class ModifierKeyMouseButton Namespace ShapeEngine.Input Assembly ShapeEngine.dll public class ModifierKeyMouseButton : IModifierKey Inheritance object ModifierKeyMouseButton Implements IModifierKey Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ModifierKeyMouseButton(ShapeMouseButton, bool) public ModifierKeyMouseButton(ShapeMouseButton modifierKey, bool reverseModifier = false) Parameters modifierKey ShapeMouseButton reverseModifier bool Methods GetInputDevice() public InputDeviceType GetInputDevice() Returns InputDeviceType GetName(bool) public string GetName(bool shorthand = true) Parameters shorthand bool Returns string IsActive(ShapeGamepadDevice?) public bool IsActive(ShapeGamepadDevice? gamepad = null) Parameters gamepad ShapeGamepadDevice Returns bool"
  },
  "api/ShapeEngine.Input.ModifierKeyOperator.html": {
    "href": "api/ShapeEngine.Input.ModifierKeyOperator.html",
    "title": "Enum ModifierKeyOperator | ShapeEngine",
    "summary": "Enum ModifierKeyOperator Namespace ShapeEngine.Input Assembly ShapeEngine.dll public enum ModifierKeyOperator Fields And = 1 Or = 0"
  },
  "api/ShapeEngine.Input.MultiTapState.html": {
    "href": "api/ShapeEngine.Input.MultiTapState.html",
    "title": "Enum MultiTapState | ShapeEngine",
    "summary": "Enum MultiTapState Namespace ShapeEngine.Input Assembly ShapeEngine.dll public enum MultiTapState Fields Completed = 2 Failed = 3 InProgress = 1 None = 0"
  },
  "api/ShapeEngine.Input.PressedType.html": {
    "href": "api/ShapeEngine.Input.PressedType.html",
    "title": "Enum PressedType | ShapeEngine",
    "summary": "Enum PressedType Namespace ShapeEngine.Input Assembly ShapeEngine.dll public enum PressedType Fields Hold = 1 MultiTap = 2 None = 0 SingleTap = 3"
  },
  "api/ShapeEngine.Input.ShapeGamepadAxis.html": {
    "href": "api/ShapeEngine.Input.ShapeGamepadAxis.html",
    "title": "Enum ShapeGamepadAxis | ShapeEngine",
    "summary": "Enum ShapeGamepadAxis Namespace ShapeEngine.Input Assembly ShapeEngine.dll public enum ShapeGamepadAxis Extension Methods ShapeInput.GetInputState(ShapeGamepadAxis, int) Fields LEFT_TRIGGER = 4 LEFT_X = 0 LEFT_Y = 1 RIGHT_TRIGGER = 5 RIGHT_X = 2 RIGHT_Y = 3"
  },
  "api/ShapeEngine.Input.ShapeGamepadButton.html": {
    "href": "api/ShapeEngine.Input.ShapeGamepadButton.html",
    "title": "Enum ShapeGamepadButton | ShapeEngine",
    "summary": "Enum ShapeGamepadButton Namespace ShapeEngine.Input Assembly ShapeEngine.dll public enum ShapeGamepadButton Extension Methods ShapeInput.GetInputState(ShapeGamepadButton, int) Fields LEFT_FACE_DOWN = 3 LEFT_FACE_LEFT = 4 LEFT_FACE_RIGHT = 2 LEFT_FACE_UP = 1 LEFT_STICK_DOWN = 31 LEFT_STICK_LEFT = 40 LEFT_STICK_RIGHT = 30 LEFT_STICK_UP = 41 LEFT_THUMB = 16 LEFT_TRIGGER_BOTTOM = 10 LEFT_TRIGGER_TOP = 9 MIDDLE = 14 MIDDLE_LEFT = 13 MIDDLE_RIGHT = 15 NONE = -1 RIGHT_FACE_DOWN = 7 RIGHT_FACE_LEFT = 8 RIGHT_FACE_RIGHT = 6 RIGHT_FACE_UP = 5 RIGHT_STICK_DOWN = 33 RIGHT_STICK_LEFT = 42 RIGHT_STICK_RIGHT = 32 RIGHT_STICK_UP = 43 RIGHT_THUMB = 17 RIGHT_TRIGGER_BOTTOM = 12 RIGHT_TRIGGER_TOP = 11 UNKNOWN = 0"
  },
  "api/ShapeEngine.Input.ShapeGamepadDevice.html": {
    "href": "api/ShapeEngine.Input.ShapeGamepadDevice.html",
    "title": "Class ShapeGamepadDevice | ShapeEngine",
    "summary": "Class ShapeGamepadDevice Namespace ShapeEngine.Input Assembly ShapeEngine.dll public sealed class ShapeGamepadDevice : ShapeInputDevice Inheritance object ShapeGamepadDevice Implements ShapeInputDevice Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ShapeGamepadDevice(int, bool) public ShapeGamepadDevice(int index, bool connected) Parameters index int connected bool Fields AllGamepadAxis public static readonly GamepadAxis[] AllGamepadAxis Field Value GamepadAxis[] AllGamepadButtons public static readonly GamepadButton[] AllGamepadButtons Field Value GamepadButton[] AllShapeGamepadAxis public static readonly ShapeGamepadAxis[] AllShapeGamepadAxis Field Value ShapeGamepadAxis[] AllShapeGamepadButtons public static readonly ShapeGamepadButton[] AllShapeGamepadButtons Field Value ShapeGamepadButton[] Index public readonly int Index Field Value int UsedAxis public readonly List<ShapeGamepadAxis> UsedAxis Field Value List<ShapeGamepadAxis> UsedButtons public readonly List<ShapeGamepadButton> UsedButtons Field Value List<ShapeGamepadButton> Properties Available public bool Available { get; } Property Value bool AxisCount public int AxisCount { get; } Property Value int Connected public bool Connected { get; } Property Value bool Name public string Name { get; } Property Value string Methods Calibrate() public void Calibrate() Claim() public bool Claim() Returns bool Connect() public void Connect() CreateInputState(ShapeGamepadAxis, InputState, float) public InputState CreateInputState(ShapeGamepadAxis axis, InputState previousState, float deadzone = 0.1) Parameters axis ShapeGamepadAxis previousState InputState deadzone float Returns InputState CreateInputState(ShapeGamepadAxis, InputState, float, ModifierKeyOperator, params IModifierKey[]) public InputState CreateInputState(ShapeGamepadAxis axis, InputState previousState, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters axis ShapeGamepadAxis previousState InputState deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns InputState CreateInputState(ShapeGamepadAxis, float) public InputState CreateInputState(ShapeGamepadAxis axis, float deadzone = 0.1) Parameters axis ShapeGamepadAxis deadzone float Returns InputState CreateInputState(ShapeGamepadAxis, float, ModifierKeyOperator, params IModifierKey[]) public InputState CreateInputState(ShapeGamepadAxis axis, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters axis ShapeGamepadAxis deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns InputState CreateInputState(ShapeGamepadButton, InputState, float) public InputState CreateInputState(ShapeGamepadButton button, InputState previousState, float deadzone = 0.1) Parameters button ShapeGamepadButton previousState InputState deadzone float Returns InputState CreateInputState(ShapeGamepadButton, InputState, float, ModifierKeyOperator, params IModifierKey[]) public InputState CreateInputState(ShapeGamepadButton button, InputState previousState, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters button ShapeGamepadButton previousState InputState deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns InputState CreateInputState(ShapeGamepadButton, ShapeGamepadButton, InputState, float) public InputState CreateInputState(ShapeGamepadButton neg, ShapeGamepadButton pos, InputState previousState, float deadzone = 0.2) Parameters neg ShapeGamepadButton pos ShapeGamepadButton previousState InputState deadzone float Returns InputState CreateInputState(ShapeGamepadButton, ShapeGamepadButton, InputState, float, ModifierKeyOperator, params IModifierKey[]) public InputState CreateInputState(ShapeGamepadButton neg, ShapeGamepadButton pos, InputState previousState, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters neg ShapeGamepadButton pos ShapeGamepadButton previousState InputState deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns InputState CreateInputState(ShapeGamepadButton, ShapeGamepadButton, float) public InputState CreateInputState(ShapeGamepadButton neg, ShapeGamepadButton pos, float deadzone = 0.1) Parameters neg ShapeGamepadButton pos ShapeGamepadButton deadzone float Returns InputState CreateInputState(ShapeGamepadButton, ShapeGamepadButton, float, ModifierKeyOperator, params IModifierKey[]) public InputState CreateInputState(ShapeGamepadButton neg, ShapeGamepadButton pos, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters neg ShapeGamepadButton pos ShapeGamepadButton deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns InputState CreateInputState(ShapeGamepadButton, float) public InputState CreateInputState(ShapeGamepadButton button, float deadzone = 0.1) Parameters button ShapeGamepadButton deadzone float Returns InputState CreateInputState(ShapeGamepadButton, float, ModifierKeyOperator, params IModifierKey[]) public InputState CreateInputState(ShapeGamepadButton button, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters button ShapeGamepadButton deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns InputState Disconnect() public void Disconnect() Free() public bool Free() Returns bool GetAxisName(ShapeGamepadAxis, bool) public static string GetAxisName(ShapeGamepadAxis axis, bool shortHand = true) Parameters axis ShapeGamepadAxis shortHand bool Returns string GetAxisState(ShapeGamepadAxis) public InputState GetAxisState(ShapeGamepadAxis axis) Parameters axis ShapeGamepadAxis Returns InputState GetButtonAxisName(ShapeGamepadButton, ShapeGamepadButton, bool) public static string GetButtonAxisName(ShapeGamepadButton neg, ShapeGamepadButton pos, bool shorthand = true) Parameters neg ShapeGamepadButton pos ShapeGamepadButton shorthand bool Returns string GetButtonName(ShapeGamepadButton, bool) public static string GetButtonName(ShapeGamepadButton button, bool shortHand = true) Parameters button ShapeGamepadButton shortHand bool Returns string GetButtonState(ShapeGamepadButton) public InputState GetButtonState(ShapeGamepadButton button) Parameters button ShapeGamepadButton Returns InputState GetValue(ShapeGamepadAxis) public float GetValue(ShapeGamepadAxis axis) Parameters axis ShapeGamepadAxis Returns float GetValue(ShapeGamepadAxis, float) public float GetValue(ShapeGamepadAxis axis, float deadzone) Parameters axis ShapeGamepadAxis deadzone float Returns float GetValue(ShapeGamepadAxis, float, ModifierKeyOperator, params IModifierKey[]) public float GetValue(ShapeGamepadAxis axis, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters axis ShapeGamepadAxis deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns float GetValue(ShapeGamepadButton, ShapeGamepadButton, float) public float GetValue(ShapeGamepadButton neg, ShapeGamepadButton pos, float deadzone = 0.1) Parameters neg ShapeGamepadButton pos ShapeGamepadButton deadzone float Returns float GetValue(ShapeGamepadButton, ShapeGamepadButton, float, ModifierKeyOperator, params IModifierKey[]) public float GetValue(ShapeGamepadButton neg, ShapeGamepadButton pos, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters neg ShapeGamepadButton pos ShapeGamepadButton deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns float GetValue(ShapeGamepadButton, float) public float GetValue(ShapeGamepadButton button, float deadzone = 0.1) Parameters button ShapeGamepadButton deadzone float Returns float GetValue(ShapeGamepadButton, float, ModifierKeyOperator, params IModifierKey[]) public float GetValue(ShapeGamepadButton button, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters button ShapeGamepadButton deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns float IsDown(ShapeGamepadAxis, float) public bool IsDown(ShapeGamepadAxis axis, float deadzone) Parameters axis ShapeGamepadAxis deadzone float Returns bool IsDown(ShapeGamepadAxis, float, ModifierKeyOperator, params IModifierKey[]) public bool IsDown(ShapeGamepadAxis axis, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters axis ShapeGamepadAxis deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns bool IsDown(ShapeGamepadButton, ShapeGamepadButton, float) public bool IsDown(ShapeGamepadButton neg, ShapeGamepadButton pos, float deadzone = 0.1) Parameters neg ShapeGamepadButton pos ShapeGamepadButton deadzone float Returns bool IsDown(ShapeGamepadButton, ShapeGamepadButton, float, ModifierKeyOperator, params IModifierKey[]) public bool IsDown(ShapeGamepadButton neg, ShapeGamepadButton pos, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters neg ShapeGamepadButton pos ShapeGamepadButton deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns bool IsDown(ShapeGamepadButton, float) public bool IsDown(ShapeGamepadButton button, float deadzone = 0.1) Parameters button ShapeGamepadButton deadzone float Returns bool IsDown(ShapeGamepadButton, float, ModifierKeyOperator, params IModifierKey[]) public bool IsDown(ShapeGamepadButton button, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters button ShapeGamepadButton deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns bool IsLocked() public bool IsLocked() Returns bool IsModifierActive(ShapeGamepadButton, bool) public bool IsModifierActive(ShapeGamepadButton modifierKey, bool reverseModifier) Parameters modifierKey ShapeGamepadButton reverseModifier bool Returns bool Lock() public void Lock() Unlock() public void Unlock() Update() public void Update() WasUsed() public bool WasUsed() Returns bool Events OnAvailabilityChanged public event Action? OnAvailabilityChanged Event Type Action OnButtonPressed public event Action<ShapeGamepadDevice, ShapeGamepadButton>? OnButtonPressed Event Type Action<ShapeGamepadDevice, ShapeGamepadButton> OnButtonReleased public event Action<ShapeGamepadDevice, ShapeGamepadButton>? OnButtonReleased Event Type Action<ShapeGamepadDevice, ShapeGamepadButton> OnConnectionChanged public event Action? OnConnectionChanged Event Type Action"
  },
  "api/ShapeEngine.Input.ShapeGamepadDeviceManager.html": {
    "href": "api/ShapeEngine.Input.ShapeGamepadDeviceManager.html",
    "title": "Class ShapeGamepadDeviceManager | ShapeEngine",
    "summary": "Class ShapeGamepadDeviceManager Namespace ShapeEngine.Input Assembly ShapeEngine.dll public sealed class ShapeGamepadDeviceManager Inheritance object ShapeGamepadDeviceManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ShapeGamepadDeviceManager(int) public ShapeGamepadDeviceManager(int maxGamepads = 8) Parameters maxGamepads int Fields LastUsedGamepad public ShapeGamepadDevice? LastUsedGamepad Field Value ShapeGamepadDevice LastUsedGamepads public readonly List<ShapeGamepadDevice> LastUsedGamepads Field Value List<ShapeGamepadDevice> Properties MaxGamepads public int MaxGamepads { get; } Property Value int Methods GetAllGamepads() public List<ShapeGamepadDevice> GetAllGamepads() Returns List<ShapeGamepadDevice> GetAvailableGamepads() public List<ShapeGamepadDevice> GetAvailableGamepads() Returns List<ShapeGamepadDevice> GetConnectedGamepads() public List<ShapeGamepadDevice> GetConnectedGamepads() Returns List<ShapeGamepadDevice> GetGamepad(int) public ShapeGamepadDevice? GetGamepad(int index) Parameters index int Returns ShapeGamepadDevice HasGamepad(int) public bool HasGamepad(int index) Parameters index int Returns bool IsGamepadConnected(int) public bool IsGamepadConnected(int index) Parameters index int Returns bool RequestGamepad(int) public ShapeGamepadDevice? RequestGamepad(int preferredIndex = -1) Parameters preferredIndex int Returns ShapeGamepadDevice ReturnGamepad(ShapeGamepadDevice) public void ReturnGamepad(ShapeGamepadDevice gamepad) Parameters gamepad ShapeGamepadDevice ReturnGamepad(int) public void ReturnGamepad(int index) Parameters index int Update() public void Update() Events OnGamepadButtonPressed public event Action<ShapeGamepadDevice, ShapeGamepadButton>? OnGamepadButtonPressed Event Type Action<ShapeGamepadDevice, ShapeGamepadButton> OnGamepadButtonReleased public event Action<ShapeGamepadDevice, ShapeGamepadButton>? OnGamepadButtonReleased Event Type Action<ShapeGamepadDevice, ShapeGamepadButton> OnGamepadConnectionChanged public event Action<ShapeGamepadDevice, bool>? OnGamepadConnectionChanged Event Type Action<ShapeGamepadDevice, bool>"
  },
  "api/ShapeEngine.Input.ShapeInput.html": {
    "href": "api/ShapeEngine.Input.ShapeInput.html",
    "title": "Class ShapeInput | ShapeEngine",
    "summary": "Class ShapeInput Namespace ShapeEngine.Input Assembly ShapeEngine.dll public static class ShapeInput Inheritance object ShapeInput Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields EventHandler public static readonly InputEventHandler EventHandler Field Value InputEventHandler GamepadDeviceManager public static readonly ShapeGamepadDeviceManager GamepadDeviceManager Field Value ShapeGamepadDeviceManager KeyboardDevice public static readonly ShapeKeyboardDevice KeyboardDevice Field Value ShapeKeyboardDevice MouseDevice public static readonly ShapeMouseDevice MouseDevice Field Value ShapeMouseDevice Properties CurrentInputDeviceType public static InputDeviceType CurrentInputDeviceType { get; } Property Value InputDeviceType CurrentInputDeviceTypeNoMouse public static InputDeviceType CurrentInputDeviceTypeNoMouse { get; } Property Value InputDeviceType Methods FilterInputDevice(InputDeviceType, InputDeviceType, InputDeviceType) public static InputDeviceType FilterInputDevice(InputDeviceType current, InputDeviceType replace, InputDeviceType with) Parameters current InputDeviceType replace InputDeviceType with InputDeviceType Returns InputDeviceType GetCurInputDeviceGenericName() public static string GetCurInputDeviceGenericName() Returns string GetInputDeviceGenericName(InputDeviceType) public static string GetInputDeviceGenericName(InputDeviceType deviceType) Parameters deviceType InputDeviceType Returns string GetInputState(ShapeGamepadAxis, int) public static InputState GetInputState(this ShapeGamepadAxis axis, int gamepadIndex) Parameters axis ShapeGamepadAxis gamepadIndex int Returns InputState GetInputState(ShapeGamepadButton, int) public static InputState GetInputState(this ShapeGamepadButton button, int gamepadIndex) Parameters button ShapeGamepadButton gamepadIndex int Returns InputState GetInputState(ShapeKeyboardButton) public static InputState GetInputState(this ShapeKeyboardButton button) Parameters button ShapeKeyboardButton Returns InputState GetInputState(ShapeMouseAxis) public static InputState GetInputState(this ShapeMouseAxis axis) Parameters axis ShapeMouseAxis Returns InputState GetInputState(ShapeMouseButton) public static InputState GetInputState(this ShapeMouseButton button) Parameters button ShapeMouseButton Returns InputState GetInputState(ShapeMouseWheelAxis) public static InputState GetInputState(this ShapeMouseWheelAxis axis) Parameters axis ShapeMouseWheelAxis Returns InputState Events OnInputDeviceChanged public static event Action<InputDeviceType, InputDeviceType>? OnInputDeviceChanged Event Type Action<InputDeviceType, InputDeviceType>"
  },
  "api/ShapeEngine.Input.ShapeInputDevice.html": {
    "href": "api/ShapeEngine.Input.ShapeInputDevice.html",
    "title": "Interface ShapeInputDevice | ShapeEngine",
    "summary": "Interface ShapeInputDevice Namespace ShapeEngine.Input Assembly ShapeEngine.dll public interface ShapeInputDevice Methods Calibrate() void Calibrate() IsLocked() bool IsLocked() Returns bool Lock() void Lock() Unlock() void Unlock() Update() void Update() WasUsed() bool WasUsed() Returns bool"
  },
  "api/ShapeEngine.Input.ShapeKeyboardButton.html": {
    "href": "api/ShapeEngine.Input.ShapeKeyboardButton.html",
    "title": "Enum ShapeKeyboardButton | ShapeEngine",
    "summary": "Enum ShapeKeyboardButton Namespace ShapeEngine.Input Assembly ShapeEngine.dll public enum ShapeKeyboardButton Extension Methods ShapeInput.GetInputState(ShapeKeyboardButton) Fields A = 65 APOSTROPHE = 39 B = 66 BACK = 7 BACKSLASH = 92 BACKSPACE = 259 C = 67 CAPS_LOCK = 280 COMMA = 44 D = 68 DELETE = 261 DOWN = 264 E = 69 EIGHT = 56 END = 269 ENTER = 257 EQUAL = 61 ESCAPE = 256 F = 70 F1 = 290 F10 = 299 F11 = 300 F12 = 301 F2 = 291 F3 = 292 F4 = 293 F5 = 294 F6 = 295 F7 = 296 F8 = 297 F9 = 298 FIVE = 53 FOUR = 52 G = 71 GRAVE = 96 H = 72 HOME = 268 I = 73 INSERT = 260 J = 74 K = 75 KB_MENU = 348 KP_0 = 320 KP_1 = 321 KP_2 = 322 KP_3 = 323 KP_4 = 324 KP_5 = 325 KP_6 = 326 KP_7 = 327 KP_8 = 328 KP_9 = 329 KP_ADD = 334 KP_DECIMAL = 330 KP_DIVIDE = 331 KP_ENTER = 335 KP_EQUAL = 336 KP_MULTIPLY = 332 KP_SUBTRACT = 333 L = 76 LEFT = 263 LEFT_ALT = 342 LEFT_BRACKET = 91 LEFT_CONTROL = 341 LEFT_SHIFT = 340 LEFT_SUPER = 343 M = 77 MENU = 9 MINUS = 45 N = 78 NINE = 57 NONE = -1 NULL = 8 NUM_LOCK = 282 O = 79 ONE = 49 P = 80 PAGE_DOWN = 267 PAGE_UP = 266 PAUSE = 284 PERIOD = 46 PRINT_SCREEN = 283 Q = 81 R = 82 RIGHT = 262 RIGHT_ALT = 346 RIGHT_BRACKET = 93 RIGHT_CONTROL = 345 RIGHT_SHIFT = 344 RIGHT_SUPER = 347 S = 83 SCROLL_LOCK = 281 SEMICOLON = 59 SEVEN = 55 SIX = 54 SLASH = 47 SPACE = 32 T = 84 TAB = 258 THREE = 51 TWO = 50 U = 85 UP = 265 V = 86 VOLUME_DOWN = 25 VOLUME_UP = 24 W = 87 X = 88 Y = 89 Z = 90 ZERO = 48"
  },
  "api/ShapeEngine.Input.ShapeKeyboardDevice.html": {
    "href": "api/ShapeEngine.Input.ShapeKeyboardDevice.html",
    "title": "Class ShapeKeyboardDevice | ShapeEngine",
    "summary": "Class ShapeKeyboardDevice Namespace ShapeEngine.Input Assembly ShapeEngine.dll public sealed class ShapeKeyboardDevice : ShapeInputDevice Inheritance object ShapeKeyboardDevice Implements ShapeInputDevice Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields AllKeyboardKeys public static readonly KeyboardKey[] AllKeyboardKeys Field Value KeyboardKey[] AllShapeKeyboardButtons public static readonly ShapeKeyboardButton[] AllShapeKeyboardButtons Field Value ShapeKeyboardButton[] UsedButtons public readonly List<ShapeKeyboardButton> UsedButtons Field Value List<ShapeKeyboardButton> UsedCharacters public readonly List<char> UsedCharacters Field Value List<char> Methods Calibrate() public void Calibrate() CreateInputState(ShapeKeyboardButton) public InputState CreateInputState(ShapeKeyboardButton button) Parameters button ShapeKeyboardButton Returns InputState CreateInputState(ShapeKeyboardButton, InputState) public InputState CreateInputState(ShapeKeyboardButton button, InputState previousState) Parameters button ShapeKeyboardButton previousState InputState Returns InputState CreateInputState(ShapeKeyboardButton, InputState, ModifierKeyOperator, params IModifierKey[]) public InputState CreateInputState(ShapeKeyboardButton button, InputState previousState, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters button ShapeKeyboardButton previousState InputState modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns InputState CreateInputState(ShapeKeyboardButton, ModifierKeyOperator, params IModifierKey[]) public InputState CreateInputState(ShapeKeyboardButton button, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters button ShapeKeyboardButton modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns InputState CreateInputState(ShapeKeyboardButton, ShapeKeyboardButton) public InputState CreateInputState(ShapeKeyboardButton neg, ShapeKeyboardButton pos) Parameters neg ShapeKeyboardButton pos ShapeKeyboardButton Returns InputState CreateInputState(ShapeKeyboardButton, ShapeKeyboardButton, InputState) public InputState CreateInputState(ShapeKeyboardButton neg, ShapeKeyboardButton pos, InputState previousState) Parameters neg ShapeKeyboardButton pos ShapeKeyboardButton previousState InputState Returns InputState CreateInputState(ShapeKeyboardButton, ShapeKeyboardButton, InputState, ModifierKeyOperator, params IModifierKey[]) public InputState CreateInputState(ShapeKeyboardButton neg, ShapeKeyboardButton pos, InputState previousState, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters neg ShapeKeyboardButton pos ShapeKeyboardButton previousState InputState modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns InputState CreateInputState(ShapeKeyboardButton, ShapeKeyboardButton, ModifierKeyOperator, params IModifierKey[]) public InputState CreateInputState(ShapeKeyboardButton neg, ShapeKeyboardButton pos, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters neg ShapeKeyboardButton pos ShapeKeyboardButton modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns InputState GetButtonAxisName(ShapeKeyboardButton, ShapeKeyboardButton, bool) public static string GetButtonAxisName(ShapeKeyboardButton neg, ShapeKeyboardButton pos, bool shorthand = true) Parameters neg ShapeKeyboardButton pos ShapeKeyboardButton shorthand bool Returns string GetButtonName(ShapeKeyboardButton, bool) public static string GetButtonName(ShapeKeyboardButton button, bool shortHand = true) Parameters button ShapeKeyboardButton shortHand bool Returns string GetButtonState(ShapeKeyboardButton) public InputState GetButtonState(ShapeKeyboardButton button) Parameters button ShapeKeyboardButton Returns InputState GetStream() public string GetStream() Returns string GetStream(string) public string GetStream(string curText) Parameters curText string Returns string GetStream(string, int) public (string text, int caretIndex) GetStream(string curText, int caretIndex) Parameters curText string caretIndex int Returns (string text, int caretIndex) GetStreamChar() public List<char> GetStreamChar() Returns List<char> GetValue(ShapeKeyboardButton) public float GetValue(ShapeKeyboardButton button) Parameters button ShapeKeyboardButton Returns float GetValue(ShapeKeyboardButton, ModifierKeyOperator, params IModifierKey[]) public float GetValue(ShapeKeyboardButton button, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters button ShapeKeyboardButton modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns float GetValue(ShapeKeyboardButton, ShapeKeyboardButton) public float GetValue(ShapeKeyboardButton neg, ShapeKeyboardButton pos) Parameters neg ShapeKeyboardButton pos ShapeKeyboardButton Returns float GetValue(ShapeKeyboardButton, ShapeKeyboardButton, ModifierKeyOperator, params IModifierKey[]) public float GetValue(ShapeKeyboardButton neg, ShapeKeyboardButton pos, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters neg ShapeKeyboardButton pos ShapeKeyboardButton modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns float IsDown(ShapeKeyboardButton) public bool IsDown(ShapeKeyboardButton button) Parameters button ShapeKeyboardButton Returns bool IsDown(ShapeKeyboardButton, ModifierKeyOperator, params IModifierKey[]) public bool IsDown(ShapeKeyboardButton button, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters button ShapeKeyboardButton modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns bool IsDown(ShapeKeyboardButton, ShapeKeyboardButton) public bool IsDown(ShapeKeyboardButton neg, ShapeKeyboardButton pos) Parameters neg ShapeKeyboardButton pos ShapeKeyboardButton Returns bool IsDown(ShapeKeyboardButton, ShapeKeyboardButton, ModifierKeyOperator, params IModifierKey[]) public bool IsDown(ShapeKeyboardButton neg, ShapeKeyboardButton pos, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters neg ShapeKeyboardButton pos ShapeKeyboardButton modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns bool IsLocked() public bool IsLocked() Returns bool IsModifierActive(ShapeKeyboardButton, bool) public bool IsModifierActive(ShapeKeyboardButton modifierKey, bool reverseModifier) Parameters modifierKey ShapeKeyboardButton reverseModifier bool Returns bool Lock() public void Lock() Unlock() public void Unlock() Update() public void Update() WasUsed() public bool WasUsed() Returns bool Events OnButtonPressed public event Action<ShapeKeyboardButton>? OnButtonPressed Event Type Action<ShapeKeyboardButton> OnButtonReleased public event Action<ShapeKeyboardButton>? OnButtonReleased Event Type Action<ShapeKeyboardButton>"
  },
  "api/ShapeEngine.Input.ShapeMouseAxis.html": {
    "href": "api/ShapeEngine.Input.ShapeMouseAxis.html",
    "title": "Enum ShapeMouseAxis | ShapeEngine",
    "summary": "Enum ShapeMouseAxis Namespace ShapeEngine.Input Assembly ShapeEngine.dll public enum ShapeMouseAxis Extension Methods ShapeInput.GetInputState(ShapeMouseAxis) Fields HORIZONTAL = 0 VERTICAL = 1"
  },
  "api/ShapeEngine.Input.ShapeMouseButton.html": {
    "href": "api/ShapeEngine.Input.ShapeMouseButton.html",
    "title": "Enum ShapeMouseButton | ShapeEngine",
    "summary": "Enum ShapeMouseButton Namespace ShapeEngine.Input Assembly ShapeEngine.dll public enum ShapeMouseButton Extension Methods ShapeInput.GetInputState(ShapeMouseButton) Fields BACK = 6 DOWN_AXIS = 21 EXTRA = 4 FORWARD = 5 LEFT = 0 LEFT_AXIS = 22 MIDDLE = 2 MW_DOWN = 11 MW_LEFT = 12 MW_RIGHT = 13 MW_UP = 10 NONE = -1 RIGHT = 1 RIGHT_AXIS = 23 SIDE = 3 UP_AXIS = 20"
  },
  "api/ShapeEngine.Input.ShapeMouseDevice.html": {
    "href": "api/ShapeEngine.Input.ShapeMouseDevice.html",
    "title": "Class ShapeMouseDevice | ShapeEngine",
    "summary": "Class ShapeMouseDevice Namespace ShapeEngine.Input Assembly ShapeEngine.dll public sealed class ShapeMouseDevice : ShapeInputDevice Inheritance object ShapeMouseDevice Implements ShapeInputDevice Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields AllMouseButtons public static readonly MouseButton[] AllMouseButtons Field Value MouseButton[] AllShapeMouseButtons public static readonly ShapeMouseButton[] AllShapeMouseButtons Field Value ShapeMouseButton[] MouseWheelThreshold public float MouseWheelThreshold Field Value float MoveThreshold public float MoveThreshold Field Value float Methods Calibrate() public void Calibrate() CreateInputState(ShapeMouseAxis, InputState, float) public InputState CreateInputState(ShapeMouseAxis axis, InputState previousState, float deadzone = 0.5) Parameters axis ShapeMouseAxis previousState InputState deadzone float Returns InputState CreateInputState(ShapeMouseAxis, InputState, float, ModifierKeyOperator, params IModifierKey[]) public InputState CreateInputState(ShapeMouseAxis axis, InputState previousState, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters axis ShapeMouseAxis previousState InputState deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns InputState CreateInputState(ShapeMouseAxis, float) public InputState CreateInputState(ShapeMouseAxis axis, float deadzone = 0.5) Parameters axis ShapeMouseAxis deadzone float Returns InputState CreateInputState(ShapeMouseAxis, float, ModifierKeyOperator, params IModifierKey[]) public InputState CreateInputState(ShapeMouseAxis axis, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters axis ShapeMouseAxis deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns InputState CreateInputState(ShapeMouseButton, InputState, float) public InputState CreateInputState(ShapeMouseButton button, InputState previousState, float deadzone = 0) Parameters button ShapeMouseButton previousState InputState deadzone float Returns InputState CreateInputState(ShapeMouseButton, InputState, float, ModifierKeyOperator, params IModifierKey[]) public InputState CreateInputState(ShapeMouseButton button, InputState previousState, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters button ShapeMouseButton previousState InputState deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns InputState CreateInputState(ShapeMouseButton, ShapeMouseButton, InputState, float) public InputState CreateInputState(ShapeMouseButton neg, ShapeMouseButton pos, InputState previousState, float deadzone = 0) Parameters neg ShapeMouseButton pos ShapeMouseButton previousState InputState deadzone float Returns InputState CreateInputState(ShapeMouseButton, ShapeMouseButton, InputState, float, ModifierKeyOperator, params IModifierKey[]) public InputState CreateInputState(ShapeMouseButton neg, ShapeMouseButton pos, InputState previousState, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters neg ShapeMouseButton pos ShapeMouseButton previousState InputState deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns InputState CreateInputState(ShapeMouseButton, ShapeMouseButton, float) public InputState CreateInputState(ShapeMouseButton neg, ShapeMouseButton pos, float deadzone = 0) Parameters neg ShapeMouseButton pos ShapeMouseButton deadzone float Returns InputState CreateInputState(ShapeMouseButton, ShapeMouseButton, float, ModifierKeyOperator, params IModifierKey[]) public InputState CreateInputState(ShapeMouseButton neg, ShapeMouseButton pos, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters neg ShapeMouseButton pos ShapeMouseButton deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns InputState CreateInputState(ShapeMouseButton, float) public InputState CreateInputState(ShapeMouseButton button, float deadzone = 0) Parameters button ShapeMouseButton deadzone float Returns InputState CreateInputState(ShapeMouseButton, float, ModifierKeyOperator, params IModifierKey[]) public InputState CreateInputState(ShapeMouseButton button, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters button ShapeMouseButton deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns InputState CreateInputState(ShapeMouseWheelAxis, InputState, float) public InputState CreateInputState(ShapeMouseWheelAxis axis, InputState previousState, float deadzone = 0.2) Parameters axis ShapeMouseWheelAxis previousState InputState deadzone float Returns InputState CreateInputState(ShapeMouseWheelAxis, InputState, float, ModifierKeyOperator, params IModifierKey[]) public InputState CreateInputState(ShapeMouseWheelAxis axis, InputState previousState, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters axis ShapeMouseWheelAxis previousState InputState deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns InputState CreateInputState(ShapeMouseWheelAxis, float) public InputState CreateInputState(ShapeMouseWheelAxis axis, float deadzone = 0.2) Parameters axis ShapeMouseWheelAxis deadzone float Returns InputState CreateInputState(ShapeMouseWheelAxis, float, ModifierKeyOperator, params IModifierKey[]) public InputState CreateInputState(ShapeMouseWheelAxis axis, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters axis ShapeMouseWheelAxis deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns InputState GetAxisName(ShapeMouseAxis, bool) public static string GetAxisName(ShapeMouseAxis axis, bool shortHand = true) Parameters axis ShapeMouseAxis shortHand bool Returns string GetAxisState(ShapeMouseAxis) public InputState GetAxisState(ShapeMouseAxis axis) Parameters axis ShapeMouseAxis Returns InputState GetButtonAxisName(ShapeMouseButton, ShapeMouseButton, bool) public static string GetButtonAxisName(ShapeMouseButton neg, ShapeMouseButton pos, bool shorthand = true) Parameters neg ShapeMouseButton pos ShapeMouseButton shorthand bool Returns string GetButtonName(ShapeMouseButton, bool) public static string GetButtonName(ShapeMouseButton button, bool shortHand = true) Parameters button ShapeMouseButton shortHand bool Returns string GetButtonState(ShapeMouseButton) public InputState GetButtonState(ShapeMouseButton button) Parameters button ShapeMouseButton Returns InputState GetValue(ShapeMouseAxis, float) public float GetValue(ShapeMouseAxis axis, float deadzone = 0.5) Parameters axis ShapeMouseAxis deadzone float Returns float GetValue(ShapeMouseAxis, float, ModifierKeyOperator, params IModifierKey[]) public float GetValue(ShapeMouseAxis axis, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters axis ShapeMouseAxis deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns float GetValue(ShapeMouseButton, ShapeMouseButton, float) public float GetValue(ShapeMouseButton neg, ShapeMouseButton pos, float deadzone = 0) Parameters neg ShapeMouseButton pos ShapeMouseButton deadzone float Returns float GetValue(ShapeMouseButton, ShapeMouseButton, float, ModifierKeyOperator, params IModifierKey[]) public float GetValue(ShapeMouseButton neg, ShapeMouseButton pos, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters neg ShapeMouseButton pos ShapeMouseButton deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns float GetValue(ShapeMouseButton, float) public float GetValue(ShapeMouseButton button, float deadzone = 0) Parameters button ShapeMouseButton deadzone float Returns float GetValue(ShapeMouseButton, float, ModifierKeyOperator, params IModifierKey[]) public float GetValue(ShapeMouseButton button, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters button ShapeMouseButton deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns float GetValue(ShapeMouseWheelAxis, float) public float GetValue(ShapeMouseWheelAxis axis, float deadzone = 0.2) Parameters axis ShapeMouseWheelAxis deadzone float Returns float GetValue(ShapeMouseWheelAxis, float, ModifierKeyOperator, params IModifierKey[]) public float GetValue(ShapeMouseWheelAxis axis, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters axis ShapeMouseWheelAxis deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns float GetWheelAxisName(ShapeMouseWheelAxis, bool) public static string GetWheelAxisName(ShapeMouseWheelAxis axis, bool shortHand = true) Parameters axis ShapeMouseWheelAxis shortHand bool Returns string GetWheelAxisState(ShapeMouseWheelAxis) public InputState GetWheelAxisState(ShapeMouseWheelAxis axis) Parameters axis ShapeMouseWheelAxis Returns InputState IsDown(ShapeMouseAxis, float) public bool IsDown(ShapeMouseAxis axis, float deadzone = 0.5) Parameters axis ShapeMouseAxis deadzone float Returns bool IsDown(ShapeMouseAxis, float, ModifierKeyOperator, params IModifierKey[]) public bool IsDown(ShapeMouseAxis axis, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters axis ShapeMouseAxis deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns bool IsDown(ShapeMouseButton, ShapeMouseButton, float) public bool IsDown(ShapeMouseButton neg, ShapeMouseButton pos, float deadzone = 0) Parameters neg ShapeMouseButton pos ShapeMouseButton deadzone float Returns bool IsDown(ShapeMouseButton, ShapeMouseButton, float, ModifierKeyOperator, params IModifierKey[]) public bool IsDown(ShapeMouseButton neg, ShapeMouseButton pos, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters neg ShapeMouseButton pos ShapeMouseButton deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns bool IsDown(ShapeMouseButton, float) public bool IsDown(ShapeMouseButton button, float deadzone = 0) Parameters button ShapeMouseButton deadzone float Returns bool IsDown(ShapeMouseButton, float, ModifierKeyOperator, params IModifierKey[]) public bool IsDown(ShapeMouseButton button, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters button ShapeMouseButton deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns bool IsDown(ShapeMouseWheelAxis, float) public bool IsDown(ShapeMouseWheelAxis axis, float deadzone = 0.2) Parameters axis ShapeMouseWheelAxis deadzone float Returns bool IsDown(ShapeMouseWheelAxis, float, ModifierKeyOperator, params IModifierKey[]) public bool IsDown(ShapeMouseWheelAxis axis, float deadzone, ModifierKeyOperator modifierOperator, params IModifierKey[] modifierKeys) Parameters axis ShapeMouseWheelAxis deadzone float modifierOperator ModifierKeyOperator modifierKeys IModifierKey[] Returns bool IsLocked() public bool IsLocked() Returns bool IsModifierActive(ShapeMouseButton, bool) public bool IsModifierActive(ShapeMouseButton modifierKey, bool reverseModifier) Parameters modifierKey ShapeMouseButton reverseModifier bool Returns bool Lock() public void Lock() Unlock() public void Unlock() Update() public void Update() WasUsed() public bool WasUsed() Returns bool Events OnButtonPressed public event Action<ShapeMouseButton>? OnButtonPressed Event Type Action<ShapeMouseButton> OnButtonReleased public event Action<ShapeMouseButton>? OnButtonReleased Event Type Action<ShapeMouseButton>"
  },
  "api/ShapeEngine.Input.ShapeMouseWheelAxis.html": {
    "href": "api/ShapeEngine.Input.ShapeMouseWheelAxis.html",
    "title": "Enum ShapeMouseWheelAxis | ShapeEngine",
    "summary": "Enum ShapeMouseWheelAxis Namespace ShapeEngine.Input Assembly ShapeEngine.dll public enum ShapeMouseWheelAxis Extension Methods ShapeInput.GetInputState(ShapeMouseWheelAxis) Fields HORIZONTAL = 0 VERTICAL = 1"
  },
  "api/ShapeEngine.Input.html": {
    "href": "api/ShapeEngine.Input.html",
    "title": "Namespace ShapeEngine.Input | ShapeEngine",
    "summary": "Namespace ShapeEngine.Input Classes InputAction InputEvent InputEventHandler InputTypeGamepadAxis InputTypeGamepadButton InputTypeGamepadButtonAxis InputTypeKeyboardButton InputTypeKeyboardButtonAxis InputTypeMouseAxis InputTypeMouseButton InputTypeMouseButtonAxis InputTypeMouseWheelAxis ModifierKeyGamepadButton ModifierKeyKeyboardButton ModifierKeyMouseButton ShapeGamepadDevice ShapeGamepadDeviceManager ShapeInput ShapeKeyboardDevice ShapeMouseDevice Structs InputName InputState Interfaces IInputType IModifierKey ShapeInputDevice Enums InputDeviceType ModifierKeyOperator MultiTapState PressedType ShapeGamepadAxis ShapeGamepadButton ShapeKeyboardButton ShapeMouseAxis ShapeMouseButton ShapeMouseWheelAxis Delegates InputEventHandler.InputEventCallback Callback for receiving input events. Should return if input event should propagate further down."
  },
  "api/ShapeEngine.Pathfinding.IPathfinderAgent.html": {
    "href": "api/ShapeEngine.Pathfinding.IPathfinderAgent.html",
    "title": "Interface IPathfinderAgent | ShapeEngine",
    "summary": "Interface IPathfinderAgent Namespace ShapeEngine.Pathfinding Assembly ShapeEngine.dll public interface IPathfinderAgent Methods AddedToPathfinder(Pathfinder) void AddedToPathfinder(Pathfinder pathfinder) Parameters pathfinder Pathfinder GetLayer() uint GetLayer() Returns uint ReceiveRequestedPath(Path?, PathRequest) void ReceiveRequestedPath(Path? path, PathRequest request) Parameters path Path request PathRequest RemovedFromPathfinder() void RemovedFromPathfinder() Events OnRequestPath event Action<PathRequest> OnRequestPath Event Type Action<PathRequest>"
  },
  "api/ShapeEngine.Pathfinding.IPathfinderObstacle.html": {
    "href": "api/ShapeEngine.Pathfinding.IPathfinderObstacle.html",
    "title": "Interface IPathfinderObstacle | ShapeEngine",
    "summary": "Interface IPathfinderObstacle Namespace ShapeEngine.Pathfinding Assembly ShapeEngine.dll public interface IPathfinderObstacle : IShape Inherited Members IShape.GetShapeType() IShape.GetRayShape() IShape.GetLineShape() IShape.GetSegmentShape() IShape.GetCircleShape() IShape.GetTriangleShape() IShape.GetQuadShape() IShape.GetRectShape() IShape.GetPolygonShape() IShape.GetPolylineShape() Methods GetNodeValues() Those are the values that will change the pathfinder grid. Do not change them once the obstacle was added. If the cell values have to be changed the obstacle has to be removed with the orginial values, and can then be added again with the new values NodeValue[] GetNodeValues() Returns NodeValue[] Events OnShapeChanged Invoke this event the shape of the obstacle has changed event Action<IPathfinderObstacle>? OnShapeChanged Event Type Action<IPathfinderObstacle>"
  },
  "api/ShapeEngine.Pathfinding.NodeValue.html": {
    "href": "api/ShapeEngine.Pathfinding.NodeValue.html",
    "title": "Struct NodeValue | ShapeEngine",
    "summary": "Struct NodeValue Namespace ShapeEngine.Pathfinding Assembly ShapeEngine.dll public readonly struct NodeValue Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors NodeValue() public NodeValue() NodeValue(NodeValueType) public NodeValue(NodeValueType type) Parameters type NodeValueType NodeValue(NodeValueType, uint) public NodeValue(NodeValueType type, uint layer) Parameters type NodeValueType layer uint NodeValue(float, NodeValueType) public NodeValue(float value, NodeValueType type) Parameters value float type NodeValueType NodeValue(float, NodeValueType, uint) public NodeValue(float value, NodeValueType type, uint layer) Parameters value float type NodeValueType layer uint Fields Layer public readonly uint Layer Field Value uint Type public readonly NodeValueType Type Field Value NodeValueType Value Higher numbers mean the cell is more favorable Smaller numbers mean the cell is less favorable BaseValue/Flat/Bonus of 0 is default A value of 5 makes the cell distance 5 timer shorter, a value -5 make the cell distance 5 timer longer public readonly float Value Field Value float Properties Valid public bool Valid { get; } Property Value bool"
  },
  "api/ShapeEngine.Pathfinding.NodeValueType.html": {
    "href": "api/ShapeEngine.Pathfinding.NodeValueType.html",
    "title": "Enum NodeValueType | ShapeEngine",
    "summary": "Enum NodeValueType Namespace ShapeEngine.Pathfinding Assembly ShapeEngine.dll public enum NodeValueType Fields AddBonus = 6 AddFlat = 9 Block = 3 None = -1 RemoveBonus = 7 RemoveFlat = 10 Reset = 0 ResetBonus = 8 ResetFlat = 11 ResetThenBlock = 5 ResetThenSet = 2 SetValue = 1 Unblock = 4"
  },
  "api/ShapeEngine.Pathfinding.Path.html": {
    "href": "api/ShapeEngine.Pathfinding.Path.html",
    "title": "Class Path | ShapeEngine",
    "summary": "Class Path Namespace ShapeEngine.Pathfinding Assembly ShapeEngine.dll public class Path Inheritance object Path Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Path(Vector2, Vector2, List<Rect>) public Path(Vector2 start, Vector2 end, List<Rect> rects) Parameters start Vector2 end Vector2 rects List<Rect> Fields End public readonly Vector2 End Field Value Vector2 Rects public readonly List<Rect> Rects Field Value List<Rect> Start public readonly Vector2 Start Field Value Vector2"
  },
  "api/ShapeEngine.Pathfinding.PathRequest.html": {
    "href": "api/ShapeEngine.Pathfinding.PathRequest.html",
    "title": "Class PathRequest | ShapeEngine",
    "summary": "Class PathRequest Namespace ShapeEngine.Pathfinding Assembly ShapeEngine.dll public class PathRequest Inheritance object PathRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PathRequest() public PathRequest() PathRequest(IPathfinderAgent, Vector2, Vector2, int) public PathRequest(IPathfinderAgent agent, Vector2 start, Vector2 end, int priority) Parameters agent IPathfinderAgent start Vector2 end Vector2 priority int Fields Agent public readonly IPathfinderAgent? Agent Field Value IPathfinderAgent End public readonly Vector2 End Field Value Vector2 Priority The higher the priority the sooner path requests are handled. public readonly int Priority Field Value int Start public readonly Vector2 Start Field Value Vector2 Properties Valid public bool Valid { get; } Property Value bool"
  },
  "api/ShapeEngine.Pathfinding.Pathfinder.html": {
    "href": "api/ShapeEngine.Pathfinding.Pathfinder.html",
    "title": "Class Pathfinder | ShapeEngine",
    "summary": "Class Pathfinder Namespace ShapeEngine.Pathfinding Assembly ShapeEngine.dll public class Pathfinder Inheritance object Pathfinder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Pathfinder(Rect, int, int) public Pathfinder(Rect bounds, int cols, int rows) Parameters bounds Rect cols int rows int Fields Grid public readonly Grid Grid Field Value Grid RequestsPerFrame How many agent requests are handled each frame smaller or equal to zero handles all incoming requests public int RequestsPerFrame Field Value int Properties Bounds public Rect Bounds { get; set; } Property Value Rect CellSize public Size CellSize { get; } Property Value Size Methods AddAgent(IPathfinderAgent) public bool AddAgent(IPathfinderAgent agent) Parameters agent IPathfinderAgent Returns bool AddConnections(Rect, Rect, bool) public void AddConnections(Rect a, Rect b, bool oneWay) Parameters a Rect b Rect oneWay bool AddConnections(Rect, Vector2, bool) public void AddConnections(Rect a, Vector2 b, bool oneWay) Parameters a Rect b Vector2 oneWay bool AddConnections(Vector2, Rect, bool) public void AddConnections(Vector2 a, Rect b, bool oneWay) Parameters a Vector2 b Rect oneWay bool AddConnections(Vector2, Vector2, bool) public bool AddConnections(Vector2 a, Vector2 b, bool oneWay) Parameters a Vector2 b Vector2 oneWay bool Returns bool ApplyNodeValue(Circle, NodeValue) public int ApplyNodeValue(Circle shape, NodeValue value) Parameters shape Circle value NodeValue Returns int ApplyNodeValue(Polygon, NodeValue) public int ApplyNodeValue(Polygon shape, NodeValue value) Parameters shape Polygon value NodeValue Returns int ApplyNodeValue(Polyline, NodeValue) public int ApplyNodeValue(Polyline shape, NodeValue value) Parameters shape Polyline value NodeValue Returns int ApplyNodeValue(Quad, NodeValue) public int ApplyNodeValue(Quad shape, NodeValue value) Parameters shape Quad value NodeValue Returns int ApplyNodeValue(Rect, NodeValue) public int ApplyNodeValue(Rect shape, NodeValue value) Parameters shape Rect value NodeValue Returns int ApplyNodeValue(Segment, NodeValue) public int ApplyNodeValue(Segment shape, NodeValue value) Parameters shape Segment value NodeValue Returns int ApplyNodeValue(Triangle, NodeValue) public int ApplyNodeValue(Triangle shape, NodeValue value) Parameters shape Triangle value NodeValue Returns int ApplyNodeValue(int, NodeValue) public bool ApplyNodeValue(int index, NodeValue value) Parameters index int value NodeValue Returns bool ApplyNodeValue(Vector2, NodeValue) public bool ApplyNodeValue(Vector2 position, NodeValue value) Parameters position Vector2 value NodeValue Returns bool ApplyNodeValues(Circle, params NodeValue[]) public int ApplyNodeValues(Circle shape, params NodeValue[] values) Parameters shape Circle values NodeValue[] Returns int ApplyNodeValues(Polygon, params NodeValue[]) public int ApplyNodeValues(Polygon shape, params NodeValue[] values) Parameters shape Polygon values NodeValue[] Returns int ApplyNodeValues(Polyline, params NodeValue[]) public int ApplyNodeValues(Polyline shape, params NodeValue[] values) Parameters shape Polyline values NodeValue[] Returns int ApplyNodeValues(Quad, params NodeValue[]) public int ApplyNodeValues(Quad shape, params NodeValue[] values) Parameters shape Quad values NodeValue[] Returns int ApplyNodeValues(Rect, params NodeValue[]) public int ApplyNodeValues(Rect shape, params NodeValue[] values) Parameters shape Rect values NodeValue[] Returns int ApplyNodeValues(Segment, params NodeValue[]) public int ApplyNodeValues(Segment shape, params NodeValue[] values) Parameters shape Segment values NodeValue[] Returns int ApplyNodeValues(Triangle, params NodeValue[]) public int ApplyNodeValues(Triangle shape, params NodeValue[] values) Parameters shape Triangle values NodeValue[] Returns int ApplyNodeValues(int, params NodeValue[]) public bool ApplyNodeValues(int index, params NodeValue[] values) Parameters index int values NodeValue[] Returns bool ApplyNodeValues(Vector2, IEnumerable<NodeValue>) public bool ApplyNodeValues(Vector2 position, IEnumerable<NodeValue> values) Parameters position Vector2 values IEnumerable<NodeValue> Returns bool Clear() public void Clear() ClearAgents() public void ClearAgents() DrawDebug(ColorRgba, ColorRgba, ColorRgba, ColorRgba, ColorRgba, uint) public void DrawDebug(ColorRgba boundary, ColorRgba standard, ColorRgba blocked, ColorRgba desirable, ColorRgba undesirable, uint layer) Parameters boundary ColorRgba standard ColorRgba blocked ColorRgba desirable ColorRgba undesirable ColorRgba layer uint GetIndex(Vector2) public int GetIndex(Vector2 position) Parameters position Vector2 Returns int GetIndexUnclamped(Vector2) public int GetIndexUnclamped(Vector2 position) Parameters position Vector2 Returns int GetPath(Vector2, Vector2, uint) public Path? GetPath(Vector2 start, Vector2 end, uint layer) Parameters start Vector2 end Vector2 layer uint Returns Path GetRect(int) public Rect GetRect(int index) Parameters index int Returns Rect GetRect(Vector2) public Rect GetRect(Vector2 position) Parameters position Vector2 Returns Rect GetRects(Rect, bool) public List<Rect> GetRects(Rect area, bool traversable = true) Parameters area Rect traversable bool Returns List<Rect> GetRects(Rect, uint, int, int) public List<Rect> GetRects(Rect area, uint layer, int minWeight, int maxWeight) Parameters area Rect layer uint minWeight int maxWeight int Returns List<Rect> GetRects(bool) public List<Rect> GetRects(bool traversable = true) Parameters traversable bool Returns List<Rect> GetRects(uint, int, int) public List<Rect> GetRects(uint layer, int minWeight, int maxWeight) Parameters layer uint minWeight int maxWeight int Returns List<Rect> GetWeight(int) public float GetWeight(int index) Parameters index int Returns float GetWeight(int, uint) public float GetWeight(int index, uint layer) Parameters index int layer uint Returns float IsIndexValid(int) public bool IsIndexValid(int index) Parameters index int Returns bool IsInside(Vector2) public bool IsInside(Vector2 position) Parameters position Vector2 Returns bool IsTraversable(int) public bool IsTraversable(int index) Parameters index int Returns bool IsTraversable(int, uint) public bool IsTraversable(int index, uint layer) Parameters index int layer uint Returns bool RegenerationWasRequested() protected virtual void RegenerationWasRequested() RemoveAgent(IPathfinderAgent) public bool RemoveAgent(IPathfinderAgent agent) Parameters agent IPathfinderAgent Returns bool RemoveConnections(Rect, Rect, bool) public void RemoveConnections(Rect a, Rect b, bool oneWay) Parameters a Rect b Rect oneWay bool RemoveConnections(Rect, Vector2, bool) public void RemoveConnections(Rect a, Vector2 b, bool oneWay) Parameters a Rect b Vector2 oneWay bool RemoveConnections(Vector2, Rect, bool) public void RemoveConnections(Vector2 a, Rect b, bool oneWay) Parameters a Vector2 b Rect oneWay bool RemoveConnections(Vector2, Vector2, bool) public bool RemoveConnections(Vector2 a, Vector2 b, bool oneWay) Parameters a Vector2 b Vector2 oneWay bool Returns bool ResetNodes() public void ResetNodes() ResetNodes(Rect) public void ResetNodes(Rect rect) Parameters rect Rect ResizeBounds(Rect) public void ResizeBounds(Rect newBounds) Parameters newBounds Rect Update(float) public void Update(float dt) Parameters dt float WasCleared() protected virtual void WasCleared() Events OnCleared public event Action<Pathfinder>? OnCleared Event Type Action<Pathfinder> OnRegenerationRequested public event Action<Pathfinder>? OnRegenerationRequested Event Type Action<Pathfinder>"
  },
  "api/ShapeEngine.Pathfinding.html": {
    "href": "api/ShapeEngine.Pathfinding.html",
    "title": "Namespace ShapeEngine.Pathfinding | ShapeEngine",
    "summary": "Namespace ShapeEngine.Pathfinding Classes Path PathRequest Pathfinder Structs NodeValue Interfaces IPathfinderAgent IPathfinderObstacle Enums NodeValueType"
  },
  "api/ShapeEngine.Persistent.ContentInfo.html": {
    "href": "api/ShapeEngine.Persistent.ContentInfo.html",
    "title": "Class ContentInfo | ShapeEngine",
    "summary": "Class ContentInfo Namespace ShapeEngine.Persistent Assembly ShapeEngine.dll public class ContentInfo Inheritance object ContentInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ContentInfo(string, byte[]) public ContentInfo(string extension, byte[] data) Parameters extension string data byte[] Fields data public byte[] data Field Value byte[] extension public string extension Field Value string"
  },
  "api/ShapeEngine.Persistent.ContentLoader.html": {
    "href": "api/ShapeEngine.Persistent.ContentLoader.html",
    "title": "Class ContentLoader | ShapeEngine",
    "summary": "Class ContentLoader Namespace ShapeEngine.Persistent Assembly ShapeEngine.dll Provides a simple wraper to load all types of Raylib resources and json string. public static class ContentLoader Inheritance object ContentLoader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields GLYPH_COUNT public static int GLYPH_COUNT Field Value int Methods LoadFont(string, int, TextureFilter) public static Font LoadFont(string filePath, int fontSize = 100, TextureFilter textureFilter = TextureFilter.Trilinear) Parameters filePath string fontSize int textureFilter TextureFilter Returns Font LoadFontFromContent(ContentInfo, int) public static Font LoadFontFromContent(ContentInfo content, int fontSize = 100) Parameters content ContentInfo fontSize int Returns Font LoadFragmentShader(string) public static Shader LoadFragmentShader(string filePath) Parameters filePath string Returns Shader LoadFragmentShaderFromContent(ContentInfo) public static Shader LoadFragmentShaderFromContent(ContentInfo content) Parameters content ContentInfo Returns Shader LoadImage(string) public static Image LoadImage(string filePath) Parameters filePath string Returns Image LoadImageFromContent(ContentInfo) public static Image LoadImageFromContent(ContentInfo content) Parameters content ContentInfo Returns Image LoadJson(string) public static string LoadJson(string filePath) Parameters filePath string Returns string LoadJsonFromContent(ContentInfo) public static string LoadJsonFromContent(ContentInfo content) Parameters content ContentInfo Returns string LoadMusicFromContent(ContentInfo) public static Music LoadMusicFromContent(ContentInfo content) Parameters content ContentInfo Returns Music LoadMusicStream(string) public static Music LoadMusicStream(string filePath) Parameters filePath string Returns Music LoadSound(string) public static Sound LoadSound(string filePath) Parameters filePath string Returns Sound LoadSoundFromContent(ContentInfo) public static Sound LoadSoundFromContent(ContentInfo content) Parameters content ContentInfo Returns Sound LoadTexture(string) public static Texture2D LoadTexture(string filePath) Parameters filePath string Returns Texture2D LoadTextureFromContent(ContentInfo) public static Texture2D LoadTextureFromContent(ContentInfo content) Parameters content ContentInfo Returns Texture2D LoadVertexShader(string) public static Shader LoadVertexShader(string filePath) Parameters filePath string Returns Shader LoadVertexShaderFromContent(ContentInfo) public static Shader LoadVertexShaderFromContent(ContentInfo content) Parameters content ContentInfo Returns Shader LoadWave(string) public static Wave LoadWave(string filePath) Parameters filePath string Returns Wave LoadWaveFromContent(ContentInfo) public static Wave LoadWaveFromContent(ContentInfo content) Parameters content ContentInfo Returns Wave UnloadFont(Font) public static void UnloadFont(Font font) Parameters font Font UnloadFonts(IEnumerable<Font>) public static void UnloadFonts(IEnumerable<Font> fonts) Parameters fonts IEnumerable<Font> UnloadImage(Image) public static void UnloadImage(Image image) Parameters image Image UnloadImages(IEnumerable<Image>) public static void UnloadImages(IEnumerable<Image> images) Parameters images IEnumerable<Image> UnloadMusicStream(Music) public static void UnloadMusicStream(Music musicStream) Parameters musicStream Music UnloadMusicStreams(IEnumerable<Music>) public static void UnloadMusicStreams(IEnumerable<Music> musicStreams) Parameters musicStreams IEnumerable<Music> UnloadShader(Shader) public static void UnloadShader(Shader shader) Parameters shader Shader UnloadShaders(IEnumerable<Shader>) public static void UnloadShaders(IEnumerable<Shader> shaders) Parameters shaders IEnumerable<Shader> UnloadSound(Sound) public static void UnloadSound(Sound sound) Parameters sound Sound UnloadSounds(IEnumerable<Sound>) public static void UnloadSounds(IEnumerable<Sound> sounds) Parameters sounds IEnumerable<Sound> UnloadTexture(Texture2D) public static void UnloadTexture(Texture2D texture) Parameters texture Texture2D UnloadTextures(IEnumerable<Texture2D>) public static void UnloadTextures(IEnumerable<Texture2D> textures) Parameters textures IEnumerable<Texture2D> UnloadWave(Wave) public static void UnloadWave(Wave wave) Parameters wave Wave UnloadWaves(IEnumerable<Wave>) public static void UnloadWaves(IEnumerable<Wave> waves) Parameters waves IEnumerable<Wave>"
  },
  "api/ShapeEngine.Persistent.ContentManager.html": {
    "href": "api/ShapeEngine.Persistent.ContentManager.html",
    "title": "Class ContentManager | ShapeEngine",
    "summary": "Class ContentManager Namespace ShapeEngine.Persistent Assembly ShapeEngine.dll Provides a simple class to load content and automatically unload all loaded content when close is called. public sealed class ContentManager : IContentManager Inheritance object ContentManager Implements IContentManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ContentManager() public ContentManager() Methods Close() Unloads all loaded content. public void Close() LoadFont(string, int) public Font LoadFont(string filePath, int fontSize = 100) Parameters filePath string fontSize int Returns Font LoadFragmentShader(string) public Shader LoadFragmentShader(string filePath) Parameters filePath string Returns Shader LoadImage(string) public Image LoadImage(string filePath) Parameters filePath string Returns Image LoadJson(string) public string LoadJson(string filePath) Parameters filePath string Returns string LoadMusic(string) public Music LoadMusic(string filePath) Parameters filePath string Returns Music LoadSound(string) public Sound LoadSound(string filePath) Parameters filePath string Returns Sound LoadTexture(string) public Texture2D LoadTexture(string filePath) Parameters filePath string Returns Texture2D LoadVertexShader(string) public Shader LoadVertexShader(string filePath) Parameters filePath string Returns Shader LoadWave(string) public Wave LoadWave(string filePath) Parameters filePath string Returns Wave"
  },
  "api/ShapeEngine.Persistent.ContentManagerPacked.html": {
    "href": "api/ShapeEngine.Persistent.ContentManagerPacked.html",
    "title": "Class ContentManagerPacked | ShapeEngine",
    "summary": "Class ContentManagerPacked Namespace ShapeEngine.Persistent Assembly ShapeEngine.dll Provides a simple class to load content that was packed with the ContentPacker. public sealed class ContentManagerPacked : IContentManager Inheritance object ContentManagerPacked Implements IContentManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ContentManagerPacked(string, string) public ContentManagerPacked(string path, string resourceFileName = \"resources.txt\") Parameters path string resourceFileName string Fields GLYPH_COUNT public int GLYPH_COUNT Field Value int Methods Close() public void Close() LoadFont(string, int) public Font LoadFont(string filePath, int fontSize = 100) Parameters filePath string fontSize int Returns Font LoadFragmentShader(string) public Shader LoadFragmentShader(string filePath) Parameters filePath string Returns Shader LoadImage(string) public Image LoadImage(string filePath) Parameters filePath string Returns Image LoadJson(string) public string LoadJson(string filePath) Parameters filePath string Returns string LoadMusic(string) public Music LoadMusic(string filePath) Parameters filePath string Returns Music LoadSound(string) public Sound LoadSound(string filePath) Parameters filePath string Returns Sound LoadTexture(string) public Texture2D LoadTexture(string filePath) Parameters filePath string Returns Texture2D LoadVertexShader(string) public Shader LoadVertexShader(string filePath) Parameters filePath string Returns Shader LoadWave(string) public Wave LoadWave(string filePath) Parameters filePath string Returns Wave"
  },
  "api/ShapeEngine.Persistent.ContentPacker.html": {
    "href": "api/ShapeEngine.Persistent.ContentPacker.html",
    "title": "Class ContentPacker | ShapeEngine",
    "summary": "Class ContentPacker Namespace ShapeEngine.Persistent Assembly ShapeEngine.dll Can be used to pack resources in a folder structur into a single txt file. Every resource consists of 2 lines the resulting txt file. The first line is the name with extension the second line is data as encoded string. public static class ContentPacker Inheritance object ContentPacker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Pack(string, string, string) Pack a folder structure of various content types into a single txt file. public static void Pack(string sourcePath, string outputPath, string outputFilename = \"resources.txt\") Parameters sourcePath string The path to the folder that should be packed. Goes trough all subfolders as well. outputPath string The path where the resulting txt file should be saved. outputFilename string The name of the resulting txt file. Unpack(string, string) Load and unpack a txt file generate by the Pack function. public static Dictionary<string, ContentInfo> Unpack(string path, string fileName = \"resources.txt\") Parameters path string The path to the packed txt file. fileName string The name of the packed txt file. Returns Dictionary<string, ContentInfo>"
  },
  "api/ShapeEngine.Persistent.IContentManager.html": {
    "href": "api/ShapeEngine.Persistent.IContentManager.html",
    "title": "Interface IContentManager | ShapeEngine",
    "summary": "Interface IContentManager Namespace ShapeEngine.Persistent Assembly ShapeEngine.dll public interface IContentManager Methods Close() void Close() LoadFont(string, int) Font LoadFont(string filePath, int fontSize = 100) Parameters filePath string fontSize int Returns Font LoadFragmentShader(string) Shader LoadFragmentShader(string filePath) Parameters filePath string Returns Shader LoadImage(string) Image LoadImage(string filePath) Parameters filePath string Returns Image LoadJson(string) string LoadJson(string filePath) Parameters filePath string Returns string LoadMusic(string) Music LoadMusic(string filePath) Parameters filePath string Returns Music LoadSound(string) Sound LoadSound(string filePath) Parameters filePath string Returns Sound LoadTexture(string) Texture2D LoadTexture(string filePath) Parameters filePath string Returns Texture2D LoadVertexShader(string) Shader LoadVertexShader(string filePath) Parameters filePath string Returns Shader LoadWave(string) Wave LoadWave(string filePath) Parameters filePath string Returns Wave"
  },
  "api/ShapeEngine.Persistent.IDataContainer.html": {
    "href": "api/ShapeEngine.Persistent.IDataContainer.html",
    "title": "Interface IDataContainer | ShapeEngine",
    "summary": "Interface IDataContainer Namespace ShapeEngine.Persistent Assembly ShapeEngine.dll public interface IDataContainer Methods GetData() List<IDataObject> GetData() Returns List<IDataObject> GetData<T>() List<T> GetData<T>() Returns List<T> Type Parameters T GetEntry(string) IDataObject? GetEntry(string name) Parameters name string Returns IDataObject GetEntry<T>(string) T? GetEntry<T>(string name) Parameters name string Returns T Type Parameters T GetName() string GetName() Returns string GetRandomEntry() IDataObject? GetRandomEntry() Returns IDataObject GetRandomEntry<T>() T? GetRandomEntry<T>() Returns T Type Parameters T"
  },
  "api/ShapeEngine.Persistent.IDataObject.html": {
    "href": "api/ShapeEngine.Persistent.IDataObject.html",
    "title": "Interface IDataObject | ShapeEngine",
    "summary": "Interface IDataObject Namespace ShapeEngine.Persistent Assembly ShapeEngine.dll public interface IDataObject Methods GetName() string GetName() Returns string"
  },
  "api/ShapeEngine.Persistent.JDataContainer.html": {
    "href": "api/ShapeEngine.Persistent.JDataContainer.html",
    "title": "Class JDataContainer | ShapeEngine",
    "summary": "Class JDataContainer Namespace ShapeEngine.Persistent Assembly ShapeEngine.dll public class JDataContainer : IDataContainer Inheritance object JDataContainer Implements IDataContainer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors JDataContainer() public JDataContainer() JDataContainer(params IDataObject[]) public JDataContainer(params IDataObject[] data) Parameters data IDataObject[] JDataContainer(List<IDataObject>) public JDataContainer(List<IDataObject> data) Parameters data List<IDataObject> Fields data protected Dictionary<string, IDataObject> data Field Value Dictionary<string, IDataObject> Properties Name public string Name { get; set; } Property Value string Methods GetData() public List<IDataObject> GetData() Returns List<IDataObject> GetData<T>() public List<T> GetData<T>() Returns List<T> Type Parameters T GetEntry(string) public IDataObject? GetEntry(string name) Parameters name string Returns IDataObject GetEntry<T>(string) public T? GetEntry<T>(string name) Parameters name string Returns T Type Parameters T GetName() public string GetName() Returns string GetRandomEntry() public IDataObject? GetRandomEntry() Returns IDataObject GetRandomEntry<T>() public T? GetRandomEntry<T>() Returns T Type Parameters T"
  },
  "api/ShapeEngine.Persistent.JNode.html": {
    "href": "api/ShapeEngine.Persistent.JNode.html",
    "title": "Class JNode | ShapeEngine",
    "summary": "Class JNode Namespace ShapeEngine.Persistent Assembly ShapeEngine.dll public sealed class JNode Inheritance object JNode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors JNode() public JNode() JNode(string) public JNode(string json) Parameters json string Properties Valid public bool Valid { get; } Property Value bool Methods ContainsKey(string) public bool ContainsKey(string key) Parameters key string Returns bool Deserialize<T>() public T? Deserialize<T>() Returns T Type Parameters T GetArray(string) public JNode[] GetArray(string arrayKey) Parameters arrayKey string Returns JNode[] GetJsonString() public string GetJsonString() Returns string GetNode(string) public JNode GetNode(string key) Parameters key string Returns JNode GetProperty<T>(string) public T? GetProperty<T>(string key) Parameters key string Returns T Type Parameters T ParseToDict<T>(string, Func<JNode, T>) public Dictionary<string, T> ParseToDict<T>(string arrayKey, Func<JNode, T> parser) where T : IDataContainer Parameters arrayKey string parser Func<JNode, T> Returns Dictionary<string, T> Type Parameters T ParseToList<T>(string, Func<JNode, T>) public List<T> ParseToList<T>(string arrayKey, Func<JNode, T> parser) where T : IDataContainer Parameters arrayKey string parser Func<JNode, T> Returns List<T> Type Parameters T SerializeArrayToDict<T>(JNode[]) public static Dictionary<string, T> SerializeArrayToDict<T>(JNode[] nodes) where T : IDataObject Parameters nodes JNode[] Returns Dictionary<string, T> Type Parameters T SerializeArrayToDict<T>(string) public Dictionary<string, T> SerializeArrayToDict<T>(string arrayKey) where T : IDataObject Parameters arrayKey string Returns Dictionary<string, T> Type Parameters T SerializeArrayToList<T>(JNode[]) public static List<T> SerializeArrayToList<T>(JNode[] nodes) Parameters nodes JNode[] Returns List<T> Type Parameters T SerializeArrayToList<T>(string) public List<T> SerializeArrayToList<T>(string arrayKey) Parameters arrayKey string Returns List<T> Type Parameters T"
  },
  "api/ShapeEngine.Persistent.SavegameObject.html": {
    "href": "api/ShapeEngine.Persistent.SavegameObject.html",
    "title": "Class SavegameObject | ShapeEngine",
    "summary": "Class SavegameObject Namespace ShapeEngine.Persistent Assembly ShapeEngine.dll Simple base class for a savegame object. To serialize and save class every property needs to have public getter and setter! public abstract class SavegameObject Inheritance object SavegameObject Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties name public string name { get; set; } Property Value string version public string version { get; set; } Property Value string"
  },
  "api/ShapeEngine.Persistent.html": {
    "href": "api/ShapeEngine.Persistent.html",
    "title": "Namespace ShapeEngine.Persistent | ShapeEngine",
    "summary": "Namespace ShapeEngine.Persistent Classes ContentInfo ContentLoader Provides a simple wraper to load all types of Raylib resources and json string. ContentManager Provides a simple class to load content and automatically unload all loaded content when close is called. ContentManagerPacked Provides a simple class to load content that was packed with the ContentPacker. ContentPacker Can be used to pack resources in a folder structur into a single txt file. Every resource consists of 2 lines the resulting txt file. The first line is the name with extension the second line is data as encoded string. JDataContainer JNode SavegameObject Simple base class for a savegame object. To serialize and save class every property needs to have public getter and setter! Interfaces IContentManager IDataContainer IDataObject"
  },
  "api/ShapeEngine.Pool.IPool.html": {
    "href": "api/ShapeEngine.Pool.IPool.html",
    "title": "Interface IPool | ShapeEngine",
    "summary": "Interface IPool Namespace ShapeEngine.Pool Assembly ShapeEngine.dll public interface IPool Methods Clear() void Clear() GetId() uint GetId() Returns uint GetInstance() IPoolable? GetInstance() Returns IPoolable GetInstance<T>() T? GetInstance<T>() Returns T Type Parameters T HasInstances() bool HasInstances() Returns bool HasUsableInstances() bool HasUsableInstances() Returns bool OnInstanceFinished(IPoolable) void OnInstanceFinished(IPoolable instance) Parameters instance IPoolable ReturnInstance(IPoolable) void ReturnInstance(IPoolable instance) Parameters instance IPoolable"
  },
  "api/ShapeEngine.Pool.IPoolable.html": {
    "href": "api/ShapeEngine.Pool.IPoolable.html",
    "title": "Interface IPoolable | ShapeEngine",
    "summary": "Interface IPoolable Namespace ShapeEngine.Pool Assembly ShapeEngine.dll public interface IPoolable Methods RemoveFromPool() void RemoveFromPool() ReturnToPool() void ReturnToPool() Events OnInstanceFinished event Action<IPoolable>? OnInstanceFinished Event Type Action<IPoolable>"
  },
  "api/ShapeEngine.Pool.Pool.html": {
    "href": "api/ShapeEngine.Pool.Pool.html",
    "title": "Class Pool | ShapeEngine",
    "summary": "Class Pool Namespace ShapeEngine.Pool Assembly ShapeEngine.dll public class Pool : IPool Inheritance object Pool Implements IPool Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Pool(int, Func<IPoolable>, int) public Pool(int startSize, Func<IPoolable> createInstance, int maxSize = -1) Parameters startSize int createInstance Func<IPoolable> maxSize int Methods Clear() public void Clear() GetId() public uint GetId() Returns uint GetInstance() public IPoolable GetInstance() Returns IPoolable GetInstance<T>() public T GetInstance<T>() Returns T Type Parameters T HasInstances() public bool HasInstances() Returns bool HasUsableInstances() public bool HasUsableInstances() Returns bool OnInstanceFinished(IPoolable) public void OnInstanceFinished(IPoolable instance) Parameters instance IPoolable ReturnInstance(IPoolable) public void ReturnInstance(IPoolable instance) Parameters instance IPoolable"
  },
  "api/ShapeEngine.Pool.PoolHandler.html": {
    "href": "api/ShapeEngine.Pool.PoolHandler.html",
    "title": "Class PoolHandler | ShapeEngine",
    "summary": "Class PoolHandler Namespace ShapeEngine.Pool Assembly ShapeEngine.dll public class PoolHandler Inheritance object PoolHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddPool(IPool) public void AddPool(IPool pool) Parameters pool IPool AddPools(params IPool[]) public void AddPools(params IPool[] pools) Parameters pools IPool[] ClearAllPools() public void ClearAllPools() ClearPool(uint) public void ClearPool(uint id) Parameters id uint ContainsPool(uint) public bool ContainsPool(uint poolId) Parameters poolId uint Returns bool GetInstance<T>(uint) public T? GetInstance<T>(uint id) where T : IPoolable Parameters id uint Returns T Type Parameters T GetPool(uint) public IPool? GetPool(uint id) Parameters id uint Returns IPool GetPool<T>(uint) public T? GetPool<T>(uint id) where T : IPool Parameters id uint Returns T Type Parameters T RemoveAllPools() public void RemoveAllPools() RemovePool(uint) public void RemovePool(uint id) Parameters id uint RemovePools(params uint[]) public void RemovePools(params uint[] ids) Parameters ids uint[]"
  },
  "api/ShapeEngine.Pool.html": {
    "href": "api/ShapeEngine.Pool.html",
    "title": "Namespace ShapeEngine.Pool | ShapeEngine",
    "summary": "Namespace ShapeEngine.Pool Classes Pool PoolHandler Interfaces IPool IPoolable"
  },
  "api/ShapeEngine.Random.ChanceList-1.html": {
    "href": "api/ShapeEngine.Random.ChanceList-1.html",
    "title": "Class ChanceList<T> | ShapeEngine",
    "summary": "Class ChanceList<T> Namespace ShapeEngine.Random Assembly ShapeEngine.dll public class ChanceList<T> Type Parameters T Inheritance object ChanceList<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ChanceList(int, params (int amount, T value)[]) public ChanceList(int seed, params (int amount, T value)[] entries) Parameters seed int entries (int amount, T value)[] ChanceList(params (int amount, T value)[]) public ChanceList(params (int amount, T value)[] entries) Parameters entries (int amount, T value)[] Methods Next() public T Next() Returns T Next(int) public List<T> Next(int amount) Parameters amount int Returns List<T> Next(int, int) public List<T> Next(int min, int max) Parameters min int max int Returns List<T> Next(Predicate<T>) public T? Next(Predicate<T> match) Parameters match Predicate<T> Returns T Refill() public void Refill()"
  },
  "api/ShapeEngine.Random.Rng.html": {
    "href": "api/ShapeEngine.Random.Rng.html",
    "title": "Class Rng | ShapeEngine",
    "summary": "Class Rng Namespace ShapeEngine.Random Assembly ShapeEngine.dll public class Rng Inheritance object Rng Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Rng() public Rng() Rng(int) Initializes a new instance of the Random class, using the specified seed value. public Rng(int seed) Parameters seed int A number used to calculate a starting value for the pseudo-random number sequence. If a negative number is specified, the absolute value of the number is used. Fields Instance public static readonly Rng Instance Field Value Rng Properties Rand public Random Rand { get; } Property Value Random Seed public int Seed { get; } Property Value int Methods Chance(float) public bool Chance(float value) Parameters value float Returns bool PickRandomItem(params (string id, int weight)[]) public string PickRandomItem(params (string id, int weight)[] items) Parameters items (string id, int weight)[] Returns string PickRandomItem<T>(params WeightedItem<T>[]) public T? PickRandomItem<T>(params WeightedItem<T>[] items) Parameters items WeightedItem<T>[] Returns T Type Parameters T PickRandomItem<T>(params (T item, int weight)[]) public T? PickRandomItem<T>(params (T item, int weight)[] items) Parameters items (T item, int weight)[] Returns T Type Parameters T PickRandomItems(int, params (string id, int weight)[]) public List<string> PickRandomItems(int amount, params (string id, int weight)[] items) Parameters amount int items (string id, int weight)[] Returns List<string> PickRandomItems<T>(int, params WeightedItem<T>[]) public List<T> PickRandomItems<T>(int amount, params WeightedItem<T>[] items) Parameters amount int items WeightedItem<T>[] Returns List<T> Type Parameters T PickRandomItems<T>(int, params (T item, int weight)[]) public List<T> PickRandomItems<T>(int amount, params (T item, int weight)[] items) Parameters amount int items (T item, int weight)[] Returns List<T> Type Parameters T RandAngleDeg() public float RandAngleDeg() Returns float RandAngleRad() public float RandAngleRad() Returns float RandCollection<T>(List<T>, bool) public T? RandCollection<T>(List<T> list, bool pop = false) Parameters list List<T> pop bool Returns T Type Parameters T RandCollection<T>(List<T>, int, bool) public List<T> RandCollection<T>(List<T> source, int amount, bool pop = false) Parameters source List<T> amount int pop bool Returns List<T> Type Parameters T RandCollection<T>(T[]) public T? RandCollection<T>(T[] array) Parameters array T[] Returns T Type Parameters T RandColor() public ColorRgba RandColor() Returns ColorRgba RandColor(int) public ColorRgba RandColor(int alpha) Parameters alpha int Returns ColorRgba RandColor(int, int, int) public ColorRgba RandColor(int min, int max, int alpha = -1) Parameters min int max int alpha int Returns ColorRgba RandColorAlpha(ColorRgba) public ColorRgba RandColorAlpha(ColorRgba colorRgba) Parameters colorRgba ColorRgba Returns ColorRgba RandColorAlpha(ColorRgba, int) public ColorRgba RandColorAlpha(ColorRgba colorRgba, int max) Parameters colorRgba ColorRgba max int Returns ColorRgba RandColorAlpha(ColorRgba, int, int) public ColorRgba RandColorAlpha(ColorRgba colorRgba, int min, int max) Parameters colorRgba ColorRgba min int max int Returns ColorRgba RandColorBlue(ColorRgba) public ColorRgba RandColorBlue(ColorRgba colorRgba) Parameters colorRgba ColorRgba Returns ColorRgba RandColorBlue(ColorRgba, int) public ColorRgba RandColorBlue(ColorRgba colorRgba, int max) Parameters colorRgba ColorRgba max int Returns ColorRgba RandColorBlue(ColorRgba, int, int) public ColorRgba RandColorBlue(ColorRgba colorRgba, int min, int max) Parameters colorRgba ColorRgba min int max int Returns ColorRgba RandColorGreen(ColorRgba) public ColorRgba RandColorGreen(ColorRgba colorRgba) Parameters colorRgba ColorRgba Returns ColorRgba RandColorGreen(ColorRgba, int) public ColorRgba RandColorGreen(ColorRgba colorRgba, int max) Parameters colorRgba ColorRgba max int Returns ColorRgba RandColorGreen(ColorRgba, int, int) public ColorRgba RandColorGreen(ColorRgba colorRgba, int min, int max) Parameters colorRgba ColorRgba min int max int Returns ColorRgba RandColorRed(ColorRgba) public ColorRgba RandColorRed(ColorRgba colorRgba) Parameters colorRgba ColorRgba Returns ColorRgba RandColorRed(ColorRgba, int) public ColorRgba RandColorRed(ColorRgba colorRgba, int max) Parameters colorRgba ColorRgba max int Returns ColorRgba RandColorRed(ColorRgba, int, int) public ColorRgba RandColorRed(ColorRgba colorRgba, int min, int max) Parameters colorRgba ColorRgba min int max int Returns ColorRgba RandDirF() public float RandDirF() Returns float RandDirI() public int RandDirI() Returns int RandF() public float RandF() Returns float RandF(float) public float RandF(float max) Parameters max float Returns float RandF(float, float) public float RandF(float min, float max) Parameters min float max float Returns float RandI() public int RandI() Returns int RandI(int) public int RandI(int max) Parameters max int Returns int RandI(int, int) public int RandI(int min, int max) Parameters min int max int Returns int RandPoint(Vector2) public Vector2 RandPoint(Vector2 origin) Parameters origin Vector2 Returns Vector2 RandPoint(Vector2, Vector2) public Vector2 RandPoint(Vector2 start, Vector2 end) Parameters start Vector2 end Vector2 Returns Vector2 RandPoint(Vector2, float) public Vector2 RandPoint(Vector2 origin, float max) Parameters origin Vector2 max float Returns Vector2 RandPoint(Vector2, float, float) public Vector2 RandPoint(Vector2 origin, float min, float max) Parameters origin Vector2 min float max float Returns Vector2 RandRect(AnchorPoint) public Rect RandRect(AnchorPoint alignement) Parameters alignement AnchorPoint Returns Rect RandRect(Vector2, AnchorPoint) public Rect RandRect(Vector2 origin, AnchorPoint alignement) Parameters origin Vector2 alignement AnchorPoint Returns Rect RandRect(Vector2, float, float, float, float, AnchorPoint) public Rect RandRect(Vector2 origin, float posMin, float posMax, float sizeMin, float sizeMax, AnchorPoint alignement) Parameters origin Vector2 posMin float posMax float sizeMin float sizeMax float alignement AnchorPoint Returns Rect RandRect(float, float, float, float, AnchorPoint) public Rect RandRect(float posMin, float posMax, float sizeMin, float sizeMax, AnchorPoint alignement) Parameters posMin float posMax float sizeMin float sizeMax float alignement AnchorPoint Returns Rect RandSize() public Size RandSize() Returns Size RandSize(Size) public Size RandSize(Size max) Parameters max Size Returns Size RandSize(Size, Size) public Size RandSize(Size min, Size max) Parameters min Size max Size Returns Size RandSize(float) public Size RandSize(float max) Parameters max float Returns Size RandSize(float, float) public Size RandSize(float min, float max) Parameters min float max float Returns Size RandVec2() public Vector2 RandVec2() Returns Vector2 RandVec2(float) public Vector2 RandVec2(float max) Parameters max float Returns Vector2 RandVec2(float, float) public Vector2 RandVec2(float min, float max) Parameters min float max float Returns Vector2 SetSeed(int) public void SetSeed(int seed) Parameters seed int"
  },
  "api/ShapeEngine.Random.WeightedItem-1.html": {
    "href": "api/ShapeEngine.Random.WeightedItem-1.html",
    "title": "Struct WeightedItem<T> | ShapeEngine",
    "summary": "Struct WeightedItem<T> Namespace ShapeEngine.Random Assembly ShapeEngine.dll public struct WeightedItem<T> Type Parameters T Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors WeightedItem(T, int) public WeightedItem(T item, int weight) Parameters item T weight int Properties item public T item { readonly get; set; } Property Value T weight public int weight { readonly get; set; } Property Value int"
  },
  "api/ShapeEngine.Random.html": {
    "href": "api/ShapeEngine.Random.html",
    "title": "Namespace ShapeEngine.Random | ShapeEngine",
    "summary": "Namespace ShapeEngine.Random Classes ChanceList<T> Rng Structs WeightedItem<T>"
  },
  "api/ShapeEngine.Screen.CameraFollowerMulti.html": {
    "href": "api/ShapeEngine.Screen.CameraFollowerMulti.html",
    "title": "Class CameraFollowerMulti | ShapeEngine",
    "summary": "Class CameraFollowerMulti Namespace ShapeEngine.Screen Assembly ShapeEngine.dll public class CameraFollowerMulti : ICameraFollower Inheritance object CameraFollowerMulti Implements ICameraFollower Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CameraFollowerMulti() public CameraFollowerMulti() Fields CenterTarget public ICameraFollowTarget? CenterTarget Field Value ICameraFollowTarget LerpSpeedPosition public float LerpSpeedPosition Field Value float LerpSpeedSize public float LerpSpeedSize Field Value float MinSize public Size MinSize Field Value Size TargetMargin public float TargetMargin Field Value float Methods AddTarget(ICameraFollowTarget) public bool AddTarget(ICameraFollowTarget newTarget) Parameters newTarget ICameraFollowTarget Returns bool ClearTargets() public void ClearTargets() DrawDebugRect() public void DrawDebugRect() OnCameraAttached() public void OnCameraAttached() OnCameraDetached() public void OnCameraDetached() RemoveTarget(ICameraFollowTarget) public bool RemoveTarget(ICameraFollowTarget target) Parameters target ICameraFollowTarget Returns bool Reset() public void Reset() Update(float, Rect) public Rect Update(float dt, Rect cameraRect) Parameters dt float cameraRect Rect Returns Rect"
  },
  "api/ShapeEngine.Screen.CameraFollowerSingle.html": {
    "href": "api/ShapeEngine.Screen.CameraFollowerSingle.html",
    "title": "Class CameraFollowerSingle | ShapeEngine",
    "summary": "Class CameraFollowerSingle Namespace ShapeEngine.Screen Assembly ShapeEngine.dll public class CameraFollowerSingle : ICameraFollower Inheritance object CameraFollowerSingle Implements ICameraFollower Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CameraFollowerSingle(float, float, float) public CameraFollowerSingle(float speed, float minBoundary, float maxBoundary) Parameters speed float minBoundary float maxBoundary float Fields BoundaryDis public ValueRange BoundaryDis Field Value ValueRange Speed public float Speed Field Value float Properties IsFollowing public bool IsFollowing { get; } Property Value bool NewTarget public ICameraFollowTarget? NewTarget { get; } Property Value ICameraFollowTarget Target public ICameraFollowTarget? Target { get; } Property Value ICameraFollowTarget Methods ChangeTarget(ICameraFollowTarget, float) public void ChangeTarget(ICameraFollowTarget newTarget, float changeDuration = 1) Parameters newTarget ICameraFollowTarget changeDuration float ClearTarget() public void ClearTarget() OnCameraAttached() public void OnCameraAttached() OnCameraDetached() public void OnCameraDetached() Reset() public void Reset() SetTarget(ICameraFollowTarget) public void SetTarget(ICameraFollowTarget target) Parameters target ICameraFollowTarget Update(float, Rect) public Rect Update(float dt, Rect cameraRect) Parameters dt float cameraRect Rect Returns Rect"
  },
  "api/ShapeEngine.Screen.CameraTweenOffset.html": {
    "href": "api/ShapeEngine.Screen.CameraTweenOffset.html",
    "title": "Class CameraTweenOffset | ShapeEngine",
    "summary": "Class CameraTweenOffset Namespace ShapeEngine.Screen Assembly ShapeEngine.dll public class CameraTweenOffset : ICameraTween, ISequenceable Inheritance object CameraTweenOffset Implements ICameraTween ISequenceable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CameraTweenOffset(Vector2, Vector2, float, TweenType) public CameraTweenOffset(Vector2 from, Vector2 to, float duration, TweenType tweenType) Parameters from Vector2 to Vector2 duration float tweenType TweenType Methods Copy() public ISequenceable Copy() Returns ISequenceable GetOffset() public Vector2 GetOffset() Returns Vector2 Update(float) public bool Update(float dt) Parameters dt float Returns bool Returns if finished."
  },
  "api/ShapeEngine.Screen.CameraTweenRotation.html": {
    "href": "api/ShapeEngine.Screen.CameraTweenRotation.html",
    "title": "Class CameraTweenRotation | ShapeEngine",
    "summary": "Class CameraTweenRotation Namespace ShapeEngine.Screen Assembly ShapeEngine.dll public class CameraTweenRotation : ICameraTween, ISequenceable Inheritance object CameraTweenRotation Implements ICameraTween ISequenceable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CameraTweenRotation(float, float, float, TweenType) public CameraTweenRotation(float fromDeg, float toDeg, float duration, TweenType tweenType) Parameters fromDeg float toDeg float duration float tweenType TweenType Methods Copy() public ISequenceable Copy() Returns ISequenceable GetRotationDeg() public float GetRotationDeg() Returns float Update(float) public bool Update(float dt) Parameters dt float Returns bool Returns if finished."
  },
  "api/ShapeEngine.Screen.CameraTweenZoomFactor.html": {
    "href": "api/ShapeEngine.Screen.CameraTweenZoomFactor.html",
    "title": "Class CameraTweenZoomFactor | ShapeEngine",
    "summary": "Class CameraTweenZoomFactor Namespace ShapeEngine.Screen Assembly ShapeEngine.dll public class CameraTweenZoomFactor : ICameraTween, ISequenceable Inheritance object CameraTweenZoomFactor Implements ICameraTween ISequenceable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CameraTweenZoomFactor(float, float, float, TweenType) public CameraTweenZoomFactor(float from, float to, float duration, TweenType tweenType) Parameters from float to float duration float tweenType TweenType Methods Copy() public ISequenceable Copy() Returns ISequenceable GetZoomFactor() public float GetZoomFactor() Returns float Update(float) public bool Update(float dt) Parameters dt float Returns bool Returns if finished."
  },
  "api/ShapeEngine.Screen.CustomScreenTextureHandler.html": {
    "href": "api/ShapeEngine.Screen.CustomScreenTextureHandler.html",
    "title": "Class CustomScreenTextureHandler | ShapeEngine",
    "summary": "Class CustomScreenTextureHandler Namespace ShapeEngine.Screen Assembly ShapeEngine.dll public abstract class CustomScreenTextureHandler Inheritance object CustomScreenTextureHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetBackgroundClearColor() public virtual (ColorRgba color, bool clear) GetBackgroundClearColor() Returns (ColorRgba color, bool clear) GetDestinationRect(Dimensions, Dimensions) The destination rectangle for drawing the screen texture to the screen. This dictates the area of the screen the screen texture is drawn to. public virtual Rect GetDestinationRect(Dimensions screenDimensions, Dimensions textureDimensions) Parameters screenDimensions Dimensions textureDimensions Dimensions Returns Rect GetOrigin(Dimensions, Dimensions) Dictates the origin of the screen texture. Should be 0,0 and x, y of the the destination rectangle should be used instead: public virtual Vector2 GetOrigin(Dimensions screenDimensions, Dimensions textureDimensions) Parameters screenDimensions Dimensions textureDimensions Dimensions Returns Vector2 GetRotation() The rotation the screen texture should be drawn to the screen with. public virtual float GetRotation() Returns float GetScaledMousePosition(Vector2, Dimensions, Dimensions) Called in update to scale the global mouse position. public virtual Vector2 GetScaledMousePosition(Vector2 mousePosition, Dimensions screenDimensions, Dimensions textureDimensions) Parameters mousePosition Vector2 The global mouse position. screenDimensions Dimensions textureDimensions Dimensions Returns Vector2 Return the scaled mouse position for the custom screen texture. GetSourceRect(Dimensions, Dimensions) The source rectangle of the screen texture used for drawing to the screen. Dictates what area of the screen texture is drawn to the screen. Height needs to be inverted (multiplied by negative one) due to open gl. public virtual Rect GetSourceRect(Dimensions screenDimensions, Dimensions textureDimensions) Parameters screenDimensions Dimensions textureDimensions Dimensions Returns Rect GetTextureRect(Dimensions, Dimensions) Called in update to get the current texture rect of the custom screen texture. public virtual Rect GetTextureRect(Dimensions screenDimensions, Dimensions textureDimensions) Parameters screenDimensions Dimensions textureDimensions Dimensions Returns Rect OnScreenDimensionsChanged(Dimensions) Return the new dimensions for the custom screen texture. Return invalid dimensions to keep the screen texture the same. public virtual Dimensions OnScreenDimensionsChanged(Dimensions newScreenDimensions) Parameters newScreenDimensions Dimensions Returns Dimensions"
  },
  "api/ShapeEngine.Screen.ICameraFollower.html": {
    "href": "api/ShapeEngine.Screen.ICameraFollower.html",
    "title": "Interface ICameraFollower | ShapeEngine",
    "summary": "Interface ICameraFollower Namespace ShapeEngine.Screen Assembly ShapeEngine.dll public interface ICameraFollower Methods OnCameraAttached() void OnCameraAttached() OnCameraDetached() void OnCameraDetached() Reset() void Reset() Update(float, Rect) Rect Update(float dt, Rect cameraRect) Parameters dt float cameraRect Rect Returns Rect"
  },
  "api/ShapeEngine.Screen.ICameraTween.html": {
    "href": "api/ShapeEngine.Screen.ICameraTween.html",
    "title": "Interface ICameraTween | ShapeEngine",
    "summary": "Interface ICameraTween Namespace ShapeEngine.Screen Assembly ShapeEngine.dll public interface ICameraTween : ISequenceable Inherited Members ISequenceable.Update(float) ISequenceable.Copy() Methods GetOffset() Vector2 GetOffset() Returns Vector2 GetRotationDeg() float GetRotationDeg() Returns float GetZoomFactor() float GetZoomFactor() Returns float"
  },
  "api/ShapeEngine.Screen.MonitorDevice.MonitorChanged.html": {
    "href": "api/ShapeEngine.Screen.MonitorDevice.MonitorChanged.html",
    "title": "Delegate MonitorDevice.MonitorChanged | ShapeEngine",
    "summary": "Delegate MonitorDevice.MonitorChanged Namespace ShapeEngine.Screen Assembly ShapeEngine.dll public delegate void MonitorDevice.MonitorChanged(MonitorInfo oldMonitor, MonitorInfo newMonitor) Parameters oldMonitor MonitorInfo newMonitor MonitorInfo"
  },
  "api/ShapeEngine.Screen.MonitorDevice.MonitorSetupChanged.html": {
    "href": "api/ShapeEngine.Screen.MonitorDevice.MonitorSetupChanged.html",
    "title": "Delegate MonitorDevice.MonitorSetupChanged | ShapeEngine",
    "summary": "Delegate MonitorDevice.MonitorSetupChanged Namespace ShapeEngine.Screen Assembly ShapeEngine.dll public delegate void MonitorDevice.MonitorSetupChanged(List<MonitorInfo> newSetup) Parameters newSetup List<MonitorInfo>"
  },
  "api/ShapeEngine.Screen.MonitorDevice.html": {
    "href": "api/ShapeEngine.Screen.MonitorDevice.html",
    "title": "Class MonitorDevice | ShapeEngine",
    "summary": "Class MonitorDevice Namespace ShapeEngine.Screen Assembly ShapeEngine.dll public sealed class MonitorDevice Inheritance object MonitorDevice Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors MonitorDevice() public MonitorDevice() Methods CurMonitor() public MonitorInfo CurMonitor() Returns MonitorInfo Get() public MonitorInfo Get() Returns MonitorInfo Get(int) public MonitorInfo Get(int monitorIndex) Parameters monitorIndex int Returns MonitorInfo GetAllMonitorInfo() public List<MonitorInfo> GetAllMonitorInfo() Returns List<MonitorInfo> GetCurIndex() public int GetCurIndex() Returns int GetName() public string GetName() Returns string GetName(int) public string GetName(int monitorIndex) Parameters monitorIndex int Returns string GetRefreshrate() public int GetRefreshrate() Returns int GetRefreshrate(int) public int GetRefreshrate(int monitorIndex) Parameters monitorIndex int Returns int GetSize() public Dimensions GetSize() Returns Dimensions GetSize(int) public Dimensions GetSize(int monitorIndex) Parameters monitorIndex int Returns Dimensions HasIndexChanged() public (bool changed, int oldIndex, int newIndex) HasIndexChanged() Returns (bool changed, int oldIndex, int newIndex) HasMonitorChanged() public MonitorInfo HasMonitorChanged() Returns MonitorInfo IsValidIndex(int) public bool IsValidIndex(int index) Parameters index int Returns bool MonitorCount() public int MonitorCount() Returns int NextMonitor() public MonitorInfo NextMonitor() Returns MonitorInfo PrevMonitor() public MonitorInfo PrevMonitor() Returns MonitorInfo SetCurIndex(int) public bool SetCurIndex(int index) Parameters index int Returns bool SetMonitor(int) public MonitorInfo SetMonitor(int newMonitor) Parameters newMonitor int Returns MonitorInfo Events OnMonitorChanged public event MonitorDevice.MonitorChanged? OnMonitorChanged Event Type MonitorDevice.MonitorChanged OnMonitorSetupChanged public event MonitorDevice.MonitorSetupChanged? OnMonitorSetupChanged Event Type MonitorDevice.MonitorSetupChanged"
  },
  "api/ShapeEngine.Screen.MonitorInfo.html": {
    "href": "api/ShapeEngine.Screen.MonitorInfo.html",
    "title": "Struct MonitorInfo | ShapeEngine",
    "summary": "Struct MonitorInfo Namespace ShapeEngine.Screen Assembly ShapeEngine.dll public struct MonitorInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors MonitorInfo() public MonitorInfo() MonitorInfo(string, int, int, Vector2, int, int) public MonitorInfo(string name, int w, int h, Vector2 pos, int refreshrate, int index) Parameters name string w int h int pos Vector2 refreshrate int index int Fields Available public bool Available Field Value bool Dimensions public Dimensions Dimensions Field Value Dimensions Index public int Index Field Value int Name public string Name Field Value string Position public Vector2 Position Field Value Vector2 Refreshrate public int Refreshrate Field Value int Properties Height public int Height { get; } Property Value int Width public int Width { get; } Property Value int Methods WriteDebugInfo() public void WriteDebugInfo()"
  },
  "api/ShapeEngine.Screen.ScreenTexture.DrawToRenderTexture.html": {
    "href": "api/ShapeEngine.Screen.ScreenTexture.DrawToRenderTexture.html",
    "title": "Delegate ScreenTexture.DrawToRenderTexture | ShapeEngine",
    "summary": "Delegate ScreenTexture.DrawToRenderTexture Namespace ShapeEngine.Screen Assembly ShapeEngine.dll public delegate void ScreenTexture.DrawToRenderTexture(ScreenInfo screenInfo, ScreenTexture texture) Parameters screenInfo ScreenInfo texture ScreenTexture"
  },
  "api/ShapeEngine.Screen.ScreenTexture.TextureResized.html": {
    "href": "api/ShapeEngine.Screen.ScreenTexture.TextureResized.html",
    "title": "Delegate ScreenTexture.TextureResized | ShapeEngine",
    "summary": "Delegate ScreenTexture.TextureResized Namespace ShapeEngine.Screen Assembly ShapeEngine.dll public delegate void ScreenTexture.TextureResized(int w, int h) Parameters w int h int"
  },
  "api/ShapeEngine.Screen.ScreenTexture.html": {
    "href": "api/ShapeEngine.Screen.ScreenTexture.html",
    "title": "Class ScreenTexture | ShapeEngine",
    "summary": "Class ScreenTexture Namespace ShapeEngine.Screen Assembly ShapeEngine.dll public sealed class ScreenTexture Inheritance object ScreenTexture Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ScreenTexture(Dimensions, CustomScreenTextureHandler, ShaderSupportType, TextureFilter) Create a screen texture in custom mode. public ScreenTexture(Dimensions customDimensions, CustomScreenTextureHandler handler, ShaderSupportType shaderSupportType, TextureFilter textureFilter = TextureFilter.Bilinear) Parameters customDimensions Dimensions The width and height of the screen texture. Has to be positive otherwise screen texture will be created in stretch mode. Can be changed with ChangeCustomTextureSize function later. handler CustomScreenTextureHandler shaderSupportType ShaderSupportType textureFilter TextureFilter ScreenTexture(Dimensions, ShaderSupportType, TextureFilter, bool) Create a screen texture in fixed mode or nearest fixed mode. public ScreenTexture(Dimensions fixedDimensions, ShaderSupportType shaderSupportType, TextureFilter textureFilter = TextureFilter.Bilinear, bool nearest = false) Parameters fixedDimensions Dimensions The fixed dimensions to use for the screen texture. Dimensions have to be valid. shaderSupportType ShaderSupportType textureFilter TextureFilter nearest bool If true nearest fixed mode is used. ScreenTexture(ShaderSupportType, TextureFilter) Create a screen texture in stretch mode. public ScreenTexture(ShaderSupportType shaderSupportType, TextureFilter textureFilter = TextureFilter.Bilinear) Parameters shaderSupportType ShaderSupportType textureFilter TextureFilter ScreenTexture(Vector2, Vector2, ShaderSupportType, TextureFilter) Create a screen texture in anchor mode. public ScreenTexture(Vector2 anchorStretch, Vector2 anchorPosition, ShaderSupportType shaderSupportType, TextureFilter textureFilter = TextureFilter.Bilinear) Parameters anchorStretch Vector2 The factors for the size of the resulting screen texture. 0.5/0.5 would result in a screen texture with half the width and half the height of the screen. anchorPosition Vector2 The factors for the position of the screen texture on the screen. 0/0 is the topleft corner, 1/1 is the bottom right corner. shaderSupportType ShaderSupportType textureFilter TextureFilter ScreenTexture(float, ShaderSupportType, TextureFilter) Create a screen texture in pixelation mode. public ScreenTexture(float pixelationFactor, ShaderSupportType shaderSupportType, TextureFilter textureFilter = TextureFilter.Bilinear) Parameters pixelationFactor float The pixelation factor has to be bigger than 0 and smaller than 1 otherwise the screen texture will be create in stretch mode! shaderSupportType ShaderSupportType textureFilter TextureFilter Fields BackgroundColor public ColorRgba BackgroundColor Field Value ColorRgba Camera public ShapeCamera? Camera Field Value ShapeCamera FixedDimensions public readonly Dimensions FixedDimensions Field Value Dimensions Mode public readonly ScreenTextureMode Mode Field Value ScreenTextureMode ShaderSupport public readonly ShaderSupportType ShaderSupport Field Value ShaderSupportType Shaders public readonly ShaderContainer? Shaders Field Value ShaderContainer TextureFilter public readonly TextureFilter TextureFilter Field Value TextureFilter Tint public ColorRgba Tint Field Value ColorRgba Properties AnchorPosition public Vector2 AnchorPosition { get; } Property Value Vector2 AnchorStretch public Vector2 AnchorStretch { get; } Property Value Vector2 CustomClearBackgroundFunction This is set automatically if custom mode is used! public Func<(ColorRgba color, bool clear)>? CustomClearBackgroundFunction { get; set; } Property Value Func<(ColorRgba color, bool clear)> DrawToScreenOrder The order in which screen textures are drawn to the screen each frame. Lower numbers will be draw first. Negative draw orders will be drawn to screen before the game texture. Positive draw orders will be drawn to screen after the game texture (this includes 0). If the draw order is the same the order in which the screen textures were added is taken into account. public int DrawToScreenOrder { get; set; } Property Value int DrawToTextureEnabled public bool DrawToTextureEnabled { get; set; } Property Value bool GameScreenInfo public ScreenInfo GameScreenInfo { get; } Property Value ScreenInfo GameUiScreenInfo public ScreenInfo GameUiScreenInfo { get; } Property Value ScreenInfo Height public int Height { get; } Property Value int Initialized public bool Initialized { get; } Property Value bool Loaded public bool Loaded { get; } Property Value bool PixelationFactor public float PixelationFactor { get; } Property Value float Width public int Width { get; } Property Value int Methods ChangeAnchorPosition(Vector2) public bool ChangeAnchorPosition(Vector2 newAnchorPosition) Parameters newAnchorPosition Vector2 Returns bool ChangeAnchorStretch(Vector2) Requires a reload of the texture! Reloads happens next frame! public bool ChangeAnchorStretch(Vector2 newAnchorStretch) Parameters newAnchorStretch Vector2 Value Range: Bigger than 0, 0 and smaller than 1, 1. Returns bool ChangeCustomTextureSize(Dimensions) Change the dimensions of the screen texture. This functions only works in custom mode! public void ChangeCustomTextureSize(Dimensions newDimensions) Parameters newDimensions Dimensions The new dimensions to use. Only works if newDimensions are different than the current dimensions and if the newDimensions are valid!. ChangePixelationFactor(float) Requires a reload of the texture! Reloads happens next frame! public bool ChangePixelationFactor(float newPixelationFactor) Parameters newPixelationFactor float Value Range: Bigger than 0 and smaller than 1! Returns bool DrawOnTexture() public void DrawOnTexture() DrawToScreen() Is called by the game class to draw the texture to the screen. Should not be used otherwise. public void DrawToScreen() GetDestinationRect() public Rect GetDestinationRect() Returns Rect GetTextureRect() public Rect GetTextureRect() Returns Rect Initialize(Dimensions, Vector2, ShapeCamera?) public void Initialize(Dimensions screenSize, Vector2 mousePosition, ShapeCamera? camera = null) Parameters screenSize Dimensions mousePosition Vector2 camera ShapeCamera Unload() public void Unload() Update(float, Dimensions, Vector2, bool) public void Update(float dt, Dimensions screenSize, Vector2 mousePosition, bool paused) Parameters dt float screenSize Dimensions mousePosition Vector2 paused bool Events OnDrawGame Draw to the render texture. Is called before shaders are applied. public event ScreenTexture.DrawToRenderTexture? OnDrawGame Event Type ScreenTexture.DrawToRenderTexture OnDrawUI Draw to the render texture Is called after shaders are applied public event ScreenTexture.DrawToRenderTexture? OnDrawUI Event Type ScreenTexture.DrawToRenderTexture OnTextureResized public event ScreenTexture.TextureResized? OnTextureResized Event Type ScreenTexture.TextureResized"
  },
  "api/ShapeEngine.Screen.ScreenTextureMode.html": {
    "href": "api/ShapeEngine.Screen.ScreenTextureMode.html",
    "title": "Enum ScreenTextureMode | ShapeEngine",
    "summary": "Enum ScreenTextureMode Namespace ShapeEngine.Screen Assembly ShapeEngine.dll public enum ScreenTextureMode Fields Anchor = 16 Texture size will be screensize * anchorstretch and topleft position will be screensize * anchorposition Custom = 32 Fixed = 4 Texture will always be the same size and centered on the screen. NearestFixed = 8 Texture will always be the same aspect ratio as the screen but stay as close as possible to the fixed dimensions Pixelation = 2 Texture will always be the same aspect ratio as the screen but scaled by the pixelation factor. Stretch = 1 Texture will always be the same size as the screen."
  },
  "api/ShapeEngine.Screen.ShaderContainer.html": {
    "href": "api/ShapeEngine.Screen.ShaderContainer.html",
    "title": "Class ShaderContainer | ShapeEngine",
    "summary": "Class ShaderContainer Namespace ShapeEngine.Screen Assembly ShapeEngine.dll public class ShaderContainer Inheritance object ShaderContainer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Add(ShapeShader) public uint Add(ShapeShader shader) Parameters shader ShapeShader Returns uint Get(uint) public ShapeShader? Get(uint id) Parameters id uint Returns ShapeShader GetActiveShaders() public List<ShapeShader> GetActiveShaders() Returns List<ShapeShader> GetAllIDs() public List<uint> GetAllIDs() Returns List<uint> GetAllShaders() public List<ShapeShader> GetAllShaders() Returns List<ShapeShader> HasActiveShaders() public bool HasActiveShaders() Returns bool HasShader(ShapeShader) public bool HasShader(ShapeShader shader) Parameters shader ShapeShader Returns bool HasShader(uint) public bool HasShader(uint id) Parameters id uint Returns bool HasShaders() public bool HasShaders() Returns bool Remove(ShapeShader) public bool Remove(ShapeShader shader) Parameters shader ShapeShader Returns bool Remove(uint) public bool Remove(uint id) Parameters id uint Returns bool"
  },
  "api/ShapeEngine.Screen.ShaderSupportType.html": {
    "href": "api/ShapeEngine.Screen.ShaderSupportType.html",
    "title": "Enum ShaderSupportType | ShapeEngine",
    "summary": "Enum ShaderSupportType Namespace ShapeEngine.Screen Assembly ShapeEngine.dll public enum ShaderSupportType Fields Multi = 4 Any number of screen shaders is supported. None = 1 No shaders supported. No screen shader buffer texture loaded. Single = 2 A single shader is supported. Shader container can still hold any number of shaders but only first active shader will be used."
  },
  "api/ShapeEngine.Screen.ShapeCamera.html": {
    "href": "api/ShapeEngine.Screen.ShapeCamera.html",
    "title": "Class ShapeCamera | ShapeEngine",
    "summary": "Class ShapeCamera Namespace ShapeEngine.Screen Assembly ShapeEngine.dll public sealed class ShapeCamera Inheritance object ShapeCamera Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ShapeCamera() public ShapeCamera() ShapeCamera(Vector2) public ShapeCamera(Vector2 pos) Parameters pos Vector2 ShapeCamera(Vector2, AnchorPoint) public ShapeCamera(Vector2 pos, AnchorPoint alignement) Parameters pos Vector2 alignement AnchorPoint ShapeCamera(Vector2, AnchorPoint, Dimensions) public ShapeCamera(Vector2 pos, AnchorPoint alignement, Dimensions targetResolution) Parameters pos Vector2 alignement AnchorPoint targetResolution Dimensions ShapeCamera(Vector2, AnchorPoint, float) public ShapeCamera(Vector2 pos, AnchorPoint alignement, float zoomLevel) Parameters pos Vector2 alignement AnchorPoint zoomLevel float ShapeCamera(Vector2, AnchorPoint, float, Dimensions) public ShapeCamera(Vector2 pos, AnchorPoint alignement, float zoomLevel, Dimensions targetResolution) Parameters pos Vector2 alignement AnchorPoint zoomLevel float targetResolution Dimensions ShapeCamera(Vector2, AnchorPoint, float, float) public ShapeCamera(Vector2 pos, AnchorPoint alignement, float zoomLevel, float rotationDeg) Parameters pos Vector2 alignement AnchorPoint zoomLevel float rotationDeg float ShapeCamera(Vector2, Dimensions) public ShapeCamera(Vector2 pos, Dimensions targetResolution) Parameters pos Vector2 targetResolution Dimensions ShapeCamera(Vector2, float) public ShapeCamera(Vector2 pos, float zoomLevel) Parameters pos Vector2 zoomLevel float Fields Intensity public float Intensity Field Value float MaxZoomLevel public static float MaxZoomLevel Field Value float MinZoomLevel public static float MinZoomLevel Field Value float Properties Alignement public AnchorPoint Alignement { get; } Property Value AnchorPoint Area public Rect Area { get; } Property Value Rect BaseOffset public Size BaseOffset { get; } Property Value Size BasePosition public Vector2 BasePosition { get; set; } Property Value Vector2 BaseRotationDeg public float BaseRotationDeg { get; } Property Value float BaseScale public float BaseScale { get; } Property Value float BaseSize public Size BaseSize { get; } Property Value Size BaseTransform public Transform2D BaseTransform { get; set; } Property Value Transform2D BaseZoomLevel public float BaseZoomLevel { get; } Property Value float Camera public Camera2D Camera { get; } Property Value Camera2D Follower public ICameraFollower? Follower { get; set; } Property Value ICameraFollower Offset public Size Offset { get; } Property Value Size RotationDeg public float RotationDeg { get; } Property Value float TargetResolution Used to calculate a zoom adjustment factor to make the camera always display the same amount of area independent of the screen size public Dimensions TargetResolution { get; set; } Property Value Dimensions ZoomFactor public float ZoomFactor { get; } Property Value float ZoomLevel public float ZoomLevel { get; } Property Value float Methods Activate() public void Activate() Deactivate() public void Deactivate() HasSequences() public bool HasSequences() Returns bool HasTweenSequence(uint) public bool HasTweenSequence(uint id) Parameters id uint Returns bool Reset() public void Reset() Rotate(float) public void Rotate(float deg) Parameters deg float ScreenToWorld(Rect) public Rect ScreenToWorld(Rect r) Parameters r Rect Returns Rect ScreenToWorld(Vector2) public Vector2 ScreenToWorld(Vector2 pos) Parameters pos Vector2 Returns Vector2 SetAlignement(AnchorPoint) public void SetAlignement(AnchorPoint newAlignement) Parameters newAlignement AnchorPoint SetCameraRect(Rect) public void SetCameraRect(Rect newRect) Parameters newRect Rect SetRotation(float) public void SetRotation(float deg) Parameters deg float SetZoom(float) public void SetZoom(float zoomLevel) Parameters zoomLevel float Shake(float, Vector2, float, float, float) public void Shake(float duration, Vector2 strength, float zoomStrength = 0, float rotStrength = 0, float smoothness = 0.75) Parameters duration float strength Vector2 zoomStrength float rotStrength float smoothness float StartTweenSequence(params ICameraTween[]) public uint StartTweenSequence(params ICameraTween[] tweens) Parameters tweens ICameraTween[] Returns uint StopShake() public void StopShake() StopTweenSequence(uint) public void StopTweenSequence(uint id) Parameters id uint StopTweens() public void StopTweens() WorldToScreen(Rect) public Rect WorldToScreen(Rect r) Parameters r Rect Returns Rect WorldToScreen(Vector2) public Vector2 WorldToScreen(Vector2 pos) Parameters pos Vector2 Returns Vector2 Zoom(float) public void Zoom(float change) Parameters change float"
  },
  "api/ShapeEngine.Screen.ShapeShader.html": {
    "href": "api/ShapeEngine.Screen.ShapeShader.html",
    "title": "Class ShapeShader | ShapeEngine",
    "summary": "Class ShapeShader Namespace ShapeEngine.Screen Assembly ShapeEngine.dll public class ShapeShader Inheritance object ShapeShader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ShapeShader(Shader, bool, int) public ShapeShader(Shader shader, bool enabled = true, int order = 0) Parameters shader Shader enabled bool order int ShapeShader(Shader, uint, bool, int) public ShapeShader(Shader shader, uint id, bool enabled = true, int order = 0) Parameters shader Shader id uint enabled bool order int Properties Enabled public bool Enabled { get; set; } Property Value bool ID public uint ID { get; } Property Value uint Loaded public bool Loaded { get; } Property Value bool Order public int Order { get; set; } Property Value int Shader public Shader Shader { get; } Property Value Shader Methods SetValueColor(Shader, string, ColorRgba) public static void SetValueColor(Shader shader, string propertyName, ColorRgba colorRgba) Parameters shader Shader propertyName string colorRgba ColorRgba SetValueFloat(Shader, string, float) public static void SetValueFloat(Shader shader, string propertyName, float value) Parameters shader Shader propertyName string value float SetValueVec(Shader, string, float[], ShaderUniformDataType) public static void SetValueVec(Shader shader, string propertyName, float[] values, ShaderUniformDataType dataType) Parameters shader Shader propertyName string values float[] dataType ShaderUniformDataType SetValueVector2(Shader, string, Vector2) public static void SetValueVector2(Shader shader, string propertyName, Vector2 vec) Parameters shader Shader propertyName string vec Vector2 SetValueVector2(Shader, string, float, float) public static void SetValueVector2(Shader shader, string propertyName, float v1, float v2) Parameters shader Shader propertyName string v1 float v2 float SetValueVector3(Shader, string, float, float, float) public static void SetValueVector3(Shader shader, string propertyName, float v1, float v2, float v3) Parameters shader Shader propertyName string v1 float v2 float v3 float SetValueVector4(Shader, string, float, float, float, float) public static void SetValueVector4(Shader shader, string propertyName, float v1, float v2, float v3, float v4) Parameters shader Shader propertyName string v1 float v2 float v3 float v4 float Unload() public bool Unload() Returns bool"
  },
  "api/ShapeEngine.Screen.html": {
    "href": "api/ShapeEngine.Screen.html",
    "title": "Namespace ShapeEngine.Screen | ShapeEngine",
    "summary": "Namespace ShapeEngine.Screen Classes CameraFollowerMulti CameraFollowerSingle CameraTweenOffset CameraTweenRotation CameraTweenZoomFactor CustomScreenTextureHandler MonitorDevice ScreenTexture ShaderContainer ShapeCamera ShapeShader Structs MonitorInfo Interfaces ICameraFollower ICameraTween Enums ScreenTextureMode ShaderSupportType Delegates MonitorDevice.MonitorChanged MonitorDevice.MonitorSetupChanged ScreenTexture.DrawToRenderTexture ScreenTexture.TextureResized"
  },
  "api/ShapeEngine.StaticLib.Drawing.ShapeCircleDrawing.html": {
    "href": "api/ShapeEngine.StaticLib.Drawing.ShapeCircleDrawing.html",
    "title": "Class ShapeCircleDrawing | ShapeEngine",
    "summary": "Class ShapeCircleDrawing Namespace ShapeEngine.StaticLib.Drawing Assembly ShapeEngine.dll public static class ShapeCircleDrawing Inheritance object ShapeCircleDrawing Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Draw(Circle, ColorRgba) public static void Draw(this Circle c, ColorRgba color) Parameters c Circle color ColorRgba Draw(Circle, ColorRgba, int) public static void Draw(this Circle c, ColorRgba color, int segments) Parameters c Circle color ColorRgba segments int Draw(Circle, ColorRgba, float, int) public static void Draw(this Circle c, ColorRgba color, float rotDeg, int segments = 16) Parameters c Circle color ColorRgba rotDeg float segments int DrawCircle(Vector2, float, ColorRgba, int) public static void DrawCircle(Vector2 center, float radius, ColorRgba color, int segments = 16) Parameters center Vector2 radius float color ColorRgba segments int DrawCircle(Vector2, float, ColorRgba, float, int) public static void DrawCircle(Vector2 center, float radius, ColorRgba color, float rotDeg, int segments = 16) Parameters center Vector2 radius float color ColorRgba rotDeg float segments int DrawCircleCheckeredLines(Vector2, AnchorPoint, float, float, float, float, ColorRgba, ColorRgba, int) public static void DrawCircleCheckeredLines(Vector2 pos, AnchorPoint alignement, float radius, float spacing, float lineThickness, float angleDeg, ColorRgba lineColorRgba, ColorRgba bgColorRgba, int circleSegments) Parameters pos Vector2 alignement AnchorPoint radius float spacing float lineThickness float angleDeg float lineColorRgba ColorRgba bgColorRgba ColorRgba circleSegments int DrawCircleFast(Vector2, float, ColorRgba) Very usefull for drawing small/tiny circles. Drawing the circle as rect increases performance a lot. public static void DrawCircleFast(Vector2 center, float radius, ColorRgba color) Parameters center Vector2 radius float color ColorRgba DrawCircleLines(Vector2, float, LineDrawingInfo, int) public static void DrawCircleLines(Vector2 center, float radius, LineDrawingInfo lineInfo, int sides) Parameters center Vector2 radius float lineInfo LineDrawingInfo sides int DrawCircleLines(Vector2, float, LineDrawingInfo, float, int) public static void DrawCircleLines(Vector2 center, float radius, LineDrawingInfo lineInfo, float rotDeg, int sides) Parameters center Vector2 radius float lineInfo LineDrawingInfo rotDeg float sides int DrawCircleLines(Vector2, float, LineDrawingInfo, float, float) public static void DrawCircleLines(Vector2 center, float radius, LineDrawingInfo lineInfo, float rotDeg, float sideLength = 8) Parameters center Vector2 radius float lineInfo LineDrawingInfo rotDeg float sideLength float DrawCircleLines(Vector2, float, float, ColorRgba, float) public static void DrawCircleLines(Vector2 center, float radius, float lineThickness, ColorRgba color, float sideLength = 8) Parameters center Vector2 radius float lineThickness float color ColorRgba sideLength float DrawCircleLines(Vector2, float, float, int, ColorRgba) public static void DrawCircleLines(Vector2 center, float radius, float lineThickness, int sides, ColorRgba color) Parameters center Vector2 radius float lineThickness float sides int color ColorRgba DrawCircleLines(Vector2, float, float, float, int, ColorRgba) public static void DrawCircleLines(Vector2 center, float radius, float lineThickness, float rotDeg, int sides, ColorRgba color) Parameters center Vector2 radius float lineThickness float rotDeg float sides int color ColorRgba DrawCircleLinesPercentage(Vector2, float, float, LineDrawingInfo, float, int) public static void DrawCircleLinesPercentage(Vector2 center, float radius, float f, LineDrawingInfo lineInfo, float rotDeg, int sides) Parameters center Vector2 radius float f float lineInfo LineDrawingInfo rotDeg float sides int DrawCircleLinesPercentage(Vector2, float, float, LineDrawingInfo, float, float) public static void DrawCircleLinesPercentage(Vector2 center, float radius, float f, LineDrawingInfo lineInfo, float rotDeg, float sideLength = 8) Parameters center Vector2 radius float f float lineInfo LineDrawingInfo rotDeg float sideLength float DrawCircleLinesPercentage(Vector2, float, float, float, float, int, ColorRgba, LineCapType, int) Draws part of a circle outline depending on f. public static void DrawCircleLinesPercentage(Vector2 center, float radius, float f, float lineThickness, float rotDeg, int sides, ColorRgba color, LineCapType lineCapType, int capPoints) Parameters center Vector2 The center of the circle. radius float The radius of the circle. f float The percentage of the outline to draw. A positive value goes counter-clockwise and a negative value goes clockwise. lineThickness float The line drawing parameters. rotDeg float The rotation of the circle. The lower the resolution of the circle the more visible is rotation sides int The resolution of the circle. The more sides are used the closer it represents a circle. color ColorRgba The color of the line. lineCapType LineCapType The end cap type of the line. capPoints int How many points are used to draw the end cap. DrawCircleSector(Vector2, float, float, float, int, ColorRgba) public static void DrawCircleSector(Vector2 center, float radius, float startAngleDeg, float endAngleDeg, int segments, ColorRgba color) Parameters center Vector2 radius float startAngleDeg float endAngleDeg float segments int color ColorRgba DrawCircleSectorLines(Vector2, float, float, float, LineDrawingInfo, bool, float) public static void DrawCircleSectorLines(Vector2 center, float radius, float startAngleDeg, float endAngleDeg, LineDrawingInfo lineInfo, bool closed = true, float sideLength = 8) Parameters center Vector2 radius float startAngleDeg float endAngleDeg float lineInfo LineDrawingInfo closed bool sideLength float DrawCircleSectorLines(Vector2, float, float, float, int, LineDrawingInfo, bool) public static void DrawCircleSectorLines(Vector2 center, float radius, float startAngleDeg, float endAngleDeg, int sides, LineDrawingInfo lineInfo, bool closed = true) Parameters center Vector2 radius float startAngleDeg float endAngleDeg float sides int lineInfo LineDrawingInfo closed bool DrawCircleSectorLines(Vector2, float, float, float, int, float, ColorRgba, bool) public static void DrawCircleSectorLines(Vector2 center, float radius, float startAngleDeg, float endAngleDeg, int sides, float lineThickness, ColorRgba color, bool closed = true) Parameters center Vector2 radius float startAngleDeg float endAngleDeg float sides int lineThickness float color ColorRgba closed bool DrawCircleSectorLines(Vector2, float, float, float, float, ColorRgba, bool, float) public static void DrawCircleSectorLines(Vector2 center, float radius, float startAngleDeg, float endAngleDeg, float lineThickness, ColorRgba color, bool closed = true, float sideLength = 8) Parameters center Vector2 radius float startAngleDeg float endAngleDeg float lineThickness float color ColorRgba closed bool sideLength float DrawCircleSectorLines(Vector2, float, float, float, float, LineDrawingInfo, bool, float) public static void DrawCircleSectorLines(Vector2 center, float radius, float startAngleDeg, float endAngleDeg, float rotOffsetDeg, LineDrawingInfo lineInfo, bool closed = true, float sideLength = 8) Parameters center Vector2 radius float startAngleDeg float endAngleDeg float rotOffsetDeg float lineInfo LineDrawingInfo closed bool sideLength float DrawCircleSectorLines(Vector2, float, float, float, float, int, LineDrawingInfo, bool) public static void DrawCircleSectorLines(Vector2 center, float radius, float startAngleDeg, float endAngleDeg, float rotOffsetDeg, int sides, LineDrawingInfo lineInfo, bool closed = true) Parameters center Vector2 radius float startAngleDeg float endAngleDeg float rotOffsetDeg float sides int lineInfo LineDrawingInfo closed bool DrawCircleSectorLines(Vector2, float, float, float, float, int, float, ColorRgba, bool) public static void DrawCircleSectorLines(Vector2 center, float radius, float startAngleDeg, float endAngleDeg, float rotOffsetDeg, int sides, float lineThickness, ColorRgba color, bool closed = true) Parameters center Vector2 radius float startAngleDeg float endAngleDeg float rotOffsetDeg float sides int lineThickness float color ColorRgba closed bool DrawCircleSectorLines(Vector2, float, float, float, float, float, ColorRgba, bool, float) public static void DrawCircleSectorLines(Vector2 center, float radius, float startAngleDeg, float endAngleDeg, float rotOffsetDeg, float lineThickness, ColorRgba color, bool closed = true, float sideLength = 8) Parameters center Vector2 radius float startAngleDeg float endAngleDeg float rotOffsetDeg float lineThickness float color ColorRgba closed bool sideLength float DrawLines(Circle, LineDrawingInfo, int) public static void DrawLines(this Circle c, LineDrawingInfo lineInfo, int sides) Parameters c Circle lineInfo LineDrawingInfo sides int DrawLines(Circle, LineDrawingInfo, float, int) public static void DrawLines(this Circle c, LineDrawingInfo lineInfo, float rotDeg, int sides) Parameters c Circle lineInfo LineDrawingInfo rotDeg float sides int DrawLines(Circle, LineDrawingInfo, float, float) public static void DrawLines(this Circle c, LineDrawingInfo lineInfo, float rotDeg, float sideLength = 8) Parameters c Circle lineInfo LineDrawingInfo rotDeg float sideLength float DrawLines(Circle, float, ColorRgba, float) public static void DrawLines(this Circle c, float lineThickness, ColorRgba color, float sideLength = 8) Parameters c Circle lineThickness float color ColorRgba sideLength float DrawLines(Circle, float, int, ColorRgba) public static void DrawLines(this Circle c, float lineThickness, int sides, ColorRgba color) Parameters c Circle lineThickness float sides int color ColorRgba DrawLines(Circle, float, float, int, ColorRgba) public static void DrawLines(this Circle c, float lineThickness, float rotDeg, int sides, ColorRgba color) Parameters c Circle lineThickness float rotDeg float sides int color ColorRgba DrawLinesPercentage(Circle, float, LineDrawingInfo, float, int) Draws part of a circle outline depending on f. public static void DrawLinesPercentage(this Circle c, float f, LineDrawingInfo lineInfo, float rotDeg, int sides) Parameters c Circle The circle parameters. f float The percentage of the outline to draw. A positive value goes counter-clockwise and a negative value goes clockwise. lineInfo LineDrawingInfo The line drawing parameters. rotDeg float The rotation of the circle. The lower the resolution of the circle the more visible is rotation sides int The resolution of the circle. The more sides are used the closer it represents a circle. DrawLinesPercentage(Circle, float, LineDrawingInfo, float, float) public static void DrawLinesPercentage(this Circle c, float f, LineDrawingInfo lineInfo, float rotDeg, float sideLength = 8) Parameters c Circle f float lineInfo LineDrawingInfo rotDeg float sideLength float DrawLinesPercentage(Circle, float, float, ColorRgba, float) public static void DrawLinesPercentage(this Circle c, float f, float lineThickness, ColorRgba color, float sideLength = 8) Parameters c Circle f float lineThickness float color ColorRgba sideLength float DrawLinesPercentage(Circle, float, float, float, ColorRgba, LineCapType, int, float) public static void DrawLinesPercentage(this Circle c, float f, float lineThickness, float rotDeg, ColorRgba color, LineCapType capType, int capPoints, float sideLength = 8) Parameters c Circle f float lineThickness float rotDeg float color ColorRgba capType LineCapType capPoints int sideLength float DrawLinesPercentage(Circle, float, float, float, int, ColorRgba, LineCapType, int) Draws part of a circle outline depending on f. public static void DrawLinesPercentage(this Circle c, float f, float lineThickness, float rotDeg, int sides, ColorRgba color, LineCapType lineCapType, int capPoints) Parameters c Circle The circle parameters. f float The percentage of the outline to draw. A positive value goes counter-clockwise and a negative value goes clockwise. lineThickness float The line drawing parameters. rotDeg float The rotation of the circle. The lower the resolution of the circle the more visible is rotation sides int The resolution of the circle. The more sides are used the closer it represents a circle. color ColorRgba The color of the line. lineCapType LineCapType The end cap type of the line. capPoints int How many points are used to draw the end cap. DrawLinesScaled(Circle, LineDrawingInfo, int, float, float) Draws a circle where each side can be scaled towards the origin of the side. public static void DrawLinesScaled(this Circle c, LineDrawingInfo lineInfo, int sides, float sideScaleFactor, float sideScaleOrigin = 0.5) Parameters c Circle The circle to draw. lineInfo LineDrawingInfo How to draw the lines. sides int How many sides the circle should be drawn with. sideScaleFactor float The scale factor for each side. 0f means no circle is drawn, 1f means normal circle is drawn, 0.5 means each side is half as long. sideScaleOrigin float The point along the line to scale from in both directions. DrawLinesScaled(Circle, LineDrawingInfo, float, int, float, float) Draws a circle where each side can be scaled towards the origin of the side. public static void DrawLinesScaled(this Circle c, LineDrawingInfo lineInfo, float rotDeg, int sides, float sideScaleFactor, float sideScaleOrigin = 0.5) Parameters c Circle The circle to draw. lineInfo LineDrawingInfo How to draw the lines. rotDeg float The rotation of the circle. sides int How many sides the circle should be drawn with. sideScaleFactor float The scale factor for each side. 0f means no circle is drawn, 1f means normal circle is drawn, 0.5 means each side is half as long. sideScaleOrigin float The point along the line to scale from in both directions. DrawSector(Circle, float, float, int, ColorRgba) public static void DrawSector(this Circle c, float startAngleDeg, float endAngleDeg, int segments, ColorRgba color) Parameters c Circle startAngleDeg float endAngleDeg float segments int color ColorRgba DrawSectorLines(Circle, float, float, LineDrawingInfo, bool, float) public static void DrawSectorLines(this Circle c, float startAngleDeg, float endAngleDeg, LineDrawingInfo lineInfo, bool closed = true, float sideLength = 8) Parameters c Circle startAngleDeg float endAngleDeg float lineInfo LineDrawingInfo closed bool sideLength float DrawSectorLines(Circle, float, float, int, LineDrawingInfo, bool) public static void DrawSectorLines(this Circle c, float startAngleDeg, float endAngleDeg, int sides, LineDrawingInfo lineInfo, bool closed = true) Parameters c Circle startAngleDeg float endAngleDeg float sides int lineInfo LineDrawingInfo closed bool DrawSectorLines(Circle, float, float, float, LineDrawingInfo, bool, float) public static void DrawSectorLines(this Circle c, float startAngleDeg, float endAngleDeg, float rotOffsetDeg, LineDrawingInfo lineInfo, bool closed = true, float sideLength = 8) Parameters c Circle startAngleDeg float endAngleDeg float rotOffsetDeg float lineInfo LineDrawingInfo closed bool sideLength float DrawSectorLines(Circle, float, float, float, int, LineDrawingInfo, bool) public static void DrawSectorLines(this Circle c, float startAngleDeg, float endAngleDeg, float rotOffsetDeg, int sides, LineDrawingInfo lineInfo, bool closed = true) Parameters c Circle startAngleDeg float endAngleDeg float rotOffsetDeg float sides int lineInfo LineDrawingInfo closed bool DrawSectorLinesScaled(Circle, LineDrawingInfo, float, float, float, int, float, float, bool) Draws a circle where each side can be scaled towards the origin of the side. public static void DrawSectorLinesScaled(this Circle c, LineDrawingInfo lineInfo, float startAngleDeg, float endAngleDeg, float rotOffsetDeg, int sides, float sideScaleFactor, float sideScaleOrigin = 0.5, bool closed = true) Parameters c Circle The circle to draw. lineInfo LineDrawingInfo How to draw the lines. startAngleDeg float The starting rotation of the sector. endAngleDeg float The end rotation of the sector. rotOffsetDeg float Rotation offset for the sector. sides int How many sides the circle should be drawn with. sideScaleFactor float The scale factor for each side. 0f means no circle is drawn, 1f means normal circle is drawn, 0.5 means each side is half as long. sideScaleOrigin float The point along the line to scale from in both directions. closed bool Should the sector be closed. GetCircleArcSideCount(float, float, float) public static int GetCircleArcSideCount(float radius, float angleDeg, float maxLength = 10) Parameters radius float angleDeg float maxLength float Returns int GetCircleSideCount(float, float) public static int GetCircleSideCount(float radius, float maxLength = 10) Parameters radius float maxLength float Returns int"
  },
  "api/ShapeEngine.StaticLib.Drawing.ShapeCustomDrawing.html": {
    "href": "api/ShapeEngine.StaticLib.Drawing.ShapeCustomDrawing.html",
    "title": "Class ShapeCustomDrawing | ShapeEngine",
    "summary": "Class ShapeCustomDrawing Namespace ShapeEngine.StaticLib.Drawing Assembly ShapeEngine.dll public static class ShapeCustomDrawing Inheritance object ShapeCustomDrawing Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CalculateArrowPoints(Vector2, Vector2, float, float) public static (Segment tail, Triangle head) CalculateArrowPoints(Vector2 tailPoint, Vector2 headPoint, float headWidth, float headLength) Parameters tailPoint Vector2 headPoint Vector2 headWidth float headLength float Returns (Segment tail, Triangle head) CalculateArrowPoints2(Vector2, Vector2, float, float) public static (Segment tail, Triangle head) CalculateArrowPoints2(Vector2 tailPoint, Vector2 headPoint, float headWidth, float headLengthFactor) Parameters tailPoint Vector2 headPoint Vector2 headWidth float headLengthFactor float Returns (Segment tail, Triangle head) CalculateArrowPoints3(Vector2, Vector2, float, float) public static (Segment tail, Triangle head) CalculateArrowPoints3(Vector2 tailPoint, Vector2 headPoint, float headWidthFactor, float headLengthFactor) Parameters tailPoint Vector2 headPoint Vector2 headWidthFactor float headLengthFactor float Returns (Segment tail, Triangle head) Draw(CollisionPoints, float, ColorRgba, ColorRgba) public static void Draw(this CollisionPoints colPoints, float lineThickness, ColorRgba intersectColorRgba, ColorRgba normalColorRgba) Parameters colPoints CollisionPoints lineThickness float intersectColorRgba ColorRgba normalColorRgba ColorRgba DrawArrow(Vector2, Vector2, float, float, LineDrawingInfo, ColorRgba) public static void DrawArrow(Vector2 tailPoint, Vector2 headPoint, float headWidth, float headLength, LineDrawingInfo info, ColorRgba headFillColor) Parameters tailPoint Vector2 headPoint Vector2 headWidth float headLength float info LineDrawingInfo headFillColor ColorRgba DrawArrow2(Vector2, Vector2, float, float, LineDrawingInfo, ColorRgba) public static void DrawArrow2(Vector2 tailPoint, Vector2 headPoint, float headWidth, float headLengthFactor, LineDrawingInfo info, ColorRgba headFillColor) Parameters tailPoint Vector2 headPoint Vector2 headWidth float headLengthFactor float info LineDrawingInfo headFillColor ColorRgba DrawArrow3(Vector2, Vector2, float, float, LineDrawingInfo, ColorRgba) public static void DrawArrow3(Vector2 tailPoint, Vector2 headPoint, float headWidthFactor, float headLengthFactor, LineDrawingInfo info, ColorRgba headFillColor) Parameters tailPoint Vector2 headPoint Vector2 headWidthFactor float headLengthFactor float info LineDrawingInfo headFillColor ColorRgba DrawPixel(Vector2, ColorRgba) public static void DrawPixel(Vector2 pos, ColorRgba color) Parameters pos Vector2 color ColorRgba DrawPixel(float, float, ColorRgba) public static void DrawPixel(float x, float y, ColorRgba color) Parameters x float y float color ColorRgba"
  },
  "api/ShapeEngine.StaticLib.Drawing.ShapeDrawing.html": {
    "href": "api/ShapeEngine.StaticLib.Drawing.ShapeDrawing.html",
    "title": "Class ShapeDrawing | ShapeEngine",
    "summary": "Class ShapeDrawing Namespace ShapeEngine.StaticLib.Drawing Assembly ShapeEngine.dll public static class ShapeDrawing Inheritance object ShapeDrawing Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DrawLinesScaled(List<Vector2>, LineDrawingInfo, float, float) Draws the points as a polygon where each side can be scaled towards the origin of the side. public static void DrawLinesScaled(this List<Vector2> shapePoints, LineDrawingInfo lineInfo, float sideScaleFactor, float sideScaleOrigin = 0.5) Parameters shapePoints List<Vector2> The points to draw. lineInfo LineDrawingInfo How to draw the lines. sideScaleFactor float The scale factor for each side. 0f means no polygon is drawn, 1f means normal polygon is drawn, 0.5 means each side is half as long. sideScaleOrigin float The point along the line to scale from in both directions. DrawLinesScaled(List<Vector2>, Transform2D, LineDrawingInfo, float, float) Draws the points as a polygon where each side can be scaled towards the origin of the side. public static void DrawLinesScaled(this List<Vector2> relativePoints, Transform2D transform, LineDrawingInfo lineInfo, float sideScaleFactor, float sideScaleOrigin = 0.5) Parameters relativePoints List<Vector2> The relative points. transform Transform2D The transform of the polygon. lineInfo LineDrawingInfo How to draw the lines. sideScaleFactor float The scale factor for each side. 0f means no polygon is drawn, 1f means normal polygon is drawn, 0.5 means each side is half as long. sideScaleOrigin float The point along the line to scale from in both directions. DrawLinesScaled(List<Vector2>, Vector2, float, float, LineDrawingInfo, float, float) Draws the points as a polygon where each side can be scaled towards the origin of the side. public static void DrawLinesScaled(this List<Vector2> relativePoints, Vector2 pos, float size, float rotDeg, LineDrawingInfo lineInfo, float sideScaleFactor, float sideScaleOrigin = 0.5) Parameters relativePoints List<Vector2> The relative points. pos Vector2 The center of the polygon. size float The size of the polygon. rotDeg float The rotation of the polygon. lineInfo LineDrawingInfo How to draw the lines. sideScaleFactor float The scale factor for each side. 0f means no polygon is drawn, 1f means normal polygon is drawn, 0.5 means each side is half as long. sideScaleOrigin float The point along the line to scale from in both directions. DrawOutline(List<Vector2>, LineDrawingInfo) public static void DrawOutline(this List<Vector2> shapePoints, LineDrawingInfo lineInfo) Parameters shapePoints List<Vector2> lineInfo LineDrawingInfo DrawOutline(List<Vector2>, Transform2D, LineDrawingInfo) public static void DrawOutline(this List<Vector2> relativePoints, Transform2D transform, LineDrawingInfo lineInfo) Parameters relativePoints List<Vector2> transform Transform2D lineInfo LineDrawingInfo DrawOutline(List<Vector2>, Transform2D, float, ColorRgba, LineCapType, int) public static void DrawOutline(this List<Vector2> relativePoints, Transform2D transform, float lineThickness, ColorRgba color, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters relativePoints List<Vector2> transform Transform2D lineThickness float color ColorRgba capType LineCapType capPoints int DrawOutline(List<Vector2>, Vector2, float, float, LineDrawingInfo) public static void DrawOutline(this List<Vector2> relativePoints, Vector2 pos, float size, float rotDeg, LineDrawingInfo lineInfo) Parameters relativePoints List<Vector2> pos Vector2 size float rotDeg float lineInfo LineDrawingInfo DrawOutline(List<Vector2>, Vector2, float, float, float, ColorRgba, LineCapType, int) public static void DrawOutline(this List<Vector2> relativePoints, Vector2 pos, float size, float rotDeg, float lineThickness, ColorRgba color, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters relativePoints List<Vector2> pos Vector2 size float rotDeg float lineThickness float color ColorRgba capType LineCapType capPoints int DrawOutline(List<Vector2>, float, ColorRgba, ColorRgba, LineCapType, int) public static void DrawOutline(this List<Vector2> points, float lineThickness, ColorRgba startColorRgba, ColorRgba endColorRgba, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters points List<Vector2> lineThickness float startColorRgba ColorRgba endColorRgba ColorRgba capType LineCapType capPoints int DrawOutline(List<Vector2>, float, ColorRgba, LineCapType, int) public static void DrawOutline(this List<Vector2> shapePoints, float lineThickness, ColorRgba color, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters shapePoints List<Vector2> lineThickness float color ColorRgba capType LineCapType capPoints int DrawOutline(List<Vector2>, float, ColorRgba, float, LineCapType, int) public static void DrawOutline(this List<Vector2> shapePoints, float lineThickness, ColorRgba color, float sideLengthFactor, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters shapePoints List<Vector2> lineThickness float color ColorRgba sideLengthFactor float capType LineCapType capPoints int DrawOutlineCornered(List<Vector2>, LineDrawingInfo, List<float>) public static void DrawOutlineCornered(this List<Vector2> points, LineDrawingInfo lineInfo, List<float> cornerLengths) Parameters points List<Vector2> lineInfo LineDrawingInfo cornerLengths List<float> DrawOutlineCornered(List<Vector2>, LineDrawingInfo, float) public static void DrawOutlineCornered(this List<Vector2> points, LineDrawingInfo lineInfo, float cornerLength) Parameters points List<Vector2> lineInfo LineDrawingInfo cornerLength float DrawOutlineCornered(List<Vector2>, List<float>, LineDrawingInfo) public static void DrawOutlineCornered(this List<Vector2> points, List<float> cornerLengths, LineDrawingInfo lineInfo) Parameters points List<Vector2> cornerLengths List<float> lineInfo LineDrawingInfo DrawOutlineCornered(List<Vector2>, float, ColorRgba, List<float>, LineCapType, int) public static void DrawOutlineCornered(this List<Vector2> points, float lineThickness, ColorRgba color, List<float> cornerLengths, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters points List<Vector2> lineThickness float color ColorRgba cornerLengths List<float> capType LineCapType capPoints int DrawOutlineCornered(List<Vector2>, float, ColorRgba, float, LineCapType, int) public static void DrawOutlineCornered(this List<Vector2> points, float lineThickness, ColorRgba color, float cornerLength, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters points List<Vector2> lineThickness float color ColorRgba cornerLength float capType LineCapType capPoints int DrawOutlineCornered(List<Vector2>, float, LineDrawingInfo) public static void DrawOutlineCornered(this List<Vector2> points, float cornerLength, LineDrawingInfo lineInfo) Parameters points List<Vector2> cornerLength float lineInfo LineDrawingInfo DrawOutlineCorneredRelative(List<Vector2>, LineDrawingInfo, List<float>) public static void DrawOutlineCorneredRelative(this List<Vector2> points, LineDrawingInfo lineInfo, List<float> cornerFactors) Parameters points List<Vector2> lineInfo LineDrawingInfo cornerFactors List<float> DrawOutlineCorneredRelative(List<Vector2>, LineDrawingInfo, float) public static void DrawOutlineCorneredRelative(this List<Vector2> points, LineDrawingInfo lineInfo, float cornerF) Parameters points List<Vector2> lineInfo LineDrawingInfo cornerF float DrawOutlineCorneredRelative(List<Vector2>, List<float>, LineDrawingInfo) public static void DrawOutlineCorneredRelative(this List<Vector2> points, List<float> cornerFactors, LineDrawingInfo lineInfo) Parameters points List<Vector2> cornerFactors List<float> lineInfo LineDrawingInfo DrawOutlineCorneredRelative(List<Vector2>, float, ColorRgba, List<float>, LineCapType, int) public static void DrawOutlineCorneredRelative(this List<Vector2> points, float lineThickness, ColorRgba color, List<float> cornerFactors, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters points List<Vector2> lineThickness float color ColorRgba cornerFactors List<float> capType LineCapType capPoints int DrawOutlineCorneredRelative(List<Vector2>, float, ColorRgba, float, LineCapType, int) public static void DrawOutlineCorneredRelative(this List<Vector2> points, float lineThickness, ColorRgba color, float cornerF, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters points List<Vector2> lineThickness float color ColorRgba cornerF float capType LineCapType capPoints int DrawOutlineCorneredRelative(List<Vector2>, float, LineDrawingInfo) public static void DrawOutlineCorneredRelative(this List<Vector2> points, float cornerF, LineDrawingInfo lineInfo) Parameters points List<Vector2> cornerF float lineInfo LineDrawingInfo DrawOutlinePercentage(List<Vector2>, float, float, ColorRgba, LineCapType, int) Draws a certain percentage of an outline. public static void DrawOutlinePercentage(this List<Vector2> shapePoints, float f, float lineThickness, ColorRgba color, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters shapePoints List<Vector2> f float The percentage of the outline to draw. Negative value reverses the direction (cw). Integer part can be used to change starting corner. 0.35 would start at corner a go in ccw direction and draw 35% of the outline. -2.7 would start at b (the third corner in cw direction) and draw in cw direction 70% of the outline. lineThickness float color ColorRgba capType LineCapType capPoints int DrawOutlinePerimeter(List<Vector2>, float, int, float, ColorRgba, LineCapType, int) Draws a certain amount of perimeter public static void DrawOutlinePerimeter(this List<Vector2> shapePoints, float perimeterToDraw, int startIndex, float lineThickness, ColorRgba color, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters shapePoints List<Vector2> perimeterToDraw float Determines how much of the outline is drawn. If perimeter is negative outline will be drawn in cw direction. startIndex int Determines at which corner drawing starts. lineThickness float color ColorRgba capType LineCapType capPoints int DrawVertices(List<Vector2>, float, ColorRgba, int) public static void DrawVertices(this List<Vector2> points, float vertexRadius, ColorRgba color, int circleSegments) Parameters points List<Vector2> vertexRadius float color ColorRgba circleSegments int"
  },
  "api/ShapeEngine.StaticLib.Drawing.ShapeGappedDrawing.html": {
    "href": "api/ShapeEngine.StaticLib.Drawing.ShapeGappedDrawing.html",
    "title": "Class ShapeGappedDrawing | ShapeEngine",
    "summary": "Class ShapeGappedDrawing Namespace ShapeEngine.StaticLib.Drawing Assembly ShapeEngine.dll public static class ShapeGappedDrawing Inheritance object ShapeGappedDrawing Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DrawGapped(Segment, float, LineDrawingInfo, GappedOutlineDrawingInfo) Draws a segment that is interrupted by gaps specified by the parameters. 1 gap with 0.5 gap percentage would result in half of the segment visible and the other not visible. public static float DrawGapped(this Segment s, float length, LineDrawingInfo lineInfo, GappedOutlineDrawingInfo gapDrawingInfo) Parameters s Segment The segment to draw. length float The length of the segment. If zero or negative the function will calculate the length and return it. lineInfo LineDrawingInfo The parameters for how to draw the segment. gapDrawingInfo GappedOutlineDrawingInfo Info for how to draw the gaps. Returns float Returns the length of the segment if positive otherwise -1. DrawGappedOutline(Circle, LineDrawingInfo, GappedOutlineDrawingInfo, float, int) Draws an outline that is interrupted by gaps specified by the parameters. 1 gap with 0.5 gap percentage would result in half of the outline visible and the other not visible. public static void DrawGappedOutline(this Circle circle, LineDrawingInfo lineInfo, GappedOutlineDrawingInfo gapDrawingInfo, float rotDeg, int sides = 18) Parameters circle Circle The circle to use for drawing. lineInfo LineDrawingInfo The parameters for how to draw the line. gapDrawingInfo GappedOutlineDrawingInfo Info for how to draw the gaps. rotDeg float The rotation of the circle. sides int With how many sides should the circle be drawn. DrawGappedOutline(Points, float, LineDrawingInfo, GappedOutlineDrawingInfo) Draws an outline that is interrupted by gaps specified by the parameters. 1 gap with 0.5 gap percentage would result in half of the outline visible and the other not visible. public static float DrawGappedOutline(this Points shapePoints, float perimeter, LineDrawingInfo lineInfo, GappedOutlineDrawingInfo gapDrawingInfo) Parameters shapePoints Points The points for the outline. perimeter float The total length of the perimeter. If less than 0 the functions calculates this (more expensive). lineInfo LineDrawingInfo The parameters for how to draw the line. gapDrawingInfo GappedOutlineDrawingInfo Info for how to draw the gaps. Returns float DrawGappedOutline(Polygon, float, LineDrawingInfo, GappedOutlineDrawingInfo) Draws an outline that is interrupted by gaps specified by the parameters. 1 gap with 0.5 gap percentage would result in half of the outline visible and the other not visible. public static float DrawGappedOutline(this Polygon poly, float perimeter, LineDrawingInfo lineInfo, GappedOutlineDrawingInfo gapDrawingInfo) Parameters poly Polygon The polygon outline. perimeter float The total length of the perimeter. If less than 0 the functions calculates this (more expensive). lineInfo LineDrawingInfo The parameters for how to draw the line. gapDrawingInfo GappedOutlineDrawingInfo Info for how to draw the gaps. Returns float DrawGappedOutline(Polyline, float, LineDrawingInfo, GappedOutlineDrawingInfo) Draws an outline that is interrupted by gaps specified by the parameters. 1 gap with 0.5 gap percentage would result in half of the outline visible and the other not visible. public static float DrawGappedOutline(this Polyline polyline, float perimeter, LineDrawingInfo lineInfo, GappedOutlineDrawingInfo gapDrawingInfo) Parameters polyline Polyline The polyline for drawing the outline. perimeter float The total length of the perimeter. If less than 0 the functions calculates this (more expensive). lineInfo LineDrawingInfo The parameters for how to draw the line. gapDrawingInfo GappedOutlineDrawingInfo Info for how to draw the gaps. Returns float DrawGappedOutline(Quad, float, LineDrawingInfo, GappedOutlineDrawingInfo) Draws an outline that is interrupted by gaps specified by the parameters. 1 gap with 0.5 gap percentage would result in half of the outline visible and the other not visible. public static float DrawGappedOutline(this Quad quad, float perimeter, LineDrawingInfo lineInfo, GappedOutlineDrawingInfo gapDrawingInfo) Parameters quad Quad The quad for drawing the outline. perimeter float The total length of the perimeter. If less than 0 the functions calculates this (more expensive). lineInfo LineDrawingInfo The parameters for how to draw the line. gapDrawingInfo GappedOutlineDrawingInfo Info for how to draw the gaps. Returns float DrawGappedOutline(Rect, float, LineDrawingInfo, GappedOutlineDrawingInfo) Draws an outline that is interrupted by gaps specified by the parameters. 1 gap with 0.5 gap percentage would result in half of the outline visible and the other not visible. public static float DrawGappedOutline(this Rect rect, float perimeter, LineDrawingInfo lineInfo, GappedOutlineDrawingInfo gapDrawingInfo) Parameters rect Rect The rect for drawing the outline. perimeter float The total length of the perimeter. If less than 0 the functions calculates this (more expensive). lineInfo LineDrawingInfo The parameters for how to draw the line. gapDrawingInfo GappedOutlineDrawingInfo Info for how to draw the gaps. Returns float DrawGappedOutline(Triangle, float, LineDrawingInfo, GappedOutlineDrawingInfo) Draws an outline that is interrupted by gaps specified by the parameters. 1 gap with 0.5 gap percentage would result in half of the outline visible and the other not visible. public static float DrawGappedOutline(this Triangle triangle, float perimeter, LineDrawingInfo lineInfo, GappedOutlineDrawingInfo gapDrawingInfo) Parameters triangle Triangle The triangle for drawing the outline. perimeter float The total length of the perimeter. If less than 0 the functions calculates this (more expensive). lineInfo LineDrawingInfo The parameters for how to draw the line. gapDrawingInfo GappedOutlineDrawingInfo Info for how to draw the gaps. Returns float DrawGappedOutline(List<Vector2>, float, LineDrawingInfo, GappedOutlineDrawingInfo) Draws an outline that is interrupted by gaps specified by the parameters. 1 gap with 0.5 gap percentage would result in half of the outline visible and the other not visible. public static float DrawGappedOutline(this List<Vector2> shapePoints, float perimeter, LineDrawingInfo lineInfo, GappedOutlineDrawingInfo gapDrawingInfo) Parameters shapePoints List<Vector2> The points for the outline. perimeter float The total length of the perimeter. If less than 0 the functions calculates this (more expensive). lineInfo LineDrawingInfo The parameters for how to draw the line. gapDrawingInfo GappedOutlineDrawingInfo Info for how to draw the gaps. Returns float DrawGappedRing(Vector2, float, float, LineDrawingInfo, GappedOutlineDrawingInfo, float, float) Draws an outline that is interrupted by gaps specified by the parameters. 1 gap with 0.5 gap percentage would result in half of the outline visible and the other not visible. public static void DrawGappedRing(Vector2 center, float innerRadius, float outerRadius, LineDrawingInfo lineInfo, GappedOutlineDrawingInfo gapDrawingInfo, float rotDeg, float sideLength = 8) Parameters center Vector2 The center of the ring. innerRadius float The radius of the inner ring. outerRadius float The radius of the outer ring. lineInfo LineDrawingInfo The parameters for how to draw the line. gapDrawingInfo GappedOutlineDrawingInfo Info for how to draw the gaps. rotDeg float The rotation of the circle. sideLength float The side lengths of the circle. DrawGappedSegment(Vector2, Vector2, float, LineDrawingInfo, GappedOutlineDrawingInfo) Draws a line that is interrupted by gaps specified by the parameters. 1 gap with 0.5 gap percentage would result in half of the line visible and the other not visible. public static float DrawGappedSegment(Vector2 start, Vector2 end, float length, LineDrawingInfo lineInfo, GappedOutlineDrawingInfo gapDrawingInfo) Parameters start Vector2 The start of the line. end Vector2 The end of the line. length float The length of the line. If zero or negative the function will calculate the length and return it. lineInfo LineDrawingInfo The parameters for how to draw the line. gapDrawingInfo GappedOutlineDrawingInfo Info for how to draw the gaps. Returns float Returns the length of the line if positive otherwise -1."
  },
  "api/ShapeEngine.StaticLib.Drawing.ShapeLineDrawing.html": {
    "href": "api/ShapeEngine.StaticLib.Drawing.ShapeLineDrawing.html",
    "title": "Class ShapeLineDrawing | ShapeEngine",
    "summary": "Class ShapeLineDrawing Namespace ShapeEngine.StaticLib.Drawing Assembly ShapeEngine.dll public static class ShapeLineDrawing Inheritance object ShapeLineDrawing Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Draw(Line, float, float, ColorRgba) public static void Draw(this Line line, float length, float thickness, ColorRgba color) Parameters line Line length float thickness float color ColorRgba DrawLine(Vector2, Vector2, float, float, ColorRgba) public static void DrawLine(Vector2 point, Vector2 direction, float length, float thickness, ColorRgba color) Parameters point Vector2 direction Vector2 length float thickness float color ColorRgba"
  },
  "api/ShapeEngine.StaticLib.Drawing.ShapePointDrawing.html": {
    "href": "api/ShapeEngine.StaticLib.Drawing.ShapePointDrawing.html",
    "title": "Class ShapePointDrawing | ShapeEngine",
    "summary": "Class ShapePointDrawing Namespace ShapeEngine.StaticLib.Drawing Assembly ShapeEngine.dll public static class ShapePointDrawing Inheritance object ShapePointDrawing Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Draw(Points, float, ColorRgba, int) public static void Draw(this Points points, float r, ColorRgba color, int segments = 16) Parameters points Points r float color ColorRgba segments int Draw(Vector2, float, ColorRgba, int) public static void Draw(this Vector2 p, float radius, ColorRgba color, int segments = 16) Parameters p Vector2 radius float color ColorRgba segments int"
  },
  "api/ShapeEngine.StaticLib.Drawing.ShapePolygonDrawing.html": {
    "href": "api/ShapeEngine.StaticLib.Drawing.ShapePolygonDrawing.html",
    "title": "Class ShapePolygonDrawing | ShapeEngine",
    "summary": "Class ShapePolygonDrawing Namespace ShapeEngine.StaticLib.Drawing Assembly ShapeEngine.dll public static class ShapePolygonDrawing Inheritance object ShapePolygonDrawing Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DEBUG_DrawLinesCCW(Polygon, float, ColorRgba, ColorRgba) public static void DEBUG_DrawLinesCCW(this Polygon poly, float lineThickness, ColorRgba startColorRgba, ColorRgba endColorRgba) Parameters poly Polygon lineThickness float startColorRgba ColorRgba endColorRgba ColorRgba Draw(Polygon, ColorRgba) public static void Draw(this Polygon poly, ColorRgba color) Parameters poly Polygon color ColorRgba DrawCornered(Polygon, LineDrawingInfo, List<float>) public static void DrawCornered(this Polygon poly, LineDrawingInfo lineInfo, List<float> cornerLengths) Parameters poly Polygon lineInfo LineDrawingInfo cornerLengths List<float> DrawCornered(Polygon, LineDrawingInfo, float) public static void DrawCornered(this Polygon poly, LineDrawingInfo lineInfo, float cornerLength) Parameters poly Polygon lineInfo LineDrawingInfo cornerLength float DrawCornered(Polygon, List<float>, LineDrawingInfo) public static void DrawCornered(this Polygon poly, List<float> cornerLengths, LineDrawingInfo lineInfo) Parameters poly Polygon cornerLengths List<float> lineInfo LineDrawingInfo DrawCornered(Polygon, float, ColorRgba, List<float>, LineCapType, int) public static void DrawCornered(this Polygon poly, float lineThickness, ColorRgba color, List<float> cornerLengths, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters poly Polygon lineThickness float color ColorRgba cornerLengths List<float> capType LineCapType capPoints int DrawCornered(Polygon, float, ColorRgba, float, LineCapType, int) public static void DrawCornered(this Polygon poly, float lineThickness, ColorRgba color, float cornerLength, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters poly Polygon lineThickness float color ColorRgba cornerLength float capType LineCapType capPoints int DrawCornered(Polygon, float, LineDrawingInfo) public static void DrawCornered(this Polygon poly, float cornerLength, LineDrawingInfo lineInfo) Parameters poly Polygon cornerLength float lineInfo LineDrawingInfo DrawCorneredRelative(Polygon, LineDrawingInfo, List<float>) public static void DrawCorneredRelative(this Polygon poly, LineDrawingInfo lineInfo, List<float> cornerFactors) Parameters poly Polygon lineInfo LineDrawingInfo cornerFactors List<float> DrawCorneredRelative(Polygon, LineDrawingInfo, float) public static void DrawCorneredRelative(this Polygon poly, LineDrawingInfo lineInfo, float cornerF) Parameters poly Polygon lineInfo LineDrawingInfo cornerF float DrawCorneredRelative(Polygon, List<float>, LineDrawingInfo) public static void DrawCorneredRelative(this Polygon poly, List<float> cornerFactors, LineDrawingInfo lineInfo) Parameters poly Polygon cornerFactors List<float> lineInfo LineDrawingInfo DrawCorneredRelative(Polygon, float, ColorRgba, List<float>, LineCapType, int) public static void DrawCorneredRelative(this Polygon poly, float lineThickness, ColorRgba color, List<float> cornerFactors, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters poly Polygon lineThickness float color ColorRgba cornerFactors List<float> capType LineCapType capPoints int DrawCorneredRelative(Polygon, float, ColorRgba, float, LineCapType, int) public static void DrawCorneredRelative(this Polygon poly, float lineThickness, ColorRgba color, float cornerF, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters poly Polygon lineThickness float color ColorRgba cornerF float capType LineCapType capPoints int DrawCorneredRelative(Polygon, float, LineDrawingInfo) public static void DrawCorneredRelative(this Polygon poly, float cornerF, LineDrawingInfo lineInfo) Parameters poly Polygon cornerF float lineInfo LineDrawingInfo DrawLines(Polygon, LineDrawingInfo) public static void DrawLines(this Polygon poly, LineDrawingInfo lineInfo) Parameters poly Polygon lineInfo LineDrawingInfo DrawLines(Polygon, Transform2D, LineDrawingInfo) public static void DrawLines(this Polygon relative, Transform2D transform, LineDrawingInfo lineInfo) Parameters relative Polygon transform Transform2D lineInfo LineDrawingInfo DrawLines(Polygon, Transform2D, float, ColorRgba, LineCapType, int) public static void DrawLines(this Polygon relative, Transform2D transform, float lineThickness, ColorRgba color, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters relative Polygon transform Transform2D lineThickness float color ColorRgba capType LineCapType capPoints int DrawLines(Polygon, Vector2, float, float, LineDrawingInfo) public static void DrawLines(this Polygon relative, Vector2 pos, float size, float rotDeg, LineDrawingInfo lineInfo) Parameters relative Polygon pos Vector2 size float rotDeg float lineInfo LineDrawingInfo DrawLines(Polygon, Vector2, float, float, float, ColorRgba, LineCapType, int) public static void DrawLines(this Polygon relative, Vector2 pos, float size, float rotDeg, float lineThickness, ColorRgba color, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters relative Polygon pos Vector2 size float rotDeg float lineThickness float color ColorRgba capType LineCapType capPoints int DrawLines(Polygon, float, ColorRgba, ColorRgba, LineCapType, int) public static void DrawLines(this Polygon poly, float lineThickness, ColorRgba startColorRgba, ColorRgba endColorRgba, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters poly Polygon lineThickness float startColorRgba ColorRgba endColorRgba ColorRgba capType LineCapType capPoints int DrawLines(Polygon, float, ColorRgba, LineCapType, int) public static void DrawLines(this Polygon poly, float lineThickness, ColorRgba color, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters poly Polygon lineThickness float color ColorRgba capType LineCapType capPoints int DrawLines(Polygon, float, ColorRgba, float, LineCapType, int) public static void DrawLines(this Polygon poly, float lineThickness, ColorRgba color, float sideLengthFactor, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters poly Polygon lineThickness float color ColorRgba sideLengthFactor float capType LineCapType capPoints int DrawLinesPercentage(Polygon, float, LineDrawingInfo) Draws a certain percentage of an outline. public static void DrawLinesPercentage(this Polygon poly, float f, LineDrawingInfo lineInfo) Parameters poly Polygon f float The percentage of the outline to draw. Negative value reverses the direction (cw). Integer part can be used to change starting corner. 0.35 would start at corner a go in ccw direction and draw 35% of the outline. -2.7 would start at b (the third corner in cw direction) and draw in cw direction 70% of the outline. lineInfo LineDrawingInfo DrawLinesPercentage(Polygon, float, float, ColorRgba, LineCapType, int) Draws a certain percentage of an outline. public static void DrawLinesPercentage(this Polygon poly, float f, float lineThickness, ColorRgba color, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters poly Polygon f float The percentage of the outline to draw. Negative value reverses the direction (cw). Integer part can be used to change starting corner. 0.35 would start at corner a go in ccw direction and draw 35% of the outline. -2.7 would start at b (the third corner in cw direction) and draw in cw direction 70% of the outline. lineThickness float color ColorRgba capType LineCapType capPoints int DrawLinesPerimeter(Polygon, float, int, float, ColorRgba, LineCapType, int) Draws a certain amount of perimeter public static void DrawLinesPerimeter(this Polygon poly, float perimeterToDraw, int startIndex, float lineThickness, ColorRgba color, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters poly Polygon perimeterToDraw float Determines how much of the outline is drawn. If perimeter is negative outline will be drawn in cw direction. startIndex int Determines at which corner drawing starts. lineThickness float color ColorRgba capType LineCapType capPoints int DrawLinesScaled(Polygon, LineDrawingInfo, float, float) Draws a polygon where each side can be scaled towards the origin of the side. public static void DrawLinesScaled(this Polygon poly, LineDrawingInfo lineInfo, float sideScaleFactor, float sideScaleOrigin = 0.5) Parameters poly Polygon The polygon to draw. lineInfo LineDrawingInfo How to draw the lines. sideScaleFactor float The scale factor for each side. 0f means no polygon is drawn, 1f means normal polygon is drawn, 0.5 means each side is half as long. sideScaleOrigin float The point along the line to scale from in both directions. DrawLinesScaled(Polygon, Transform2D, LineDrawingInfo, float, float) Draws a polygon where each side can be scaled towards the origin of the side. public static void DrawLinesScaled(this Polygon relative, Transform2D transform, LineDrawingInfo lineInfo, float sideScaleFactor, float sideScaleOrigin = 0.5) Parameters relative Polygon The relative polygon points. transform Transform2D The transform of the polygon. lineInfo LineDrawingInfo How to draw the lines. sideScaleFactor float The scale factor for each side. 0f means no polygon is drawn, 1f means normal polygon is drawn, 0.5 means each side is half as long. sideScaleOrigin float The point along the line to scale from in both directions. DrawLinesScaled(Polygon, Vector2, float, float, LineDrawingInfo, float, float) Draws a polygon where each side can be scaled towards the origin of the side. public static void DrawLinesScaled(this Polygon relative, Vector2 pos, float size, float rotDeg, LineDrawingInfo lineInfo, float sideScaleFactor, float sideScaleOrigin = 0.5) Parameters relative Polygon The relative polygon points. pos Vector2 The center of the polygon. size float The size of the polygon. rotDeg float The rotation of the polygon. lineInfo LineDrawingInfo How to draw the lines. sideScaleFactor float The scale factor for each side. 0f means no polygon is drawn, 1f means normal polygon is drawn, 0.5 means each side is half as long. sideScaleOrigin float The point along the line to scale from in both directions. DrawPolygonConvex(Polygon, ColorRgba, bool) public static void DrawPolygonConvex(this Polygon poly, ColorRgba color, bool clockwise = false) Parameters poly Polygon color ColorRgba clockwise bool DrawPolygonConvex(Polygon, Transform2D, ColorRgba, bool) public static void DrawPolygonConvex(this Polygon relativePoly, Transform2D transform, ColorRgba color, bool clockwise = false) Parameters relativePoly Polygon transform Transform2D color ColorRgba clockwise bool DrawPolygonConvex(Polygon, Vector2, ColorRgba, bool) public static void DrawPolygonConvex(this Polygon poly, Vector2 center, ColorRgba color, bool clockwise = false) Parameters poly Polygon center Vector2 color ColorRgba clockwise bool DrawPolygonConvex(Polygon, Vector2, float, float, ColorRgba, bool) public static void DrawPolygonConvex(this Polygon relativePoly, Vector2 pos, float size, float rotDeg, ColorRgba color, bool clockwise = false) Parameters relativePoly Polygon pos Vector2 size float rotDeg float color ColorRgba clockwise bool DrawVertices(Polygon, float, ColorRgba, int) public static void DrawVertices(this Polygon poly, float vertexRadius, ColorRgba color, int circleSegments) Parameters poly Polygon vertexRadius float color ColorRgba circleSegments int"
  },
  "api/ShapeEngine.StaticLib.Drawing.ShapePolylineDrawing.html": {
    "href": "api/ShapeEngine.StaticLib.Drawing.ShapePolylineDrawing.html",
    "title": "Class ShapePolylineDrawing | ShapeEngine",
    "summary": "Class ShapePolylineDrawing Namespace ShapeEngine.StaticLib.Drawing Assembly ShapeEngine.dll public static class ShapePolylineDrawing Inheritance object ShapePolylineDrawing Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Draw(Polyline, LineDrawingInfo) public static void Draw(this Polyline polyline, LineDrawingInfo lineInfo) Parameters polyline Polyline lineInfo LineDrawingInfo Draw(Polyline, Transform2D, LineDrawingInfo) public static void Draw(this Polyline relative, Transform2D transform, LineDrawingInfo lineInfo) Parameters relative Polyline transform Transform2D lineInfo LineDrawingInfo Draw(Polyline, Transform2D, float, ColorRgba, LineCapType, int) public static void Draw(this Polyline relative, Transform2D transform, float lineThickness, ColorRgba color, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters relative Polyline transform Transform2D lineThickness float color ColorRgba capType LineCapType capPoints int Draw(Polyline, List<ColorRgba>, LineDrawingInfo) public static void Draw(this Polyline polyline, List<ColorRgba> colors, LineDrawingInfo lineInfo) Parameters polyline Polyline colors List<ColorRgba> lineInfo LineDrawingInfo Draw(Polyline, Vector2, float, float, LineDrawingInfo) public static void Draw(this Polyline relative, Vector2 pos, float size, float rotDeg, LineDrawingInfo lineInfo) Parameters relative Polyline pos Vector2 size float rotDeg float lineInfo LineDrawingInfo Draw(Polyline, Vector2, float, float, float, ColorRgba, LineCapType, int) public static void Draw(this Polyline relative, Vector2 pos, float size, float rotDeg, float lineThickness, ColorRgba color, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters relative Polyline pos Vector2 size float rotDeg float lineThickness float color ColorRgba capType LineCapType capPoints int Draw(Polyline, float, ColorRgba, LineCapType, int) public static void Draw(this Polyline polyline, float thickness, ColorRgba color, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters polyline Polyline thickness float color ColorRgba capType LineCapType capPoints int Draw(Polyline, float, List<ColorRgba>, LineCapType, int) public static void Draw(this Polyline polyline, float thickness, List<ColorRgba> colors, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters polyline Polyline thickness float colors List<ColorRgba> capType LineCapType capPoints int DrawGlow(Polyline, float, float, ColorRgba, ColorRgba, int, LineCapType, int) public static void DrawGlow(this Polyline polyline, float width, float endWidth, ColorRgba color, ColorRgba endColorRgba, int steps, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters polyline Polyline width float endWidth float color ColorRgba endColorRgba ColorRgba steps int capType LineCapType capPoints int DrawLinesScaled(Polyline, LineDrawingInfo, float, float) Draws a polyline where each side can be scaled towards the origin of the side. public static void DrawLinesScaled(this Polyline polyline, LineDrawingInfo lineInfo, float sideScaleFactor, float sideScaleOrigin = 0.5) Parameters polyline Polyline The polyline to draw. lineInfo LineDrawingInfo How to draw the lines. sideScaleFactor float The scale factor for each side. 0f means no polyline is drawn, 1f means normal polyline is drawn, 0.5 means each side is half as long. sideScaleOrigin float The point along the line to scale from in both directions. DrawLinesScaled(Polyline, Transform2D, LineDrawingInfo, float, float) Draws a polyline where each side can be scaled towards the origin of the side. public static void DrawLinesScaled(this Polyline relative, Transform2D transform, LineDrawingInfo lineInfo, float sideScaleFactor, float sideScaleOrigin = 0.5) Parameters relative Polyline The relative polyline points. transform Transform2D The transform of the polyline. lineInfo LineDrawingInfo How to draw the lines. sideScaleFactor float The scale factor for each side. 0f means no polyline is drawn, 1f means normal polyline is drawn, 0.5 means each side is half as long. sideScaleOrigin float The point along the line to scale from in both directions. DrawLinesScaled(Polyline, Vector2, float, float, LineDrawingInfo, float, float) Draws a polyline where each side can be scaled towards the origin of the side. public static void DrawLinesScaled(this Polyline relative, Vector2 pos, float size, float rotDeg, LineDrawingInfo lineInfo, float sideScaleFactor, float sideScaleOrigin = 0.5) Parameters relative Polyline The relative polyline points. pos Vector2 The center of the polyline. size float The size of the polyline. rotDeg float The rotation of the polyline. lineInfo LineDrawingInfo How to draw the lines. sideScaleFactor float The scale factor for each side. 0f means no polyline is drawn, 1f means normal polyline is drawn, 0.5 means each side is half as long. sideScaleOrigin float The point along the line to scale from in both directions. DrawPercentage(Polyline, float, LineDrawingInfo) public static void DrawPercentage(this Polyline polyline, float f, LineDrawingInfo lineInfo) Parameters polyline Polyline f float lineInfo LineDrawingInfo DrawPercentage(Polyline, float, float, ColorRgba, LineCapType, int) Draws a certain percentage of an outline. public static void DrawPercentage(this Polyline polyline, float f, float lineThickness, ColorRgba color, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters polyline Polyline f float The percentage of the outline to draw. Negative value reverses the direction (cw). Integer part can be used to change starting corner. 0.35 would start at corner a go in ccw direction and draw 35% of the outline. -2.7 would start at b (the third corner in cw direction) and draw in cw direction 70% of the outline. lineThickness float color ColorRgba capType LineCapType capPoints int DrawPerimeter(Polyline, float, LineDrawingInfo) public static void DrawPerimeter(this Polyline polyline, float perimeterToDraw, LineDrawingInfo lineInfo) Parameters polyline Polyline perimeterToDraw float lineInfo LineDrawingInfo DrawPerimeter(Polyline, float, float, ColorRgba, LineCapType, int) Draws a certain amount of perimeter public static void DrawPerimeter(this Polyline polyline, float perimeterToDraw, float lineThickness, ColorRgba color, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters polyline Polyline perimeterToDraw float Determines how much of the outline is drawn. If perimeter is negative outline will be drawn in cw direction. lineThickness float color ColorRgba capType LineCapType capPoints int DrawVertices(Polyline, float, ColorRgba, int) public static void DrawVertices(this Polyline polyline, float vertexRadius, ColorRgba color, int circleSegments) Parameters polyline Polyline vertexRadius float color ColorRgba circleSegments int"
  },
  "api/ShapeEngine.StaticLib.Drawing.ShapeQuadDrawing.html": {
    "href": "api/ShapeEngine.StaticLib.Drawing.ShapeQuadDrawing.html",
    "title": "Class ShapeQuadDrawing | ShapeEngine",
    "summary": "Class ShapeQuadDrawing Namespace ShapeEngine.StaticLib.Drawing Assembly ShapeEngine.dll public static class ShapeQuadDrawing Inheritance object ShapeQuadDrawing Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Draw(Quad, ColorRgba) public static void Draw(this Quad q, ColorRgba color) Parameters q Quad color ColorRgba DrawLines(Quad, LineDrawingInfo) public static void DrawLines(this Quad q, LineDrawingInfo lineInfo) Parameters q Quad lineInfo LineDrawingInfo DrawLines(Quad, float, ColorRgba, LineCapType, int) public static void DrawLines(this Quad q, float lineThickness, ColorRgba color, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters q Quad lineThickness float color ColorRgba capType LineCapType capPoints int DrawLines(Quad, float, ColorRgba, float, LineCapType, int) public static void DrawLines(this Quad q, float lineThickness, ColorRgba color, float sideLengthFactor, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters q Quad lineThickness float color ColorRgba sideLengthFactor float capType LineCapType capPoints int DrawLinesPercentage(Quad, float, LineDrawingInfo) Draws a certain percentage of an outline. public static void DrawLinesPercentage(this Quad q, float f, LineDrawingInfo lineInfo) Parameters q Quad f float The percentage of the outline to draw. Negative value reverses the direction (cw). Integer part can be used to change starting corner. 0.35 would start at corner a go in ccw direction and draw 35% of the outline. -2.7 would start at b (the third corner in cw direction) and draw in cw direction 70% of the outline. lineInfo LineDrawingInfo DrawLinesPercentage(Quad, float, float, ColorRgba, LineCapType, int) Draws a certain percentage of an outline. public static void DrawLinesPercentage(this Quad q, float f, float lineThickness, ColorRgba color, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters q Quad f float The percentage of the outline to draw. Negative value reverses the direction (cw). Integer part can be used to change starting corner. 0.35 would start at corner a go in ccw direction and draw 35% of the outline. -2.7 would start at b (the third corner in cw direction) and draw in cw direction 70% of the outline. lineThickness float color ColorRgba capType LineCapType capPoints int DrawLinesScaled(Quad, LineDrawingInfo, float, AnchorPoint, float, float) Draws a rect where each side can be scaled towards the origin of the side. public static void DrawLinesScaled(this Quad q, LineDrawingInfo lineInfo, float rotDeg, AnchorPoint alignement, float sideScaleFactor, float sideScaleOrigin = 0.5) Parameters q Quad The quad to draw. lineInfo LineDrawingInfo How to draw the lines. rotDeg float The rotation of the quad. alignement AnchorPoint Alignement to rotate the quad. sideScaleFactor float The scale factor for each side. 0f means no quad is drawn, 1f means normal quad is drawn, 0.5 means each side is half as long. sideScaleOrigin float The point along the line to scale from in both directions. DrawQuad(Vector2, Vector2, Vector2, Vector2, ColorRgba) public static void DrawQuad(Vector2 a, Vector2 b, Vector2 c, Vector2 d, ColorRgba color) Parameters a Vector2 b Vector2 c Vector2 d Vector2 color ColorRgba DrawQuadLines(Vector2, Vector2, Vector2, Vector2, LineDrawingInfo) public static void DrawQuadLines(Vector2 a, Vector2 b, Vector2 c, Vector2 d, LineDrawingInfo lineInfo) Parameters a Vector2 b Vector2 c Vector2 d Vector2 lineInfo LineDrawingInfo DrawQuadLines(Vector2, Vector2, Vector2, Vector2, float, ColorRgba, LineCapType, int) public static void DrawQuadLines(Vector2 a, Vector2 b, Vector2 c, Vector2 d, float lineThickness, ColorRgba color, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters a Vector2 b Vector2 c Vector2 d Vector2 lineThickness float color ColorRgba capType LineCapType capPoints int DrawQuadLines(Vector2, Vector2, Vector2, Vector2, float, ColorRgba, float, LineCapType, int) public static void DrawQuadLines(Vector2 a, Vector2 b, Vector2 c, Vector2 d, float lineThickness, ColorRgba color, float sideLengthFactor, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters a Vector2 b Vector2 c Vector2 d Vector2 lineThickness float color ColorRgba sideLengthFactor float capType LineCapType capPoints int DrawQuadLinesPercentage(Vector2, Vector2, Vector2, Vector2, float, float, ColorRgba, LineCapType, int) Draws a certain percentage of an outline. public static void DrawQuadLinesPercentage(Vector2 a, Vector2 b, Vector2 c, Vector2 d, float f, float lineThickness, ColorRgba color, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters a Vector2 b Vector2 c Vector2 d Vector2 f float The percentage of the outline to draw. Negative value reverses the direction (cw). Integer part can be used to change starting corner. 0.35 would start at corner a go in ccw direction and draw 35% of the outline. -2.7 would start at b (the third corner in cw direction) and draw in cw direction 70% of the outline. lineThickness float color ColorRgba capType LineCapType capPoints int DrawVertices(Quad, float, ColorRgba, int) public static void DrawVertices(this Quad q, float vertexRadius, ColorRgba color, int circleSegments = 8) Parameters q Quad vertexRadius float color ColorRgba circleSegments int"
  },
  "api/ShapeEngine.StaticLib.Drawing.ShapeRayDrawing.html": {
    "href": "api/ShapeEngine.StaticLib.Drawing.ShapeRayDrawing.html",
    "title": "Class ShapeRayDrawing | ShapeEngine",
    "summary": "Class ShapeRayDrawing Namespace ShapeEngine.StaticLib.Drawing Assembly ShapeEngine.dll public static class ShapeRayDrawing Inheritance object ShapeRayDrawing Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Draw(Ray, float, float, ColorRgba) public static void Draw(this Ray ray, float length, float thickness, ColorRgba color) Parameters ray Ray length float thickness float color ColorRgba DrawRay(Vector2, Vector2, float, float, ColorRgba) public static void DrawRay(Vector2 point, Vector2 direction, float length, float thickness, ColorRgba color) Parameters point Vector2 direction Vector2 length float thickness float color ColorRgba"
  },
  "api/ShapeEngine.StaticLib.Drawing.ShapeRectDrawing.html": {
    "href": "api/ShapeEngine.StaticLib.Drawing.ShapeRectDrawing.html",
    "title": "Class ShapeRectDrawing | ShapeEngine",
    "summary": "Class ShapeRectDrawing Namespace ShapeEngine.StaticLib.Drawing Assembly ShapeEngine.dll public static class ShapeRectDrawing Inheritance object ShapeRectDrawing Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Draw(Rect, ColorRgba) public static void Draw(this Rect rect, ColorRgba color) Parameters rect Rect color ColorRgba Draw(Rect, Vector2, float, ColorRgba) public static void Draw(this Rect rect, Vector2 pivot, float rotDeg, ColorRgba color) Parameters rect Rect pivot Vector2 rotDeg float color ColorRgba Draw(Grid, Rect, float, ColorRgba) public static void Draw(this Grid grid, Rect bounds, float lineThickness, ColorRgba color) Parameters grid Grid bounds Rect lineThickness float color ColorRgba Draw(NinePatchRect, ColorRgba) public static void Draw(this NinePatchRect npr, ColorRgba color) Parameters npr NinePatchRect color ColorRgba Draw(NinePatchRect, ColorRgba, ColorRgba) public static void Draw(this NinePatchRect npr, ColorRgba sourceColorRgba, ColorRgba patchColorRgba) Parameters npr NinePatchRect sourceColorRgba ColorRgba patchColorRgba ColorRgba DrawCorners(Rect, LineDrawingInfo, float) public static void DrawCorners(this Rect rect, LineDrawingInfo lineInfo, float cornerLength) Parameters rect Rect lineInfo LineDrawingInfo cornerLength float DrawCorners(Rect, LineDrawingInfo, float, float, float, float) public static void DrawCorners(this Rect rect, LineDrawingInfo lineInfo, float tlCorner, float trCorner, float brCorner, float blCorner) Parameters rect Rect lineInfo LineDrawingInfo tlCorner float trCorner float brCorner float blCorner float DrawCornersRelative(Rect, LineDrawingInfo, float) public static void DrawCornersRelative(this Rect rect, LineDrawingInfo lineInfo, float cornerLengthFactor) Parameters rect Rect lineInfo LineDrawingInfo cornerLengthFactor float DrawCornersRelative(Rect, LineDrawingInfo, float, float, float, float) public static void DrawCornersRelative(this Rect rect, LineDrawingInfo lineInfo, float tlCorner, float trCorner, float brCorner, float blCorner) Parameters rect Rect lineInfo LineDrawingInfo tlCorner float trCorner float brCorner float blCorner float DrawGrid(Rect, int, LineDrawingInfo) public static void DrawGrid(this Rect r, int lines, LineDrawingInfo lineInfo) Parameters r Rect lines int lineInfo LineDrawingInfo DrawLines(Rect, LineDrawingInfo) public static void DrawLines(this Rect rect, LineDrawingInfo lineInfo) Parameters rect Rect lineInfo LineDrawingInfo DrawLines(Rect, Vector2, float, LineDrawingInfo) public static void DrawLines(this Rect rect, Vector2 pivot, float rotDeg, LineDrawingInfo lineInfo) Parameters rect Rect pivot Vector2 rotDeg float lineInfo LineDrawingInfo DrawLines(Rect, Vector2, float, float, ColorRgba, LineCapType, int) public static void DrawLines(this Rect rect, Vector2 pivot, float rotDeg, float lineThickness, ColorRgba color, LineCapType capType = LineCapType.Extended, int capPoints = 0) Parameters rect Rect pivot Vector2 rotDeg float lineThickness float color ColorRgba capType LineCapType capPoints int DrawLines(Rect, float, ColorRgba) public static void DrawLines(this Rect rect, float lineThickness, ColorRgba color) Parameters rect Rect lineThickness float color ColorRgba DrawLines(Rect, float, ColorRgba, float, LineCapType, int) public static void DrawLines(this Rect rect, float lineThickness, ColorRgba color, float sideLengthFactor, LineCapType capType = LineCapType.Extended, int capPoints = 0) Parameters rect Rect lineThickness float color ColorRgba sideLengthFactor float capType LineCapType capPoints int DrawLines(NinePatchRect, float, ColorRgba) public static void DrawLines(this NinePatchRect npr, float lineThickness, ColorRgba color) Parameters npr NinePatchRect lineThickness float color ColorRgba DrawLines(NinePatchRect, float, float, ColorRgba, ColorRgba) public static void DrawLines(this NinePatchRect npr, float sourceLineThickness, float patchLineThickness, ColorRgba sourceColorRgba, ColorRgba patchColorRgba) Parameters npr NinePatchRect sourceLineThickness float patchLineThickness float sourceColorRgba ColorRgba patchColorRgba ColorRgba DrawLinesPercentage(Rect, float, Vector2, float, LineDrawingInfo) Draws a certain percentage of an outline. public static void DrawLinesPercentage(this Rect rect, float f, Vector2 pivot, float rotDeg, LineDrawingInfo lineInfo) Parameters rect Rect f float The percentage of the outline to draw. Negative value reverses the direction (cw). Integer part can be used to change starting corner. 0.35 would start at the top left corner go in ccw direction and draw 35% of the outline. -2.7 would start at the bottom left corner (the third corner in cw direction) and draw in cw direction 70% of the outline. pivot Vector2 rotDeg float lineInfo LineDrawingInfo DrawLinesPercentage(Rect, float, Vector2, float, float, ColorRgba, LineCapType, int) Draws a certain percentage of an outline. public static void DrawLinesPercentage(this Rect rect, float f, Vector2 pivot, float rotDeg, float lineThickness, ColorRgba color, LineCapType capType = LineCapType.Extended, int capPoints = 0) Parameters rect Rect f float The percentage of the outline to draw. Negative value reverses the direction (cw). Integer part can be used to change starting corner. 0.35 would start at the top left corner go in ccw direction and draw 35% of the outline. -2.7 would start at the bottom left corner (the third corner in cw direction) and draw in cw direction 70% of the outline. pivot Vector2 rotDeg float lineThickness float color ColorRgba capType LineCapType capPoints int DrawLinesScaled(Rect, LineDrawingInfo, float, Vector2, float, float) Draws a rect where each side can be scaled towards the origin of the side. public static void DrawLinesScaled(this Rect r, LineDrawingInfo lineInfo, float rotDeg, Vector2 pivot, float sideScaleFactor, float sideScaleOrigin = 0.5) Parameters r Rect The rect to draw. lineInfo LineDrawingInfo How to draw the lines. rotDeg float The rotation of the rect. pivot Vector2 Point to rotate the rect around. sideScaleFactor float The scale factor for each side. 0f means no rect is drawn, 1f means normal rect is drawn, 0.5 means each side is half as long. sideScaleOrigin float The point along the line to scale from in both directions. DrawRect(Vector2, Vector2, ColorRgba) public static void DrawRect(Vector2 topLeft, Vector2 bottomRight, ColorRgba color) Parameters topLeft Vector2 bottomRight Vector2 color ColorRgba DrawRect(Vector2, Vector2, Vector2, float, ColorRgba) public static void DrawRect(Vector2 topLeft, Vector2 bottomRight, Vector2 pivot, float rotDeg, ColorRgba color) Parameters topLeft Vector2 bottomRight Vector2 pivot Vector2 rotDeg float color ColorRgba DrawRectLines(Vector2, Vector2, LineDrawingInfo) public static void DrawRectLines(Vector2 topLeft, Vector2 bottomRight, LineDrawingInfo lineInfo) Parameters topLeft Vector2 bottomRight Vector2 lineInfo LineDrawingInfo DrawRectLines(Vector2, Vector2, Vector2, float, LineDrawingInfo) public static void DrawRectLines(Vector2 topLeft, Vector2 bottomRight, Vector2 pivot, float rotDeg, LineDrawingInfo lineInfo) Parameters topLeft Vector2 bottomRight Vector2 pivot Vector2 rotDeg float lineInfo LineDrawingInfo DrawRectLines(Vector2, Vector2, Vector2, float, float, ColorRgba, LineCapType, int) public static void DrawRectLines(Vector2 topLeft, Vector2 bottomRight, Vector2 pivot, float rotDeg, float lineThickness, ColorRgba color, LineCapType capType = LineCapType.Extended, int capPoints = 0) Parameters topLeft Vector2 bottomRight Vector2 pivot Vector2 rotDeg float lineThickness float color ColorRgba capType LineCapType capPoints int DrawRectLines(Vector2, Vector2, float, ColorRgba) public static void DrawRectLines(Vector2 topLeft, Vector2 bottomRight, float lineThickness, ColorRgba color) Parameters topLeft Vector2 bottomRight Vector2 lineThickness float color ColorRgba DrawRectLines(Vector2, Vector2, float, ColorRgba, float, LineCapType, int) public static void DrawRectLines(Vector2 topLeft, Vector2 bottomRight, float lineThickness, ColorRgba color, float sideLengthFactor, LineCapType capType = LineCapType.Extended, int capPoints = 0) Parameters topLeft Vector2 bottomRight Vector2 lineThickness float color ColorRgba sideLengthFactor float capType LineCapType capPoints int DrawRectLinesPercentage(Vector2, Vector2, float, Vector2, float, LineDrawingInfo) Draws a certain percentage of an outline. public static void DrawRectLinesPercentage(Vector2 topLeft, Vector2 bottomRight, float f, Vector2 pivot, float rotDeg, LineDrawingInfo lineInfo) Parameters topLeft Vector2 bottomRight Vector2 f float The percentage of the outline to draw. Negative value reverses the direction (cw). Integer part can be used to change starting corner. 0.35 would start at the top left corner go in ccw direction and draw 35% of the outline. -2.7 would start at the bottom left corner (the third corner in cw direction) and draw in cw direction 70% of the outline. pivot Vector2 rotDeg float lineInfo LineDrawingInfo DrawRectLinesPercentage(Vector2, Vector2, float, Vector2, float, float, ColorRgba, LineCapType, int) Draws a certain percentage of an outline. public static void DrawRectLinesPercentage(Vector2 topLeft, Vector2 bottomRight, float f, Vector2 pivot, float rotDeg, float lineThickness, ColorRgba color, LineCapType capType = LineCapType.Extended, int capPoints = 0) Parameters topLeft Vector2 bottomRight Vector2 f float The percentage of the outline to draw. Negative value reverses the direction (cw). Integer part can be used to change starting corner. 0.35 would start at the top left corner go in ccw direction and draw 35% of the outline. -2.7 would start at the bottom left corner (the third corner in cw direction) and draw in cw direction 70% of the outline. pivot Vector2 rotDeg float lineThickness float color ColorRgba capType LineCapType capPoints int DrawRectLinesPercentage(Vector2, Vector2, float, float, ColorRgba, LineCapType, int) Draws a certain percentage of an outline. public static void DrawRectLinesPercentage(Vector2 topLeft, Vector2 bottomRight, float f, float lineThickness, ColorRgba color, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters topLeft Vector2 bottomRight Vector2 f float The percentage of the outline to draw. Negative value reverses the direction (cw). Integer part can be used to change starting corner. 0.35 would start at the top left corner go in ccw direction and draw 35% of the outline. -2.7 would start at the bottom left corner (the third corner in cw direction) and draw in cw direction 70% of the outline. lineThickness float color ColorRgba capType LineCapType capPoints int DrawRounded(Rect, float, int, ColorRgba) public static void DrawRounded(this Rect rect, float roundness, int segments, ColorRgba color) Parameters rect Rect roundness float segments int color ColorRgba DrawRoundedLines(Rect, float, float, int, ColorRgba) public static void DrawRoundedLines(this Rect rect, float roundness, float lineThickness, int segments, ColorRgba color) Parameters rect Rect roundness float lineThickness float segments int color ColorRgba DrawSlantedCorners(Rect, ColorRgba, float, float, float, float) public static void DrawSlantedCorners(this Rect rect, ColorRgba color, float tlCorner, float trCorner, float brCorner, float blCorner) Parameters rect Rect color ColorRgba tlCorner float trCorner float brCorner float blCorner float DrawSlantedCorners(Rect, Vector2, float, ColorRgba, float, float, float, float) public static void DrawSlantedCorners(this Rect rect, Vector2 pivot, float rotDeg, ColorRgba color, float tlCorner, float trCorner, float brCorner, float blCorner) Parameters rect Rect pivot Vector2 rotDeg float color ColorRgba tlCorner float trCorner float brCorner float blCorner float DrawSlantedCornersLines(Rect, LineDrawingInfo, float, float, float, float) public static void DrawSlantedCornersLines(this Rect rect, LineDrawingInfo lineInfo, float tlCorner, float trCorner, float brCorner, float blCorner) Parameters rect Rect lineInfo LineDrawingInfo tlCorner float trCorner float brCorner float blCorner float DrawSlantedCornersLines(Rect, Vector2, float, LineDrawingInfo, float, float, float, float) public static void DrawSlantedCornersLines(this Rect rect, Vector2 pivot, float rotDeg, LineDrawingInfo lineInfo, float tlCorner, float trCorner, float brCorner, float blCorner) Parameters rect Rect pivot Vector2 rotDeg float lineInfo LineDrawingInfo tlCorner float trCorner float brCorner float blCorner float DrawVertices(Rect, float, ColorRgba, int) public static void DrawVertices(this Rect rect, float vertexRadius, ColorRgba color, int circleSegments = 8) Parameters rect Rect vertexRadius float color ColorRgba circleSegments int"
  },
  "api/ShapeEngine.StaticLib.Drawing.ShapeRingDrawing.html": {
    "href": "api/ShapeEngine.StaticLib.Drawing.ShapeRingDrawing.html",
    "title": "Class ShapeRingDrawing | ShapeEngine",
    "summary": "Class ShapeRingDrawing Namespace ShapeEngine.StaticLib.Drawing Assembly ShapeEngine.dll public static class ShapeRingDrawing Inheritance object ShapeRingDrawing Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DrawRing(Vector2, float, float, ColorRgba, float) public static void DrawRing(Vector2 center, float innerRadius, float outerRadius, ColorRgba color, float sideLength = 8) Parameters center Vector2 innerRadius float outerRadius float color ColorRgba sideLength float DrawRing(Vector2, float, float, int, ColorRgba) public static void DrawRing(Vector2 center, float innerRadius, float outerRadius, int sides, ColorRgba color) Parameters center Vector2 innerRadius float outerRadius float sides int color ColorRgba DrawRingLines(Vector2, float, float, LineDrawingInfo, float) public static void DrawRingLines(Vector2 center, float innerRadius, float outerRadius, LineDrawingInfo lineInfo, float sideLength = 8) Parameters center Vector2 innerRadius float outerRadius float lineInfo LineDrawingInfo sideLength float DrawRingLines(Vector2, float, float, int, LineDrawingInfo) public static void DrawRingLines(Vector2 center, float innerRadius, float outerRadius, int sides, LineDrawingInfo lineInfo) Parameters center Vector2 innerRadius float outerRadius float sides int lineInfo LineDrawingInfo DrawRingLines(Vector2, float, float, int, int, LineDrawingInfo) public static void DrawRingLines(Vector2 center, float innerRadius, float outerRadius, int innerSides, int outerSides, LineDrawingInfo lineInfo) Parameters center Vector2 innerRadius float outerRadius float innerSides int outerSides int lineInfo LineDrawingInfo DrawRingLines(Vector2, float, float, int, int, LineDrawingInfo, LineDrawingInfo) public static void DrawRingLines(Vector2 center, float innerRadius, float outerRadius, int innerSides, int outerSides, LineDrawingInfo innerLineInfo, LineDrawingInfo outerLineInfo) Parameters center Vector2 innerRadius float outerRadius float innerSides int outerSides int innerLineInfo LineDrawingInfo outerLineInfo LineDrawingInfo DrawRingLines(Vector2, float, float, float, ColorRgba, float) public static void DrawRingLines(Vector2 center, float innerRadius, float outerRadius, float lineThickness, ColorRgba color, float sideLength = 8) Parameters center Vector2 innerRadius float outerRadius float lineThickness float color ColorRgba sideLength float DrawRingLines(Vector2, float, float, float, float, LineDrawingInfo, float) public static void DrawRingLines(Vector2 center, float innerRadius, float outerRadius, float innerRotDeg, float outerRotDeg, LineDrawingInfo lineInfo, float sideLength = 8) Parameters center Vector2 innerRadius float outerRadius float innerRotDeg float outerRotDeg float lineInfo LineDrawingInfo sideLength float DrawRingLines(Vector2, float, float, float, float, int, LineDrawingInfo) public static void DrawRingLines(Vector2 center, float innerRadius, float outerRadius, float innerRotDeg, float outerRotDeg, int sides, LineDrawingInfo lineInfo) Parameters center Vector2 innerRadius float outerRadius float innerRotDeg float outerRotDeg float sides int lineInfo LineDrawingInfo DrawRingLines(Vector2, float, float, float, float, int, int, LineDrawingInfo) public static void DrawRingLines(Vector2 center, float innerRadius, float outerRadius, float innerRotDeg, float outerRotDeg, int innerSides, int outerSides, LineDrawingInfo lineInfo) Parameters center Vector2 innerRadius float outerRadius float innerRotDeg float outerRotDeg float innerSides int outerSides int lineInfo LineDrawingInfo DrawRingLines(Vector2, float, float, float, float, int, int, LineDrawingInfo, LineDrawingInfo) public static void DrawRingLines(Vector2 center, float innerRadius, float outerRadius, float innerRotDeg, float outerRotDeg, int innerSides, int outerSides, LineDrawingInfo innerLineInfo, LineDrawingInfo outerLineInfo) Parameters center Vector2 innerRadius float outerRadius float innerRotDeg float outerRotDeg float innerSides int outerSides int innerLineInfo LineDrawingInfo outerLineInfo LineDrawingInfo DrawRingLines(Vector2, float, float, float, float, float, float, LineDrawingInfo) public static void DrawRingLines(Vector2 center, float innerRadius, float outerRadius, float innerRotDeg, float outerRotDeg, float innerSideLength, float outerSideLength, LineDrawingInfo lineInfo) Parameters center Vector2 innerRadius float outerRadius float innerRotDeg float outerRotDeg float innerSideLength float outerSideLength float lineInfo LineDrawingInfo DrawRingLines(Vector2, float, float, float, float, float, float, LineDrawingInfo, LineDrawingInfo) public static void DrawRingLines(Vector2 center, float innerRadius, float outerRadius, float innerRotDeg, float outerRotDeg, float innerSideLength, float outerSideLength, LineDrawingInfo innerLineInfo, LineDrawingInfo outerLineInfo) Parameters center Vector2 innerRadius float outerRadius float innerRotDeg float outerRotDeg float innerSideLength float outerSideLength float innerLineInfo LineDrawingInfo outerLineInfo LineDrawingInfo DrawRingLines(Vector2, float, float, float, float, float, float, float, LineDrawingInfo, LineDrawingInfo) public static void DrawRingLines(Vector2 center, float innerRadius, float outerRadius, float f, float innerRotDeg, float outerRotDeg, float innerSideLength, float outerSideLength, LineDrawingInfo innerLineInfo, LineDrawingInfo outerLineInfo) Parameters center Vector2 innerRadius float outerRadius float f float innerRotDeg float outerRotDeg float innerSideLength float outerSideLength float innerLineInfo LineDrawingInfo outerLineInfo LineDrawingInfo DrawRingLinesPercentage(Vector2, float, float, float, int, int, LineDrawingInfo) public static void DrawRingLinesPercentage(Vector2 center, float innerRadius, float outerRadius, float f, int innerSides, int outerSides, LineDrawingInfo lineInfo) Parameters center Vector2 innerRadius float outerRadius float f float innerSides int outerSides int lineInfo LineDrawingInfo DrawRingLinesPercentage(Vector2, float, float, float, int, int, LineDrawingInfo, LineDrawingInfo) public static void DrawRingLinesPercentage(Vector2 center, float innerRadius, float outerRadius, float f, int innerSides, int outerSides, LineDrawingInfo innerLineInfo, LineDrawingInfo outerLineInfo) Parameters center Vector2 innerRadius float outerRadius float f float innerSides int outerSides int innerLineInfo LineDrawingInfo outerLineInfo LineDrawingInfo DrawRingLinesPercentage(Vector2, float, float, float, float, float, LineDrawingInfo, float) public static void DrawRingLinesPercentage(Vector2 center, float innerRadius, float outerRadius, float f, float innerRotDeg, float outerRotDeg, LineDrawingInfo lineInfo, float sideLength = 8) Parameters center Vector2 innerRadius float outerRadius float f float innerRotDeg float outerRotDeg float lineInfo LineDrawingInfo sideLength float DrawRingLinesPercentage(Vector2, float, float, float, float, float, int, int, LineDrawingInfo) public static void DrawRingLinesPercentage(Vector2 center, float innerRadius, float outerRadius, float f, float innerRotDeg, float outerRotDeg, int innerSides, int outerSides, LineDrawingInfo lineInfo) Parameters center Vector2 innerRadius float outerRadius float f float innerRotDeg float outerRotDeg float innerSides int outerSides int lineInfo LineDrawingInfo DrawRingLinesPercentage(Vector2, float, float, float, float, float, int, int, LineDrawingInfo, LineDrawingInfo) public static void DrawRingLinesPercentage(Vector2 center, float innerRadius, float outerRadius, float f, float innerRotDeg, float outerRotDeg, int innerSides, int outerSides, LineDrawingInfo innerLineInfo, LineDrawingInfo outerLineInfo) Parameters center Vector2 innerRadius float outerRadius float f float innerRotDeg float outerRotDeg float innerSides int outerSides int innerLineInfo LineDrawingInfo outerLineInfo LineDrawingInfo DrawRingLinesPercentage(Vector2, float, float, float, float, float, float, float, LineDrawingInfo) public static void DrawRingLinesPercentage(Vector2 center, float innerRadius, float outerRadius, float f, float innerRotDeg, float outerRotDeg, float innerSideLength, float outerSideLength, LineDrawingInfo lineInfo) Parameters center Vector2 innerRadius float outerRadius float f float innerRotDeg float outerRotDeg float innerSideLength float outerSideLength float lineInfo LineDrawingInfo DrawRingLinesScaled(Vector2, float, float, float, float, int, LineDrawingInfo, float, float) Draws a circle where each side can be scaled towards the origin of the side. public static void DrawRingLinesScaled(Vector2 center, float innerRadius, float outerRadius, float innerRotDeg, float outerRotDeg, int sides, LineDrawingInfo lineInfo, float sideScaleFactor, float sideScaleOrigin = 0.5) Parameters center Vector2 innerRadius float outerRadius float innerRotDeg float The rotation of the inner circle in degrees. outerRotDeg float The rotation of the outer circle in degrees. sides int How many sides the circle should be drawn with. lineInfo LineDrawingInfo How to draw the lines. sideScaleFactor float The scale factor for each side. 0f means no circle is drawn, 1f means normal circle is drawn, 0.5 means each side is half as long. sideScaleOrigin float The point along the line to scale from in both directions. DrawRingLinesScaled(Vector2, float, float, float, float, int, int, LineDrawingInfo, LineDrawingInfo, float, float) Draws a circle where each side can be scaled towards the origin of the side. public static void DrawRingLinesScaled(Vector2 center, float innerRadius, float outerRadius, float innerRotDeg, float outerRotDeg, int innerSides, int outerSides, LineDrawingInfo innerLineInfo, LineDrawingInfo outerLineInfo, float sideScaleFactor, float sideScaleOrigin = 0.5) Parameters center Vector2 innerRadius float outerRadius float innerRotDeg float The rotation of the inner circle in degrees. outerRotDeg float The rotation of the outer circle in degrees. innerSides int How many sides the inner circle should be drawn with. outerSides int How many sides the outer circle should be drawn with. innerLineInfo LineDrawingInfo How to draw the inner lines. outerLineInfo LineDrawingInfo How to draw the outer lines. sideScaleFactor float The scale factor for each side. 0f means no circle is drawn, 1f means normal circle is drawn, 0.5 means each side is half as long. sideScaleOrigin float The point along the line to scale from in both directions. DrawRingLinesScaled(Vector2, float, float, float, float, int, int, LineDrawingInfo, LineDrawingInfo, float, float, float, float) Draws a circle where each side can be scaled towards the origin of the side. public static void DrawRingLinesScaled(Vector2 center, float innerRadius, float outerRadius, float innerRotDeg, float outerRotDeg, int innerSides, int outerSides, LineDrawingInfo innerLineInfo, LineDrawingInfo outerLineInfo, float innerSideScaleFactor, float outerSideScaleFactor, float innerSideScaleOrigin, float outerSideScaleOrigin) Parameters center Vector2 innerRadius float outerRadius float innerRotDeg float The rotation of the inner circle in degrees. outerRotDeg float The rotation of the outer circle in degrees. innerSides int How many sides the inner circle should be drawn with. outerSides int How many sides the outer circle should be drawn with. innerLineInfo LineDrawingInfo How to draw the inner lines. outerLineInfo LineDrawingInfo How to draw the outer lines. innerSideScaleFactor float The scale factor for each side on the inner circle. 0f means no circle is drawn, 1f means normal circle is drawn, 0.5 means each side is half as long. outerSideScaleFactor float The scale factor for each side on the outer circle. 0f means no circle is drawn, 1f means normal circle is drawn, 0.5 means each side is half as long. innerSideScaleOrigin float The point along the line to scale from in both directions. outerSideScaleOrigin float The point along the line to scale from in both directions. DrawRingLinesScaled(Vector2, float, float, float, float, int, int, LineDrawingInfo, float, float) Draws a circle where each side can be scaled towards the origin of the side. public static void DrawRingLinesScaled(Vector2 center, float innerRadius, float outerRadius, float innerRotDeg, float outerRotDeg, int innerSides, int outerSides, LineDrawingInfo lineInfo, float sideScaleFactor, float sideScaleOrigin = 0.5) Parameters center Vector2 innerRadius float outerRadius float innerRotDeg float The rotation of the inner circle in degrees. outerRotDeg float The rotation of the outer circle in degrees. innerSides int How many sides the inner circle should be drawn with. outerSides int How many sides the outer circle should be drawn with. lineInfo LineDrawingInfo How to draw the lines. sideScaleFactor float The scale factor for each side. 0f means no circle is drawn, 1f means normal circle is drawn, 0.5 means each side is half as long. sideScaleOrigin float The point along the line to scale from in both directions. DrawSectorRing(Vector2, float, float, float, float, ColorRgba, float) public static void DrawSectorRing(Vector2 center, float innerRadius, float outerRadius, float startAngleDeg, float endAngleDeg, ColorRgba color, float sideLength = 10) Parameters center Vector2 innerRadius float outerRadius float startAngleDeg float endAngleDeg float color ColorRgba sideLength float DrawSectorRing(Vector2, float, float, float, float, int, ColorRgba) public static void DrawSectorRing(Vector2 center, float innerRadius, float outerRadius, float startAngleDeg, float endAngleDeg, int sides, ColorRgba color) Parameters center Vector2 innerRadius float outerRadius float startAngleDeg float endAngleDeg float sides int color ColorRgba DrawSectorRing(Vector2, float, float, float, float, float, ColorRgba, float) public static void DrawSectorRing(Vector2 center, float innerRadius, float outerRadius, float startAngleDeg, float endAngleDeg, float rotOffsetDeg, ColorRgba color, float sideLength = 10) Parameters center Vector2 innerRadius float outerRadius float startAngleDeg float endAngleDeg float rotOffsetDeg float color ColorRgba sideLength float DrawSectorRing(Vector2, float, float, float, float, float, int, ColorRgba) public static void DrawSectorRing(Vector2 center, float innerRadius, float outerRadius, float startAngleDeg, float endAngleDeg, float rotOffsetDeg, int sides, ColorRgba color) Parameters center Vector2 innerRadius float outerRadius float startAngleDeg float endAngleDeg float rotOffsetDeg float sides int color ColorRgba DrawSectorRingLines(Vector2, float, float, float, float, LineDrawingInfo, float) public static void DrawSectorRingLines(Vector2 center, float innerRadius, float outerRadius, float startAngleDeg, float endAngleDeg, LineDrawingInfo lineInfo, float sideLength = 8) Parameters center Vector2 innerRadius float outerRadius float startAngleDeg float endAngleDeg float lineInfo LineDrawingInfo sideLength float DrawSectorRingLines(Vector2, float, float, float, float, float, ColorRgba, float) public static void DrawSectorRingLines(Vector2 center, float innerRadius, float outerRadius, float startAngleDeg, float endAngleDeg, float lineThickness, ColorRgba color, float sideLength = 8) Parameters center Vector2 innerRadius float outerRadius float startAngleDeg float endAngleDeg float lineThickness float color ColorRgba sideLength float DrawSectorRingLines(Vector2, float, float, float, float, float, LineDrawingInfo, float) public static void DrawSectorRingLines(Vector2 center, float innerRadius, float outerRadius, float startAngleDeg, float endAngleDeg, float rotOffsetDeg, LineDrawingInfo lineInfo, float sideLength = 8) Parameters center Vector2 innerRadius float outerRadius float startAngleDeg float endAngleDeg float rotOffsetDeg float lineInfo LineDrawingInfo sideLength float DrawSectorRingLines(Vector2, float, float, float, float, float, float, ColorRgba, float) public static void DrawSectorRingLines(Vector2 center, float innerRadius, float outerRadius, float startAngleDeg, float endAngleDeg, float rotOffsetDeg, float lineThickness, ColorRgba color, float sideLength = 8) Parameters center Vector2 innerRadius float outerRadius float startAngleDeg float endAngleDeg float rotOffsetDeg float lineThickness float color ColorRgba sideLength float"
  },
  "api/ShapeEngine.StaticLib.Drawing.ShapeSegmentDrawing.html": {
    "href": "api/ShapeEngine.StaticLib.Drawing.ShapeSegmentDrawing.html",
    "title": "Class ShapeSegmentDrawing | ShapeEngine",
    "summary": "Class ShapeSegmentDrawing Namespace ShapeEngine.StaticLib.Drawing Assembly ShapeEngine.dll public static class ShapeSegmentDrawing Inheritance object ShapeSegmentDrawing Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Draw(Segment, LineDrawingInfo) public static void Draw(this Segment segment, LineDrawingInfo lineInfo) Parameters segment Segment lineInfo LineDrawingInfo Draw(Segment, float, ColorRgba, LineCapType, int) public static void Draw(this Segment segment, float thickness, ColorRgba color, LineCapType capType = LineCapType.None, int capPoints = 0) Parameters segment Segment thickness float color ColorRgba capType LineCapType capPoints int Draw(Segment, float, float, LineDrawingInfo) public static void Draw(this Segment segment, float originF, float angleRad, LineDrawingInfo lineInfo) Parameters segment Segment originF float angleRad float lineInfo LineDrawingInfo Draw(Segments, LineDrawingInfo) public static void Draw(this Segments segments, LineDrawingInfo lineInfo) Parameters segments Segments lineInfo LineDrawingInfo Draw(Segments, float, List<ColorRgba>, LineCapType, int) public static void Draw(this Segments segments, float thickness, List<ColorRgba> colors, LineCapType capType = LineCapType.None, int capPoints = 0) Parameters segments Segments thickness float colors List<ColorRgba> capType LineCapType capPoints int DrawGlow(Segment, float, float, ColorRgba, ColorRgba, int, LineCapType, int) public static void DrawGlow(this Segment segment, float width, float endWidth, ColorRgba color, ColorRgba endColorRgba, int steps, LineCapType capType = LineCapType.None, int capPoints = 0) Parameters segment Segment width float endWidth float color ColorRgba endColorRgba ColorRgba steps int capType LineCapType capPoints int DrawGlow(Segments, float, float, ColorRgba, ColorRgba, int, LineCapType, int) public static void DrawGlow(this Segments segments, float width, float endWidth, ColorRgba color, ColorRgba endColorRgba, int steps, LineCapType capType = LineCapType.None, int capPoints = 0) Parameters segments Segments width float endWidth float color ColorRgba endColorRgba ColorRgba steps int capType LineCapType capPoints int DrawPercentage(Segment, float, LineDrawingInfo) public static void DrawPercentage(this Segment segment, float f, LineDrawingInfo lineInfo) Parameters segment Segment f float lineInfo LineDrawingInfo DrawPercentage(Segment, float, float, ColorRgba, LineCapType, int) public static void DrawPercentage(this Segment segment, float f, float thickness, ColorRgba color, LineCapType capType = LineCapType.None, int capPoints = 0) Parameters segment Segment f float thickness float color ColorRgba capType LineCapType capPoints int DrawScaled(Segment, LineDrawingInfo, float, float) Draws a segment scaled towards the origin. public static void DrawScaled(this Segment s, LineDrawingInfo lineInfo, float sideScaleFactor, float sideScaleOrigin = 0.5) Parameters s Segment The segment to draw. lineInfo LineDrawingInfo How to draw the lines. sideScaleFactor float The scale factor for each side. 0f means no triangle is drawn, 1f means normal triangle is drawn, 0.5 means each side is half as long. sideScaleOrigin float The point along the line to scale from in both directions. DrawScaled(Segment, float, float, LineDrawingInfo, float, float) Draws a segment scaled towards the origin. public static void DrawScaled(this Segment s, float originF, float angleRad, LineDrawingInfo lineInfo, float sideScaleFactor, float sideScaleOrigin = 0.5) Parameters s Segment The segment to draw. originF float Point to rotate the segment around. Value between 0 - 1. (0 = Start, 1 = End) angleRad float The rotation of the segment. lineInfo LineDrawingInfo How to draw the lines. sideScaleFactor float The scale factor for each side. 0f means no triangle is drawn, 1f means normal triangle is drawn, 0.5 means each side is half as long. sideScaleOrigin float The point along the line to scale from in both directions. DrawSegment(Vector2, Vector2, LineDrawingInfo) public static void DrawSegment(Vector2 start, Vector2 end, LineDrawingInfo info) Parameters start Vector2 end Vector2 info LineDrawingInfo DrawSegment(Vector2, Vector2, LineDrawingInfo, float, float) public static void DrawSegment(Vector2 start, Vector2 end, LineDrawingInfo info, float scaleFactor, float scaleOrigin = 0.5) Parameters start Vector2 end Vector2 info LineDrawingInfo scaleFactor float scaleOrigin float DrawSegment(Vector2, Vector2, float, ColorRgba, LineCapType, int) public static void DrawSegment(Vector2 start, Vector2 end, float thickness, ColorRgba color, LineCapType capType = LineCapType.None, int capPoints = 0) Parameters start Vector2 end Vector2 thickness float color ColorRgba capType LineCapType capPoints int DrawSegment(Vector2, Vector2, float, ColorRgba, float, LineCapType, int) public static void DrawSegment(Vector2 start, Vector2 end, float thickness, ColorRgba color, float sideLengthFactor, LineCapType capType = LineCapType.None, int capPoints = 0) Parameters start Vector2 end Vector2 thickness float color ColorRgba sideLengthFactor float capType LineCapType capPoints int DrawSegment(float, float, float, float, LineDrawingInfo) public static void DrawSegment(float startX, float startY, float endX, float endY, LineDrawingInfo info) Parameters startX float startY float endX float endY float info LineDrawingInfo DrawSegment(float, float, float, float, float, ColorRgba, LineCapType, int) public static void DrawSegment(float startX, float startY, float endX, float endY, float thickness, ColorRgba color, LineCapType capType = LineCapType.None, int capPoints = 0) Parameters startX float startY float endX float endY float thickness float color ColorRgba capType LineCapType capPoints int DrawSegmentGlow(Vector2, Vector2, float, float, ColorRgba, ColorRgba, int, LineCapType, int) public static void DrawSegmentGlow(Vector2 start, Vector2 end, float width, float endWidth, ColorRgba color, ColorRgba endColorRgba, int steps, LineCapType capType = LineCapType.None, int capPoints = 0) Parameters start Vector2 end Vector2 width float endWidth float color ColorRgba endColorRgba ColorRgba steps int capType LineCapType capPoints int DrawSegmentPercentage(Vector2, Vector2, float, LineDrawingInfo) Draws part of a line from start to end depending on f. public static void DrawSegmentPercentage(Vector2 start, Vector2 end, float f, LineDrawingInfo info) Parameters start Vector2 The start point. end Vector2 The end point. f float The percentage of the line to draw. A negative value goes from end to start. info LineDrawingInfo The line drawing info for how to draw the line. DrawSegmentPercentage(Vector2, Vector2, float, float, ColorRgba, LineCapType, int) Draws part of a line from start to end depending on f. public static void DrawSegmentPercentage(Vector2 start, Vector2 end, float f, float thickness, ColorRgba color, LineCapType capType = LineCapType.None, int capPoints = 0) Parameters start Vector2 The start point. end Vector2 The end point. f float The percentage of the line to draw. A negative value goes from end to start. thickness float The thickness of the line. color ColorRgba The color of the line. capType LineCapType The cap type of the line. capPoints int How many points are used to draw the cap. DrawVertices(Segment, float, ColorRgba, int) public static void DrawVertices(this Segment segment, float vertexRadius, ColorRgba color, int vertexSegments = 16) Parameters segment Segment vertexRadius float color ColorRgba vertexSegments int"
  },
  "api/ShapeEngine.StaticLib.Drawing.ShapeStripedDrawing.html": {
    "href": "api/ShapeEngine.StaticLib.Drawing.ShapeStripedDrawing.html",
    "title": "Class ShapeStripedDrawing | ShapeEngine",
    "summary": "Class ShapeStripedDrawing Namespace ShapeEngine.StaticLib.Drawing Assembly ShapeEngine.dll public static class ShapeStripedDrawing Inheritance object ShapeStripedDrawing Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DrawStriped(Circle, Circle, float, float, LineDrawingInfo, float) Draws a striped pattern inside the outside shape without drawing in the inside shape. The inside shape does not have to be completely inside the outside shape. public static void DrawStriped(this Circle outsideShape, Circle insideShape, float spacing, float angleDeg, LineDrawingInfo striped, float spacingOffset = 0) Parameters outsideShape Circle The shape for drawing the striped pattern inside. insideShape Circle The shape to not draw any striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. spacingOffset float An offset for the spacing between 0 and 1. Can be used for a continuously moving pattern. DrawStriped(Circle, Polygon, float, float, LineDrawingInfo, float) Draws a striped pattern inside the outside shape without drawing in the inside shape. The inside shape does not have to be completely inside the outside shape. public static void DrawStriped(this Circle outsideShape, Polygon insideShape, float spacing, float angleDeg, LineDrawingInfo striped, float spacingOffset = 0) Parameters outsideShape Circle The shape for drawing the striped pattern inside. insideShape Polygon The shape to not draw any striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. spacingOffset float An offset for the spacing between 0 and 1. Can be used for a continuously moving pattern. DrawStriped(Circle, Quad, float, float, LineDrawingInfo, float) Draws a striped pattern inside the outside shape without drawing in the inside shape. The inside shape does not have to be completely inside the outside shape. public static void DrawStriped(this Circle outsideShape, Quad insideShape, float spacing, float angleDeg, LineDrawingInfo striped, float spacingOffset = 0) Parameters outsideShape Circle The shape for drawing the striped pattern inside. insideShape Quad The shape to not draw any striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. spacingOffset float An offset for the spacing between 0 and 1. Can be used for a continuously moving pattern. DrawStriped(Circle, Rect, float, float, LineDrawingInfo, float) Draws a striped pattern inside the outside shape without drawing in the inside shape. The inside shape does not have to be completely inside the outside shape. public static void DrawStriped(this Circle outsideShape, Rect insideShape, float spacing, float angleDeg, LineDrawingInfo striped, float spacingOffset = 0) Parameters outsideShape Circle The shape for drawing the striped pattern inside. insideShape Rect The shape to not draw any striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. spacingOffset float An offset for the spacing between 0 and 1. Can be used for a continuously moving pattern. DrawStriped(Circle, Triangle, float, float, LineDrawingInfo, float) Draws a striped pattern inside the outside shape without drawing in the inside shape. The inside shape does not have to be completely inside the outside shape. public static void DrawStriped(this Circle outsideShape, Triangle insideShape, float spacing, float angleDeg, LineDrawingInfo striped, float spacingOffset = 0) Parameters outsideShape Circle The shape for drawing the striped pattern inside. insideShape Triangle The shape to not draw any striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. spacingOffset float An offset for the spacing between 0 and 1. Can be used for a continuously moving pattern. DrawStriped(Circle, CurveFloat, float, LineDrawingInfo) Draws a striped pattern inside the specified shape. public static void DrawStriped(this Circle circle, CurveFloat spacingCurve, float angleDeg, LineDrawingInfo striped) Parameters circle Circle The shape for drawing the striped pattern inside. spacingCurve CurveFloat The curve to determine the spacing along the shape. The value of each key has to be bigger than 0, otherwise the function will return early! angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. DrawStriped(Circle, CurveFloat, float, LineDrawingInfo, LineDrawingInfo) Draws an alternating striped pattern inside the specified shape. public static void DrawStriped(this Circle circle, CurveFloat spacingCurve, float angleDeg, LineDrawingInfo striped, LineDrawingInfo alternatingStriped) Parameters circle Circle The shape for drawing the striped pattern inside. spacingCurve CurveFloat The curve to determine the spacing along the shape. The value of each key has to be bigger than 0, otherwise the function will return early! angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The first line drawing info for drawing even lines. alternatingStriped LineDrawingInfo The second line drawing info for drawing odd lines. DrawStriped(Circle, CurveFloat, float, params LineDrawingInfo[]) Draws an alternating striped pattern inside the specified shape. public static void DrawStriped(this Circle circle, CurveFloat spacingCurve, float angleDeg, params LineDrawingInfo[] alternatingStriped) Parameters circle Circle The shape for drawing the striped pattern inside. spacingCurve CurveFloat The curve to determine the spacing along the shape. The value of each key has to be bigger than 0, otherwise the function will return early! angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. alternatingStriped LineDrawingInfo[] The line drawing infos for drawing each line. Each info is used in sequence and wraps around if there are more lines. DrawStriped(Circle, float, float, LineDrawingInfo, LineDrawingInfo) Draws an alternating striped pattern inside the specified shape. public static void DrawStriped(this Circle circle, float spacing, float angleDeg, LineDrawingInfo striped, LineDrawingInfo alternatingStriped) Parameters circle Circle The shape for drawing the striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The first line drawing info for drawing even lines. alternatingStriped LineDrawingInfo The second line drawing info for drawing odd lines. DrawStriped(Circle, float, float, LineDrawingInfo, float) Draws a striped pattern inside the specified shape. public static void DrawStriped(this Circle circle, float spacing, float angleDeg, LineDrawingInfo striped, float spacingOffset = 0) Parameters circle Circle The shape for drawing the striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. spacingOffset float An offset for the spacing between 0 and 1. Can be used for a continuously moving pattern. DrawStriped(Circle, float, float, params LineDrawingInfo[]) Draws an alternating striped pattern inside the specified shape. public static void DrawStriped(this Circle circle, float spacing, float angleDeg, params LineDrawingInfo[] alternatingStriped) Parameters circle Circle The shape for drawing the striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. alternatingStriped LineDrawingInfo[] The line drawing infos for drawing each line. Each info is used in sequence and wraps around if there are more lines. DrawStriped(Polygon, Circle, float, float, LineDrawingInfo, float) Draws a striped pattern inside the outside shape without drawing in the inside shape. The inside shape does not have to be completely inside the outside shape. public static void DrawStriped(this Polygon outsideShape, Circle insideShape, float spacing, float angleDeg, LineDrawingInfo striped, float spacingOffset = 0) Parameters outsideShape Polygon The shape for drawing the striped pattern inside. insideShape Circle The shape to not draw any striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. spacingOffset float An offset for the spacing between 0 and 1. Can be used for a continuously moving pattern. DrawStriped(Polygon, Polygon, float, float, LineDrawingInfo, float) Draws a striped pattern inside the outside shape without drawing in the inside shape. The inside shape does not have to be completely inside the outside shape. public static void DrawStriped(this Polygon outsideShape, Polygon insideShape, float spacing, float angleDeg, LineDrawingInfo striped, float spacingOffset = 0) Parameters outsideShape Polygon The shape for drawing the striped pattern inside. insideShape Polygon The shape to not draw any striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. spacingOffset float An offset for the spacing between 0 and 1. Can be used for a continuously moving pattern. DrawStriped(Polygon, Quad, float, float, LineDrawingInfo, float) Draws a striped pattern inside the outside shape without drawing in the inside shape. The inside shape does not have to be completely inside the outside shape. public static void DrawStriped(this Polygon outsideShape, Quad insideShape, float spacing, float angleDeg, LineDrawingInfo striped, float spacingOffset = 0) Parameters outsideShape Polygon The shape for drawing the striped pattern inside. insideShape Quad The shape to not draw any striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. spacingOffset float An offset for the spacing between 0 and 1. Can be used for a continuously moving pattern. DrawStriped(Polygon, Rect, float, float, LineDrawingInfo, float) Draws a striped pattern inside the outside shape without drawing in the inside shape. The inside shape does not have to be completely inside the outside shape. public static void DrawStriped(this Polygon outsideShape, Rect insideShape, float spacing, float angleDeg, LineDrawingInfo striped, float spacingOffset = 0) Parameters outsideShape Polygon The shape for drawing the striped pattern inside. insideShape Rect The shape to not draw any striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. spacingOffset float An offset for the spacing between 0 and 1. Can be used for a continuously moving pattern. DrawStriped(Polygon, Triangle, float, float, LineDrawingInfo, float) Draws a striped pattern inside the outside shape without drawing in the inside shape. The inside shape does not have to be completely inside the outside shape. public static void DrawStriped(this Polygon outsideShape, Triangle insideShape, float spacing, float angleDeg, LineDrawingInfo striped, float spacingOffset = 0) Parameters outsideShape Polygon The shape for drawing the striped pattern inside. insideShape Triangle The shape to not draw any striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. spacingOffset float An offset for the spacing between 0 and 1. Can be used for a continuously moving pattern. DrawStriped(Polygon, CurveFloat, float, LineDrawingInfo) Draws a striped pattern inside the specified shape. public static void DrawStriped(this Polygon polygon, CurveFloat spacingCurve, float angleDeg, LineDrawingInfo striped) Parameters polygon Polygon The shape for drawing the striped pattern inside. spacingCurve CurveFloat The curve to determine the spacing along the shape. The value of each key has to be bigger than 0, otherwise the function will return early! angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. DrawStriped(Polygon, CurveFloat, float, LineDrawingInfo, LineDrawingInfo) Draws an alternating striped pattern inside the specified shape. public static void DrawStriped(this Polygon polygon, CurveFloat spacingCurve, float angleDeg, LineDrawingInfo striped, LineDrawingInfo alternatingStriped) Parameters polygon Polygon The shape for drawing the striped pattern inside. spacingCurve CurveFloat The curve to determine the spacing along the shape. The value of each key has to be bigger than 0, otherwise the function will return early! angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The first line drawing info for drawing even lines. alternatingStriped LineDrawingInfo The second line drawing info for drawing odd lines. DrawStriped(Polygon, CurveFloat, float, params LineDrawingInfo[]) Draws an alternating striped pattern inside the specified shape. public static void DrawStriped(this Polygon polygon, CurveFloat spacingCurve, float angleDeg, params LineDrawingInfo[] alternatingStriped) Parameters polygon Polygon The shape for drawing the striped pattern inside. spacingCurve CurveFloat The curve to determine the spacing along the shape. The value of each key has to be bigger than 0, otherwise the function will return early! angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. alternatingStriped LineDrawingInfo[] The line drawing infos for drawing each line. Each info is used in sequence and wraps around if there are more lines. DrawStriped(Polygon, float, float, LineDrawingInfo, LineDrawingInfo) Draws an alternating striped pattern inside the specified shape. public static void DrawStriped(this Polygon polygon, float spacing, float angleDeg, LineDrawingInfo striped, LineDrawingInfo alternatingStriped) Parameters polygon Polygon The shape for drawing the striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The first line drawing info for drawing even lines. alternatingStriped LineDrawingInfo The second line drawing info for drawing odd lines. DrawStriped(Polygon, float, float, LineDrawingInfo, float) Draws a striped pattern inside the specified shape. public static void DrawStriped(this Polygon polygon, float spacing, float angleDeg, LineDrawingInfo striped, float spacingOffset = 0) Parameters polygon Polygon The shape for drawing the striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. spacingOffset float An offset for the spacing between 0 and 1. Can be used for a continuously moving pattern. DrawStriped(Polygon, float, float, params LineDrawingInfo[]) Draws an alternating striped pattern inside the specified shape. public static void DrawStriped(this Polygon polygon, float spacing, float angleDeg, params LineDrawingInfo[] alternatingStriped) Parameters polygon Polygon The shape for drawing the striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. alternatingStriped LineDrawingInfo[] The line drawing infos for drawing each line. Each info is used in sequence and wraps around if there are more lines. DrawStriped(Quad, Circle, float, float, LineDrawingInfo, float) Draws a striped pattern inside the outside shape without drawing in the inside shape. The inside shape does not have to be completely inside the outside shape. public static void DrawStriped(this Quad outsideShape, Circle insideShape, float spacing, float angleDeg, LineDrawingInfo striped, float spacingOffset = 0) Parameters outsideShape Quad The shape for drawing the striped pattern inside. insideShape Circle The shape to not draw any striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. spacingOffset float An offset for the spacing between 0 and 1. Can be used for a continuously moving pattern. DrawStriped(Quad, Polygon, float, float, LineDrawingInfo, float) Draws a striped pattern inside the outside shape without drawing in the inside shape. The inside shape does not have to be completely inside the outside shape. public static void DrawStriped(this Quad outsideShape, Polygon insideShape, float spacing, float angleDeg, LineDrawingInfo striped, float spacingOffset = 0) Parameters outsideShape Quad The shape for drawing the striped pattern inside. insideShape Polygon The shape to not draw any striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. spacingOffset float An offset for the spacing between 0 and 1. Can be used for a continuously moving pattern. DrawStriped(Quad, Quad, float, float, LineDrawingInfo, float) Draws a striped pattern inside the outside shape without drawing in the inside shape. The inside shape does not have to be completely inside the outside shape. public static void DrawStriped(this Quad outsideShape, Quad insideShape, float spacing, float angleDeg, LineDrawingInfo striped, float spacingOffset = 0) Parameters outsideShape Quad The shape for drawing the striped pattern inside. insideShape Quad The shape to not draw any striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. spacingOffset float An offset for the spacing between 0 and 1. Can be used for a continuously moving pattern. DrawStriped(Quad, Rect, float, float, LineDrawingInfo, float) Draws a striped pattern inside the outside shape without drawing in the inside shape. The inside shape does not have to be completely inside the outside shape. public static void DrawStriped(this Quad outsideShape, Rect insideShape, float spacing, float angleDeg, LineDrawingInfo striped, float spacingOffset = 0) Parameters outsideShape Quad The shape for drawing the striped pattern inside. insideShape Rect The shape to not draw any striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. spacingOffset float An offset for the spacing between 0 and 1. Can be used for a continuously moving pattern. DrawStriped(Quad, Triangle, float, float, LineDrawingInfo, float) Draws a striped pattern inside the outside shape without drawing in the inside shape. The inside shape does not have to be completely inside the outside shape. public static void DrawStriped(this Quad outsideShape, Triangle insideShape, float spacing, float angleDeg, LineDrawingInfo striped, float spacingOffset = 0) Parameters outsideShape Quad The shape for drawing the striped pattern inside. insideShape Triangle The shape to not draw any striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. spacingOffset float An offset for the spacing between 0 and 1. Can be used for a continuously moving pattern. DrawStriped(Quad, CurveFloat, float, LineDrawingInfo) Draws a striped pattern inside the specified shape. public static void DrawStriped(this Quad quad, CurveFloat spacingCurve, float angleDeg, LineDrawingInfo striped) Parameters quad Quad The shape for drawing the striped pattern inside. spacingCurve CurveFloat The curve to determine the spacing along the shape. The value of each key has to be bigger than 0, otherwise the function will return early! angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. DrawStriped(Quad, CurveFloat, float, LineDrawingInfo, LineDrawingInfo) Draws an alternating striped pattern inside the specified shape. public static void DrawStriped(this Quad quad, CurveFloat spacingCurve, float angleDeg, LineDrawingInfo striped, LineDrawingInfo alternatingStriped) Parameters quad Quad The shape for drawing the striped pattern inside. spacingCurve CurveFloat The curve to determine the spacing along the shape. The value of each key has to be bigger than 0, otherwise the function will return early! angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The first line drawing info for drawing even lines. alternatingStriped LineDrawingInfo The second line drawing info for drawing odd lines. DrawStriped(Quad, CurveFloat, float, params LineDrawingInfo[]) Draws an alternating striped pattern inside the specified shape. public static void DrawStriped(this Quad quad, CurveFloat spacingCurve, float angleDeg, params LineDrawingInfo[] alternatingStriped) Parameters quad Quad The shape for drawing the striped pattern inside. spacingCurve CurveFloat The curve to determine the spacing along the shape. The value of each key has to be bigger than 0, otherwise the function will return early! angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. alternatingStriped LineDrawingInfo[] The line drawing infos for drawing each line. Each info is used in sequence and wraps around if there are more lines. DrawStriped(Quad, float, float, LineDrawingInfo, LineDrawingInfo) Draws an alternating striped pattern inside the specified shape. public static void DrawStriped(this Quad quad, float spacing, float angleDeg, LineDrawingInfo striped, LineDrawingInfo alternatingStriped) Parameters quad Quad The shape for drawing the striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The first line drawing info for drawing even lines. alternatingStriped LineDrawingInfo The second line drawing info for drawing odd lines. DrawStriped(Quad, float, float, LineDrawingInfo, float) Draws a striped pattern inside the specified shape. public static void DrawStriped(this Quad quad, float spacing, float angleDeg, LineDrawingInfo striped, float spacingOffset = 0) Parameters quad Quad The shape for drawing the striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. spacingOffset float An offset for the spacing between 0 and 1. Can be used for a continuously moving pattern. DrawStriped(Quad, float, float, params LineDrawingInfo[]) Draws an alternating striped pattern inside the specified shape. public static void DrawStriped(this Quad quad, float spacing, float angleDeg, params LineDrawingInfo[] alternatingStriped) Parameters quad Quad The shape for drawing the striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. alternatingStriped LineDrawingInfo[] The line drawing infos for drawing each line. Each info is used in sequence and wraps around if there are more lines. DrawStriped(Rect, Circle, float, float, LineDrawingInfo, float) Draws a striped pattern inside the outside shape without drawing in the inside shape. The inside shape does not have to be completely inside the outside shape. public static void DrawStriped(this Rect outsideShape, Circle insideShape, float spacing, float angleDeg, LineDrawingInfo striped, float spacingOffset = 0) Parameters outsideShape Rect The shape for drawing the striped pattern inside. insideShape Circle The shape to not draw any striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. spacingOffset float An offset for the spacing between 0 and 1. Can be used for a continuously moving pattern. DrawStriped(Rect, Polygon, float, float, LineDrawingInfo, float) Draws a striped pattern inside the outside shape without drawing in the inside shape. The inside shape does not have to be completely inside the outside shape. public static void DrawStriped(this Rect outsideShape, Polygon insideShape, float spacing, float angleDeg, LineDrawingInfo striped, float spacingOffset = 0) Parameters outsideShape Rect The shape for drawing the striped pattern inside. insideShape Polygon The shape to not draw any striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. spacingOffset float An offset for the spacing between 0 and 1. Can be used for a continuously moving pattern. DrawStriped(Rect, Quad, float, float, LineDrawingInfo, float) Draws a striped pattern inside the outside shape without drawing in the inside shape. The inside shape does not have to be completely inside the outside shape. public static void DrawStriped(this Rect outsideShape, Quad insideShape, float spacing, float angleDeg, LineDrawingInfo striped, float spacingOffset = 0) Parameters outsideShape Rect The shape for drawing the striped pattern inside. insideShape Quad The shape to not draw any striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. spacingOffset float An offset for the spacing between 0 and 1. Can be used for a continuously moving pattern. DrawStriped(Rect, Rect, float, float, LineDrawingInfo, float) Draws a striped pattern inside the outside shape without drawing in the inside shape. The inside shape does not have to be completely inside the outside shape. public static void DrawStriped(this Rect outsideShape, Rect insideShape, float spacing, float angleDeg, LineDrawingInfo striped, float spacingOffset = 0) Parameters outsideShape Rect The shape for drawing the striped pattern inside. insideShape Rect The shape to not draw any striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. spacingOffset float An offset for the spacing between 0 and 1. Can be used for a continuously moving pattern. DrawStriped(Rect, Triangle, float, float, LineDrawingInfo, float) Draws a striped pattern inside the outside shape without drawing in the inside shape. The inside shape does not have to be completely inside the outside shape. public static void DrawStriped(this Rect outsideShape, Triangle insideShape, float spacing, float angleDeg, LineDrawingInfo striped, float spacingOffset = 0) Parameters outsideShape Rect The shape for drawing the striped pattern inside. insideShape Triangle The shape to not draw any striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. spacingOffset float An offset for the spacing between 0 and 1. Can be used for a continuously moving pattern. DrawStriped(Rect, CurveFloat, float, LineDrawingInfo) Draws a striped pattern inside the specified shape. public static void DrawStriped(this Rect rect, CurveFloat spacingCurve, float angleDeg, LineDrawingInfo striped) Parameters rect Rect The shape for drawing the striped pattern inside. spacingCurve CurveFloat The curve to determine the spacing along the shape. The value of each key has to be bigger than 0, otherwise the function will return early! angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. DrawStriped(Rect, CurveFloat, float, LineDrawingInfo, LineDrawingInfo) Draws an alternating striped pattern inside the specified shape. public static void DrawStriped(this Rect rect, CurveFloat spacingCurve, float angleDeg, LineDrawingInfo striped, LineDrawingInfo alternatingStriped) Parameters rect Rect The shape for drawing the striped pattern inside. spacingCurve CurveFloat The curve to determine the spacing along the shape. The value of each key has to be bigger than 0, otherwise the function will return early! angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The first line drawing info for drawing even lines. alternatingStriped LineDrawingInfo The second line drawing info for drawing odd lines. DrawStriped(Rect, CurveFloat, float, params LineDrawingInfo[]) Draws an alternating striped pattern inside the specified shape. public static void DrawStriped(this Rect rect, CurveFloat spacingCurve, float angleDeg, params LineDrawingInfo[] alternatingStriped) Parameters rect Rect The shape for drawing the striped pattern inside. spacingCurve CurveFloat The curve to determine the spacing along the shape. The value of each key has to be bigger than 0, otherwise the function will return early! angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. alternatingStriped LineDrawingInfo[] The line drawing infos for drawing each line. Each info is used in sequence and wraps around if there are more lines. DrawStriped(Rect, float, float, LineDrawingInfo, LineDrawingInfo) Draws an alternating striped pattern inside the specified shape. public static void DrawStriped(this Rect rect, float spacing, float angleDeg, LineDrawingInfo striped, LineDrawingInfo alternatingStriped) Parameters rect Rect The shape for drawing the striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The first line drawing info for drawing even lines. alternatingStriped LineDrawingInfo The second line drawing info for drawing odd lines. DrawStriped(Rect, float, float, LineDrawingInfo, float) Draws a striped pattern inside the specified shape. public static void DrawStriped(this Rect rect, float spacing, float angleDeg, LineDrawingInfo striped, float spacingOffset = 0) Parameters rect Rect The shape for drawing the striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. spacingOffset float An offset for the spacing between 0 and 1. Can be used for a continuously moving pattern. DrawStriped(Rect, float, float, params LineDrawingInfo[]) Draws an alternating striped pattern inside the specified shape. public static void DrawStriped(this Rect rect, float spacing, float angleDeg, params LineDrawingInfo[] alternatingStriped) Parameters rect Rect The shape for drawing the striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. alternatingStriped LineDrawingInfo[] The line drawing infos for drawing each line. Each info is used in sequence and wraps around if there are more lines. DrawStriped(Triangle, Circle, float, float, LineDrawingInfo, float) Draws a striped pattern inside the outside shape without drawing in the inside shape. The inside shape does not have to be completely inside the outside shape. public static void DrawStriped(this Triangle outsideShape, Circle insideShape, float spacing, float angleDeg, LineDrawingInfo striped, float spacingOffset = 0) Parameters outsideShape Triangle The shape for drawing the striped pattern inside. insideShape Circle The shape to not draw any striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. spacingOffset float An offset for the spacing between 0 and 1. Can be used for a continuously moving pattern. DrawStriped(Triangle, Polygon, float, float, LineDrawingInfo, float) Draws a striped pattern inside the outside shape without drawing in the inside shape. The inside shape does not have to be completely inside the outside shape. public static void DrawStriped(this Triangle outsideShape, Polygon insideShape, float spacing, float angleDeg, LineDrawingInfo striped, float spacingOffset = 0) Parameters outsideShape Triangle The shape for drawing the striped pattern inside. insideShape Polygon The shape to not draw any striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. spacingOffset float An offset for the spacing between 0 and 1. Can be used for a continuously moving pattern. DrawStriped(Triangle, Quad, float, float, LineDrawingInfo, float) Draws a striped pattern inside the outside shape without drawing in the inside shape. The inside shape does not have to be completely inside the outside shape. public static void DrawStriped(this Triangle outsideShape, Quad insideShape, float spacing, float angleDeg, LineDrawingInfo striped, float spacingOffset = 0) Parameters outsideShape Triangle The shape for drawing the striped pattern inside. insideShape Quad The shape to not draw any striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. spacingOffset float An offset for the spacing between 0 and 1. Can be used for a continuously moving pattern. DrawStriped(Triangle, Rect, float, float, LineDrawingInfo, float) Draws a striped pattern inside the outside shape without drawing in the inside shape. The inside shape does not have to be completely inside the outside shape. public static void DrawStriped(this Triangle outsideShape, Rect insideShape, float spacing, float angleDeg, LineDrawingInfo striped, float spacingOffset = 0) Parameters outsideShape Triangle The shape for drawing the striped pattern inside. insideShape Rect The shape to not draw any striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. spacingOffset float An offset for the spacing between 0 and 1. Can be used for a continuously moving pattern. DrawStriped(Triangle, Triangle, float, float, LineDrawingInfo, float) Draws a striped pattern inside the outside shape without drawing in the inside shape. The inside shape does not have to be completely inside the outside shape. public static void DrawStriped(this Triangle outsideShape, Triangle insideShape, float spacing, float angleDeg, LineDrawingInfo striped, float spacingOffset = 0) Parameters outsideShape Triangle The shape for drawing the striped pattern inside. insideShape Triangle The shape to not draw any striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. spacingOffset float An offset for the spacing between 0 and 1. Can be used for a continuously moving pattern. DrawStriped(Triangle, CurveFloat, float, LineDrawingInfo) Draws a striped pattern inside the specified shape. public static void DrawStriped(this Triangle triangle, CurveFloat spacingCurve, float angleDeg, LineDrawingInfo striped) Parameters triangle Triangle The shape for drawing the striped pattern inside. spacingCurve CurveFloat The curve to determine the spacing along the shape. The value of each key has to be bigger than 0, otherwise the function will return early! angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. DrawStriped(Triangle, CurveFloat, float, LineDrawingInfo, LineDrawingInfo) Draws an alternating striped pattern inside the specified shape. public static void DrawStriped(this Triangle triangle, CurveFloat spacingCurve, float angleDeg, LineDrawingInfo striped, LineDrawingInfo alternatingStriped) Parameters triangle Triangle The shape for drawing the striped pattern inside. spacingCurve CurveFloat The curve to determine the spacing along the shape. The value of each key has to be bigger than 0, otherwise the function will return early! angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The first line drawing info for drawing even lines. alternatingStriped LineDrawingInfo The second line drawing info for drawing odd lines. DrawStriped(Triangle, CurveFloat, float, params LineDrawingInfo[]) Draws an alternating striped pattern inside the specified shape. public static void DrawStriped(this Triangle triangle, CurveFloat spacingCurve, float angleDeg, params LineDrawingInfo[] alternatingStriped) Parameters triangle Triangle The shape for drawing the striped pattern inside. spacingCurve CurveFloat The curve to determine the spacing along the shape. The value of each key has to be bigger than 0, otherwise the function will return early! angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. alternatingStriped LineDrawingInfo[] The line drawing infos for drawing each line. Each info is used in sequence and wraps around if there are more lines. DrawStriped(Triangle, float, float, LineDrawingInfo, LineDrawingInfo) Draws an alternating striped pattern inside the specified shape. public static void DrawStriped(this Triangle triangle, float spacing, float angleDeg, LineDrawingInfo striped, LineDrawingInfo alternatingStriped) Parameters triangle Triangle The shape for drawing the striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The first line drawing info for drawing even lines. alternatingStriped LineDrawingInfo The second line drawing info for drawing odd lines. DrawStriped(Triangle, float, float, LineDrawingInfo, float) Draws a striped pattern inside the specified shape. public static void DrawStriped(this Triangle triangle, float spacing, float angleDeg, LineDrawingInfo striped, float spacingOffset = 0) Parameters triangle Triangle The shape for drawing the striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. striped LineDrawingInfo The line drawing info for how the lines should be drawn. spacingOffset float An offset for the spacing between 0 and 1. Can be used for a continuously moving pattern. DrawStriped(Triangle, float, float, params LineDrawingInfo[]) Draws an alternating striped pattern inside the specified shape. public static void DrawStriped(this Triangle triangle, float spacing, float angleDeg, params LineDrawingInfo[] alternatingStriped) Parameters triangle Triangle The shape for drawing the striped pattern inside. spacing float How far apart the lines are. angleDeg float The angle of the striped pattern. 0 degrees would be vertical lines, 90 degrees would be horizontal lines. alternatingStriped LineDrawingInfo[] The line drawing infos for drawing each line. Each info is used in sequence and wraps around if there are more lines. DrawStripedRing(Vector2, float, float, float, LineDrawingInfo, LineDrawingInfo, float) Draw an alternating striped ring.Draws lines across the circumference of the ring. Each line starts on the inner radius and ends on the outer radius. public static void DrawStripedRing(Vector2 center, float innerRadius, float outerRadius, float angleSpacingDeg, LineDrawingInfo striped, LineDrawingInfo alternatingStriped, float angleOffset = 0) Parameters center Vector2 The center of the ring. innerRadius float The inner radius of the ring. Should be positive and smaller than the outer radius. outerRadius float The outer radius of the ring. Should be positive and bigger than the inner radius. angleSpacingDeg float The spacing between each line in degrees. striped LineDrawingInfo The line drawing info for how to draw the even numbered lines. alternatingStriped LineDrawingInfo The alternate line drawing info for how to draw the odd numbered lines. angleOffset float The start offset. Value is wrapped between 0 and 1 and multiplied with the angleSpacingDeg. So the min offset is zero and the max offset is angleSpacingDeg! DrawStripedRing(Vector2, float, float, float, LineDrawingInfo, float) Draw a striped ring.Draws lines across the circumference of the ring. Each line starts on the inner radius and ends on the outer radius. public static void DrawStripedRing(Vector2 center, float innerRadius, float outerRadius, float angleSpacingDeg, LineDrawingInfo striped, float angleOffset = 0) Parameters center Vector2 The center of the ring. innerRadius float The inner radius of the ring. Should be positive and smaller than the outer radius. outerRadius float The outer radius of the ring. Should be positive and bigger than the inner radius. angleSpacingDeg float The spacing between each line in degrees. striped LineDrawingInfo The line drawing info for how to draw the lines. angleOffset float The start offset. Value is wrapped between 0 and 1 and multiplied with the angleSpacingDeg. So the min offset is zero and the max offset is angleSpacingDeg! DrawStripedRing(Vector2, float, float, float, float, params LineDrawingInfo[]) Draw an alternating striped ring.Draws lines across the circumference of the ring. Each line starts on the inner radius and ends on the outer radius. public static void DrawStripedRing(Vector2 center, float innerRadius, float outerRadius, float angleSpacingDeg, float angleOffset, params LineDrawingInfo[] alternatingStriped) Parameters center Vector2 The center of the ring. innerRadius float The inner radius of the ring. Should be positive and smaller than the outer radius. outerRadius float The outer radius of the ring. Should be positive and bigger than the inner radius. angleSpacingDeg float The spacing between each line in degrees. angleOffset float The start offset. Value is wrapped between 0 and 1 and multiplied with the angleSpacingDeg. So the min offset is zero and the max offset is angleSpacingDeg! alternatingStriped LineDrawingInfo[] The line drawing infos for how to draw each of the lines based on their number. DrawStripedRing(Vector2, float, float, float, float, float, LineDrawingInfo, LineDrawingInfo, float) Draw a sector of an alternating striped ring.Draws lines across the circumference of the ring. Each line starts on the inner radius and ends on the outer radius. public static void DrawStripedRing(Vector2 center, float innerRadius, float outerRadius, float angleSpacingDeg, float minAngleDeg, float maxAngleDeg, LineDrawingInfo striped, LineDrawingInfo alternatingStriped, float angleOffset = 0) Parameters center Vector2 The center of the ring. innerRadius float The inner radius of the ring. Should be positive and smaller than the outer radius. outerRadius float The outer radius of the ring. Should be positive and bigger than the inner radius. angleSpacingDeg float The spacing between each line in degrees. minAngleDeg float The start of the sector in degrees. Can be negative and/or bigger than maxAngleDeg. maxAngleDeg float The end of the sector in degrees. Can be negative and/or smaller than the minAngleDeg. striped LineDrawingInfo The line drawing info for how to draw the even numbered lines. alternatingStriped LineDrawingInfo The line drawing info for how to draw the odd numbered lines. angleOffset float The start offset. Value is wrapped between 0 and 1 and multiplied with the angleSpacingDeg. So the min offset is zero and the max offset is angleSpacingDeg! DrawStripedRing(Vector2, float, float, float, float, float, LineDrawingInfo, float) Draw a sector of striped ring.Draws lines across the circumference of the ring. Each line starts on the inner radius and ends on the outer radius. public static void DrawStripedRing(Vector2 center, float innerRadius, float outerRadius, float angleSpacingDeg, float minAngleDeg, float maxAngleDeg, LineDrawingInfo striped, float angleOffset = 0) Parameters center Vector2 The center of the ring. innerRadius float The inner radius of the ring. Should be positive and smaller than the outer radius. outerRadius float The outer radius of the ring. Should be positive and bigger than the inner radius. angleSpacingDeg float The spacing between each line in degrees. minAngleDeg float The start of the sector in degrees. Can be negative and/or bigger than maxAngleDeg. maxAngleDeg float The end of the sector in degrees. Can be negative and/or smaller than the minAngleDeg. striped LineDrawingInfo The line drawing info for how to draw the lines. angleOffset float The start offset. Value is wrapped between 0 and 1 and multiplied with the angleSpacingDeg. So the min offset is zero and the max offset is angleSpacingDeg! DrawStripedRing(Vector2, float, float, float, float, float, float, params LineDrawingInfo[]) Draw a sector of an alternating striped ring.Draws lines across the circumference of the ring. Each line starts on the inner radius and ends on the outer radius. public static void DrawStripedRing(Vector2 center, float innerRadius, float outerRadius, float angleSpacingDeg, float minAngleDeg, float maxAngleDeg, float angleOffset, params LineDrawingInfo[] alternatingStriped) Parameters center Vector2 The center of the ring. innerRadius float The inner radius of the ring. Should be positive and smaller than the outer radius. outerRadius float The outer radius of the ring. Should be positive and bigger than the inner radius. angleSpacingDeg float The spacing between each line in degrees. minAngleDeg float The start of the sector in degrees. Can be negative and/or bigger than maxAngleDeg. maxAngleDeg float The end of the sector in degrees. Can be negative and/or smaller than the minAngleDeg. angleOffset float The start offset. Value is wrapped between 0 and 1 and multiplied with the angleSpacingDeg. So the min offset is zero and the max offset is angleSpacingDeg! alternatingStriped LineDrawingInfo[] The line drawing infos for how to draw the each of the numbered lines."
  },
  "api/ShapeEngine.StaticLib.Drawing.ShapeTriangleDrawing.html": {
    "href": "api/ShapeEngine.StaticLib.Drawing.ShapeTriangleDrawing.html",
    "title": "Class ShapeTriangleDrawing | ShapeEngine",
    "summary": "Class ShapeTriangleDrawing Namespace ShapeEngine.StaticLib.Drawing Assembly ShapeEngine.dll public static class ShapeTriangleDrawing Inheritance object ShapeTriangleDrawing Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Draw(Triangle, ColorRgba) public static void Draw(this Triangle t, ColorRgba color) Parameters t Triangle color ColorRgba Draw(Triangulation, ColorRgba) public static void Draw(this Triangulation triangles, ColorRgba color) Parameters triangles Triangulation color ColorRgba DrawLines(Triangle, LineDrawingInfo) public static void DrawLines(this Triangle t, LineDrawingInfo lineInfo) Parameters t Triangle lineInfo LineDrawingInfo DrawLines(Triangle, LineDrawingInfo, float, Vector2) public static void DrawLines(this Triangle t, LineDrawingInfo lineInfo, float rotDeg, Vector2 rotOrigin) Parameters t Triangle lineInfo LineDrawingInfo rotDeg float rotOrigin Vector2 DrawLines(Triangle, float, ColorRgba, LineCapType, int) public static void DrawLines(this Triangle t, float lineThickness, ColorRgba color, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters t Triangle lineThickness float color ColorRgba capType LineCapType capPoints int DrawLines(Triangle, float, ColorRgba, float, LineCapType, int) public static void DrawLines(this Triangle t, float lineThickness, ColorRgba color, float sideLengthFactor, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters t Triangle lineThickness float color ColorRgba sideLengthFactor float capType LineCapType capPoints int DrawLines(Triangulation, LineDrawingInfo) public static void DrawLines(this Triangulation triangles, LineDrawingInfo lineInfo) Parameters triangles Triangulation lineInfo LineDrawingInfo DrawLines(Triangulation, float, ColorRgba, LineCapType, int) public static void DrawLines(this Triangulation triangles, float lineThickness, ColorRgba color, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters triangles Triangulation lineThickness float color ColorRgba capType LineCapType capPoints int DrawLinesPercentage(Triangle, float, LineDrawingInfo) Draws a certain percentage of an outline. public static void DrawLinesPercentage(this Triangle t, float f, LineDrawingInfo lineInfo) Parameters t Triangle f float The percentage of the outline to draw. Negative value reverses the direction (cw). Integer part can be used to change starting corner. 0.35 would start at corner a go in ccw direction and draw 35% of the outline. -2.7 would start at b (the third corner in cw direction) and draw in cw direction 70% of the outline. lineInfo LineDrawingInfo DrawLinesPercentage(Triangle, float, LineDrawingInfo, float, Vector2) Draws a certain percentage of an outline. public static void DrawLinesPercentage(this Triangle t, float f, LineDrawingInfo lineInfo, float rotDeg, Vector2 rotOrigin) Parameters t Triangle f float The percentage of the outline to draw. Negative value reverses the direction (cw). Integer part can be used to change starting corner. 0.35 would start at corner a go in ccw direction and draw 35% of the outline. -2.7 would start at b (the third corner in cw direction) and draw in cw direction 70% of the outline. lineInfo LineDrawingInfo rotDeg float rotOrigin Vector2 Origin is in absolute space. DrawLinesPercentage(Triangle, float, float, ColorRgba, LineCapType, int) Draws a certain percentage of an outline. public static void DrawLinesPercentage(this Triangle t, float f, float lineThickness, ColorRgba color, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters t Triangle f float The percentage of the outline to draw. Negative value reverses the direction (cw). Integer part can be used to change starting corner. 0.35 would start at corner a go in ccw direction and draw 35% of the outline. -2.7 would start at b (the third corner in cw direction) and draw in cw direction 70% of the outline. lineThickness float color ColorRgba capType LineCapType capPoints int DrawLinesScaled(Triangle, LineDrawingInfo, float, Vector2, float, float) Draws a rect where each side can be scaled towards the origin of the side. public static void DrawLinesScaled(this Triangle t, LineDrawingInfo lineInfo, float rotDeg, Vector2 rotOrigin, float sideScaleFactor, float sideScaleOrigin = 0.5) Parameters t Triangle The triangle to draw. lineInfo LineDrawingInfo How to draw the lines. rotDeg float The rotation of the triangle. rotOrigin Vector2 Point to rotate the triangle around. sideScaleFactor float The scale factor for each side. 0f means no triangle is drawn, 1f means normal triangle is drawn, 0.5 means each side is half as long. sideScaleOrigin float The point along the line to scale from in both directions. DrawTriangle(Vector2, Vector2, Vector2, ColorRgba) public static void DrawTriangle(Vector2 a, Vector2 b, Vector2 c, ColorRgba color) Parameters a Vector2 b Vector2 c Vector2 color ColorRgba DrawTriangleLines(Vector2, Vector2, Vector2, LineDrawingInfo) public static void DrawTriangleLines(Vector2 a, Vector2 b, Vector2 c, LineDrawingInfo lineInfo) Parameters a Vector2 b Vector2 c Vector2 lineInfo LineDrawingInfo DrawTriangleLines(Vector2, Vector2, Vector2, float, ColorRgba, LineCapType, int) public static void DrawTriangleLines(Vector2 a, Vector2 b, Vector2 c, float lineThickness, ColorRgba color, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters a Vector2 b Vector2 c Vector2 lineThickness float color ColorRgba capType LineCapType capPoints int DrawTriangleLines(Vector2, Vector2, Vector2, float, ColorRgba, float, LineCapType, int) public static void DrawTriangleLines(Vector2 a, Vector2 b, Vector2 c, float lineThickness, ColorRgba color, float sideLengthFactor, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters a Vector2 b Vector2 c Vector2 lineThickness float color ColorRgba sideLengthFactor float capType LineCapType capPoints int DrawTriangleLinesPercentage(Vector2, Vector2, Vector2, float, LineDrawingInfo) Draws a certain percentage of an outline. public static void DrawTriangleLinesPercentage(Vector2 a, Vector2 b, Vector2 c, float f, LineDrawingInfo lineInfo) Parameters a Vector2 b Vector2 c Vector2 f float The percentage of the outline to draw. Negative value reverses the direction (cw). Integer part can be used to change starting corner. 0.35 would start at corner a go in ccw direction and draw 35% of the outline. -2.7 would start at b (the third corner in cw direction) and draw in cw direction 70% of the outline. lineInfo LineDrawingInfo DrawTriangleLinesPercentage(Vector2, Vector2, Vector2, float, float, ColorRgba, LineCapType, int) Draws a certain percentage of an outline. public static void DrawTriangleLinesPercentage(Vector2 a, Vector2 b, Vector2 c, float f, float lineThickness, ColorRgba color, LineCapType capType = LineCapType.CappedExtended, int capPoints = 2) Parameters a Vector2 b Vector2 c Vector2 f float The percentage of the outline to draw. Negative value reverses the direction (cw). Integer part can be used to change starting corner. 0.35 would start at corner a go in ccw direction and draw 35% of the outline. -2.7 would start at b (the third corner in cw direction) and draw in cw direction 70% of the outline. lineThickness float color ColorRgba capType LineCapType capPoints int DrawVertices(Triangle, float, ColorRgba, int) public static void DrawVertices(this Triangle t, float vertexRadius, ColorRgba color, int circleSegments = 8) Parameters t Triangle vertexRadius float color ColorRgba circleSegments int"
  },
  "api/ShapeEngine.StaticLib.Drawing.ShapeUIDrawing.html": {
    "href": "api/ShapeEngine.StaticLib.Drawing.ShapeUIDrawing.html",
    "title": "Class ShapeUIDrawing | ShapeEngine",
    "summary": "Class ShapeUIDrawing Namespace ShapeEngine.StaticLib.Drawing Assembly ShapeEngine.dll public static class ShapeUIDrawing Inheritance object ShapeUIDrawing Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DrawBar(Rect, Vector2, float, float, ColorRgba, ColorRgba, float, float, float, float) public static void DrawBar(this Rect rect, Vector2 pivot, float angleDeg, float f, ColorRgba barColorRgba, ColorRgba bgColorRgba, float left = 0, float right = 1, float top = 0, float bottom = 0) Parameters rect Rect pivot Vector2 angleDeg float f float barColorRgba ColorRgba bgColorRgba ColorRgba left float right float top float bottom float DrawBar(Rect, float, ColorRgba, ColorRgba, float, float, float, float) public static void DrawBar(this Rect rect, float f, ColorRgba barColorRgba, ColorRgba bgColorRgba, float left = 0, float right = 1, float top = 0, float bottom = 0) Parameters rect Rect f float barColorRgba ColorRgba bgColorRgba ColorRgba left float right float top float bottom float DrawOutlineBar(Circle, float, float, ColorRgba) public static void DrawOutlineBar(this Circle c, float thickness, float f, ColorRgba color) Parameters c Circle thickness float f float color ColorRgba DrawOutlineBar(Circle, float, float, float, ColorRgba) public static void DrawOutlineBar(this Circle c, float startOffsetDeg, float thickness, float f, ColorRgba color) Parameters c Circle startOffsetDeg float thickness float f float color ColorRgba DrawOutlineBar(Rect, Vector2, float, float, float, ColorRgba) public static void DrawOutlineBar(this Rect rect, Vector2 pivot, float angleDeg, float thickness, float f, ColorRgba color) Parameters rect Rect pivot Vector2 angleDeg float thickness float f float color ColorRgba DrawOutlineBar(Rect, float, float, ColorRgba) public static void DrawOutlineBar(this Rect rect, float thickness, float f, ColorRgba color) Parameters rect Rect thickness float f float color ColorRgba"
  },
  "api/ShapeEngine.StaticLib.Drawing.html": {
    "href": "api/ShapeEngine.StaticLib.Drawing.html",
    "title": "Namespace ShapeEngine.StaticLib.Drawing | ShapeEngine",
    "summary": "Namespace ShapeEngine.StaticLib.Drawing Classes ShapeCircleDrawing ShapeCustomDrawing ShapeDrawing ShapeGappedDrawing ShapeLineDrawing ShapePointDrawing ShapePolygonDrawing ShapePolylineDrawing ShapeQuadDrawing ShapeRayDrawing ShapeRectDrawing ShapeRingDrawing ShapeSegmentDrawing ShapeStripedDrawing ShapeTriangleDrawing ShapeUIDrawing"
  },
  "api/ShapeEngine.StaticLib.IdCounter.html": {
    "href": "api/ShapeEngine.StaticLib.IdCounter.html",
    "title": "Class IdCounter | ShapeEngine",
    "summary": "Class IdCounter Namespace ShapeEngine.StaticLib Assembly ShapeEngine.dll public class IdCounter Inheritance object IdCounter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields InvalidId public static readonly uint InvalidId Field Value uint Properties NextId public uint NextId { get; } Property Value uint Methods AdvanceTo(uint) public void AdvanceTo(uint id) Parameters id uint Reset() public void Reset()"
  },
  "api/ShapeEngine.StaticLib.Polygons.html": {
    "href": "api/ShapeEngine.StaticLib.Polygons.html",
    "title": "Class Polygons | ShapeEngine",
    "summary": "Class Polygons Namespace ShapeEngine.StaticLib Assembly ShapeEngine.dll public class Polygons : List<Polygon>, IList<Polygon>, ICollection<Polygon>, IReadOnlyList<Polygon>, IReadOnlyCollection<Polygon>, IEnumerable<Polygon>, IList, ICollection, IEnumerable Inheritance object List<Polygon> Polygons Implements IList<Polygon> ICollection<Polygon> IReadOnlyList<Polygon> IReadOnlyCollection<Polygon> IEnumerable<Polygon> IList ICollection IEnumerable Inherited Members List<Polygon>.Add(Polygon) List<Polygon>.AddRange(IEnumerable<Polygon>) List<Polygon>.AsReadOnly() List<Polygon>.BinarySearch(int, int, Polygon, IComparer<Polygon>) List<Polygon>.BinarySearch(Polygon) List<Polygon>.BinarySearch(Polygon, IComparer<Polygon>) List<Polygon>.Clear() List<Polygon>.Contains(Polygon) List<Polygon>.ConvertAll<TOutput>(Converter<Polygon, TOutput>) List<Polygon>.CopyTo(int, Polygon[], int, int) List<Polygon>.CopyTo(Polygon[]) List<Polygon>.CopyTo(Polygon[], int) List<Polygon>.EnsureCapacity(int) List<Polygon>.Exists(Predicate<Polygon>) List<Polygon>.Find(Predicate<Polygon>) List<Polygon>.FindAll(Predicate<Polygon>) List<Polygon>.FindIndex(int, int, Predicate<Polygon>) List<Polygon>.FindIndex(int, Predicate<Polygon>) List<Polygon>.FindIndex(Predicate<Polygon>) List<Polygon>.FindLast(Predicate<Polygon>) List<Polygon>.FindLastIndex(int, int, Predicate<Polygon>) List<Polygon>.FindLastIndex(int, Predicate<Polygon>) List<Polygon>.FindLastIndex(Predicate<Polygon>) List<Polygon>.ForEach(Action<Polygon>) List<Polygon>.GetEnumerator() List<Polygon>.GetRange(int, int) List<Polygon>.IndexOf(Polygon) List<Polygon>.IndexOf(Polygon, int) List<Polygon>.IndexOf(Polygon, int, int) List<Polygon>.Insert(int, Polygon) List<Polygon>.InsertRange(int, IEnumerable<Polygon>) List<Polygon>.LastIndexOf(Polygon) List<Polygon>.LastIndexOf(Polygon, int) List<Polygon>.LastIndexOf(Polygon, int, int) List<Polygon>.Remove(Polygon) List<Polygon>.RemoveAll(Predicate<Polygon>) List<Polygon>.RemoveAt(int) List<Polygon>.RemoveRange(int, int) List<Polygon>.Reverse() List<Polygon>.Reverse(int, int) List<Polygon>.Slice(int, int) List<Polygon>.Sort() List<Polygon>.Sort(IComparer<Polygon>) List<Polygon>.Sort(Comparison<Polygon>) List<Polygon>.Sort(int, int, IComparer<Polygon>) List<Polygon>.ToArray() List<Polygon>.TrimExcess() List<Polygon>.TrueForAll(Predicate<Polygon>) List<Polygon>.Capacity List<Polygon>.Count List<Polygon>.this[int] object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ShapeClipper.GetAllHoles(Polygons) ShapeClipper.GetAllHolesCopy(Polygons) ShapeClipper.Inflate(Polygons, float, JoinType, EndType, float, int) ShapeClipper.RemoveAllHoles(Polygons) ShapeClipper.RemoveAllHolesCopy(Polygons) ShapeClipper.Simplify(Polygons, float, bool) ShapeClipper.SimplifyRDP(Polygons, float) ShapeClipper.ToClipperPaths(IEnumerable<Polygon>) Constructors Polygons() public Polygons() Polygons(params Polygon[]) public Polygons(params Polygon[] polygons) Parameters polygons Polygon[] Polygons(IEnumerable<Polygon>) public Polygons(IEnumerable<Polygon> polygons) Parameters polygons IEnumerable<Polygon> Polygons(int) public Polygons(int capacity) Parameters capacity int"
  },
  "api/ShapeEngine.StaticLib.Polylines.html": {
    "href": "api/ShapeEngine.StaticLib.Polylines.html",
    "title": "Class Polylines | ShapeEngine",
    "summary": "Class Polylines Namespace ShapeEngine.StaticLib Assembly ShapeEngine.dll public class Polylines : List<Polyline>, IList<Polyline>, ICollection<Polyline>, IReadOnlyList<Polyline>, IReadOnlyCollection<Polyline>, IEnumerable<Polyline>, IList, ICollection, IEnumerable Inheritance object List<Polyline> Polylines Implements IList<Polyline> ICollection<Polyline> IReadOnlyList<Polyline> IReadOnlyCollection<Polyline> IEnumerable<Polyline> IList ICollection IEnumerable Inherited Members List<Polyline>.Add(Polyline) List<Polyline>.AddRange(IEnumerable<Polyline>) List<Polyline>.AsReadOnly() List<Polyline>.BinarySearch(int, int, Polyline, IComparer<Polyline>) List<Polyline>.BinarySearch(Polyline) List<Polyline>.BinarySearch(Polyline, IComparer<Polyline>) List<Polyline>.Clear() List<Polyline>.Contains(Polyline) List<Polyline>.ConvertAll<TOutput>(Converter<Polyline, TOutput>) List<Polyline>.CopyTo(int, Polyline[], int, int) List<Polyline>.CopyTo(Polyline[]) List<Polyline>.CopyTo(Polyline[], int) List<Polyline>.EnsureCapacity(int) List<Polyline>.Exists(Predicate<Polyline>) List<Polyline>.Find(Predicate<Polyline>) List<Polyline>.FindAll(Predicate<Polyline>) List<Polyline>.FindIndex(int, int, Predicate<Polyline>) List<Polyline>.FindIndex(int, Predicate<Polyline>) List<Polyline>.FindIndex(Predicate<Polyline>) List<Polyline>.FindLast(Predicate<Polyline>) List<Polyline>.FindLastIndex(int, int, Predicate<Polyline>) List<Polyline>.FindLastIndex(int, Predicate<Polyline>) List<Polyline>.FindLastIndex(Predicate<Polyline>) List<Polyline>.ForEach(Action<Polyline>) List<Polyline>.GetEnumerator() List<Polyline>.GetRange(int, int) List<Polyline>.IndexOf(Polyline) List<Polyline>.IndexOf(Polyline, int) List<Polyline>.IndexOf(Polyline, int, int) List<Polyline>.Insert(int, Polyline) List<Polyline>.InsertRange(int, IEnumerable<Polyline>) List<Polyline>.LastIndexOf(Polyline) List<Polyline>.LastIndexOf(Polyline, int) List<Polyline>.LastIndexOf(Polyline, int, int) List<Polyline>.Remove(Polyline) List<Polyline>.RemoveAll(Predicate<Polyline>) List<Polyline>.RemoveAt(int) List<Polyline>.RemoveRange(int, int) List<Polyline>.Reverse() List<Polyline>.Reverse(int, int) List<Polyline>.Slice(int, int) List<Polyline>.Sort() List<Polyline>.Sort(IComparer<Polyline>) List<Polyline>.Sort(Comparison<Polyline>) List<Polyline>.Sort(int, int, IComparer<Polyline>) List<Polyline>.ToArray() List<Polyline>.TrimExcess() List<Polyline>.TrueForAll(Predicate<Polyline>) List<Polyline>.Capacity List<Polyline>.Count List<Polyline>.this[int] object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ShapeClipper.ToClipperPaths(IEnumerable<Polyline>) Constructors Polylines() public Polylines() Polylines(params Polyline[]) public Polylines(params Polyline[] polylines) Parameters polylines Polyline[] Polylines(IEnumerable<Polyline>) public Polylines(IEnumerable<Polyline> polylines) Parameters polylines IEnumerable<Polyline>"
  },
  "api/ShapeEngine.StaticLib.ShapeClipper.html": {
    "href": "api/ShapeEngine.StaticLib.ShapeClipper.html",
    "title": "Class ShapeClipper | ShapeEngine",
    "summary": "Class ShapeClipper Namespace ShapeEngine.StaticLib Assembly ShapeEngine.dll public static class ShapeClipper Inheritance object ShapeClipper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ClipRect(Rect, Polygon, int) public static PathsD ClipRect(this Rect rect, Polygon poly, int precision = 2) Parameters rect Rect poly Polygon precision int Returns PathsD CreateEllipse(Vector2, float, float, int) public static Polygon CreateEllipse(Vector2 center, float radiusX, float radiusY = 0, int steps = 0) Parameters center Vector2 radiusX float radiusY float steps int Returns Polygon Difference(Polygon, Polygon, FillRule, int) public static PathsD Difference(this Polygon subject, Polygon clip, FillRule fillRule = FillRule.NonZero, int precision = 2) Parameters subject Polygon clip Polygon fillRule FillRule precision int Returns PathsD Difference(Polygon, Polyline, FillRule, int) public static PathsD Difference(this Polygon subject, Polyline polyline, FillRule fillRule = FillRule.NonZero, int precision = 2) Parameters subject Polygon polyline Polyline fillRule FillRule precision int Returns PathsD Difference(Polygon, Segment, FillRule, int) public static PathsD Difference(this Polygon subject, Segment segment, FillRule fillRule = FillRule.NonZero, int precision = 2) Parameters subject Polygon segment Segment fillRule FillRule precision int Returns PathsD Difference(Polygon, Polygons, FillRule, int) public static PathsD Difference(this Polygon clip, Polygons subjects, FillRule fillRule = FillRule.NonZero, int precision = 2) Parameters clip Polygon subjects Polygons fillRule FillRule precision int Returns PathsD DifferenceMany(Polygon, Segments, FillRule, int) public static PathsD DifferenceMany(this Polygon subject, Segments segments, FillRule fillRule = FillRule.NonZero, int precision = 2) Parameters subject Polygon segments Segments fillRule FillRule precision int Returns PathsD DifferenceMany(Polygon, Polygons, FillRule, int) public static PathsD DifferenceMany(this Polygon subject, Polygons clips, FillRule fillRule = FillRule.NonZero, int precision = 2) Parameters subject Polygon clips Polygons fillRule FillRule precision int Returns PathsD DifferenceMany(Polygon, Polylines, FillRule, int) public static PathsD DifferenceMany(this Polygon subject, Polylines polylines, FillRule fillRule = FillRule.NonZero, int precision = 2) Parameters subject Polygon polylines Polylines fillRule FillRule precision int Returns PathsD GetAllHoles(PathsD) public static PathsD GetAllHoles(this PathsD paths) Parameters paths PathsD Returns PathsD GetAllHoles(Polygons) public static Polygons GetAllHoles(this Polygons polygons) Parameters polygons Polygons Returns Polygons GetAllHolesCopy(PathsD) public static PathsD GetAllHolesCopy(this PathsD paths) Parameters paths PathsD Returns PathsD GetAllHolesCopy(Polygons) public static Polygons GetAllHolesCopy(this Polygons polygons) Parameters polygons Polygons Returns Polygons Inflate(Polygon, float, JoinType, EndType, float, int) public static PathsD Inflate(this Polygon poly, float delta, JoinType joinType = JoinType.Square, EndType endType = EndType.Polygon, float miterLimit = 2, int precision = 2) Parameters poly Polygon delta float joinType JoinType endType EndType miterLimit float precision int Returns PathsD Inflate(Polyline, float, JoinType, EndType, float, int) public static PathsD Inflate(this Polyline polyline, float delta, JoinType joinType = JoinType.Square, EndType endType = EndType.Square, float miterLimit = 2, int precision = 2) Parameters polyline Polyline delta float joinType JoinType endType EndType miterLimit float precision int Returns PathsD Inflate(Polygons, float, JoinType, EndType, float, int) public static PathsD Inflate(this Polygons polygons, float delta, JoinType joinType = JoinType.Square, EndType endType = EndType.Polygon, float miterLimit = 2, int precision = 2) Parameters polygons Polygons delta float joinType JoinType endType EndType miterLimit float precision int Returns PathsD Intersect(Polygon, Polygon, FillRule, int) public static PathsD Intersect(this Polygon subject, Polygon clip, FillRule fillRule = FillRule.NonZero, int precision = 2) Parameters subject Polygon clip Polygon fillRule FillRule precision int Returns PathsD Intersect(Polygon, Polygons, FillRule, int) public static PathsD Intersect(this Polygon clip, Polygons subjects, FillRule fillRule = FillRule.NonZero, int precision = 2) Parameters clip Polygon subjects Polygons fillRule FillRule precision int Returns PathsD IntersectMany(Polygon, Polygons, FillRule, int) public static PathsD IntersectMany(this Polygon subject, Polygons clips, FillRule fillRule = FillRule.NonZero, int precision = 2) Parameters subject Polygon clips Polygons fillRule FillRule precision int Returns PathsD IsHole(PathD) public static bool IsHole(this PathD path) Parameters path PathD Returns bool IsHole(Polygon) public static bool IsHole(this Polygon p) Parameters p Polygon Returns bool IsPointInside(Polygon, Vector2) public static bool IsPointInside(this Polygon poly, Vector2 p) Parameters poly Polygon p Vector2 Returns bool IsPointInsideClipper(Polygon, Vector2) public static PointInPolygonResult IsPointInsideClipper(this Polygon poly, Vector2 p) Parameters poly Polygon p Vector2 Returns PointInPolygonResult MinkowskiDiff(Polygon, Polygon, bool) public static PathsD MinkowskiDiff(this Polygon poly, Polygon path, bool isClosed = false) Parameters poly Polygon path Polygon isClosed bool Returns PathsD MinkowskiDiffOrigin(Polygon, Polygon, bool) public static PathsD MinkowskiDiffOrigin(this Polygon poly, Polygon path, bool isClosed = false) Parameters poly Polygon path Polygon isClosed bool Returns PathsD MinkowskiSum(Polygon, Polygon, bool) public static PathsD MinkowskiSum(this Polygon poly, Polygon path, bool isClosed = false) Parameters poly Polygon path Polygon isClosed bool Returns PathsD MinkowskiSumOrigin(Polygon, Polygon, bool) public static PathsD MinkowskiSumOrigin(this Polygon poly, Polygon path, bool isClosed = false) Parameters poly Polygon path Polygon isClosed bool Returns PathsD RemoveAllHoles(PathsD) public static PathsD RemoveAllHoles(this PathsD paths) Parameters paths PathsD Returns PathsD RemoveAllHoles(Polygons) public static Polygons RemoveAllHoles(this Polygons polygons) Parameters polygons Polygons Returns Polygons RemoveAllHolesCopy(PathsD) public static PathsD RemoveAllHolesCopy(this PathsD paths) Parameters paths PathsD Returns PathsD RemoveAllHolesCopy(Polygons) public static Polygons RemoveAllHolesCopy(this Polygons polygons) Parameters polygons Polygons Returns Polygons Simplify(Polygon, float, bool) public static PathD Simplify(this Polygon poly, float epsilon, bool isOpen = false) Parameters poly Polygon epsilon float isOpen bool Returns PathD Simplify(Polygons, float, bool) public static PathsD Simplify(this Polygons poly, float epsilon, bool isOpen = false) Parameters poly Polygons epsilon float isOpen bool Returns PathsD SimplifyRDP(Polygon, float) Uses RamerDouglasPeucker algorithm. Only works on closed polygons public static PathD SimplifyRDP(this Polygon poly, float epsilon) Parameters poly Polygon epsilon float Returns PathD SimplifyRDP(Polygons, float) Uses RamerDouglasPeucker algorithm. Only works on closed polygons public static PathsD SimplifyRDP(this Polygons poly, float epsilon) Parameters poly Polygons epsilon float Returns PathsD StripDuplicates(Polygon, float, bool) public static PathD StripDuplicates(this Polygon poly, float minEdgeLengthSquared, bool isOpen = false) Parameters poly Polygon minEdgeLengthSquared float isOpen bool Returns PathD ToClipperPath(Polygon) public static PathD ToClipperPath(this Polygon poly) Parameters poly Polygon Returns PathD ToClipperPath(Polyline) public static PathD ToClipperPath(this Polyline polyline) Parameters polyline Polyline Returns PathD ToClipperPath(Segment) public static PathD ToClipperPath(this Segment segment) Parameters segment Segment Returns PathD ToClipperPaths(Polygon) public static PathsD ToClipperPaths(this Polygon poly) Parameters poly Polygon Returns PathsD ToClipperPaths(params Polygon[]) public static PathsD ToClipperPaths(params Polygon[] polygons) Parameters polygons Polygon[] Returns PathsD ToClipperPaths(Polyline) public static PathsD ToClipperPaths(this Polyline polyline) Parameters polyline Polyline Returns PathsD ToClipperPaths(params Polyline[]) public static PathsD ToClipperPaths(params Polyline[] polylines) Parameters polylines Polyline[] Returns PathsD ToClipperPaths(Segment) public static PathsD ToClipperPaths(this Segment segment) Parameters segment Segment Returns PathsD ToClipperPaths(IEnumerable<Polygon>) public static PathsD ToClipperPaths(this IEnumerable<Polygon> polygons) Parameters polygons IEnumerable<Polygon> Returns PathsD ToClipperPaths(IEnumerable<Polyline>) public static PathsD ToClipperPaths(this IEnumerable<Polyline> polylines) Parameters polylines IEnumerable<Polyline> Returns PathsD ToClipperPoint(Vector2) public static PointD ToClipperPoint(this Vector2 v) Parameters v Vector2 Returns PointD ToClipperRect(Rect) public static RectD ToClipperRect(this Rect r) Parameters r Rect Returns RectD ToPolygon(PathD) public static Polygon ToPolygon(this PathD path) Parameters path PathD Returns Polygon ToPolygons(PathsD, bool) public static Polygons ToPolygons(this PathsD paths, bool removeHoles = false) Parameters paths PathsD removeHoles bool Returns Polygons ToPolyline(PathD) public static Polyline ToPolyline(this PathD path) Parameters path PathD Returns Polyline ToPolylines(PathsD, bool) public static Polylines ToPolylines(this PathsD paths, bool removeHoles = false) Parameters paths PathsD removeHoles bool Returns Polylines ToRect(RectD) public static Rect ToRect(this RectD r) Parameters r RectD Returns Rect ToVec2(PointD) public static Vector2 ToVec2(this PointD p) Parameters p PointD Returns Vector2 TrimCollinear(Polygon, int, bool) public static PathD TrimCollinear(this Polygon poly, int precision, bool isOpen = false) Parameters poly Polygon precision int isOpen bool Returns PathD Union(Polygon, Polygon, FillRule) public static PathsD Union(this Polygon a, Polygon b, FillRule fillRule = FillRule.NonZero) Parameters a Polygon b Polygon fillRule FillRule Returns PathsD UnionMany(Polygon, Polygons, FillRule) public static PathsD UnionMany(this Polygon a, Polygons other, FillRule fillRule = FillRule.NonZero) Parameters a Polygon other Polygons fillRule FillRule Returns PathsD"
  },
  "api/ShapeEngine.StaticLib.ShapeID.html": {
    "href": "api/ShapeEngine.StaticLib.ShapeID.html",
    "title": "Class ShapeID | ShapeEngine",
    "summary": "Class ShapeID Namespace ShapeEngine.StaticLib Assembly ShapeEngine.dll public static class ShapeID Inheritance object ShapeID Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties InvalidId public static uint InvalidId { get; } Property Value uint NextID public static uint NextID { get; } Property Value uint Methods AdvanceTo(uint) public static void AdvanceTo(uint id) Parameters id uint Reset() public static void Reset()"
  },
  "api/ShapeEngine.StaticLib.ShapeMath.html": {
    "href": "api/ShapeEngine.StaticLib.ShapeMath.html",
    "title": "Class ShapeMath | ShapeEngine",
    "summary": "Class ShapeMath Namespace ShapeEngine.StaticLib Assembly ShapeEngine.dll public static class ShapeMath Inheritance object ShapeMath Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields DEGTORAD public const float DEGTORAD = 0.017453292 Field Value float E Represents the natural logarithmic base, specified by the constant, e. public const float E = 2.7182817 Field Value float PI Represents the ratio of the circumference of a circle to its diameter, specified by the constant, p. public const float PI = 3.1415927 Field Value float RADTODEG public const float RADTODEG = 57.295776 Field Value float Tau Represents the number of radians in one turn, specified by the constant, τ. public const float Tau = 6.2831855 Field Value float Methods AbsInt(int) public static int AbsInt(int value) Parameters value int Returns int AimAt(Vector2, Vector2, float, float, float) public static float AimAt(Vector2 pos, Vector2 targetPos, float curAngleRad, float rotSpeedRad, float dt) Parameters pos Vector2 targetPos Vector2 curAngleRad float rotSpeedRad float dt float Returns float AimAt(float, float, float, float) public static float AimAt(float curAngleRad, float targetAngleRad, float rotSpeedRad, float dt) Parameters curAngleRad float targetAngleRad float rotSpeedRad float dt float Returns float Blinking(float, float) public static bool Blinking(float timer, float interval) Parameters timer float interval float Returns bool Clamp(byte, byte, byte) public static byte Clamp(byte value, byte min, byte max) Parameters value byte min byte max byte Returns byte Clamp(int, int, int) public static int Clamp(int value, int min, int max) Parameters value int min int max int Returns int Clamp(float) public static float Clamp(float value) Parameters value float Returns float Clamp(float, float, float) public static float Clamp(float value, float min, float max) Parameters value float min float max float Returns float ClampToZero(float, float) public static float ClampToZero(float value, float epsilon = 1E-07) Parameters value float epsilon float Returns float EqualsD(double, double, double) public static bool EqualsD(double a, double b, double tolerance = 1E-07) Parameters a double b double tolerance double Returns bool EqualsF(float, float, float) public static bool EqualsF(float a, float b, float tolerance = 0.0001) Parameters a float b float tolerance float Returns bool ExpDecayLerpAngle(float, float, float, float) Framerate independent lerp. Cheaper alternative to PowLerp. public static float ExpDecayLerpAngle(float from, float to, float f, float dt) Parameters from float Starting Value to float Target Value f float Fraction 0 - 1 dt float Delta Time Returns float ExpDecayLerpAngleComplex(float, float, float, float) Framerate independent lerp. Cheaper alternative to PowLerp. Base function for ExpDecayLerp. public static float ExpDecayLerpAngleComplex(float from, float to, float decay, float dt) Parameters from float Starting Value to float Target Value decay float Decay value, best results between [1 - 25] dt float Delta Time Returns float ExpDecayLerpFloat(float, float, float, float) Framerate independent lerp. Cheaper alternative to PowLerp. public static float ExpDecayLerpFloat(float from, float to, float f, float dt) Parameters from float Starting Value to float Target Value f float Fraction 0 - 1 dt float Delta Time Returns float ExpDecayLerpFloatComplex(float, float, float, float) Framerate independent lerp. Cheaper alternative to PowLerp. Base function for ExpDecayLerp. public static float ExpDecayLerpFloatComplex(float from, float to, float decay, float dt) Parameters from float Starting Value to float Target Value decay float Decay value, best results between [1 - 25] dt float Delta Time Returns float ExpDecayLerpInt(int, int, float, float) Framerate independent lerp. Cheaper alternative to PowLerp. public static int ExpDecayLerpInt(int from, int to, float f, float dt) Parameters from int Starting Value to int Target Value f float Fraction 0 - 1 dt float Delta Time Returns int ExpDecayLerpIntComplex(int, int, float, float) Framerate independent lerp. Cheaper alternative to PowLerp. Base function for ExpDecayLerp. public static int ExpDecayLerpIntComplex(int from, int to, float decay, float dt) Parameters from int Starting Value to int Target Value decay float Decay value, best results between [1 - 25] dt float Delta Time Returns int GetFactor(float, float, float) public static float GetFactor(float cur, float min, float max) Parameters cur float min float max float Returns float GetShortestAngleDeg(float, float) public static float GetShortestAngleDeg(float from, float to) Parameters from float to float Returns float GetShortestAngleDegSign(float, float) public static int GetShortestAngleDegSign(float from, float to) Parameters from float to float Returns int GetShortestAngleRad(float, float) public static float GetShortestAngleRad(float from, float to) Parameters from float to float Returns float GetShortestAngleRadSign(float, float) public static int GetShortestAngleRadSign(float from, float to) Parameters from float to float Returns int IsSignEqual(int, int) public static bool IsSignEqual(int a, int b) Parameters a int b int Returns bool IsSignEqual(float, float) public static bool IsSignEqual(float a, float b) Parameters a float b float Returns bool LerpAngleDeg(float, float, float) public static float LerpAngleDeg(float from, float to, float f) Parameters from float to float f float Returns float LerpAngleRad(float, float, float) public static float LerpAngleRad(float from, float to, float f) Parameters from float to float f float Returns float LerpCollection<T>(List<T>, float) public static T LerpCollection<T>(List<T> collection, float f) Parameters collection List<T> f float Returns T Type Parameters T LerpDynamic(dynamic, dynamic, float) public static dynamic LerpDynamic(dynamic from, dynamic to, float f) Parameters from dynamic to dynamic f float Returns dynamic LerpFloat(float, float, float) public static float LerpFloat(float from, float to, float f) Parameters from float to float f float Returns float LerpInt(int, int, float) public static int LerpInt(int from, int to, float f) Parameters from int to int f float Returns int LerpInverseFloat(float, float, float) public static float LerpInverseFloat(float from, float to, float value) Parameters from float to float value float Returns float LerpInverseInt(int, int, int) public static float LerpInverseInt(int from, int to, int value) Parameters from int to int value int Returns float MaxInt(int, int) public static int MaxInt(int value1, int value2) Parameters value1 int value2 int Returns int MinInt(int, int) public static int MinInt(int value1, int value2) Parameters value1 int value2 int Returns int PowLerpAngle(float, float, float, float) Framerate independent lerp. Uses MathF.Pow (very expensive). ExpDecayLerp should be used if possible. public static float PowLerpAngle(float from, float to, float remainder, float dt) Parameters from float Starting Value to float Target Value remainder float How much fraction should remain after 1 second dt float Delta Time Returns float PowLerpFloat(float, float, float, float) Framerate independent lerp. Uses MathF.Pow (very expensive). ExpDecayLerp should be used if possible. public static float PowLerpFloat(float from, float to, float remainder, float dt) Parameters from float Starting Value to float Target Value remainder float How much fraction should remain after 1 second dt float Delta Time Returns float PowLerpInt(int, int, float, float) Framerate independent lerp. Uses MathF.Pow (very expensive). ExpDecayLerp should be used if possible. public static int PowLerpInt(int from, int to, float remainder, float dt) Parameters from int Starting Value to int Target Value remainder float How much fraction should remain after 1 second dt float Delta Time Returns int RemapFloat(float, float, float, float, float) public static float RemapFloat(float value, float minOld, float maxOld, float minNew, float maxNew) Parameters value float minOld float maxOld float minNew float maxNew float Returns float RemapInt(int, int, int, int, int) public static int RemapInt(int value, int minOld, int maxOld, int minNew, int maxNew) Parameters value int minOld int maxOld int minNew int maxNew int Returns int RoundToDecimals(Vector2, int) public static Vector2 RoundToDecimals(Vector2 v, int decimals) Parameters v Vector2 decimals int Returns Vector2 RoundToDecimals(float, int) public static float RoundToDecimals(float number, int decimals) Parameters number float decimals int Returns float TransformCoordinatesToIndex(int, int, int, int, bool) public static int TransformCoordinatesToIndex(int row, int col, int rows, int cols, bool leftToRight = true) Parameters row int col int rows int cols int leftToRight bool Returns int TransformIndexToCoordinates(int, int, int, bool) public static (int col, int row) TransformIndexToCoordinates(int index, int rows, int cols, bool leftToRight = true) Parameters index int rows int cols int leftToRight bool Returns (int col, int row) WrapAngleDeg(float) public static float WrapAngleDeg(float amount) Parameters amount float Returns float WrapAngleRad(float) public static float WrapAngleRad(float amount) Parameters amount float Returns float WrapF(float, float, float) public static float WrapF(float value, float min, float max) Parameters value float min float max float Returns float WrapI(int, int, int) public static int WrapI(int value, int min, int max) Parameters value int min int max int Returns int WrapIndex(int, int) public static int WrapIndex(int count, int index) Parameters count int index int Returns int"
  },
  "api/ShapeEngine.StaticLib.ShapePhysics.html": {
    "href": "api/ShapeEngine.StaticLib.ShapePhysics.html",
    "title": "Class ShapePhysics | ShapeEngine",
    "summary": "Class ShapePhysics Namespace ShapeEngine.StaticLib Assembly ShapeEngine.dll public static class ShapePhysics Inheritance object ShapePhysics Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields G This is the gravitational constant used in all functions. The default value is 1f, essentially making the values that can be used much smaller and therefore more convenient. If the real value is needed, set it to GReal. public static float G Field Value float GReal Gravitational constant 6.67430e-11 public static readonly float GReal Field Value float Methods ApplyAttraction(PhysicsObject, PhysicsObject) public static void ApplyAttraction(this PhysicsObject obj1, PhysicsObject obj2) Parameters obj1 PhysicsObject obj2 PhysicsObject ApplyAttraction(PhysicsObject, Vector2, float) public static void ApplyAttraction(this PhysicsObject obj, Vector2 attractionPoint, float attractionForce) Parameters obj PhysicsObject attractionPoint Vector2 attractionForce float ApplyAttraction(PhysicsObject, Vector2, float, Vector2) public static void ApplyAttraction(this PhysicsObject obj, Vector2 attractionPoint, float attractionForce, Vector2 attractionNormal) Parameters obj PhysicsObject attractionPoint Vector2 attractionForce float attractionNormal Vector2 ApplyAttraction(PhysicsObject, Vector2, float, float) public static void ApplyAttraction(this PhysicsObject obj, Vector2 attractionPoint, float attractionForce, float distanceScalePower) Parameters obj PhysicsObject attractionPoint Vector2 attractionForce float distanceScalePower float ApplyDragForce(Vector2, float, Vector2, float) This function calculates a frame rate independent drag force and applies it to the supplied velocity. public static Vector2 ApplyDragForce(Vector2 velocity, float dragCoefficient, Vector2 dragNormal, float deltaTime) Parameters velocity Vector2 The affected velocity. dragCoefficient float Drag coefficient between 0 and 1. How much energy should the velocity loose each second. dragNormal Vector2 Drag is applied against the drag normal. A velocity pointing in the same direction as the dragNormal does not receive any drag. A velocity pointing in the opposite direction as the dragNormal does receive max drag force. deltaTime float Returns Vector2 Returns the new scaled velocity. ApplyDragForce(Vector2, float, float) This function calculates a frame rate independent drag force and applies it to the supplied velocity. public static Vector2 ApplyDragForce(Vector2 velocity, float dragCoefficient, float deltaTime) Parameters velocity Vector2 The affected velocity. dragCoefficient float Drag coefficient between 0 and 1. How much energy should the velocity loose each second. deltaTime float Returns Vector2 Returns the new scaled velocity. ApplyDragForce(float, float, float) This function calculates a frame rate independent drag force and applies it to the supplied speed. public static float ApplyDragForce(float speed, float dragCoefficient, float deltaTime) Parameters speed float The affected speed. dragCoefficient float Drag coefficient between 0 and 1. How much energy should the velocity loose each second. deltaTime float Returns float Returns the new scaled velocity. ApplyElasticCollision(PhysicsObject, PhysicsObject, Vector2, float) Calculates new velocities for both physics objects based on the given collision normal and sets the new velocities of both objects. public static void ApplyElasticCollision(this PhysicsObject obj1, PhysicsObject obj2, Vector2 collisionNormal, float r = 1) Parameters obj1 PhysicsObject obj2 PhysicsObject collisionNormal Vector2 r float The elasticity of the collision. 0 means all energy is lost after collision, 1 means full energy is retained after collision. ApplyElasticCollisionCircleSelf(PhysicsObject, PhysicsObject, float) public static void ApplyElasticCollisionCircleSelf(this PhysicsObject obj1, PhysicsObject obj2, float r = 1) Parameters obj1 PhysicsObject obj2 PhysicsObject r float ApplyElasticCollisionSelf(PhysicsObject, PhysicsObject, Vector2, float) Calculates the new velocity for obj1 based on the given collision normal and sets the new velocity of obj1. public static void ApplyElasticCollisionSelf(this PhysicsObject obj1, PhysicsObject obj2, Vector2 collisionNormal, float r = 1) Parameters obj1 PhysicsObject obj2 PhysicsObject collisionNormal Vector2 r float The elasticity of the collision. 0 means all energy is lost after collision, 1 means full energy is retained after collision. ApplyFrictionForce(PhysicsObject, Vector2, float) public static bool ApplyFrictionForce(PhysicsObject obj, Vector2 surfaceNormal, float frictionForce) Parameters obj PhysicsObject surfaceNormal Vector2 frictionForce float Returns bool ApplyFrictionForceRealistic(PhysicsObject, Vector2, float) public static bool ApplyFrictionForceRealistic(PhysicsObject obj, Vector2 surfaceNormal, float frictionForce) Parameters obj PhysicsObject surfaceNormal Vector2 frictionForce float Returns bool ApplyRepulsion(PhysicsObject, PhysicsObject) public static void ApplyRepulsion(PhysicsObject obj1, PhysicsObject obj2) Parameters obj1 PhysicsObject obj2 PhysicsObject ApplyRepulsion(PhysicsObject, Vector2, float) public static void ApplyRepulsion(this PhysicsObject obj, Vector2 repulsionPoint, float repulsionForce) Parameters obj PhysicsObject repulsionPoint Vector2 repulsionForce float ApplyRepulsion(PhysicsObject, Vector2, float, Vector2) public static void ApplyRepulsion(this PhysicsObject obj, Vector2 repulsionPoint, float repulsionForce, Vector2 repulsionNormal) Parameters obj PhysicsObject repulsionPoint Vector2 repulsionForce float repulsionNormal Vector2 ApplyRepulsion(PhysicsObject, Vector2, float, float) public static void ApplyRepulsion(this PhysicsObject obj, Vector2 repulsionPoint, float repulsionForce, float distanceScalePower) Parameters obj PhysicsObject repulsionPoint Vector2 repulsionForce float distanceScalePower float ApplyRepulsion(Vector2, Vector2, float) Calculate the repulsion force for 1 object based on repulsion point and force. Use AddForce() if force should be applied to PhysicsObjects! public static Vector2 ApplyRepulsion(Vector2 position, Vector2 repulsionPoint, float repulsionForce) Parameters position Vector2 repulsionPoint Vector2 repulsionForce float Returns Vector2 Returns the resulting forces. ApplyRepulsion(Vector2, Vector2, float, Vector2) Calculate the repulsion force for 1 object based on repulsion point and force. Use AddForce() if force should be applied to PhysicsObjects! public static Vector2 ApplyRepulsion(Vector2 position, Vector2 repulsionPoint, float repulsionForce, Vector2 repulsionNormal) Parameters position Vector2 repulsionPoint Vector2 repulsionForce float repulsionNormal Vector2 Determines the direction from which the attraction force works. Pointing in the same direction of attractionNormal will result in max attraction force. Returns Vector2 Returns the resulting forces. ApplyRepulsion(Vector2, Vector2, float, float) Calculate the repulsion force for 1 object based on repulsion point and force. Use AddForce() if force should be applied to PhysicsObjects! public static Vector2 ApplyRepulsion(Vector2 position, Vector2 repulsionPoint, float repulsionForce, float distanceScalePower) Parameters position Vector2 repulsionPoint Vector2 repulsionForce float distanceScalePower float Returns Vector2 Returns the resulting forces. ApplyRepulsion(Vector2, float, Vector2, float) Calculate the repulsion force between two objects. Use AddForce() if force should be applied to PhysicsObjects! public static (Vector2 force1, Vector2 force2) ApplyRepulsion(Vector2 position1, float mass1, Vector2 position2, float mass2) Parameters position1 Vector2 mass1 float position2 Vector2 mass2 float Returns (Vector2 self, Vector2 other) Returns the resulting forces. ApplyReverseAttractionForce(Vector2, float, PhysicsObject) Calculates a force that gets stronger with distance. Adds the calculated force to the obj. public static bool ApplyReverseAttractionForce(Vector2 attractionOrigin, float attractionForce, PhysicsObject obj) Parameters attractionOrigin Vector2 The origin of the attraction force. attractionForce float The fore to apply scaled by distance squared. obj PhysicsObject The object the force should apply to. Returns bool Returns if a force was applied to the obj. ApplyReverseAttractionForce(Vector2, float, ValueRange, PhysicsObject) Calculates a force that gets stronger with distance. At a distance equal to attractionRadius, the force equals attractionForce. The force is applied to the obj. public static bool ApplyReverseAttractionForce(Vector2 attractionOrigin, float attractionForce, ValueRange attractionRadius, PhysicsObject obj) Parameters attractionOrigin Vector2 The origin of the attraction force. attractionForce float The fore to apply scaled by direction and distance factors. attractionRadius ValueRange The distance range at which minimum and maximum force is calculated. Distances below the attractionRadius.Min result in 0 force. obj PhysicsObject The object the force should apply to. Returns bool Returns if a force was applied. ApplyReverseAttractionForce(Vector2, float, ValueRange, PhysicsObject, Func<float, float>) Calculates a force that gets stronger with distance. At a distance equal to attractionRadius, the force equals attractionForce. The force is applied to the obj. public static bool ApplyReverseAttractionForce(Vector2 attractionOrigin, float attractionForce, ValueRange attractionRadius, PhysicsObject obj, Func<float, float> distanceFactorAdjustor) Parameters attractionOrigin Vector2 The origin of the attraction force. attractionForce float The fore to apply scaled by direction and distance factors. attractionRadius ValueRange The distance range at which minimum and maximum force is calculated. Distances below the attractionRadius.Min result in 0 force. obj PhysicsObject The object the force should apply to. distanceFactorAdjustor Func<float, float> Supply a method that takes a factor between 0 and 1 and returns a new factor as float. The new factor will be multiplied with the resulting force. Returns bool Returns if a force was applied. ApplyReverseAttractionForceDirectional(Vector2, float, ValueRange, PhysicsObject) Calculates a force that gets stronger with distance and direction. At a distance equal to attractionRadius with a velocity directly in line with the direction from the origin to the object, the force equals attractionForce. If the velocity direction points towards the origin or the distance is 0, the force is 0. public static bool ApplyReverseAttractionForceDirectional(Vector2 attractionOrigin, float attractionForce, ValueRange attractionRadius, PhysicsObject obj) Parameters attractionOrigin Vector2 The origin of the attraction force. attractionForce float The fore to apply scaled by direction and distance factors. attractionRadius ValueRange The distance range at which minimum and maximum force is calculated. Distances below the attractionRadius.Min result in 0 force. obj PhysicsObject The object the force should apply to. Returns bool Returns if a force was applied. ApplyReverseAttractionForceDirectional(Vector2, float, ValueRange, PhysicsObject, ValueRange) Calculates a force that gets stronger with distance and direction. At a distance equal to attractionRadius with a velocity directly in line with the direction from the origin to the object, the force equals attractionForce. If the velocity direction points towards the origin or the distance is 0, the force is 0. public static bool ApplyReverseAttractionForceDirectional(Vector2 attractionOrigin, float attractionForce, ValueRange attractionRadius, PhysicsObject obj, ValueRange dotRange) Parameters attractionOrigin Vector2 The origin of the attraction force. attractionForce float The fore to apply scaled by direction and distance factors. attractionRadius ValueRange The distance range at which minimum and maximum force is calculated. Distances below the attractionRadius.Min result in 0 force. obj PhysicsObject The object the force should apply to. dotRange ValueRange Set the multiplier range for pointing towards the center or away from the center. [0 and 1] would make force 0 when pointing towards the center and max when pointing away. Returns bool Returns if a force was applied. ApplyReverseAttractionForceDirectional(Vector2, float, ValueRange, PhysicsObject, ValueRange, Func<float, float>) Calculates a force that gets stronger with distance and direction. At a distance equal to attractionRadius with a velocity directly in line with the direction from the origin to the object, the force equals attractionForce. If the velocity direction points towards the origin or the distance is 0, the force is 0. public static bool ApplyReverseAttractionForceDirectional(Vector2 attractionOrigin, float attractionForce, ValueRange attractionRadius, PhysicsObject obj, ValueRange dotRange, Func<float, float> distanceFactorAdjustor) Parameters attractionOrigin Vector2 The origin of the attraction force. attractionForce float The fore to apply scaled by direction and distance factors. attractionRadius ValueRange The distance range at which minimum and maximum force is calculated. Distances below the attractionRadius.Min result in 0 force. obj PhysicsObject The object the force should apply to. dotRange ValueRange Set the multiplier range for pointing towards the center or away from the center. [0 and 1] would make force 0 when pointing towards the center and max when pointing away. distanceFactorAdjustor Func<float, float> Supply a method that takes a factor between 0 and 1 and returns a new factor as float. The new factor will be multiplied with the resulting force. Returns bool Returns if a force was applied. ApplyReverseAttractionForceRealistic(PhysicsObject, PhysicsObject) Calculates a gravitational force between two objects that scales based on distance squared. The further away the objects are, the stronger the gravitational force will be. (reverse than in reality) Applies the forces to the objects. public static void ApplyReverseAttractionForceRealistic(PhysicsObject obj1, PhysicsObject obj2) Parameters obj1 PhysicsObject obj2 PhysicsObject ApplyReverseAttractionForceRealistic(Vector2, float, PhysicsObject) Calculates a force that gets stronger with distance and direction. The force scales with distance squared and the mass of the attraction object! A velocity pointing away from the origin has the strongest force, pointing towards the origin has the weakest force. If the velocity direction points towards the origin or the distance is 0, the force is 0. public static bool ApplyReverseAttractionForceRealistic(Vector2 attractionOrigin, float attractionMass, PhysicsObject obj) Parameters attractionOrigin Vector2 The origin of the attraction force. attractionMass float The mass of the attraction object. obj PhysicsObject The physics object to apply the force to. Returns bool Returns if a force was applied. ApplyReverseAttractionForceRealistic(Vector2, float, PhysicsObject, ValueRange) Calculates a force that gets stronger with distance and direction. The force scales with distance squared and the mass of the attraction object! A velocity pointing away from the origin has the strongest force, pointing towards the origin has the weakest force. If the velocity direction points towards the origin or the distance is 0, the force is 0. public static bool ApplyReverseAttractionForceRealistic(Vector2 attractionOrigin, float attractionMass, PhysicsObject obj, ValueRange dotRange) Parameters attractionOrigin Vector2 The origin of the attraction force. attractionMass float The mass of the attraction object. obj PhysicsObject The physics object to apply the force to. dotRange ValueRange Set the multiplier range for pointing towards the center or away from the center. [0 and 1] would make force 0 when pointing towards the center and max when pointing away. Returns bool Returns if a force was applied. CalculateAttraction(Vector2, Vector2, float) Calculate the force for 1 object based on attraction point and force. Use AddForce() if force should be applied to PhysicsObjects! public static Vector2 CalculateAttraction(Vector2 position, Vector2 attractionPoint, float attractionForce) Parameters position Vector2 attractionPoint Vector2 attractionForce float Returns Vector2 Returns the resulting forces. CalculateAttraction(Vector2, Vector2, float, Vector2) Calculate the force for 1 object based on attraction point and force. Use AddForce() if force should be applied to PhysicsObjects! public static Vector2 CalculateAttraction(Vector2 position, Vector2 attractionPoint, float attractionForce, Vector2 attractionNormal) Parameters position Vector2 attractionPoint Vector2 attractionForce float attractionNormal Vector2 Determines the direction from which the attraction force works. Pointing in the same direction of attractionNormal will result in max attraction force. Returns Vector2 CalculateAttraction(Vector2, Vector2, float, float) Calculate the force for 1 object based on attraction point and force. Use AddForce() if force should be applied to PhysicsObjects! public static Vector2 CalculateAttraction(Vector2 position, Vector2 attractionPoint, float attractionForce, float distanceScalePower) Parameters position Vector2 attractionPoint Vector2 attractionForce float distanceScalePower float Returns Vector2 Returns the resulting forces. CalculateAttraction(Vector2, float, Vector2, float) Calculate the gravitational force between two objects. Use AddForce() if force should be applied to PhysicsObjects! public static (Vector2 force1, Vector2 force2) CalculateAttraction(Vector2 position1, float mass1, Vector2 position2, float mass2) Parameters position1 Vector2 mass1 float position2 Vector2 mass2 float Returns (Vector2 self, Vector2 other) Returns the resulting forces. CalculateDragFactor(float, float) This function calculates a frame rate independent factor for applying drag. public static float CalculateDragFactor(float dragCoefficient, float deltaTime) Parameters dragCoefficient float Drag coefficient between 0 and 1. How much energy should the velocity loose each second. deltaTime float Returns float CalculateDragForce(Vector2, float, Vector2, float) Calculates a frame rate independent drag force based on the supplied velocity and drag normal. public static Vector2 CalculateDragForce(Vector2 velocity, float dragCoefficient, Vector2 dragNormal, float deltaTime) Parameters velocity Vector2 The velocity of the object. dragCoefficient float A value between 0-1. dragNormal Vector2 Drag is applied against the drag normal. A velocity pointing in the same direction as the dragNormal does not receive any drag. A velocity pointing in the opposite direction as the dragNormal does receive max drag force. deltaTime float Returns Vector2 CalculateDragForce(Vector2, float, float) public static Vector2 CalculateDragForce(Vector2 velocity, float dragCoefficient, float deltaTime) Parameters velocity Vector2 dragCoefficient float deltaTime float Returns Vector2 CalculateDragForceRealistic(Vector2, float, float, float) Calculates a realistic drag force. Force = FluidDensity * Speed * Speed * DragCoefficient * ReferenceArea public static Vector2 CalculateDragForceRealistic(Vector2 velocity, float dragCoefficient, float referenceArea, float fluidDensity = 1.225) Parameters velocity Vector2 The velocity of the object. dragCoefficient float The drag coefficient to scale the resulting force. referenceArea float The surface area of the object resisting the fluid. fluidDensity float The density of the fluid the object is moving through. Air at sea level has a density value of 1.225f Returns Vector2 CalculateElasticCollision(Vector2, Vector2, float, Vector2, float, float) Calculate new velocities for an elastic collision determined by the given collision normal. public static (Vector2 newVelocity1, Vector2 newVelocity2) CalculateElasticCollision(Vector2 collisionNormal, Vector2 velocity1, float mass1, Vector2 velocity2, float mass2, float r = 1) Parameters collisionNormal Vector2 velocity1 Vector2 mass1 float velocity2 Vector2 mass2 float r float The elasticity of the collision. 0 means all energy is lost after collision, 1 means full energy is retained after collision. Returns (Vector2 self, Vector2 other) CalculateElasticCollisionCircles(Vector2, Vector2, float, Vector2, Vector2, float, float) Calculate new velocities for an elastic collision between two circles. public static (Vector2 newVelocity1, Vector2 newVelocity2) CalculateElasticCollisionCircles(Vector2 position1, Vector2 velocity1, float mass1, Vector2 position2, Vector2 velocity2, float mass2, float r = 1) Parameters position1 Vector2 velocity1 Vector2 mass1 float position2 Vector2 velocity2 Vector2 mass2 float r float The elasticity of the collision. 0 means all energy is lost after collision, 1 means full energy is retained after collision. Returns (Vector2 self, Vector2 other) CalculateElasticCollisionCirclesSelf(Vector2, Vector2, float, Vector2, Vector2, float, float) Calculate new velocity for the first circle based on an elastic collision between two circles. public static Vector2 CalculateElasticCollisionCirclesSelf(Vector2 position1, Vector2 velocity1, float mass1, Vector2 position2, Vector2 velocity2, float mass2, float r = 1) Parameters position1 Vector2 velocity1 Vector2 mass1 float position2 Vector2 velocity2 Vector2 mass2 float r float The elasticity of the collision. 0 means all energy is lost after collision, 1 means full energy is retained after collision. Returns Vector2 CalculateElasticCollisionSelf(Vector2, Vector2, float, Vector2, float, float) Calculates new velocity for object1 based on the given collision normal. public static Vector2 CalculateElasticCollisionSelf(Vector2 collisionNormal, Vector2 velocity1, float mass1, Vector2 velocity2, float mass2, float r = 1) Parameters collisionNormal Vector2 velocity1 Vector2 mass1 float velocity2 Vector2 mass2 float r float The elasticity of the collision. 0 means all energy is lost after collision, 1 means full energy is retained after collision. Returns Vector2 Returns new velocity 1. CalculateFrictionForce(Vector2, Vector2, float) Calculates a friction force that always acts directly opposite to the velocity, scaled by friction force. public static Vector2 CalculateFrictionForce(Vector2 velocity, Vector2 surfaceNormal, float frictionForce) Parameters velocity Vector2 surfaceNormal Vector2 frictionForce float Returns Vector2 CalculateFrictionForceRealistic(Vector2, Vector2, float) Calculate the tangent based on the surface normal and velocity and returns a force that acts in the opposite direction of the tangent scaled by the friction force. public static Vector2 CalculateFrictionForceRealistic(Vector2 velocity, Vector2 surfaceNormal, float frictionForce) Parameters velocity Vector2 surfaceNormal Vector2 frictionForce float Returns Vector2 CalculateFrictionTangent(Vector2, Vector2) Calculates the friction tangent vector. The tangent is always perpendicular to the surface normal. The tanget always points in the opposite direction of the velocity. public static Vector2 CalculateFrictionTangent(Vector2 velocity, Vector2 surfaceNormal) Parameters velocity Vector2 surfaceNormal Vector2 Returns Vector2 CalculateReverseAttractionForce(Vector2, float, ValueRange, PhysicsObject, Func<float, float>) Calculates a force that gets stronger with distance and direction. At a distance equal to attractionRadius with a velocity directly in line with the direction from the origin to the object, the force equals attractionForce. If the velocity direction points towards the origin or the distance is 0, the force is 0. public static bool CalculateReverseAttractionForce(Vector2 attractionOrigin, float attractionForce, ValueRange attractionRadius, PhysicsObject obj, Func<float, float> distanceFactorAdjustor) Parameters attractionOrigin Vector2 The origin of the attraction force. attractionForce float The fore to apply scaled by direction and distance factors. attractionRadius ValueRange The distance range at which minimum and maximum force is calculated. Distances below the attractionRadius.Min result in 0 force. obj PhysicsObject The object the force should apply to. distanceFactorAdjustor Func<float, float> Supply a method that takes a factor between 0 and 1 and returns a new factor as float. The new factor will be multiplied with the resulting force. Returns bool Returns the final force. CalculateReverseAttractionForce(Vector2, float, ValueRange, Vector2) Calculates a force that gets stronger with distance. At a distance equal to attractionRadius, the force equals attractionForce. Use AddForce() if force should be applied to PhysicsObjects! public static Vector2 CalculateReverseAttractionForce(Vector2 attractionOrigin, float attractionForce, ValueRange attractionRadius, Vector2 objectPosition) Parameters attractionOrigin Vector2 The origin of the attraction force. attractionForce float The fore to apply scaled by direction and distance factors. attractionRadius ValueRange The distance range at which minimum and maximum force is calculated. Distances below the attractionRadius.Min result in 0 force. objectPosition Vector2 The position of the object. Returns Vector2 Returns the final force. CalculateReverseAttractionForce(Vector2, float, ValueRange, Vector2, Func<float, float>) Calculates a force that gets stronger with distance. At a distance equal to attractionRadius, the force equals attractionForce. Use AddForce() if force should be applied to PhysicsObjects! public static Vector2 CalculateReverseAttractionForce(Vector2 attractionOrigin, float attractionForce, ValueRange attractionRadius, Vector2 objectPosition, Func<float, float> distanceFactorAdjustor) Parameters attractionOrigin Vector2 The origin of the attraction force. attractionForce float The fore to apply scaled by direction and distance factors. attractionRadius ValueRange The distance range at which minimum and maximum force is calculated. Distances below the attractionRadius.Min result in 0 force. objectPosition Vector2 The position of the object. distanceFactorAdjustor Func<float, float> Supply a method that takes a factor between 0 and 1 and returns a new factor as float. The new factor will be multiplied with the resulting force. Returns Vector2 Returns the final force. CalculateReverseAttractionForce(Vector2, float, Vector2) Calculates a force that gets stronger with distance. Use AddForce() if force should be applied to PhysicsObjects! public static Vector2 CalculateReverseAttractionForce(Vector2 attractionOrigin, float attractionForce, Vector2 objectPosition) Parameters attractionOrigin Vector2 The origin of the attraction force. attractionForce float The force scaled by distance squared. objectPosition Vector2 The position of the object. Returns Vector2 Returns the final force. CalculateReverseAttractionForceDirectional(Vector2, float, ValueRange, Vector2, Vector2) Calculates a force that gets stronger with distance and direction. At a distance equal to attractionRadius with a velocity directly in line with the direction from the origin to the object, the force equals attractionForce. If the velocity direction points towards the origin or the distance is 0, the force is 0. Use AddForce() if force should be applied to PhysicsObjects! public static Vector2 CalculateReverseAttractionForceDirectional(Vector2 attractionOrigin, float attractionForce, ValueRange attractionRadius, Vector2 objectPosition, Vector2 objectVelocity) Parameters attractionOrigin Vector2 The origin of the attraction force. attractionForce float The fore to apply scaled by direction and distance factors. attractionRadius ValueRange The distance range at which minimum and maximum force is calculated. Distances below the attractionRadius.Min result in 0 force. objectPosition Vector2 The position of the object. objectVelocity Vector2 The velocity of the object. Returns Vector2 Returns the final force. CalculateReverseAttractionForceDirectional(Vector2, float, ValueRange, Vector2, Vector2, ValueRange) Calculates a force that gets stronger with distance and direction. At a distance equal to attractionRadius with a velocity directly in line with the direction from the origin to the object, the force equals attractionForce. If the velocity direction points towards the origin or the distance is 0, the force is 0. Use AddForce() if force should be applied to PhysicsObjects! public static Vector2 CalculateReverseAttractionForceDirectional(Vector2 attractionOrigin, float attractionForce, ValueRange attractionRadius, Vector2 objectPosition, Vector2 objectVelocity, ValueRange dotRange) Parameters attractionOrigin Vector2 The origin of the attraction force. attractionForce float The fore to apply scaled by direction and distance factors. attractionRadius ValueRange The distance range at which minimum and maximum force is calculated. Distances below the attractionRadius.Min result in 0 force. objectPosition Vector2 The position of the object. objectVelocity Vector2 The velocity of the object. dotRange ValueRange Set the multiplier range for pointing towards the center or away from the center. [0 and 1] would make force 0 when pointing towards the center and max when pointing away. Returns Vector2 Returns the final force. CalculateReverseAttractionForceDirectional(Vector2, float, ValueRange, Vector2, Vector2, ValueRange, Func<float, float>) Calculates a force that gets stronger with distance and direction. At a distance equal to attractionRadius with a velocity directly in line with the direction from the origin to the object, the force equals attractionForce. If the velocity direction points towards the origin or the distance is 0, the force is 0. Use AddForce() if force should be applied to PhysicsObjects! public static Vector2 CalculateReverseAttractionForceDirectional(Vector2 attractionOrigin, float attractionForce, ValueRange attractionRadius, Vector2 objectPosition, Vector2 objectVelocity, ValueRange dotRange, Func<float, float> distanceFactorAdjustor) Parameters attractionOrigin Vector2 The origin of the attraction force. attractionForce float The fore to apply scaled by direction and distance factors. attractionRadius ValueRange The distance range at which minimum and maximum force is calculated. Distances below the attractionRadius.Min result in 0 force. objectPosition Vector2 The position of the object. objectVelocity Vector2 The velocity of the object. dotRange ValueRange Set the multiplier range for pointing towards the center or away from the center. [0 and 1] would make force 0 when pointing towards the center and max when pointing away. distanceFactorAdjustor Func<float, float> Supply a method that takes a factor between 0 and 1 and returns a new factor as float. The new factor will be multiplied with the resulting force. Returns Vector2 Returns the final force. CalculateReverseAttractionForceDirectional(Vector2, float, ValueRange, Vector2, Vector2, Func<float, float>) Calculates a force that gets stronger with distance and direction. At a distance equal to attractionRadius with a velocity directly in line with the direction from the origin to the object, the force equals attractionForce. If the velocity direction points towards the origin or the distance is 0, the force is 0. Use AddForce() if force should be applied to PhysicsObjects! public static Vector2 CalculateReverseAttractionForceDirectional(Vector2 attractionOrigin, float attractionForce, ValueRange attractionRadius, Vector2 objectPosition, Vector2 objectVelocity, Func<float, float> distanceFactorAdjustor) Parameters attractionOrigin Vector2 The origin of the attraction force. attractionForce float The fore to apply scaled by direction and distance factors. attractionRadius ValueRange The distance range at which minimum and maximum force is calculated. Distances below the attractionRadius.Min result in 0 force. objectPosition Vector2 The position of the object. objectVelocity Vector2 The velocity of the object. distanceFactorAdjustor Func<float, float> Supply a method that takes a factor between 0 and 1 and returns a new factor as float. The new factor will be multiplied with the resulting force. Returns Vector2 Returns the final force. CalculateReverseAttractionForceRealistic(Vector2, float, Vector2, Vector2) Calculates a force that gets stronger with distance and direction. The force scales with distance squared and the mass of the attraction object! A velocity pointing away from the origin has the strongest force, pointing towards the origin has the weakest force. If the velocity direction points towards the origin or the distance is 0, the force is 0. public static Vector2 CalculateReverseAttractionForceRealistic(Vector2 attractionOrigin, float attractionMass, Vector2 objectPosition, Vector2 objectVelocity) Parameters attractionOrigin Vector2 The origin of the attraction force. attractionMass float The mass of the attraction object. objectPosition Vector2 The position of the object. objectVelocity Vector2 The velocity of the object. Returns Vector2 Returns the final force. Use AddForce() in PhysicsObject. CalculateReverseAttractionForceRealistic(Vector2, float, Vector2, Vector2, ValueRange) Calculates a force that gets stronger with distance and direction. The force scales with distance squared and the mass of the attraction object! A velocity pointing away from the origin has the strongest force, pointing towards the origin has the weakest force. If the velocity direction points towards the origin or the distance is 0, the force is 0. public static Vector2 CalculateReverseAttractionForceRealistic(Vector2 attractionOrigin, float attractionMass, Vector2 objectPosition, Vector2 objectVelocity, ValueRange dotRange) Parameters attractionOrigin Vector2 The origin of the attraction force. attractionMass float The mass of the attraction object. objectPosition Vector2 The position of the object. objectVelocity Vector2 The velocity of the object. dotRange ValueRange Set the multiplier range for pointing towards the center or away from the center. [0 and 1] would make force 0 when pointing towards the center and max when pointing away. Returns Vector2 Returns the final force. Use AddForce() in PhysicsObject. CalculateReverseAttractionForceRealistic(Vector2, float, Vector2, float) Calculates a gravitational force between two objects that scales based on distance squared. It is called realistic because even though it is doing the reverse of gravity... The further away the objects are, the stronger the gravitational force will be. Use AddForce() if force should be applied to PhysicsObjects! public static (Vector2 force1, Vector2 force2) CalculateReverseAttractionForceRealistic(Vector2 position1, float mass1, Vector2 position2, float mass2) Parameters position1 Vector2 mass1 float position2 Vector2 mass2 float Returns (Vector2 self, Vector2 other) Returns the force (acceleration) that can be applied. Corresponding masses are already divided out. Use AddForceRaw in PhysicsObject!"
  },
  "api/ShapeEngine.StaticLib.ShapeRegex.html": {
    "href": "api/ShapeEngine.StaticLib.ShapeRegex.html",
    "title": "Class ShapeRegex | ShapeEngine",
    "summary": "Class ShapeRegex Namespace ShapeEngine.StaticLib Assembly ShapeEngine.dll public static class ShapeRegex Inheritance object ShapeRegex Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Combine(string, string) public static string Combine(string expressionLeft, string expressionRight) Parameters expressionLeft string expressionRight string Returns string Combine(params string[]) public static string Combine(params string[] expressions) Parameters expressions string[] Returns string CreateRegex(string) public static Regex CreateRegex(string pattern) Parameters pattern string Returns Regex CreateRegex(params string[]) public static Regex CreateRegex(params string[] expressions) Parameters expressions string[] Returns Regex MatchAllCaps() public static string MatchAllCaps() Returns string MatchAllCaps(char, char) public static string MatchAllCaps(char uppercaseStart, char uppercaseEnd) Parameters uppercaseStart char uppercaseEnd char Returns string MatchAnyDigit() public static string MatchAnyDigit() Returns string MatchAnyNonWordCharacter() public static string MatchAnyNonWordCharacter() Returns string MatchAnyNoneDigit() public static string MatchAnyNoneDigit() Returns string MatchAnyNoneWhitespaceCharacter() public static string MatchAnyNoneWhitespaceCharacter() Returns string MatchAnyWhitespaceCharacter() public static string MatchAnyWhitespaceCharacter() Returns string MatchAnyWordCharacter() public static string MatchAnyWordCharacter() Returns string MatchButChar(char) public static string MatchButChar(char c) Parameters c char Returns string MatchButCharInRange(char, char) public static string MatchButCharInRange(char start, char end) Parameters start char end char Returns string MatchButChars(string) public static string MatchButChars(string chars) Parameters chars string Returns string MatchChar(char) public static string MatchChar(char c) Parameters c char Returns string MatchCharInRange(char, char) public static string MatchCharInRange(char start, char end) Parameters start char end char Returns string MatchChars(string) public static string MatchChars(string chars) Parameters chars string Returns string MatchCharsInRanges(params (char start, char end)[]) public static string MatchCharsInRanges(params (char start, char end)[] ranges) Parameters ranges (char start, char end)[] Returns string MatchMultipleRegexAll(string, params Regex[]) public static bool MatchMultipleRegexAll(string check, params Regex[] regexExpressions) Parameters check string regexExpressions Regex[] Returns bool MatchMultipleRegexAny(string, params Regex[]) public static bool MatchMultipleRegexAny(string check, params Regex[] regexExpressions) Parameters check string regexExpressions Regex[] Returns bool MatchWord(string) public static string MatchWord(string word) Parameters word string Returns string MatchWords(params string[]) public static string MatchWords(params string[] words) Parameters words string[] Returns string"
  },
  "api/ShapeEngine.StaticLib.ShapeSavegame.html": {
    "href": "api/ShapeEngine.StaticLib.ShapeSavegame.html",
    "title": "Class ShapeSavegame | ShapeEngine",
    "summary": "Class ShapeSavegame Namespace ShapeEngine.StaticLib Assembly ShapeEngine.dll public static class ShapeSavegame Inheritance object ShapeSavegame Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ApplicationCommonDataPath public static string ApplicationCommonDataPath Field Value string ApplicationCommonDocumentsPath public static string ApplicationCommonDocumentsPath Field Value string ApplicationDataPath public static string ApplicationDataPath Field Value string ApplicationDocumentsPath public static string ApplicationDocumentsPath Field Value string ApplicationLocalDataPath public static string ApplicationLocalDataPath Field Value string Methods CombinePath(string, string) public static string CombinePath(string path1, string path2) Parameters path1 string path2 string Returns string CombinePath(params string[]) public static string CombinePath(params string[] paths) Parameters paths string[] Returns string GetSpecialFolderPath(SpecialFolder) public static string GetSpecialFolderPath(Environment.SpecialFolder folder) Parameters folder Environment.SpecialFolder Returns string LoadText(string, string) public static string LoadText(string absolutePath, string fileName) Parameters absolutePath string fileName string Returns string Load<T>(string, string) public static T? Load<T>(string absolutePath, string fileName) Parameters absolutePath string fileName string Returns T Type Parameters T SaveText(string, string, string) public static bool SaveText(string text, string absolutePath, string fileName) Parameters text string absolutePath string fileName string Returns bool Save<T>(T, string, string) public static bool Save<T>(T data, string absolutePath, string fileName) Parameters data T absolutePath string fileName string Returns bool Type Parameters T"
  },
  "api/ShapeEngine.StaticLib.ShapeTween.html": {
    "href": "api/ShapeEngine.StaticLib.ShapeTween.html",
    "title": "Class ShapeTween | ShapeEngine",
    "summary": "Class ShapeTween Namespace ShapeEngine.StaticLib Assembly ShapeEngine.dll public static class ShapeTween Inheritance object ShapeTween Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BackIn(float) public static float BackIn(float p) Parameters p float Returns float BackInOut(float) public static float BackInOut(float p) Parameters p float Returns float BackOut(float) public static float BackOut(float p) Parameters p float Returns float BounceIn(float) public static float BounceIn(float p) Parameters p float Returns float BounceInOut(float) public static float BounceInOut(float p) Parameters p float Returns float BounceOut(float) public static float BounceOut(float p) Parameters p float Returns float CircIn(float) public static float CircIn(float p) Parameters p float Returns float CircInOut(float) public static float CircInOut(float p) Parameters p float Returns float CircOut(float) public static float CircOut(float p) Parameters p float Returns float CubicIn(float) public static float CubicIn(float p) Parameters p float Returns float CubicInOut(float) public static float CubicInOut(float p) Parameters p float Returns float CubicOut(float) public static float CubicOut(float p) Parameters p float Returns float ElasticIn(float) public static float ElasticIn(float p) Parameters p float Returns float ElasticInOut(float) public static float ElasticInOut(float p) Parameters p float Returns float ElasticOut(float) public static float ElasticOut(float p) Parameters p float Returns float ExpoIn(float) public static float ExpoIn(float p) Parameters p float Returns float ExpoInOut(float) public static float ExpoInOut(float p) Parameters p float Returns float ExpoOut(float) public static float ExpoOut(float p) Parameters p float Returns float QuadIn(float) public static float QuadIn(float p) Parameters p float Returns float QuadInOut(float) public static float QuadInOut(float p) Parameters p float Returns float QuadOut(float) public static float QuadOut(float p) Parameters p float Returns float QuartIn(float) public static float QuartIn(float p) Parameters p float Returns float QuartInOut(float) public static float QuartInOut(float p) Parameters p float Returns float QuartOut(float) public static float QuartOut(float p) Parameters p float Returns float QuintIn(float) public static float QuintIn(float p) Parameters p float Returns float QuintInOut(float) public static float QuintInOut(float p) Parameters p float Returns float QuintOut(float) public static float QuintOut(float p) Parameters p float Returns float SineIn(float) public static float SineIn(float p) Parameters p float Returns float SineInOut(float) public static float SineInOut(float p) Parameters p float Returns float SineOut(float) public static float SineOut(float p) Parameters p float Returns float Tween(ColorRgba, ColorRgba, float, TweenType) public static ColorRgba Tween(this ColorRgba from, ColorRgba to, float t, TweenType tweenType) Parameters from ColorRgba to ColorRgba t float tweenType TweenType Returns ColorRgba Tween(Rect, Rect, float, TweenType) public static Rect Tween(this Rect from, Rect to, float t, TweenType tweenType) Parameters from Rect to Rect t float tweenType TweenType Returns Rect Tween(int, int, float, TweenType) public static int Tween(int from, int to, float t, TweenType tweenType) Parameters from int to int t float tweenType TweenType Returns int Tween(Vector2, Vector2, float, TweenType) public static Vector2 Tween(this Vector2 from, Vector2 to, float t, TweenType tweenType) Parameters from Vector2 to Vector2 t float tweenType TweenType Returns Vector2 Tween(float, TweenType) public static float Tween(float t, TweenType tweenType) Parameters t float tweenType TweenType Returns float Tween(float, float, float, TweenType) public static float Tween(float from, float to, float t, TweenType tweenType) Parameters from float to float t float tweenType TweenType Returns float"
  },
  "api/ShapeEngine.StaticLib.ShapeVec.html": {
    "href": "api/ShapeEngine.StaticLib.ShapeVec.html",
    "title": "Class ShapeVec | ShapeEngine",
    "summary": "Class ShapeVec Namespace ShapeEngine.StaticLib Assembly ShapeEngine.dll public static class ShapeVec Inheritance object ShapeVec Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Abs(Vector2) public static Vector2 Abs(this Vector2 v) Parameters v Vector2 Returns Vector2 Align(Vector2, Size, AnchorPoint) public static Vector2 Align(this Vector2 pos, Size size, AnchorPoint alignement) Parameters pos Vector2 size Size alignement AnchorPoint Returns Vector2 AngleDeg(Vector2) public static float AngleDeg(this Vector2 v) Parameters v Vector2 Returns float AngleDeg(Vector2, Vector2) public static float AngleDeg(this Vector2 v1, Vector2 v2) Parameters v1 Vector2 v2 Vector2 Returns float AngleRad(Vector2) public static float AngleRad(this Vector2 v) Parameters v Vector2 Returns float AngleRad(Vector2, Vector2) public static float AngleRad(this Vector2 v1, Vector2 v2) Parameters v1 Vector2 v2 Vector2 Returns float CalculateDotFactor(Vector2, Vector2) Calculate the dot product between two vectors and remap it to the range 0-1. Both vectors pointing in the same direction will return 1, while pointing in opposite directions will return 0. The vectors have to be normalized to get correct results. public static float CalculateDotFactor(this Vector2 v1, Vector2 v2) Parameters v1 Vector2 The first normalized vector. v2 Vector2 The second normalized vector. Returns float Return the dot product as a factor between 0-1. CalculateDotFactor(Vector2, Vector2, float, float) Calculate the dot product between two vectors and remap it to the given range of min and max. Both vectors pointing in the same direction will return max, while pointing in opposite directions will return min. The vectors have to be normalized to get correct results. public static float CalculateDotFactor(this Vector2 v1, Vector2 v2, float min, float max) Parameters v1 Vector2 The first normalized vector. v2 Vector2 The second normalized vector. min float The min value for the possible range. max float The max value for the possible range. Returns float Return the dot product as a factor between min and max. CalculateDotFactorReverse(Vector2, Vector2) Calculate the dot product between two vectors and remap it to the range 0-1. Both vectors pointing in the same direction will return 0, while pointing in opposite directions will return 1. The vectors have to be normalized to get correct results. public static float CalculateDotFactorReverse(this Vector2 v1, Vector2 v2) Parameters v1 Vector2 The first normalized vector. v2 Vector2 The second normalized vector. Returns float Return the dot product as a factor between 0-1. CalculateDotFactorReverse(Vector2, Vector2, float, float) Calculate the dot product between two vectors and remap it to the given range of min and max. Both vectors pointing in the same direction will return min, while pointing in opposite directions will return max. The vectors have to be normalized to get correct results. public static float CalculateDotFactorReverse(this Vector2 v1, Vector2 v2, float min, float max) Parameters v1 Vector2 The first normalized vector. v2 Vector2 The second normalized vector. min float The min value for the possible range. max float The max value for the possible range. Returns float Return the dot product as a factor between min and max. Ceiling(Vector2) public static Vector2 Ceiling(this Vector2 v) Parameters v Vector2 Returns Vector2 ChangeLength(Vector2, float) public static Vector2 ChangeLength(this Vector2 v, float amount) Parameters v Vector2 amount float Returns Vector2 Clamp(Vector2, Vector2, Vector2) public static Vector2 Clamp(this Vector2 v, Vector2 min, Vector2 max) Parameters v Vector2 min Vector2 max Vector2 Returns Vector2 Clamp(Vector2, float, float) public static Vector2 Clamp(this Vector2 v, float min, float max) Parameters v Vector2 min float max float Returns Vector2 ClampLength(Vector2, float) public static Vector2 ClampLength(this Vector2 v, float maxLength) Parameters v Vector2 maxLength float Returns Vector2 ClampLength(Vector2, float, float) public static Vector2 ClampLength(this Vector2 v, float minLength, float maxLength) Parameters v Vector2 minLength float maxLength float Returns Vector2 Cross(Vector2, Vector2) public static float Cross(this Vector2 value1, Vector2 value2) Parameters value1 Vector2 value2 Vector2 Returns float Distance(Vector2, Vector2) public static float Distance(this Vector2 v1, Vector2 v2) Parameters v1 Vector2 v2 Vector2 Returns float DistanceSquared(Vector2, Vector2) public static float DistanceSquared(this Vector2 v1, Vector2 v2) Parameters v1 Vector2 v2 Vector2 Returns float DivideSafe(Vector2, Vector2) public static Vector2 DivideSafe(this Vector2 a, Vector2 b) Parameters a Vector2 b Vector2 Returns Vector2 Dot(Vector2, Vector2) public static float Dot(this Vector2 v1, Vector2 v2) Parameters v1 Vector2 v2 Vector2 Returns float Down() public static Vector2 Down() Returns Vector2 ExpDecayLerp(Vector2, Vector2, float, float) public static Vector2 ExpDecayLerp(this Vector2 from, Vector2 to, float f, float dt) Parameters from Vector2 to Vector2 f float dt float Returns Vector2 ExpDecayLerpComplex(Vector2, Vector2, float, float) public static Vector2 ExpDecayLerpComplex(this Vector2 from, Vector2 to, float decay, float dt) Parameters from Vector2 to Vector2 decay float dt float Returns Vector2 FindArithmeticMean(IEnumerable<Vector2>) public static Vector2 FindArithmeticMean(IEnumerable<Vector2> vertices) Parameters vertices IEnumerable<Vector2> Returns Vector2 Flip(Vector2) public static Vector2 Flip(this Vector2 v) Parameters v Vector2 Returns Vector2 Floor(Vector2) public static Vector2 Floor(this Vector2 v) Parameters v Vector2 Returns Vector2 GetArea(Vector2) public static float GetArea(this Vector2 v) Parameters v Vector2 Returns float GetOutwardFacingNormal(Vector2, Vector2) public static Vector2 GetOutwardFacingNormal(this Vector2 normal, Vector2 outwardDirection) Parameters normal Vector2 outwardDirection Vector2 Returns Vector2 GetPerpendicularLeft(Vector2) public static Vector2 GetPerpendicularLeft(this Vector2 v) Parameters v Vector2 Returns Vector2 GetPerpendicularRight(Vector2) public static Vector2 GetPerpendicularRight(this Vector2 v) Parameters v Vector2 Returns Vector2 IsColinear(Vector2, Vector2, Vector2) public static bool IsColinear(Vector2 a, Vector2 b, Vector2 c) Parameters a Vector2 b Vector2 c Vector2 Returns bool IsFacingTheOppositeDirection(Vector2, Vector2) public static bool IsFacingTheOppositeDirection(this Vector2 a, Vector2 b) Parameters a Vector2 b Vector2 Returns bool IsFacingTheSameDirection(Vector2, Vector2) public static bool IsFacingTheSameDirection(this Vector2 a, Vector2 b) Parameters a Vector2 b Vector2 Returns bool IsFinite(Vector2) public static bool IsFinite(this Vector2 v) Parameters v Vector2 Returns bool IsNan(Vector2) public static bool IsNan(this Vector2 v) Parameters v Vector2 Returns bool IsNormalFacingOutward(Vector2, Vector2) public static bool IsNormalFacingOutward(this Vector2 normal, Vector2 outwardDirection) Parameters normal Vector2 outwardDirection Vector2 Returns bool IsNormalized(Vector2) public static bool IsNormalized(this Vector2 v) Parameters v Vector2 Returns bool IsSimilar(Vector2, Vector2, float) public static bool IsSimilar(this Vector2 a, Vector2 b, float tolerance = 0.001) Parameters a Vector2 b Vector2 tolerance float Returns bool IsSimilar(Vector2, float, float) public static bool IsSimilar(this Vector2 a, float b, float tolerance = 0.001) Parameters a Vector2 b float tolerance float Returns bool Left() public static Vector2 Left() Returns Vector2 Lerp(Vector2, Vector2, float) public static Vector2 Lerp(this Vector2 from, Vector2 to, float t) Parameters from Vector2 to Vector2 t float Returns Vector2 LerpDirection(Vector2, Vector2, float) public static Vector2 LerpDirection(this Vector2 from, Vector2 to, float t) Parameters from Vector2 to Vector2 t float Returns Vector2 LerpTowards(Vector2, Vector2, float, float) public static Vector2 LerpTowards(this Vector2 from, Vector2 to, float seconds, float dt) Parameters from Vector2 to Vector2 seconds float dt float Returns Vector2 Max(Vector2) public static float Max(this Vector2 v) Parameters v Vector2 Returns float Max(Vector2, Vector2) public static Vector2 Max(this Vector2 v1, Vector2 v2) Parameters v1 Vector2 v2 Vector2 Returns Vector2 Min(Vector2) public static float Min(this Vector2 v) Parameters v Vector2 Returns float Min(Vector2, Vector2) public static Vector2 Min(this Vector2 v1, Vector2 v2) Parameters v1 Vector2 v2 Vector2 Returns Vector2 MoveTowards(Vector2, Vector2, float) public static Vector2 MoveTowards(this Vector2 from, Vector2 to, float speed) Parameters from Vector2 to Vector2 speed float Returns Vector2 Negate(Vector2) public static Vector2 Negate(this Vector2 v) Parameters v Vector2 Returns Vector2 Normalize(Vector2) Returns v if the squared length of the vector is one. Returns a zero vector if the squared length is zero. public static Vector2 Normalize(this Vector2 v) Parameters v Vector2 Returns Vector2 NormalizeScaled(Vector2) Returns the product of v.Normalized() * v public static Vector2 NormalizeScaled(this Vector2 v) Parameters v Vector2 Returns Vector2 One() public static Vector2 One() Returns Vector2 Parallel(Vector2, Vector2) public static bool Parallel(this Vector2 a, Vector2 b) Parameters a Vector2 b Vector2 Returns bool PowLerp(Vector2, Vector2, float, float) public static Vector2 PowLerp(this Vector2 from, Vector2 to, float remainder, float dt) Parameters from Vector2 to Vector2 remainder float dt float Returns Vector2 Project(Vector2, Vector2) public static Vector2 Project(this Vector2 project, Vector2 onto) Parameters project Vector2 onto Vector2 Returns Vector2 ProjectionPoint(Vector2, Vector2, float) public static Vector2 ProjectionPoint(this Vector2 point, Vector2 v, float t) Parameters point Vector2 v Vector2 t float Returns Vector2 ProjectionTime(Vector2, Vector2) public static float ProjectionTime(this Vector2 v, Vector2 onto) Parameters v Vector2 onto Vector2 Returns float Reflect(Vector2, Vector2) public static Vector2 Reflect(this Vector2 v, Vector2 n) Parameters v Vector2 n Vector2 Returns Vector2 Right() public static Vector2 Right() Returns Vector2 Rotate(Vector2, float) public static Vector2 Rotate(this Vector2 v, float angleRad) Parameters v Vector2 angleRad float Returns Vector2 Rotate90CCW(Vector2) public static Vector2 Rotate90CCW(this Vector2 v) Parameters v Vector2 Returns Vector2 Rotate90CW(Vector2) public static Vector2 Rotate90CW(this Vector2 v) Parameters v Vector2 Returns Vector2 RotateDeg(Vector2, float) public static Vector2 RotateDeg(this Vector2 v, float angleDeg) Parameters v Vector2 angleDeg float Returns Vector2 Round(Vector2) public static Vector2 Round(this Vector2 v) Parameters v Vector2 Returns Vector2 SetLength(Vector2, float) public static Vector2 SetLength(this Vector2 v, float length) Parameters v Vector2 length float Returns Vector2 SquareRoot(Vector2) public static Vector2 SquareRoot(this Vector2 v) Parameters v Vector2 Returns Vector2 ToPolarCoordinates(Vector2) public static PolarCoordinates ToPolarCoordinates(this Vector2 v) Parameters v Vector2 Returns PolarCoordinates ToSize(Vector2) public static Size ToSize(this Vector2 v) Parameters v Vector2 Returns Size ToString(Vector2) public static string ToString(this Vector2 v) Parameters v Vector2 Returns string Truncate(Vector2) public static Vector2 Truncate(this Vector2 v) Parameters v Vector2 Returns Vector2 Up() public static Vector2 Up() Returns Vector2 VecFromAngleDeg(float) public static Vector2 VecFromAngleDeg(float angleDeg) Parameters angleDeg float Returns Vector2 VecFromAngleRad(float) public static Vector2 VecFromAngleRad(float angleRad) Parameters angleRad float Returns Vector2 Wrap(Vector2, Vector2, Vector2) public static Vector2 Wrap(this Vector2 v, Vector2 min, Vector2 max) Parameters v Vector2 min Vector2 max Vector2 Returns Vector2 Wrap(Vector2, float, float) public static Vector2 Wrap(this Vector2 v, float min, float max) Parameters v Vector2 min float max float Returns Vector2 Zero() public static Vector2 Zero() Returns Vector2"
  },
  "api/ShapeEngine.StaticLib.TweenType.html": {
    "href": "api/ShapeEngine.StaticLib.TweenType.html",
    "title": "Enum TweenType | ShapeEngine",
    "summary": "Enum TweenType Namespace ShapeEngine.StaticLib Assembly ShapeEngine.dll public enum TweenType Fields BACK_IN = 19 BACK_INOUT = 21 BACK_OUT = 20 BOUNCE_IN = 22 BOUNCE_INOUT = 24 BOUNCE_OUT = 23 CIRC_IN = 7 CIRC_INOUT = 9 CIRC_OUT = 8 CUBIC_IN = 10 CUBIC_INOUT = 12 CUBIC_OUT = 11 ELASTIC_IN = 25 ELASTIC_INOUT = 27 ELASTIC_OUT = 26 EXPO_IN = 16 EXPO_INOUT = 18 EXPO_OUT = 17 LINEAR = 0 QUAD_IN = 13 QUAD_INOUT = 15 QUAD_OUT = 14 SINE_IN = 4 SINE_INOUT = 6 SINE_OUT = 5"
  },
  "api/ShapeEngine.StaticLib.html": {
    "href": "api/ShapeEngine.StaticLib.html",
    "title": "Namespace ShapeEngine.StaticLib | ShapeEngine",
    "summary": "Namespace ShapeEngine.StaticLib Classes IdCounter Polygons Polylines ShapeClipper ShapeID ShapeMath ShapePhysics ShapeRegex ShapeSavegame ShapeTween ShapeVec Enums TweenType"
  },
  "api/ShapeEngine.Stats.Buff.html": {
    "href": "api/ShapeEngine.Stats.Buff.html",
    "title": "Class Buff | ShapeEngine",
    "summary": "Class Buff Namespace ShapeEngine.Stats Assembly ShapeEngine.dll public class Buff : IBuff Inheritance object Buff Implements IBuff Derived BuffTimed Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Buff(uint) public Buff(uint id) Parameters id uint Buff(uint, params BuffEffect[]) public Buff(uint id, params BuffEffect[] effects) Parameters id uint effects BuffEffect[] Fields Effects protected readonly List<BuffEffect> Effects Field Value List<BuffEffect> Properties Id public uint Id { get; } Property Value uint Methods AddEffect(BuffEffect) public void AddEffect(BuffEffect buffEffect) Parameters buffEffect BuffEffect AddStacks(int) public virtual void AddStacks(int amount) Parameters amount int ApplyTo(IStat) public void ApplyTo(IStat stat) Parameters stat IStat Clone() public virtual IBuff Clone() Returns IBuff Draw(Rect) public virtual void Draw(Rect rect) Parameters rect Rect GetCurBuffValue(BuffEffect) protected virtual BuffValue GetCurBuffValue(BuffEffect effect) Parameters effect BuffEffect Returns BuffValue GetEffectTexts(ref List<string>) public virtual void GetEffectTexts(ref List<string> result) Parameters result List<string> GetId() public uint GetId() Returns uint IsFinished() public virtual bool IsFinished() Returns bool RemoveStacks(int) public virtual bool RemoveStacks(int amount) Parameters amount int Returns bool Update(float) public virtual void Update(float dt) Parameters dt float"
  },
  "api/ShapeEngine.Stats.BuffEffect.html": {
    "href": "api/ShapeEngine.Stats.BuffEffect.html",
    "title": "Struct BuffEffect | ShapeEngine",
    "summary": "Struct BuffEffect Namespace ShapeEngine.Stats Assembly ShapeEngine.dll public readonly struct BuffEffect Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors BuffEffect(uint, float, float, string) public BuffEffect(uint tag, float bonus = 0, float flat = 0, string tagName = \"\") Parameters tag uint bonus float flat float tagName string Fields Bonus public readonly float Bonus Field Value float Flat public readonly float Flat Field Value float Tag public readonly uint Tag Field Value uint TagName public readonly string TagName Field Value string Methods ToText() public string ToText() Returns string"
  },
  "api/ShapeEngine.Stats.BuffStacked.html": {
    "href": "api/ShapeEngine.Stats.BuffStacked.html",
    "title": "Class BuffStacked | ShapeEngine",
    "summary": "Class BuffStacked Namespace ShapeEngine.Stats Assembly ShapeEngine.dll public class BuffStacked : BuffTimed, IBuff Inheritance object Buff BuffTimed BuffStacked Implements IBuff Inherited Members BuffTimed.Duration BuffTimed.Timer BuffTimed.TimerF BuffTimed.Degrading Buff.Effects Buff.Id Buff.GetId() Buff.AddEffect(BuffEffect) Buff.ApplyTo(IStat) Buff.Draw(Rect) Buff.GetEffectTexts(ref List<string>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BuffStacked(uint, int) public BuffStacked(uint id, int maxStacks) Parameters id uint maxStacks int BuffStacked(uint, int, params BuffEffect[]) public BuffStacked(uint id, int maxStacks, params BuffEffect[] effects) Parameters id uint maxStacks int effects BuffEffect[] BuffStacked(uint, int, bool, bool) public BuffStacked(uint id, int maxStacks, bool stacksReplenishDuration, bool clearAllStacksOnDurationEnd) Parameters id uint maxStacks int stacksReplenishDuration bool clearAllStacksOnDurationEnd bool BuffStacked(uint, int, bool, bool, params BuffEffect[]) public BuffStacked(uint id, int maxStacks, bool stacksReplenishDuration, bool clearAllStacksOnDurationEnd, params BuffEffect[] effects) Parameters id uint maxStacks int stacksReplenishDuration bool clearAllStacksOnDurationEnd bool effects BuffEffect[] BuffStacked(uint, int, float, bool, params BuffEffect[]) public BuffStacked(uint id, int maxStacks, float duration, bool degrading, params BuffEffect[] effects) Parameters id uint maxStacks int duration float degrading bool effects BuffEffect[] BuffStacked(uint, int, float, bool, bool, bool, params BuffEffect[]) public BuffStacked(uint id, int maxStacks, float duration, bool degrading, bool stacksReplenishDuration, bool clearAllStacksOnDurationEnd, params BuffEffect[] effects) Parameters id uint maxStacks int duration float degrading bool stacksReplenishDuration bool clearAllStacksOnDurationEnd bool effects BuffEffect[] Fields ClearAllStacksOnDurationEnd public bool ClearAllStacksOnDurationEnd Field Value bool StacksReplenishDuration public bool StacksReplenishDuration Field Value bool Properties CurStacks public int CurStacks { get; } Property Value int MaxStacks public int MaxStacks { get; } Property Value int StackF public float StackF { get; } Property Value float Methods AddStacks(int) public override void AddStacks(int amount) Parameters amount int Clone() public override IBuff Clone() Returns IBuff GetCurBuffValue(BuffEffect) protected override BuffValue GetCurBuffValue(BuffEffect effect) Parameters effect BuffEffect Returns BuffValue GetStackText() public virtual string GetStackText() Returns string IsFinished() public override bool IsFinished() Returns bool RemoveStacks(int) public override bool RemoveStacks(int amount) Parameters amount int Returns bool Update(float) public override void Update(float dt) Parameters dt float"
  },
  "api/ShapeEngine.Stats.BuffTimed.html": {
    "href": "api/ShapeEngine.Stats.BuffTimed.html",
    "title": "Class BuffTimed | ShapeEngine",
    "summary": "Class BuffTimed Namespace ShapeEngine.Stats Assembly ShapeEngine.dll public class BuffTimed : Buff, IBuff Inheritance object Buff BuffTimed Implements IBuff Derived BuffStacked Inherited Members Buff.Effects Buff.Id Buff.GetId() Buff.AddEffect(BuffEffect) Buff.RemoveStacks(int) Buff.ApplyTo(IStat) Buff.Draw(Rect) Buff.GetEffectTexts(ref List<string>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BuffTimed(uint, float, bool) public BuffTimed(uint id, float duration, bool degrading) Parameters id uint duration float degrading bool BuffTimed(uint, float, bool, params BuffEffect[]) public BuffTimed(uint id, float duration, bool degrading, params BuffEffect[] effects) Parameters id uint duration float degrading bool effects BuffEffect[] Fields Degrading public bool Degrading Field Value bool Properties Duration public float Duration { get; } Property Value float Timer public float Timer { get; protected set; } Property Value float TimerF public float TimerF { get; } Property Value float Methods AddStacks(int) public override void AddStacks(int amount) Parameters amount int Clone() public override IBuff Clone() Returns IBuff GetCurBuffValue(BuffEffect) protected override BuffValue GetCurBuffValue(BuffEffect effect) Parameters effect BuffEffect Returns BuffValue IsFinished() public override bool IsFinished() Returns bool Update(float) public override void Update(float dt) Parameters dt float"
  },
  "api/ShapeEngine.Stats.BuffValue.html": {
    "href": "api/ShapeEngine.Stats.BuffValue.html",
    "title": "Struct BuffValue | ShapeEngine",
    "summary": "Struct BuffValue Namespace ShapeEngine.Stats Assembly ShapeEngine.dll public readonly struct BuffValue Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors BuffValue() public BuffValue() BuffValue(float, float) public BuffValue(float bonus, float flat) Parameters bonus float flat float Fields Bonus public readonly float Bonus Field Value float Flat public readonly float Flat Field Value float Methods Add(BuffValue) public BuffValue Add(BuffValue other) Parameters other BuffValue Returns BuffValue ApplyTo(float) public float ApplyTo(float baseValue) Parameters baseValue float Returns float Remove(BuffValue) public BuffValue Remove(BuffValue other) Parameters other BuffValue Returns BuffValue ToText() public string ToText() Returns string"
  },
  "api/ShapeEngine.Stats.IBuff.html": {
    "href": "api/ShapeEngine.Stats.IBuff.html",
    "title": "Interface IBuff | ShapeEngine",
    "summary": "Interface IBuff Namespace ShapeEngine.Stats Assembly ShapeEngine.dll public interface IBuff Methods AddStacks(int) void AddStacks(int amount) Parameters amount int ApplyTo(IStat) void ApplyTo(IStat stat) Parameters stat IStat Clone() IBuff Clone() Returns IBuff GetId() uint GetId() Returns uint IsFinished() bool IsFinished() Returns bool RemoveStacks(int) bool RemoveStacks(int amount) Parameters amount int Returns bool Update(float) void Update(float dt) Parameters dt float"
  },
  "api/ShapeEngine.Stats.IStat.html": {
    "href": "api/ShapeEngine.Stats.IStat.html",
    "title": "Interface IStat | ShapeEngine",
    "summary": "Interface IStat Namespace ShapeEngine.Stats Assembly ShapeEngine.dll public interface IStat Methods Apply(BuffValue) void Apply(BuffValue buffValue) Parameters buffValue BuffValue IsAffected(uint) bool IsAffected(uint tag) Parameters tag uint Returns bool Reset() void Reset()"
  },
  "api/ShapeEngine.Stats.Stat.html": {
    "href": "api/ShapeEngine.Stats.Stat.html",
    "title": "Class Stat | ShapeEngine",
    "summary": "Class Stat Namespace ShapeEngine.Stats Assembly ShapeEngine.dll public class Stat : IStat Inheritance object Stat Implements IStat Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Stat(uint, float, BitFlag) public Stat(uint id, float baseValue, BitFlag tagMask) Parameters id uint baseValue float tagMask BitFlag Fields Name public string Name Field Value string NameAbbreviation public string NameAbbreviation Field Value string Properties BaseValue public float BaseValue { get; set; } Property Value float CurValue public float CurValue { get; } Property Value float Id public uint Id { get; } Property Value uint Locked public bool Locked { get; set; } Property Value bool Methods Apply(BuffValue) public void Apply(BuffValue buffValue) Parameters buffValue BuffValue Draw(Rect) public virtual void Draw(Rect rect) Parameters rect Rect IsAffected(uint) public bool IsAffected(uint tag) Parameters tag uint Returns bool Reset() public void Reset() ToString() public string ToString() Returns string ToText(bool) public virtual string ToText(bool abbreviated) Parameters abbreviated bool Returns string"
  },
  "api/ShapeEngine.Stats.StatSimple.html": {
    "href": "api/ShapeEngine.Stats.StatSimple.html",
    "title": "Class StatSimple | ShapeEngine",
    "summary": "Class StatSimple Namespace ShapeEngine.Stats Assembly ShapeEngine.dll public class StatSimple Inheritance object StatSimple Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StatSimple(uint, float) public StatSimple(uint id, float baseValue) Parameters id uint baseValue float Properties BaseValue public float BaseValue { get; set; } Property Value float CurValue public float CurValue { get; } Property Value float Id public uint Id { get; } Property Value uint Methods AddBuff(BuffValue) public void AddBuff(BuffValue value) Parameters value BuffValue RemoveBuff(BuffValue) public void RemoveBuff(BuffValue value) Parameters value BuffValue Reset() public void Reset()"
  },
  "api/ShapeEngine.Stats.Stats.html": {
    "href": "api/ShapeEngine.Stats.Stats.html",
    "title": "Class Stats | ShapeEngine",
    "summary": "Class Stats Namespace ShapeEngine.Stats Assembly ShapeEngine.dll public class Stats Inheritance object Stats Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Stats() public Stats() Methods AddBuffStack(IBuff) public bool AddBuffStack(IBuff buff) Parameters buff IBuff Returns bool AddStat(Stat) public void AddStat(Stat stat) Parameters stat Stat BuffStackWasAdded(IBuff, int) protected virtual void BuffStackWasAdded(IBuff buff, int amount) Parameters buff IBuff amount int BuffStackWasRemoved(IBuff, int) protected virtual void BuffStackWasRemoved(IBuff buff, int amount) Parameters buff IBuff amount int BuffWasAdded(IBuff) protected virtual void BuffWasAdded(IBuff buff) Parameters buff IBuff BuffWasRemoved(IBuff) protected virtual void BuffWasRemoved(IBuff buff) Parameters buff IBuff DeleteBuff(IBuff) public bool DeleteBuff(IBuff buff) Parameters buff IBuff Returns bool RemoveBuffStack(IBuff) public bool RemoveBuffStack(IBuff buff) Parameters buff IBuff Returns bool RemoveStat(Stat) public bool RemoveStat(Stat stat) Parameters stat Stat Returns bool Update(float) public void Update(float dt) Parameters dt float Events OnBuffAdded public event Action<IBuff>? OnBuffAdded Event Type Action<IBuff> OnBuffRemoved public event Action<IBuff>? OnBuffRemoved Event Type Action<IBuff> OnBuffStackAdded public event Action<IBuff, int>? OnBuffStackAdded Event Type Action<IBuff, int> OnBuffStackRemoved public event Action<IBuff, int>? OnBuffStackRemoved Event Type Action<IBuff, int>"
  },
  "api/ShapeEngine.Stats.html": {
    "href": "api/ShapeEngine.Stats.html",
    "title": "Namespace ShapeEngine.Stats | ShapeEngine",
    "summary": "Namespace ShapeEngine.Stats Classes Buff BuffStacked BuffTimed Stat StatSimple Stats Structs BuffEffect BuffValue Interfaces IBuff IStat"
  },
  "api/ShapeEngine.Text.BinaryDrawer.html": {
    "href": "api/ShapeEngine.Text.BinaryDrawer.html",
    "title": "Class BinaryDrawer | ShapeEngine",
    "summary": "Class BinaryDrawer Namespace ShapeEngine.Text Assembly ShapeEngine.dll public class BinaryDrawer Inheritance object BinaryDrawer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BinaryDrawer(Dictionary<char, int[]>, int, int, Action<Rect, int, int, int>, Action<Rect, char>) public BinaryDrawer(Dictionary<char, int[]> binary, int gridWidth, int gridHeight, Action<Rect, int, int, int> cellDrawer, Action<Rect, char> backgroundDrawer) Parameters binary Dictionary<char, int[]> gridWidth int gridHeight int cellDrawer Action<Rect, int, int, int> backgroundDrawer Action<Rect, char> Properties GridSize public int GridSize { get; } Property Value int Methods Draw(string, Rect, float) public void Draw(string text, Rect rect, float spacing = 0.05) Parameters text string rect Rect spacing float"
  },
  "api/ShapeEngine.Text.BinaryDrawerTester.html": {
    "href": "api/ShapeEngine.Text.BinaryDrawerTester.html",
    "title": "Class BinaryDrawerTester | ShapeEngine",
    "summary": "Class BinaryDrawerTester Namespace ShapeEngine.Text Assembly ShapeEngine.dll public static class BinaryDrawerTester Inheritance object BinaryDrawerTester Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields BinaryDrawer3x5Standard public static readonly BinaryDrawer BinaryDrawer3x5Standard Field Value BinaryDrawer"
  },
  "api/ShapeEngine.Text.Caret.html": {
    "href": "api/ShapeEngine.Text.Caret.html",
    "title": "Struct Caret | ShapeEngine",
    "summary": "Struct Caret Namespace ShapeEngine.Text Assembly ShapeEngine.dll public struct Caret Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Caret() public Caret() Caret(int, ColorRgba, float) public Caret(int index, ColorRgba color, float relativeWidth = 0.05) Parameters index int color ColorRgba relativeWidth float Fields Color public ColorRgba Color Field Value ColorRgba Index public int Index Field Value int WidthRelative public float WidthRelative Field Value float Properties IsValid public bool IsValid { get; } Property Value bool Methods Draw(Vector2, float) public void Draw(Vector2 top, float height) Parameters top Vector2 height float"
  },
  "api/ShapeEngine.Text.ED_Block.html": {
    "href": "api/ShapeEngine.Text.ED_Block.html",
    "title": "Class ED_Block | ShapeEngine",
    "summary": "Class ED_Block Namespace ShapeEngine.Text Assembly ShapeEngine.dll public class ED_Block : IEmphasisDrawer Inheritance object ED_Block Implements IEmphasisDrawer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DrawBackground(Rect, ColorRgba) public void DrawBackground(Rect rect, ColorRgba colorRgba) Parameters rect Rect colorRgba ColorRgba DrawForeground(Rect, ColorRgba) public void DrawForeground(Rect rect, ColorRgba colorRgba) Parameters rect Rect colorRgba ColorRgba"
  },
  "api/ShapeEngine.Text.ED_Transparent.html": {
    "href": "api/ShapeEngine.Text.ED_Transparent.html",
    "title": "Class ED_Transparent | ShapeEngine",
    "summary": "Class ED_Transparent Namespace ShapeEngine.Text Assembly ShapeEngine.dll public class ED_Transparent : IEmphasisDrawer Inheritance object ED_Transparent Implements IEmphasisDrawer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DrawBackground(Rect, ColorRgba) public void DrawBackground(Rect rect, ColorRgba colorRgba) Parameters rect Rect colorRgba ColorRgba DrawForeground(Rect, ColorRgba) public void DrawForeground(Rect rect, ColorRgba colorRgba) Parameters rect Rect colorRgba ColorRgba"
  },
  "api/ShapeEngine.Text.ED_Underline.html": {
    "href": "api/ShapeEngine.Text.ED_Underline.html",
    "title": "Class ED_Underline | ShapeEngine",
    "summary": "Class ED_Underline Namespace ShapeEngine.Text Assembly ShapeEngine.dll public class ED_Underline : IEmphasisDrawer Inheritance object ED_Underline Implements IEmphasisDrawer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DrawBackground(Rect, ColorRgba) public void DrawBackground(Rect rect, ColorRgba colorRgba) Parameters rect Rect colorRgba ColorRgba DrawForeground(Rect, ColorRgba) public void DrawForeground(Rect rect, ColorRgba colorRgba) Parameters rect Rect colorRgba ColorRgba"
  },
  "api/ShapeEngine.Text.Emphasis.html": {
    "href": "api/ShapeEngine.Text.Emphasis.html",
    "title": "Class Emphasis | ShapeEngine",
    "summary": "Class Emphasis Namespace ShapeEngine.Text Assembly ShapeEngine.dll public class Emphasis Inheritance object Emphasis Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Emphasis(IEmphasisDrawer, ColorRgba, ColorRgba) public Emphasis(IEmphasisDrawer drawer, ColorRgba colorRgba, ColorRgba textColorRgba) Parameters drawer IEmphasisDrawer colorRgba ColorRgba textColorRgba ColorRgba Fields ColorRgba public ColorRgba ColorRgba Field Value ColorRgba TextColorRgba public ColorRgba TextColorRgba Field Value ColorRgba Methods DrawBackground(Rect) public void DrawBackground(Rect rect) Parameters rect Rect DrawForeground(Rect) public void DrawForeground(Rect rect) Parameters rect Rect"
  },
  "api/ShapeEngine.Text.FontDimensions.html": {
    "href": "api/ShapeEngine.Text.FontDimensions.html",
    "title": "Struct FontDimensions | ShapeEngine",
    "summary": "Struct FontDimensions Namespace ShapeEngine.Text Assembly ShapeEngine.dll public readonly struct FontDimensions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors FontDimensions(Font) public FontDimensions(Font font) Parameters font Font FontDimensions(Font, float) public FontDimensions(Font font, float size) Parameters font Font size float FontDimensions(Font, float, float) public FontDimensions(Font font, float size, float spacing) Parameters font Font size float spacing float FontDimensions(Font, float, float, float) public FontDimensions(Font font, float size, float spacing, float lineSpacing) Parameters font Font size float spacing float lineSpacing float Fields Font public readonly Font Font Field Value Font FontSizeRange public static ValueRange FontSizeRange Field Value ValueRange FontSizeRangeDefault public static readonly ValueRange FontSizeRangeDefault Field Value ValueRange LineSpacing public readonly float LineSpacing Field Value float Size public readonly float Size Field Value float Spacing public readonly float Spacing Field Value float Properties BaseSize public float BaseSize { get; } Property Value float Methods ChangeFontSize(float) public FontDimensions ChangeFontSize(float amount) Parameters amount float Returns FontDimensions ChangeLineSpacing(float) public FontDimensions ChangeLineSpacing(float amount) Parameters amount float Returns FontDimensions ChangeSpacing(float) public FontDimensions ChangeSpacing(float amount) Parameters amount float Returns FontDimensions GetCharBaseSize(char) public Size GetCharBaseSize(char c) Parameters c char Returns Size GetCharSize(char) public Size GetCharSize(char c) Parameters c char Returns Size GetCharSize(char, float) public Size GetCharSize(char c, float fontSize) Parameters c char fontSize float Returns Size GetTextBaseSize(string) public Size GetTextBaseSize(string text) Parameters text string Returns Size GetTextSize(string) public Size GetTextSize(string text) Parameters text string Returns Size GetTextSize(string, float) public Size GetTextSize(string text, float fontSize) Parameters text string fontSize float Returns Size GetTextSizeLineBreak(string) public Size GetTextSizeLineBreak(string text) Parameters text string Returns Size GetTextSizeLineBreak(string, float) public Size GetTextSizeLineBreak(string text, float fontSize) Parameters text string fontSize float Returns Size ScaleDynamic(string, Size) public FontDimensions ScaleDynamic(string text, Size rectSize) Parameters text string rectSize Size Returns FontDimensions ScaleDynamicWrapMode(string, Size, float) public FontDimensions ScaleDynamicWrapMode(string text, Size rectSize, float widthFactor = 1.3) Parameters text string rectSize Size widthFactor float Returns FontDimensions ScaleFontSize(float) public FontDimensions ScaleFontSize(float factor) Parameters factor float Returns FontDimensions ScaleLineSpacing(float) public FontDimensions ScaleLineSpacing(float factor) Parameters factor float Returns FontDimensions ScaleSpacing(float) public FontDimensions ScaleSpacing(float factor) Parameters factor float Returns FontDimensions SetFont(Font) public FontDimensions SetFont(Font newFont) Parameters newFont Font Returns FontDimensions SetFontSize(float) public FontDimensions SetFontSize(float newFontSize) Parameters newFontSize float Returns FontDimensions SetLineSpacing(float) public FontDimensions SetLineSpacing(float newLineSpacing) Parameters newLineSpacing float Returns FontDimensions SetSpacing(float) public FontDimensions SetSpacing(float newSpacing) Parameters newSpacing float Returns FontDimensions"
  },
  "api/ShapeEngine.Text.IEmphasisDrawer.html": {
    "href": "api/ShapeEngine.Text.IEmphasisDrawer.html",
    "title": "Interface IEmphasisDrawer | ShapeEngine",
    "summary": "Interface IEmphasisDrawer Namespace ShapeEngine.Text Assembly ShapeEngine.dll public interface IEmphasisDrawer Methods DrawBackground(Rect, ColorRgba) void DrawBackground(Rect rect, ColorRgba colorRgba) Parameters rect Rect colorRgba ColorRgba DrawForeground(Rect, ColorRgba) void DrawForeground(Rect rect, ColorRgba colorRgba) Parameters rect Rect colorRgba ColorRgba"
  },
  "api/ShapeEngine.Text.IMouseDetection.html": {
    "href": "api/ShapeEngine.Text.IMouseDetection.html",
    "title": "Interface IMouseDetection | ShapeEngine",
    "summary": "Interface IMouseDetection Namespace ShapeEngine.Text Assembly ShapeEngine.dll public interface IMouseDetection Methods GetMousePosition() Vector2 GetMousePosition() Returns Vector2 OnMouseEntered(string, string, Rect) Emphasis? OnMouseEntered(string curWord, string completeWord, Rect rect) Parameters curWord string completeWord string rect Rect Returns Emphasis"
  },
  "api/ShapeEngine.Text.TextEmphasis.html": {
    "href": "api/ShapeEngine.Text.TextEmphasis.html",
    "title": "Class TextEmphasis | ShapeEngine",
    "summary": "Class TextEmphasis Namespace ShapeEngine.Text Assembly ShapeEngine.dll public class TextEmphasis Inheritance object TextEmphasis Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TextEmphasis(Emphasis, string) public TextEmphasis(Emphasis emphasis, string regexPattern) Parameters emphasis Emphasis regexPattern string Fields Emphasis public readonly Emphasis Emphasis Field Value Emphasis Methods HasKeyword(string) public bool HasKeyword(string word) Parameters word string Returns bool"
  },
  "api/ShapeEngine.Text.TextEmphasisBox.html": {
    "href": "api/ShapeEngine.Text.TextEmphasisBox.html",
    "title": "Class TextEmphasisBox | ShapeEngine",
    "summary": "Class TextEmphasisBox Namespace ShapeEngine.Text Assembly ShapeEngine.dll public class TextEmphasisBox Inheritance object TextEmphasisBox Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TextEmphasisBox(TextFont) public TextEmphasisBox(TextFont textFont) Parameters textFont TextFont Fields Caret public Caret Caret Field Value Caret Emphases public readonly List<TextEmphasis> Emphases Field Value List<TextEmphasis> TextFont public TextFont TextFont Field Value TextFont UseEmphasis public bool UseEmphasis Field Value bool Methods Draw(string, Rect, AnchorPoint, Vector2, TextWrapType) public void Draw(string text, Rect rect, AnchorPoint alignement, Vector2 mousePos, TextWrapType textWrapType = TextWrapType.None) Parameters text string rect Rect alignement AnchorPoint mousePos Vector2 textWrapType TextWrapType HasEmphasis() public bool HasEmphasis() Returns bool"
  },
  "api/ShapeEngine.Text.TextFont.html": {
    "href": "api/ShapeEngine.Text.TextFont.html",
    "title": "Class TextFont | ShapeEngine",
    "summary": "Class TextFont Namespace ShapeEngine.Text Assembly ShapeEngine.dll public class TextFont Inheritance object TextFont Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TextFont(Font, float, ColorRgba) public TextFont(Font font, float fontSpacing, ColorRgba colorRgba) Parameters font Font fontSpacing float colorRgba ColorRgba TextFont(Font, float, float, float, ColorRgba) public TextFont(Font font, float fontSize, float fontSpacing, float lineSpacing, ColorRgba colorRgba) Parameters font Font fontSize float fontSpacing float lineSpacing float colorRgba ColorRgba TextFont(FontDimensions) public TextFont(FontDimensions fontDimensions) Parameters fontDimensions FontDimensions TextFont(FontDimensions, ColorRgba) public TextFont(FontDimensions fontDimensions, ColorRgba colorRgba) Parameters fontDimensions FontDimensions colorRgba ColorRgba TextFont(FontDimensions, ColorRgba, IMouseDetection) public TextFont(FontDimensions fontDimensions, ColorRgba colorRgba, IMouseDetection mouseDetection) Parameters fontDimensions FontDimensions colorRgba ColorRgba mouseDetection IMouseDetection Fields ColorRgba public ColorRgba ColorRgba Field Value ColorRgba EmphasisRectMargins public static Rect.Margins EmphasisRectMargins Field Value Rect.Margins FontDimensions public FontDimensions FontDimensions Field Value FontDimensions MouseDetection Is used on Wrap Char/Word draw functions. Is used to determine what happens with words that are entered by the mouse pointer. public IMouseDetection? MouseDetection Field Value IMouseDetection Properties BaseSize public float BaseSize { get; } Property Value float Font public Font Font { get; set; } Property Value Font FontSize public float FontSize { get; set; } Property Value float FontSizeModifier public static float FontSizeModifier { get; set; } Property Value float FontSpacing public float FontSpacing { get; set; } Property Value float LineSpacing public float LineSpacing { get; set; } Property Value float Methods Clone() public TextFont Clone() Returns TextFont Draw(char, Rect, AnchorPoint) public void Draw(char c, Rect rect, AnchorPoint alignement) Parameters c char rect Rect alignement AnchorPoint Draw(string, Rect, float, AnchorPoint) public void Draw(string text, Rect rect, float rotDeg, AnchorPoint alignement) Parameters text string rect Rect rotDeg float alignement AnchorPoint DrawTextWrapChar(string, Rect, AnchorPoint) public void DrawTextWrapChar(string text, Rect rect, AnchorPoint alignement) Parameters text string rect Rect alignement AnchorPoint DrawTextWrapChar(string, Rect, AnchorPoint, Caret) public void DrawTextWrapChar(string text, Rect rect, AnchorPoint alignement, Caret caret) Parameters text string rect Rect alignement AnchorPoint caret Caret DrawTextWrapChar(string, Rect, AnchorPoint, Caret, List<TextEmphasis>?) public void DrawTextWrapChar(string text, Rect rect, AnchorPoint alignement, Caret caret, List<TextEmphasis>? emphases) Parameters text string rect Rect alignement AnchorPoint caret Caret emphases List<TextEmphasis> DrawTextWrapNone(string, Rect, AnchorPoint) public void DrawTextWrapNone(string text, Rect rect, AnchorPoint alignement) Parameters text string rect Rect alignement AnchorPoint DrawTextWrapNone(string, Rect, AnchorPoint, ColorRgba) public void DrawTextWrapNone(string text, Rect rect, AnchorPoint alignement, ColorRgba colorRgba) Parameters text string rect Rect alignement AnchorPoint colorRgba ColorRgba DrawTextWrapNone(string, Rect, AnchorPoint, Caret) public void DrawTextWrapNone(string text, Rect rect, AnchorPoint alignement, Caret caret) Parameters text string rect Rect alignement AnchorPoint caret Caret DrawTextWrapNone(string, Rect, AnchorPoint, Caret, List<TextEmphasis>?) public void DrawTextWrapNone(string text, Rect rect, AnchorPoint alignement, Caret caret, List<TextEmphasis>? emphases) Parameters text string rect Rect alignement AnchorPoint caret Caret emphases List<TextEmphasis> DrawTextWrapWord(string, Rect, AnchorPoint) public void DrawTextWrapWord(string text, Rect rect, AnchorPoint alignement) Parameters text string rect Rect alignement AnchorPoint DrawTextWrapWord(string, Rect, AnchorPoint, Caret) public void DrawTextWrapWord(string text, Rect rect, AnchorPoint alignement, Caret caret) Parameters text string rect Rect alignement AnchorPoint caret Caret DrawTextWrapWord(string, Rect, AnchorPoint, Caret, List<TextEmphasis>?) public void DrawTextWrapWord(string text, Rect rect, AnchorPoint alignement, Caret caret, List<TextEmphasis>? emphases) Parameters text string rect Rect alignement AnchorPoint caret Caret emphases List<TextEmphasis> DrawWord(string, Rect, AnchorPoint) public void DrawWord(string word, Rect rect, AnchorPoint alignement) Parameters word string rect Rect alignement AnchorPoint DrawWord(string, Rect, AnchorPoint, Emphasis) public void DrawWord(string word, Rect rect, AnchorPoint alignement, Emphasis emphasis) Parameters word string rect Rect alignement AnchorPoint emphasis Emphasis DrawWord(string, Vector2) public void DrawWord(string word, Vector2 topLeft) Parameters word string topLeft Vector2 DrawWord(string, Vector2, ColorRgba, FontDimensions) protected void DrawWord(string word, Vector2 topLeft, ColorRgba colorRgba, FontDimensions fontDimensions) Parameters word string topLeft Vector2 colorRgba ColorRgba fontDimensions FontDimensions DrawWord(string, Vector2, AnchorPoint) public void DrawWord(string word, Vector2 topLeft, AnchorPoint alignement) Parameters word string topLeft Vector2 alignement AnchorPoint DrawWord(string, Vector2, AnchorPoint, Caret) public void DrawWord(string word, Vector2 topLeft, AnchorPoint alignement, Caret caret) Parameters word string topLeft Vector2 alignement AnchorPoint caret Caret DrawWord(string, Vector2, FontDimensions) public void DrawWord(string word, Vector2 topLeft, FontDimensions fontDimensions) Parameters word string topLeft Vector2 fontDimensions FontDimensions DrawWord(string, Vector2, float, Emphasis, FontDimensions) protected void DrawWord(string word, Vector2 topLeft, float width, Emphasis emphasis, FontDimensions fontDimensions) Parameters word string topLeft Vector2 width float emphasis Emphasis fontDimensions FontDimensions GetEmphasis(string, List<TextEmphasis>?) public static Emphasis? GetEmphasis(string word, List<TextEmphasis>? emphases) Parameters word string emphases List<TextEmphasis> Returns Emphasis SetFilter(TextureFilter) public void SetFilter(TextureFilter textureFilter = TextureFilter.Bilinear) Parameters textureFilter TextureFilter"
  },
  "api/ShapeEngine.Text.TextInputBox.html": {
    "href": "api/ShapeEngine.Text.TextInputBox.html",
    "title": "Class TextInputBox | ShapeEngine",
    "summary": "Class TextInputBox Namespace ShapeEngine.Text Assembly ShapeEngine.dll public class TextInputBox Inheritance object TextInputBox Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TextInputBox(string) public TextInputBox(string emptyText) Parameters emptyText string Fields CaretBlinkInterval public float CaretBlinkInterval Field Value float CaretMoveInterval public float CaretMoveInterval Field Value float EmptyText public string EmptyText Field Value string Properties Active public bool Active { get; } Property Value bool ActiveText public string ActiveText { get; } Property Value string CaretIndex public int CaretIndex { get; } Property Value int CaretVisible public bool CaretVisible { get; } Property Value bool EnteredText public string EnteredText { get; } Property Value string Text public string Text { get; } Property Value string Methods AddCharacter(char) public bool AddCharacter(char c) Parameters c char Returns bool AddCharacter(int) public bool AddCharacter(int unicode) Parameters unicode int Returns bool AddCharacters(List<char>) public bool AddCharacters(List<char> characters) Parameters characters List<char> Returns bool AddCharacters(List<int>) public bool AddCharacters(List<int> unicodeCharacters) Parameters unicodeCharacters List<int> Returns bool CancelEntry() public bool CancelEntry() Returns bool DeleteCharacter(int) public bool DeleteCharacter(int amount) Parameters amount int Returns bool DeleteCharacterEnd() public void DeleteCharacterEnd() DeleteCharacterStart(int) public bool DeleteCharacterStart(int amount) Parameters amount int Returns bool DeleteEntry() public bool DeleteEntry() Returns bool FinishEntry() public string FinishEntry() Returns string MoveCaret(int, bool) public int MoveCaret(int spaces, bool wrapAround = false) Parameters spaces int wrapAround bool Returns int MoveCaretEnd() public void MoveCaretEnd() MoveCaretStart(int, bool) public int MoveCaretStart(int spaces, bool wrapAround = false) Parameters spaces int wrapAround bool Returns int SetEnteredText(string) public void SetEnteredText(string newEnteredText) Parameters newEnteredText string StartEntry() public bool StartEntry() Returns bool StartEntryClean() public bool StartEntryClean() Returns bool Update(float) public void Update(float dt) Parameters dt float"
  },
  "api/ShapeEngine.Text.TextWrapType.html": {
    "href": "api/ShapeEngine.Text.TextWrapType.html",
    "title": "Enum TextWrapType | ShapeEngine",
    "summary": "Enum TextWrapType Namespace ShapeEngine.Text Assembly ShapeEngine.dll public enum TextWrapType Fields Char = 1 None = 0 Word = 2"
  },
  "api/ShapeEngine.Text.html": {
    "href": "api/ShapeEngine.Text.html",
    "title": "Namespace ShapeEngine.Text | ShapeEngine",
    "summary": "Namespace ShapeEngine.Text Classes BinaryDrawer BinaryDrawerTester ED_Block ED_Transparent ED_Underline Emphasis TextEmphasis TextEmphasisBox TextFont TextInputBox Structs Caret FontDimensions Interfaces IEmphasisDrawer IMouseDetection Enums TextWrapType"
  },
  "api/ShapeEngine.Timing.Actionable.ActionableFunc.html": {
    "href": "api/ShapeEngine.Timing.Actionable.ActionableFunc.html",
    "title": "Delegate Actionable.ActionableFunc | ShapeEngine",
    "summary": "Delegate Actionable.ActionableFunc Namespace ShapeEngine.Timing Assembly ShapeEngine.dll public delegate void Actionable.ActionableFunc(float timeF, float dt) Parameters timeF float dt float"
  },
  "api/ShapeEngine.Timing.Actionable.html": {
    "href": "api/ShapeEngine.Timing.Actionable.html",
    "title": "Class Actionable | ShapeEngine",
    "summary": "Class Actionable Namespace ShapeEngine.Timing Assembly ShapeEngine.dll public class Actionable : ISequenceable Inheritance object Actionable Implements ISequenceable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Actionable(ActionableFunc, float) public Actionable(Actionable.ActionableFunc action, float duration) Parameters action Actionable.ActionableFunc duration float Methods Copy() public ISequenceable Copy() Returns ISequenceable Update(float) public bool Update(float dt) Parameters dt float Returns bool Returns if finished."
  },
  "api/ShapeEngine.Timing.BasicTimer.html": {
    "href": "api/ShapeEngine.Timing.BasicTimer.html",
    "title": "Class BasicTimer | ShapeEngine",
    "summary": "Class BasicTimer Namespace ShapeEngine.Timing Assembly ShapeEngine.dll public class BasicTimer Inheritance object BasicTimer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BasicTimer() public BasicTimer() Fields timer public float timer Field Value float Properties Duration public float Duration { get; protected set; } Property Value float Elapsed public float Elapsed { get; protected set; } Property Value float F public float F { get; protected set; } Property Value float IsFinished public bool IsFinished { get; } Property Value bool IsRunning public bool IsRunning { get; } Property Value bool Paused public bool Paused { get; protected set; } Property Value bool Remaining public float Remaining { get; } Property Value float WasStarted public bool WasStarted { get; } Property Value bool Methods Add(float) public void Add(float amount) Parameters amount float Cancel() public void Cancel() Pause() public void Pause() Restart() public void Restart() Resume() public void Resume() Start(float) public void Start(float duration) Parameters duration float Stop() public void Stop() Update(float) public void Update(float dt) Parameters dt float"
  },
  "api/ShapeEngine.Timing.ISequenceable.html": {
    "href": "api/ShapeEngine.Timing.ISequenceable.html",
    "title": "Interface ISequenceable | ShapeEngine",
    "summary": "Interface ISequenceable Namespace ShapeEngine.Timing Assembly ShapeEngine.dll public interface ISequenceable Methods Copy() ISequenceable Copy() Returns ISequenceable Update(float) bool Update(float dt) Parameters dt float Returns bool Returns if finished."
  },
  "api/ShapeEngine.Timing.ISequenceableTimedFloat.html": {
    "href": "api/ShapeEngine.Timing.ISequenceableTimedFloat.html",
    "title": "Interface ISequenceableTimedFloat | ShapeEngine",
    "summary": "Interface ISequenceableTimedFloat Namespace ShapeEngine.Timing Assembly ShapeEngine.dll public interface ISequenceableTimedFloat : ISequenceable Inherited Members ISequenceable.Update(float) ISequenceable.Copy() Methods ApplyValue(float) float ApplyValue(float total) Parameters total float Returns float"
  },
  "api/ShapeEngine.Timing.Repeater.RepeaterFunc.html": {
    "href": "api/ShapeEngine.Timing.Repeater.RepeaterFunc.html",
    "title": "Delegate Repeater.RepeaterFunc | ShapeEngine",
    "summary": "Delegate Repeater.RepeaterFunc Namespace ShapeEngine.Timing Assembly ShapeEngine.dll Delegate that is called after duration for every repeat. Takes the specified duration and return a duration as well. public delegate float Repeater.RepeaterFunc(float duration) Parameters duration float Takes in the specified duration for modification. Returns float Returns the duration for the next cycle."
  },
  "api/ShapeEngine.Timing.Repeater.html": {
    "href": "api/ShapeEngine.Timing.Repeater.html",
    "title": "Class Repeater | ShapeEngine",
    "summary": "Class Repeater Namespace ShapeEngine.Timing Assembly ShapeEngine.dll public class Repeater : ISequenceable Inheritance object Repeater Implements ISequenceable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Repeater(Repeater) public Repeater(Repeater repeater) Parameters repeater Repeater Repeater(RepeaterFunc, float, int) public Repeater(Repeater.RepeaterFunc repeaterFunc, float duration, int repeats = 0) Parameters repeaterFunc Repeater.RepeaterFunc duration float repeats int Methods Copy() public ISequenceable Copy() Returns ISequenceable Update(float) public bool Update(float dt) Parameters dt float Returns bool Returns if finished."
  },
  "api/ShapeEngine.Timing.Sequencer-1.html": {
    "href": "api/ShapeEngine.Timing.Sequencer-1.html",
    "title": "Class Sequencer<T> | ShapeEngine",
    "summary": "Class Sequencer<T> Namespace ShapeEngine.Timing Assembly ShapeEngine.dll public class Sequencer<T> where T : ISequenceable Type Parameters T Inheritance object Sequencer<T> Derived SequencerTimedFloat<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Sequencer() public Sequencer() Methods ApplyState(SequencerState<T>) public void ApplyState(SequencerState<T> state) Parameters state SequencerState<T> CancelSequence(uint) public void CancelSequence(uint id) Parameters id uint Clear() public SequencerState<T> Clear() Returns SequencerState<T> EndUpdate() protected virtual void EndUpdate() GetState() public SequencerState<T> GetState() Returns SequencerState<T> HasSequence(uint) public bool HasSequence(uint id) Parameters id uint Returns bool HasSequences() public bool HasSequences() Returns bool StartSequence(params T[]) public uint StartSequence(params T[] items) Parameters items T[] Returns uint StartUpdate() protected virtual void StartUpdate() Stop() public void Stop() Update(float) public void Update(float dt) Parameters dt float UpdateSequence(T, float) protected virtual bool UpdateSequence(T sequence, float dt) Parameters sequence T dt float Returns bool Events OnItemUpdated public event Action<T>? OnItemUpdated Event Type Action<T> OnSequenceFinished public event Action<uint>? OnSequenceFinished Event Type Action<uint>"
  },
  "api/ShapeEngine.Timing.SequencerState-1.html": {
    "href": "api/ShapeEngine.Timing.SequencerState-1.html",
    "title": "Class SequencerState<T> | ShapeEngine",
    "summary": "Class SequencerState<T> Namespace ShapeEngine.Timing Assembly ShapeEngine.dll public sealed class SequencerState<T> where T : ISequenceable Type Parameters T Inheritance object SequencerState<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/ShapeEngine.Timing.SequencerTimedFloat-1.html": {
    "href": "api/ShapeEngine.Timing.SequencerTimedFloat-1.html",
    "title": "Class SequencerTimedFloat<T> | ShapeEngine",
    "summary": "Class SequencerTimedFloat<T> Namespace ShapeEngine.Timing Assembly ShapeEngine.dll public class SequencerTimedFloat<T> : Sequencer<T> where T : ISequenceableTimedFloat Type Parameters T Inheritance object Sequencer<T> SequencerTimedFloat<T> Inherited Members Sequencer<T>.OnSequenceFinished Sequencer<T>.OnItemUpdated Sequencer<T>.GetState() Sequencer<T>.Clear() Sequencer<T>.ApplyState(SequencerState<T>) Sequencer<T>.HasSequences() Sequencer<T>.HasSequence(uint) Sequencer<T>.StartSequence(params T[]) Sequencer<T>.CancelSequence(uint) Sequencer<T>.Stop() Sequencer<T>.Update(float) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Total public float Total { get; protected set; } Property Value float Methods EndUpdate() protected override void EndUpdate() StartUpdate() protected override void StartUpdate() UpdateSequence(T, float) protected override bool UpdateSequence(T sequence, float dt) Parameters sequence T dt float Returns bool"
  },
  "api/ShapeEngine.Timing.TimedFloat.html": {
    "href": "api/ShapeEngine.Timing.TimedFloat.html",
    "title": "Class TimedFloat | ShapeEngine",
    "summary": "Class TimedFloat Namespace ShapeEngine.Timing Assembly ShapeEngine.dll public class TimedFloat : ISequenceableTimedFloat, ISequenceable Inheritance object TimedFloat Implements ISequenceableTimedFloat ISequenceable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TimedFloat(TimedFloat) public TimedFloat(TimedFloat timed) Parameters timed TimedFloat TimedFloat(float, float) public TimedFloat(float duration, float value) Parameters duration float value float Methods ApplyValue(float) public float ApplyValue(float total) Parameters total float Returns float Copy() public ISequenceable Copy() Returns ISequenceable Update(float) public bool Update(float dt) Parameters dt float Returns bool Returns if finished."
  },
  "api/ShapeEngine.Timing.Tween.TweenFunc.html": {
    "href": "api/ShapeEngine.Timing.Tween.TweenFunc.html",
    "title": "Delegate Tween.TweenFunc | ShapeEngine",
    "summary": "Delegate Tween.TweenFunc Namespace ShapeEngine.Timing Assembly ShapeEngine.dll public delegate bool Tween.TweenFunc(float f) Parameters f float Returns bool"
  },
  "api/ShapeEngine.Timing.Tween.html": {
    "href": "api/ShapeEngine.Timing.Tween.html",
    "title": "Class Tween | ShapeEngine",
    "summary": "Class Tween Namespace ShapeEngine.Timing Assembly ShapeEngine.dll public class Tween : ISequenceable Inheritance object Tween Implements ISequenceable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Tween(Tween) public Tween(Tween tween) Parameters tween Tween Tween(TweenFunc, float, TweenType) public Tween(Tween.TweenFunc tweenFunc, float duration, TweenType tweenType) Parameters tweenFunc Tween.TweenFunc duration float tweenType TweenType Methods Copy() public ISequenceable Copy() Returns ISequenceable Update(float) public bool Update(float dt) Parameters dt float Returns bool Returns if finished."
  },
  "api/ShapeEngine.Timing.TweenColor.TweenFunc.html": {
    "href": "api/ShapeEngine.Timing.TweenColor.TweenFunc.html",
    "title": "Delegate TweenColor.TweenFunc | ShapeEngine",
    "summary": "Delegate TweenColor.TweenFunc Namespace ShapeEngine.Timing Assembly ShapeEngine.dll public delegate bool TweenColor.TweenFunc(ColorRgba result) Parameters result ColorRgba Returns bool"
  },
  "api/ShapeEngine.Timing.TweenColor.html": {
    "href": "api/ShapeEngine.Timing.TweenColor.html",
    "title": "Class TweenColor | ShapeEngine",
    "summary": "Class TweenColor Namespace ShapeEngine.Timing Assembly ShapeEngine.dll public class TweenColor : ISequenceable Inheritance object TweenColor Implements ISequenceable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TweenColor(TweenColor) public TweenColor(TweenColor tween) Parameters tween TweenColor TweenColor(TweenFunc, ColorRgba, ColorRgba, float, TweenType) public TweenColor(TweenColor.TweenFunc tweenFunc, ColorRgba from, ColorRgba to, float duration, TweenType tweenType) Parameters tweenFunc TweenColor.TweenFunc from ColorRgba to ColorRgba duration float tweenType TweenType Methods Copy() public ISequenceable Copy() Returns ISequenceable Update(float) public bool Update(float dt) Parameters dt float Returns bool Returns if finished."
  },
  "api/ShapeEngine.Timing.TweenFloat.TweenFunc.html": {
    "href": "api/ShapeEngine.Timing.TweenFloat.TweenFunc.html",
    "title": "Delegate TweenFloat.TweenFunc | ShapeEngine",
    "summary": "Delegate TweenFloat.TweenFunc Namespace ShapeEngine.Timing Assembly ShapeEngine.dll public delegate bool TweenFloat.TweenFunc(float result) Parameters result float Returns bool"
  },
  "api/ShapeEngine.Timing.TweenFloat.html": {
    "href": "api/ShapeEngine.Timing.TweenFloat.html",
    "title": "Class TweenFloat | ShapeEngine",
    "summary": "Class TweenFloat Namespace ShapeEngine.Timing Assembly ShapeEngine.dll public class TweenFloat : ISequenceable Inheritance object TweenFloat Implements ISequenceable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TweenFloat(TweenFloat) public TweenFloat(TweenFloat tween) Parameters tween TweenFloat TweenFloat(TweenFunc, float, float, float, TweenType) public TweenFloat(TweenFloat.TweenFunc tweenFunc, float from, float to, float duration, TweenType tweenType) Parameters tweenFunc TweenFloat.TweenFunc from float to float duration float tweenType TweenType Methods Copy() public ISequenceable Copy() Returns ISequenceable Update(float) public bool Update(float dt) Parameters dt float Returns bool Returns if finished."
  },
  "api/ShapeEngine.Timing.TweenInt.TweenFunc.html": {
    "href": "api/ShapeEngine.Timing.TweenInt.TweenFunc.html",
    "title": "Delegate TweenInt.TweenFunc | ShapeEngine",
    "summary": "Delegate TweenInt.TweenFunc Namespace ShapeEngine.Timing Assembly ShapeEngine.dll public delegate bool TweenInt.TweenFunc(int result) Parameters result int Returns bool"
  },
  "api/ShapeEngine.Timing.TweenInt.html": {
    "href": "api/ShapeEngine.Timing.TweenInt.html",
    "title": "Class TweenInt | ShapeEngine",
    "summary": "Class TweenInt Namespace ShapeEngine.Timing Assembly ShapeEngine.dll public class TweenInt : ISequenceable Inheritance object TweenInt Implements ISequenceable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TweenInt(TweenInt) public TweenInt(TweenInt tween) Parameters tween TweenInt TweenInt(TweenFunc, int, int, float, TweenType) public TweenInt(TweenInt.TweenFunc tweenFunc, int from, int to, float duration, TweenType tweenType) Parameters tweenFunc TweenInt.TweenFunc from int to int duration float tweenType TweenType Methods Copy() public ISequenceable Copy() Returns ISequenceable Update(float) public bool Update(float dt) Parameters dt float Returns bool Returns if finished."
  },
  "api/ShapeEngine.Timing.TweenRect.TweenFunc.html": {
    "href": "api/ShapeEngine.Timing.TweenRect.TweenFunc.html",
    "title": "Delegate TweenRect.TweenFunc | ShapeEngine",
    "summary": "Delegate TweenRect.TweenFunc Namespace ShapeEngine.Timing Assembly ShapeEngine.dll public delegate bool TweenRect.TweenFunc(Rect result) Parameters result Rect Returns bool"
  },
  "api/ShapeEngine.Timing.TweenRect.html": {
    "href": "api/ShapeEngine.Timing.TweenRect.html",
    "title": "Class TweenRect | ShapeEngine",
    "summary": "Class TweenRect Namespace ShapeEngine.Timing Assembly ShapeEngine.dll public class TweenRect : ISequenceable Inheritance object TweenRect Implements ISequenceable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TweenRect(TweenRect) public TweenRect(TweenRect tween) Parameters tween TweenRect TweenRect(TweenFunc, Rect, Rect, float, TweenType) public TweenRect(TweenRect.TweenFunc tweenFunc, Rect from, Rect to, float duration, TweenType tweenType) Parameters tweenFunc TweenRect.TweenFunc from Rect to Rect duration float tweenType TweenType Methods Copy() public ISequenceable Copy() Returns ISequenceable Update(float) public bool Update(float dt) Parameters dt float Returns bool Returns if finished."
  },
  "api/ShapeEngine.Timing.TweenVector2.TweenFunc.html": {
    "href": "api/ShapeEngine.Timing.TweenVector2.TweenFunc.html",
    "title": "Delegate TweenVector2.TweenFunc | ShapeEngine",
    "summary": "Delegate TweenVector2.TweenFunc Namespace ShapeEngine.Timing Assembly ShapeEngine.dll public delegate bool TweenVector2.TweenFunc(Vector2 result) Parameters result Vector2 Returns bool"
  },
  "api/ShapeEngine.Timing.TweenVector2.html": {
    "href": "api/ShapeEngine.Timing.TweenVector2.html",
    "title": "Class TweenVector2 | ShapeEngine",
    "summary": "Class TweenVector2 Namespace ShapeEngine.Timing Assembly ShapeEngine.dll public class TweenVector2 : ISequenceable Inheritance object TweenVector2 Implements ISequenceable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TweenVector2(TweenVector2) public TweenVector2(TweenVector2 tween) Parameters tween TweenVector2 TweenVector2(TweenFunc, Vector2, Vector2, float, TweenType) public TweenVector2(TweenVector2.TweenFunc tweenFunc, Vector2 from, Vector2 to, float duration, TweenType tweenType) Parameters tweenFunc TweenVector2.TweenFunc from Vector2 to Vector2 duration float tweenType TweenType Methods Copy() public ISequenceable Copy() Returns ISequenceable Update(float) public bool Update(float dt) Parameters dt float Returns bool Returns if finished."
  },
  "api/ShapeEngine.Timing.html": {
    "href": "api/ShapeEngine.Timing.html",
    "title": "Namespace ShapeEngine.Timing | ShapeEngine",
    "summary": "Namespace ShapeEngine.Timing Classes Actionable BasicTimer Repeater SequencerState<T> SequencerTimedFloat<T> Sequencer<T> TimedFloat Tween TweenColor TweenFloat TweenInt TweenRect TweenVector2 Interfaces ISequenceable ISequenceableTimedFloat Delegates Actionable.ActionableFunc Repeater.RepeaterFunc Delegate that is called after duration for every repeat. Takes the specified duration and return a duration as well. Tween.TweenFunc TweenColor.TweenFunc TweenFloat.TweenFunc TweenInt.TweenFunc TweenRect.TweenFunc TweenVector2.TweenFunc"
  },
  "api/ShapeEngine.UI.ControlNode.html": {
    "href": "api/ShapeEngine.UI.ControlNode.html",
    "title": "Class ControlNode | ShapeEngine",
    "summary": "Class ControlNode Namespace ShapeEngine.UI Assembly ShapeEngine.dll public abstract class ControlNode Inheritance object ControlNode Derived ControlNodeContainer ControlNodeSlider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Anchor public AnchorPoint Anchor Field Value AnchorPoint ContainerStretch public float ContainerStretch Field Value float DisplayedChildren protected List<ControlNode>? DisplayedChildren Field Value List<ControlNode> Margins public Rect.Margins Margins Field Value Rect.Margins MaxSize public Size MaxSize Field Value Size MinSize public Size MinSize Field Value Size Stretch Stretch determines the size of the rect based on the parent rect size. Values are relative and in range 0 - 1. If Stretch values are 0 than the size of the rect can be set manually without it being changed by the parent rect size. public Vector2 Stretch Field Value Vector2 Properties Active public bool Active { get; set; } Property Value bool ChildCount public int ChildCount { get; } Property Value int Displayed public bool Displayed { get; set; } Property Value bool DisplayedChildrenCount public int DisplayedChildrenCount { get; } Property Value int GetChildrenEnumerable public IEnumerable<ControlNode> GetChildrenEnumerable { get; } Property Value IEnumerable<ControlNode> HasChildren public bool HasChildren { get; } Property Value bool HasDisplayedChildren public bool HasDisplayedChildren { get; } Property Value bool HasParent public bool HasParent { get; } Property Value bool InputFilter public InputFilter InputFilter { get; set; } Property Value InputFilter IsActiveInHierarchy Is this instance active and are its parents active to the root node? public bool IsActiveInHierarchy { get; } Property Value bool IsVisibleInHierarchy Is this instance visible and are its parents visible to the root node? public bool IsVisibleInHierarchy { get; } Property Value bool MouseFilter public MouseFilter MouseFilter { get; set; } Property Value MouseFilter MouseInside public bool MouseInside { get; } Property Value bool MouseInsidePosition public Vector2 MouseInsidePosition { get; } Property Value Vector2 Navigable public bool Navigable { get; } Property Value bool Parent public ControlNode? Parent { get; } Property Value ControlNode ParentActive public bool ParentActive { get; } Property Value bool ParentVisible public bool ParentVisible { get; } Property Value bool Pressed public bool Pressed { get; } Property Value bool Rect Set the rect only on root nodes. Otherwise it will have no effect except of changing the size if Stretch values are 0. public Rect Rect { get; } Property Value Rect Selected public bool Selected { get; } Property Value bool SelectionFilter public SelectFilter SelectionFilter { get; set; } Property Value SelectFilter Visible public bool Visible { get; set; } Property Value bool Methods ActiveInHierarchyChanged(bool) protected virtual void ActiveInHierarchyChanged(bool value) Parameters value bool ActiveWasChanged(bool) protected virtual void ActiveWasChanged(bool value) Parameters value bool AddChild(ControlNode) public bool AddChild(ControlNode child) Parameters child ControlNode Returns bool ChildWasAdded(ControlNode) protected virtual void ChildWasAdded(ControlNode newChild) Parameters newChild ControlNode ChildWasRemoved(ControlNode) protected virtual void ChildWasRemoved(ControlNode oldChild) Parameters oldChild ControlNode ClearChildren() public void ClearChildren() Deselect() public bool Deselect() Returns bool DisplayedWasChanged(bool) protected virtual void DisplayedWasChanged(bool value) Parameters value bool Draw() public void Draw() GetAllActiveInHierarchyChildren(ref HashSet<ControlNode>) public int GetAllActiveInHierarchyChildren(ref HashSet<ControlNode> activeChildren) Parameters activeChildren HashSet<ControlNode> Returns int GetAllChildren(ref HashSet<ControlNode>) public int GetAllChildren(ref HashSet<ControlNode> result) Parameters result HashSet<ControlNode> Returns int GetAllChildren(Predicate<ControlNode>, ref HashSet<ControlNode>) public int GetAllChildren(Predicate<ControlNode> match, ref HashSet<ControlNode> result) Parameters match Predicate<ControlNode> result HashSet<ControlNode> Returns int GetAllNavigableChildren(ref HashSet<ControlNode>) public int GetAllNavigableChildren(ref HashSet<ControlNode> navigable) Parameters navigable HashSet<ControlNode> Returns int GetAllVisibleInHierarchyChildren(ref HashSet<ControlNode>) public int GetAllVisibleInHierarchyChildren(ref HashSet<ControlNode> visibleChildren) Parameters visibleChildren HashSet<ControlNode> Returns int GetChild(int) public ControlNode? GetChild(int index) Parameters index int Returns ControlNode GetChildIndex(ControlNode) public int GetChildIndex(ControlNode child) Parameters child ControlNode Returns int GetChildren(Predicate<ControlNode>) public List<ControlNode>? GetChildren(Predicate<ControlNode> match) Parameters match Predicate<ControlNode> Returns List<ControlNode> GetChildrenCopy() public List<ControlNode>? GetChildrenCopy() Returns List<ControlNode> GetDistanceSquaredTo(ControlNode) public float GetDistanceSquaredTo(ControlNode other) Parameters other ControlNode Returns float GetDistanceTo(ControlNode) public float GetDistanceTo(ControlNode other) Parameters other ControlNode Returns float GetMousePressedState() Return if the mouse button for the pressed state is down (only is called when mouse is inside) protected virtual bool GetMousePressedState() Returns bool GetNavigationDirection() Return the direction to move to another element. public virtual Direction GetNavigationDirection() Returns Direction GetNavigationOrigin(Direction) public Vector2 GetNavigationOrigin(Direction dir) Parameters dir Direction Returns Vector2 GetNextChild(ControlNode) public ControlNode? GetNextChild(ControlNode child) Parameters child ControlNode Returns ControlNode GetPressedState() Return if the key for the pressed state is down protected virtual bool GetPressedState() Returns bool GetPreviousChild(ControlNode) public ControlNode? GetPreviousChild(ControlNode child) Parameters child ControlNode Returns ControlNode HasNavigated(Direction) protected virtual void HasNavigated(Direction dir) Parameters dir Direction InputFilterWasChanged(InputFilter, InputFilter) protected virtual void InputFilterWasChanged(InputFilter old, InputFilter cur) Parameters old InputFilter cur InputFilter MouseFilterWasChanged(MouseFilter, MouseFilter) protected virtual void MouseFilterWasChanged(MouseFilter old, MouseFilter cur) Parameters old MouseFilter cur MouseFilter MouseHasEntered(Vector2) protected virtual void MouseHasEntered(Vector2 mousePos) Parameters mousePos Vector2 MouseHasExited(Vector2) protected virtual void MouseHasExited(Vector2 mousePos) Parameters mousePos Vector2 NavigableWasChanged(bool) protected virtual void NavigableWasChanged(bool value) Parameters value bool NavigatedTo(Direction) public void NavigatedTo(Direction dir) Parameters dir Direction NavigationDeselect() public bool NavigationDeselect() Returns bool NavigationSelect() public bool NavigationSelect() Returns bool OnChildDrawn(ControlNode) protected virtual void OnChildDrawn(ControlNode child) Parameters child ControlNode OnChildUpdated(ControlNode) protected virtual void OnChildUpdated(ControlNode child) Parameters child ControlNode OnDraw() protected virtual void OnDraw() OnUpdate(float, Vector2, bool) protected virtual void OnUpdate(float dt, Vector2 mousePos, bool mousePosValid) Parameters dt float mousePos Vector2 mousePosValid bool ParentActiveWasChanged(bool) protected virtual void ParentActiveWasChanged(bool value) Parameters value bool ParentVisibleWasChanged(bool) protected virtual void ParentVisibleWasChanged(bool value) Parameters value bool ParentWasChanged(ControlNode?, ControlNode?) protected virtual void ParentWasChanged(ControlNode? oldParent, ControlNode? newParent) Parameters oldParent ControlNode newParent ControlNode PressedWasChanged(bool) protected virtual void PressedWasChanged(bool value) Parameters value bool RemoveChild(ControlNode) public bool RemoveChild(ControlNode child) Parameters child ControlNode Returns bool Select() public bool Select() Returns bool SelectedWasChanged(bool) protected virtual void SelectedWasChanged(bool value) Parameters value bool SelectionFilterWasChanged(SelectFilter, SelectFilter) protected virtual void SelectionFilterWasChanged(SelectFilter old, SelectFilter cur) Parameters old SelectFilter cur SelectFilter SetChildRect(ControlNode, Rect) protected virtual Rect SetChildRect(ControlNode child, Rect inputRect) Parameters child ControlNode inputRect Rect Returns Rect SetRect(Rect) public void SetRect(Rect newRect) Parameters newRect Rect Update(float, Vector2) public void Update(float dt, Vector2 mousePos) Parameters dt float mousePos Vector2 UpdateRect(Rect) public void UpdateRect(Rect sourceRect) Parameters sourceRect Rect VisibleInHierarchyChanged(bool) protected virtual void VisibleInHierarchyChanged(bool value) Parameters value bool VisibleWasChanged(bool) protected virtual void VisibleWasChanged(bool value) Parameters value bool Events OnActiveChanged Parameters: Invoker, Value public event Action<ControlNode, bool>? OnActiveChanged Event Type Action<ControlNode, bool> OnActiveInHierarchyChanged public event Action<ControlNode, bool>? OnActiveInHierarchyChanged Event Type Action<ControlNode, bool> OnChildAdded Parameters: Invoker, New Child public event Action<ControlNode, ControlNode>? OnChildAdded Event Type Action<ControlNode, ControlNode> OnChildRemoved Parameters: Invoker, Old Child public event Action<ControlNode, ControlNode>? OnChildRemoved Event Type Action<ControlNode, ControlNode> OnDisplayedChanged public event Action<ControlNode, bool>? OnDisplayedChanged Event Type Action<ControlNode, bool> OnInputFilterChanged Parameters: Invoker, Old Filter, New Filter public event Action<ControlNode, InputFilter, InputFilter>? OnInputFilterChanged Event Type Action<ControlNode, InputFilter, InputFilter> OnMouseEntered Parameters: Invoker, Mouse Pos public event Action<ControlNode, Vector2>? OnMouseEntered Event Type Action<ControlNode, Vector2> OnMouseExited Parameters: Invoker, Last Mouse Pos Inside public event Action<ControlNode, Vector2>? OnMouseExited Event Type Action<ControlNode, Vector2> OnMouseFilterChanged Parameters: Invoker, Old Filter, New Filter public event Action<ControlNode, MouseFilter, MouseFilter>? OnMouseFilterChanged Event Type Action<ControlNode, MouseFilter, MouseFilter> OnNavigableChanged Parameters: Invoker, Value public event Action<ControlNode, bool>? OnNavigableChanged Event Type Action<ControlNode, bool> OnNavigated public event Action<ControlNode, Direction>? OnNavigated Event Type Action<ControlNode, Direction> OnParentActiveChanged Parameters: Invoker, Value public event Action<ControlNode, bool>? OnParentActiveChanged Event Type Action<ControlNode, bool> OnParentChanged Parameters: Invoker, Old Parent, New Parent public event Action<ControlNode, ControlNode?, ControlNode?>? OnParentChanged Event Type Action<ControlNode, ControlNode, ControlNode> OnParentVisibleChanged Parameters: Invoker, Value public event Action<ControlNode, bool>? OnParentVisibleChanged Event Type Action<ControlNode, bool> OnPressedChanged Parameters: Invoker, Value public event Action<ControlNode, bool>? OnPressedChanged Event Type Action<ControlNode, bool> OnSelectedChanged Parameters: Invoker, Value public event Action<ControlNode, bool>? OnSelectedChanged Event Type Action<ControlNode, bool> OnSelectionFilterChanged Parameters: Invoker, Old Filter, New Filter public event Action<ControlNode, SelectFilter, SelectFilter>? OnSelectionFilterChanged Event Type Action<ControlNode, SelectFilter, SelectFilter> OnVisibleChanged Parameters: Invoker, Value public event Action<ControlNode, bool>? OnVisibleChanged Event Type Action<ControlNode, bool> OnVisibleInHierarchyChanged public event Action<ControlNode, bool>? OnVisibleInHierarchyChanged Event Type Action<ControlNode, bool>"
  },
  "api/ShapeEngine.UI.ControlNodeContainer.html": {
    "href": "api/ShapeEngine.UI.ControlNodeContainer.html",
    "title": "Class ControlNodeContainer | ShapeEngine",
    "summary": "Class ControlNodeContainer Namespace ShapeEngine.UI Assembly ShapeEngine.dll public class ControlNodeContainer : ControlNode Inheritance object ControlNode ControlNodeContainer Inherited Members ControlNode.OnNavigated ControlNode.OnParentChanged ControlNode.OnChildAdded ControlNode.OnChildRemoved ControlNode.OnDisplayedChanged ControlNode.OnActiveInHierarchyChanged ControlNode.OnVisibleInHierarchyChanged ControlNode.OnVisibleChanged ControlNode.OnActiveChanged ControlNode.OnParentActiveChanged ControlNode.OnParentVisibleChanged ControlNode.OnMouseEntered ControlNode.OnMouseExited ControlNode.OnSelectedChanged ControlNode.OnPressedChanged ControlNode.OnNavigableChanged ControlNode.OnMouseFilterChanged ControlNode.OnSelectionFilterChanged ControlNode.OnInputFilterChanged ControlNode.Displayed ControlNode.Anchor ControlNode.Stretch ControlNode.ContainerStretch ControlNode.MinSize ControlNode.MaxSize ControlNode.Margins ControlNode.SelectionFilter ControlNode.MouseFilter ControlNode.InputFilter ControlNode.DisplayedChildren ControlNode.Active ControlNode.Visible ControlNode.ParentVisible ControlNode.ParentActive ControlNode.IsVisibleInHierarchy ControlNode.IsActiveInHierarchy ControlNode.Rect ControlNode.MouseInside ControlNode.MouseInsidePosition ControlNode.Selected ControlNode.Pressed ControlNode.Parent ControlNode.ChildCount ControlNode.HasParent ControlNode.HasChildren ControlNode.DisplayedChildrenCount ControlNode.HasDisplayedChildren ControlNode.GetChildrenEnumerable ControlNode.Navigable ControlNode.GetChildIndex(ControlNode) ControlNode.GetPreviousChild(ControlNode) ControlNode.GetNextChild(ControlNode) ControlNode.AddChild(ControlNode) ControlNode.RemoveChild(ControlNode) ControlNode.ClearChildren() ControlNode.GetChild(int) ControlNode.GetChildrenCopy() ControlNode.GetChildren(Predicate<ControlNode>) ControlNode.GetAllChildren(ref HashSet<ControlNode>) ControlNode.GetAllChildren(Predicate<ControlNode>, ref HashSet<ControlNode>) ControlNode.GetAllNavigableChildren(ref HashSet<ControlNode>) ControlNode.GetAllVisibleInHierarchyChildren(ref HashSet<ControlNode>) ControlNode.GetAllActiveInHierarchyChildren(ref HashSet<ControlNode>) ControlNode.Select() ControlNode.Deselect() ControlNode.NavigationSelect() ControlNode.NavigationDeselect() ControlNode.SetRect(Rect) ControlNode.UpdateRect(Rect) ControlNode.Update(float, Vector2) ControlNode.Draw() ControlNode.GetPressedState() ControlNode.GetMousePressedState() ControlNode.GetNavigationDirection() ControlNode.NavigatedTo(Direction) ControlNode.HasNavigated(Direction) ControlNode.GetDistanceTo(ControlNode) ControlNode.GetDistanceSquaredTo(ControlNode) ControlNode.GetNavigationOrigin(Direction) ControlNode.OnChildUpdated(ControlNode) ControlNode.OnDraw() ControlNode.OnChildDrawn(ControlNode) ControlNode.ActiveWasChanged(bool) ControlNode.VisibleWasChanged(bool) ControlNode.ParentActiveWasChanged(bool) ControlNode.ParentVisibleWasChanged(bool) ControlNode.ParentWasChanged(ControlNode, ControlNode) ControlNode.MouseHasEntered(Vector2) ControlNode.MouseHasExited(Vector2) ControlNode.SelectedWasChanged(bool) ControlNode.PressedWasChanged(bool) ControlNode.MouseFilterWasChanged(MouseFilter, MouseFilter) ControlNode.SelectionFilterWasChanged(SelectFilter, SelectFilter) ControlNode.InputFilterWasChanged(InputFilter, InputFilter) ControlNode.NavigableWasChanged(bool) ControlNode.DisplayedWasChanged(bool) ControlNode.ActiveInHierarchyChanged(bool) ControlNode.VisibleInHierarchyChanged(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields AlwaysKeepFilled If true the display index of the container is clamped to childCount - displayCount. If false the display index is incremented/decremented by displayCount as long as 0 or childCount is not reached. public bool AlwaysKeepFilled Field Value bool Properties CurPage public int CurPage { get; } Property Value int DisplayIndex public int DisplayIndex { get; set; } Property Value int Gap public Vector2 Gap { get; set; } Property Value Vector2 Grid public Grid Grid { get; set; } Property Value Grid MaxPages public int MaxPages { get; } Property Value int NavigationStep public int NavigationStep { get; set; } Property Value int Methods ChildWasAdded(ControlNode) protected override void ChildWasAdded(ControlNode newChild) Parameters newChild ControlNode ChildWasRemoved(ControlNode) protected override void ChildWasRemoved(ControlNode oldChild) Parameters oldChild ControlNode FirstNodeWasSelected(ControlNode) protected virtual void FirstNodeWasSelected(ControlNode node) Parameters node ControlNode FirstPage() public void FirstPage() IsFirstDisplayed(ControlNode) protected virtual bool IsFirstDisplayed(ControlNode node) Parameters node ControlNode Returns bool IsLastDisplayed(ControlNode) protected virtual bool IsLastDisplayed(ControlNode node) Parameters node ControlNode Returns bool LastNodeWasSelected(ControlNode) protected virtual void LastNodeWasSelected(ControlNode node) Parameters node ControlNode LastPage() public void LastPage() MovePage(int) public void MovePage(int pages) Parameters pages int NextItem() public void NextItem() NextPage(bool) public void NextPage(bool wrapAround = false) Parameters wrapAround bool NodeWasSelected(ControlNode) protected virtual void NodeWasSelected(ControlNode node) Parameters node ControlNode OnChildNavigated(ControlNode, Direction) protected virtual void OnChildNavigated(ControlNode child, Direction dir) Parameters child ControlNode dir Direction OnUpdate(float, Vector2, bool) protected override void OnUpdate(float dt, Vector2 mousePos, bool mousePosValid) Parameters dt float mousePos Vector2 mousePosValid bool PrevPage(bool) public void PrevPage(bool wrapAround = false) Parameters wrapAround bool PreviousItem() public void PreviousItem() SetChildRect(ControlNode, Rect) protected override Rect SetChildRect(ControlNode node, Rect inputRect) Parameters node ControlNode inputRect Rect Returns Rect Events OnFirstNodeSelected public event Action<ControlNode, ControlNode>? OnFirstNodeSelected Event Type Action<ControlNode, ControlNode> OnLastNodeSelected public event Action<ControlNode, ControlNode>? OnLastNodeSelected Event Type Action<ControlNode, ControlNode> OnNodeSelected public event Action<ControlNode, ControlNode>? OnNodeSelected Event Type Action<ControlNode, ControlNode>"
  },
  "api/ShapeEngine.UI.ControlNodeNavigator.html": {
    "href": "api/ShapeEngine.UI.ControlNodeNavigator.html",
    "title": "Class ControlNodeNavigator | ShapeEngine",
    "summary": "Class ControlNodeNavigator Namespace ShapeEngine.UI Assembly ShapeEngine.dll public class ControlNodeNavigator Inheritance object ControlNodeNavigator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsNavigating public bool IsNavigating { get; } Property Value bool SelectedNode public ControlNode? SelectedNode { get; } Property Value ControlNode Methods AddNode(ControlNode) public bool AddNode(ControlNode node) Parameters node ControlNode Returns bool CheckNextNode(ControlNode, Direction) protected virtual bool CheckNextNode(ControlNode nextNode, Direction dir) Parameters nextNode ControlNode dir Direction Returns bool Clear() public void Clear() ControlNodeWasAdded(ControlNode) protected virtual void ControlNodeWasAdded(ControlNode node) Parameters node ControlNode ControlNodeWasRemoved(ControlNode) protected virtual void ControlNodeWasRemoved(ControlNode node) Parameters node ControlNode EndNavigation() public void EndNavigation() NavigationWasEnded() protected virtual void NavigationWasEnded() NavigationWasStarted() protected virtual void NavigationWasStarted() RemoveNode(ControlNode) public bool RemoveNode(ControlNode node) Parameters node ControlNode Returns bool SelectNext(Grid) public void SelectNext(Grid grid) Parameters grid Grid SelectPrevious(Grid) public void SelectPrevious(Grid grid) Parameters grid Grid SelectedControlNodeWasChanged(ControlNode?, ControlNode?) protected virtual void SelectedControlNodeWasChanged(ControlNode? prev, ControlNode? cur) Parameters prev ControlNode cur ControlNode StartNavigation() public void StartNavigation() Update() public void Update() WasNavigated(Direction) protected virtual void WasNavigated(Direction dir) Parameters dir Direction Events OnControlNodeAdded public event Action<ControlNodeNavigator, ControlNode>? OnControlNodeAdded Event Type Action<ControlNodeNavigator, ControlNode> OnControlNodeRemoved public event Action<ControlNodeNavigator, ControlNode>? OnControlNodeRemoved Event Type Action<ControlNodeNavigator, ControlNode> OnNavigated public event Action<ControlNodeNavigator, Direction>? OnNavigated Event Type Action<ControlNodeNavigator, Direction> OnNavigationEnded public event Action<ControlNodeNavigator>? OnNavigationEnded Event Type Action<ControlNodeNavigator> OnNavigationStarted public event Action<ControlNodeNavigator>? OnNavigationStarted Event Type Action<ControlNodeNavigator> OnSelectedControlNodeChanged public event Action<ControlNodeNavigator, ControlNode?, ControlNode?>? OnSelectedControlNodeChanged Event Type Action<ControlNodeNavigator, ControlNode, ControlNode>"
  },
  "api/ShapeEngine.UI.ControlNodeSlider.html": {
    "href": "api/ShapeEngine.UI.ControlNodeSlider.html",
    "title": "Class ControlNodeSlider | ShapeEngine",
    "summary": "Class ControlNodeSlider Namespace ShapeEngine.UI Assembly ShapeEngine.dll public class ControlNodeSlider : ControlNode Inheritance object ControlNode ControlNodeSlider Inherited Members ControlNode.OnNavigated ControlNode.OnParentChanged ControlNode.OnChildAdded ControlNode.OnChildRemoved ControlNode.OnDisplayedChanged ControlNode.OnActiveInHierarchyChanged ControlNode.OnVisibleInHierarchyChanged ControlNode.OnVisibleChanged ControlNode.OnActiveChanged ControlNode.OnParentActiveChanged ControlNode.OnParentVisibleChanged ControlNode.OnMouseEntered ControlNode.OnMouseExited ControlNode.OnSelectedChanged ControlNode.OnPressedChanged ControlNode.OnNavigableChanged ControlNode.OnMouseFilterChanged ControlNode.OnSelectionFilterChanged ControlNode.OnInputFilterChanged ControlNode.Displayed ControlNode.Anchor ControlNode.Stretch ControlNode.ContainerStretch ControlNode.MinSize ControlNode.MaxSize ControlNode.Margins ControlNode.SelectionFilter ControlNode.MouseFilter ControlNode.InputFilter ControlNode.DisplayedChildren ControlNode.Active ControlNode.Visible ControlNode.ParentVisible ControlNode.ParentActive ControlNode.IsVisibleInHierarchy ControlNode.IsActiveInHierarchy ControlNode.Rect ControlNode.MouseInside ControlNode.MouseInsidePosition ControlNode.Selected ControlNode.Pressed ControlNode.Parent ControlNode.ChildCount ControlNode.HasParent ControlNode.HasChildren ControlNode.DisplayedChildrenCount ControlNode.HasDisplayedChildren ControlNode.GetChildrenEnumerable ControlNode.Navigable ControlNode.GetChildIndex(ControlNode) ControlNode.GetPreviousChild(ControlNode) ControlNode.GetNextChild(ControlNode) ControlNode.AddChild(ControlNode) ControlNode.RemoveChild(ControlNode) ControlNode.ClearChildren() ControlNode.GetChild(int) ControlNode.GetChildrenCopy() ControlNode.GetChildren(Predicate<ControlNode>) ControlNode.GetAllChildren(ref HashSet<ControlNode>) ControlNode.GetAllChildren(Predicate<ControlNode>, ref HashSet<ControlNode>) ControlNode.GetAllNavigableChildren(ref HashSet<ControlNode>) ControlNode.GetAllVisibleInHierarchyChildren(ref HashSet<ControlNode>) ControlNode.GetAllActiveInHierarchyChildren(ref HashSet<ControlNode>) ControlNode.Select() ControlNode.Deselect() ControlNode.NavigationSelect() ControlNode.NavigationDeselect() ControlNode.SetRect(Rect) ControlNode.UpdateRect(Rect) ControlNode.Update(float, Vector2) ControlNode.Draw() ControlNode.SetChildRect(ControlNode, Rect) ControlNode.GetPressedState() ControlNode.GetMousePressedState() ControlNode.GetNavigationDirection() ControlNode.NavigatedTo(Direction) ControlNode.HasNavigated(Direction) ControlNode.GetDistanceTo(ControlNode) ControlNode.GetDistanceSquaredTo(ControlNode) ControlNode.GetNavigationOrigin(Direction) ControlNode.OnChildUpdated(ControlNode) ControlNode.OnDraw() ControlNode.OnChildDrawn(ControlNode) ControlNode.ActiveWasChanged(bool) ControlNode.VisibleWasChanged(bool) ControlNode.ParentActiveWasChanged(bool) ControlNode.ParentVisibleWasChanged(bool) ControlNode.ParentWasChanged(ControlNode, ControlNode) ControlNode.ChildWasAdded(ControlNode) ControlNode.ChildWasRemoved(ControlNode) ControlNode.MouseHasEntered(Vector2) ControlNode.MouseHasExited(Vector2) ControlNode.SelectedWasChanged(bool) ControlNode.PressedWasChanged(bool) ControlNode.MouseFilterWasChanged(MouseFilter, MouseFilter) ControlNode.SelectionFilterWasChanged(SelectFilter, SelectFilter) ControlNode.InputFilterWasChanged(InputFilter, InputFilter) ControlNode.NavigableWasChanged(bool) ControlNode.DisplayedWasChanged(bool) ControlNode.ActiveInHierarchyChanged(bool) ControlNode.VisibleInHierarchyChanged(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ControlNodeSlider() public ControlNodeSlider() ControlNodeSlider(bool) public ControlNodeSlider(bool horizontal) Parameters horizontal bool ControlNodeSlider(float, bool) public ControlNodeSlider(float maxValue, bool horizontal = true) Parameters maxValue float horizontal bool ControlNodeSlider(float, float, bool) public ControlNodeSlider(float minValue, float maxValue, bool horizontal = true) Parameters minValue float maxValue float horizontal bool ControlNodeSlider(float, float, float, bool) public ControlNodeSlider(float startValue, float minValue, float maxValue, bool horizontal = true) Parameters startValue float minValue float maxValue float horizontal bool Fields Horizontal public bool Horizontal Field Value bool MaxValue public float MaxValue Field Value float MinValue public float MinValue Field Value float MouseSnapF public float MouseSnapF Field Value float StepF How much to increase/decrease CurF if Decreased/Increased input is pressed public float StepF Field Value float Properties CurF public float CurF { get; } Property Value float CurValue public float CurValue { get; } Property Value float Fill public Rect Fill { get; } Property Value Rect Methods ChangeValue(float) public bool ChangeValue(float amount) Parameters amount float Returns bool GetDecreaseValuePressed() protected virtual bool GetDecreaseValuePressed() Returns bool GetIncreaseValuePressed() protected virtual bool GetIncreaseValuePressed() Returns bool HandleFill(Vector2) protected virtual void HandleFill(Vector2 mousePos) Parameters mousePos Vector2 OnUpdate(float, Vector2, bool) protected override void OnUpdate(float dt, Vector2 mousePos, bool mousePosValid) Parameters dt float mousePos Vector2 mousePosValid bool SetCurF(float) public bool SetCurF(float f) Parameters f float Returns bool SetCurValue(float) public bool SetCurValue(float value) Parameters value float Returns bool ValueHasChanged(float, float) protected virtual void ValueHasChanged(float prevValue, float curValue) Parameters prevValue float curValue float Events OnValueChanged public event Action<float, float>? OnValueChanged Event Type Action<float, float>"
  },
  "api/ShapeEngine.UI.InputFilter.html": {
    "href": "api/ShapeEngine.UI.InputFilter.html",
    "title": "Enum InputFilter | ShapeEngine",
    "summary": "Enum InputFilter Namespace ShapeEngine.UI Assembly ShapeEngine.dll public enum InputFilter Fields All = 3 MouseNever = 2 MouseOnly = 1 None = 0"
  },
  "api/ShapeEngine.UI.MouseFilter.html": {
    "href": "api/ShapeEngine.UI.MouseFilter.html",
    "title": "Enum MouseFilter | ShapeEngine",
    "summary": "Enum MouseFilter Namespace ShapeEngine.UI Assembly ShapeEngine.dll How a control node handles mouse interaction. public enum MouseFilter Fields Ignore = 0 Pass = 1 Stop = 2"
  },
  "api/ShapeEngine.UI.RectNode.html": {
    "href": "api/ShapeEngine.UI.RectNode.html",
    "title": "Class RectNode | ShapeEngine",
    "summary": "Class RectNode Namespace ShapeEngine.UI Assembly ShapeEngine.dll public class RectNode Inheritance object RectNode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RectNode() public RectNode() RectNode(AnchorPoint, Vector2) public RectNode(AnchorPoint anchor, Vector2 stretch) Parameters anchor AnchorPoint stretch Vector2 RectNode(AnchorPoint, Vector2, Margins) public RectNode(AnchorPoint anchor, Vector2 stretch, Rect.Margins margins) Parameters anchor AnchorPoint stretch Vector2 margins Rect.Margins RectNode(AnchorPoint, Vector2, Margins, Size, Size, MouseFilter, string) public RectNode(AnchorPoint anchor, Vector2 stretch, Rect.Margins margins, Size minSize, Size maxSize, MouseFilter mouseFilter, string name) Parameters anchor AnchorPoint stretch Vector2 margins Rect.Margins minSize Size maxSize Size mouseFilter MouseFilter name string RectNode(AnchorPoint, Vector2, Margins, MouseFilter) public RectNode(AnchorPoint anchor, Vector2 stretch, Rect.Margins margins, MouseFilter mouseFilter) Parameters anchor AnchorPoint stretch Vector2 margins Rect.Margins mouseFilter MouseFilter RectNode(AnchorPoint, Vector2, Margins, MouseFilter, string) public RectNode(AnchorPoint anchor, Vector2 stretch, Rect.Margins margins, MouseFilter mouseFilter, string name) Parameters anchor AnchorPoint stretch Vector2 margins Rect.Margins mouseFilter MouseFilter name string RectNode(AnchorPoint, Vector2, Margins, string) public RectNode(AnchorPoint anchor, Vector2 stretch, Rect.Margins margins, string name) Parameters anchor AnchorPoint stretch Vector2 margins Rect.Margins name string RectNode(AnchorPoint, Vector2, MouseFilter) public RectNode(AnchorPoint anchor, Vector2 stretch, MouseFilter mouseFilter) Parameters anchor AnchorPoint stretch Vector2 mouseFilter MouseFilter RectNode(AnchorPoint, Vector2, MouseFilter, string) public RectNode(AnchorPoint anchor, Vector2 stretch, MouseFilter mouseFilter, string name) Parameters anchor AnchorPoint stretch Vector2 mouseFilter MouseFilter name string RectNode(AnchorPoint, Vector2, string) public RectNode(AnchorPoint anchor, Vector2 stretch, string name) Parameters anchor AnchorPoint stretch Vector2 name string RectNode(string) public RectNode(string name) Parameters name string Fields Anchor public AnchorPoint Anchor Field Value AnchorPoint Margins public Rect.Margins Margins Field Value Rect.Margins MaxSize public Size MaxSize Field Value Size MinSize public Size MinSize Field Value Size Name public string Name Field Value string Stretch Stretch determines the size of the rect based on the parent rect size. Values are relative and in range 0 - 1. If Stretch values are 0 than the size of the rect can be set manually without it being changed by the parent rect size. public Vector2 Stretch Field Value Vector2 Properties ChildCount public int ChildCount { get; } Property Value int GetChildrenEnumerable public IEnumerable<RectNode> GetChildrenEnumerable { get; } Property Value IEnumerable<RectNode> HasChildren public bool HasChildren { get; } Property Value bool HasParent public bool HasParent { get; } Property Value bool MouseFilter public MouseFilter MouseFilter { get; set; } Property Value MouseFilter MouseInside public bool MouseInside { get; } Property Value bool MouseInsidePosition public Vector2 MouseInsidePosition { get; } Property Value Vector2 Parent public RectNode? Parent { get; } Property Value RectNode Rect public Rect Rect { get; } Property Value Rect Methods AddChild(RectNode) public bool AddChild(RectNode child) Parameters child RectNode Returns bool ChildWasAdded(RectNode) protected virtual void ChildWasAdded(RectNode newChild) Parameters newChild RectNode ChildWasRemoved(RectNode) protected virtual void ChildWasRemoved(RectNode oldChild) Parameters oldChild RectNode ClearChildren() public void ClearChildren() DebugDraw(ColorRgba, float) public void DebugDraw(ColorRgba color, float lineThickness) Parameters color ColorRgba lineThickness float Draw() public void Draw() GetAllChildren(ref HashSet<RectNode>) public int GetAllChildren(ref HashSet<RectNode> result) Parameters result HashSet<RectNode> Returns int GetAllChildren(Predicate<RectNode>, ref HashSet<RectNode>) public int GetAllChildren(Predicate<RectNode> match, ref HashSet<RectNode> result) Parameters match Predicate<RectNode> result HashSet<RectNode> Returns int GetChild(int) public RectNode? GetChild(int index) Parameters index int Returns RectNode GetChild(string, char) public RectNode? GetChild(string path, char separator = ' ') Parameters path string separator char Returns RectNode GetChild(params string[]) public RectNode? GetChild(params string[] path) Parameters path string[] Returns RectNode GetChildren(Predicate<RectNode>) public List<RectNode>? GetChildren(Predicate<RectNode> match) Parameters match Predicate<RectNode> Returns List<RectNode> GetChildrenCopy() public List<RectNode>? GetChildrenCopy() Returns List<RectNode> GetDistanceSquaredTo(RectNode) public float GetDistanceSquaredTo(RectNode other) Parameters other RectNode Returns float GetDistanceTo(RectNode) public float GetDistanceTo(RectNode other) Parameters other RectNode Returns float GetRect(string, char) public Rect GetRect(string path, char seperator = ' ') Parameters path string seperator char Returns Rect GetRect(params string[]) public Rect GetRect(params string[] path) Parameters path string[] Returns Rect MouseFilterWasChanged(MouseFilter, MouseFilter) protected virtual void MouseFilterWasChanged(MouseFilter old, MouseFilter cur) Parameters old MouseFilter cur MouseFilter MouseHasEntered(Vector2) protected virtual void MouseHasEntered(Vector2 mousePos) Parameters mousePos Vector2 MouseHasExited(Vector2) protected virtual void MouseHasExited(Vector2 mousePos) Parameters mousePos Vector2 OnChildDrawn(RectNode) protected virtual void OnChildDrawn(RectNode child) Parameters child RectNode OnChildUpdated(RectNode) protected virtual void OnChildUpdated(RectNode child) Parameters child RectNode OnDraw() protected virtual void OnDraw() OnUpdate(float, Vector2, bool) protected virtual void OnUpdate(float dt, Vector2 mousePos, bool mousePosValid) Parameters dt float mousePos Vector2 mousePosValid bool ParentWasChanged(RectNode?, RectNode?) protected virtual void ParentWasChanged(RectNode? oldParent, RectNode? newParent) Parameters oldParent RectNode newParent RectNode RemoveChild(RectNode) public bool RemoveChild(RectNode child) Parameters child RectNode Returns bool SetChildRect(RectNode, Rect) protected virtual Rect SetChildRect(RectNode child, Rect inputRect) Parameters child RectNode inputRect Rect Returns Rect SetRect(Rect) public void SetRect(Rect newRect) Parameters newRect Rect Update(float, Vector2) public void Update(float dt, Vector2 mousePos) Parameters dt float mousePos Vector2 UpdateRect(Rect) public void UpdateRect(Rect sourceRect) Parameters sourceRect Rect Events OnChildAdded Parameters: Invoker, New Child public event Action<RectNode, RectNode>? OnChildAdded Event Type Action<RectNode, RectNode> OnChildRemoved Parameters: Invoker, Old Child public event Action<RectNode, RectNode>? OnChildRemoved Event Type Action<RectNode, RectNode> OnMouseEntered Parameters: Invoker, Mouse Pos public event Action<RectNode, Vector2>? OnMouseEntered Event Type Action<RectNode, Vector2> OnMouseExited Parameters: Invoker, Last Mouse Pos Inside public event Action<RectNode, Vector2>? OnMouseExited Event Type Action<RectNode, Vector2> OnMouseFilterChanged Parameters: Invoker, Old Filter, New Filter public event Action<RectNode, MouseFilter, MouseFilter>? OnMouseFilterChanged Event Type Action<RectNode, MouseFilter, MouseFilter> OnParentChanged Parameters: Invoker, Old Parent, New Parent public event Action<RectNode, RectNode?, RectNode?>? OnParentChanged Event Type Action<RectNode, RectNode, RectNode>"
  },
  "api/ShapeEngine.UI.SelectFilter.html": {
    "href": "api/ShapeEngine.UI.SelectFilter.html",
    "title": "Enum SelectFilter | ShapeEngine",
    "summary": "Enum SelectFilter Namespace ShapeEngine.UI Assembly ShapeEngine.dll How can a control node be selected. public enum SelectFilter Fields All = 3 Mouse = 1 Navigation = 2 None = 0"
  },
  "api/ShapeEngine.UI.html": {
    "href": "api/ShapeEngine.UI.html",
    "title": "Namespace ShapeEngine.UI | ShapeEngine",
    "summary": "Namespace ShapeEngine.UI Classes ControlNode ControlNodeContainer ControlNodeNavigator ControlNodeSlider RectNode Enums InputFilter MouseFilter How a control node handles mouse interaction. SelectFilter How can a control node be selected."
  },
  "index.html": {
    "href": "index.html",
    "title": "| ShapeEngine",
    "summary": "My custom-made engine based on the great Raylib Framework. The Main focus is being performant and only using draw functions instead of textures. When using Shape Engine everything from Raylib is available as well. (Raylib Examples, Raylib Cheatsheet) Shape Engine´s examples are available on Itch as well and it is a great way to support me :) More examples are available in the ShapeEngineDemos repository. Most of the bigger examples will be available here, like a small asteroids game. You are free to use Shape Engine or any part of Shape Engine for your own projects, but keep in mind that Shape Engine was designed to help me with my specific game dev needs. Nevertheless I am looking forward to creations that Shape Engine made possible :) Release Trailer Showcase Installation / How to Use There are multiple ways to use Shape Engine: Create a new solution & project and download Shape Engine from the Nuget manager. (Recommended) dotnet new console -n ShapeEngineProject cd ./ShapeEngineProject dotnet add package DaveGreen.ShapeEngine Clone or fork the repository and add new projects to the solution. You then can reference the Shape Engine project and start working on your game. The advantages are that you can easily change things in Shape Engine and everything updates automatically in your own project. Create a new solution & project in a .net IDE. (Visual Studio / JetBrains Rider for example). Download or fork ShapeEngine and either create a local nuget package or build the solution to create all necessary dll files. [Using a local Nuget Package] Create a folder on your machine called something like “Local Nuget Packages” and copy the ShapeEngine Nuget package that you created to this folder. (You can also add the Shape Engine Nuget package directly to your Project). Now you need to create a new Package source in the Nuget Manager that points to your “Local Nuget Packages” Folder. This source can be used in your Nuget Manager to find and install the Shape Engine Nuget Package. You manually copy all needed DLL files to your project. You need the following DLLs: Clipper2Lib, Raylib-Cs, Microsoft.Toolkit.HighPerformance, Shape Engine Core, Raylib. All DLL files except Raylib can be anywhere in your projects folder hierarchy. The Raylib DLL must be on the root level of your project. You need to select the right Raylib DLL for your operating system. Now just add a reference for all DLLs except the Raylib DLL and you are done. On MacOS you need to do the same step except using the .dylib file instead of the raylib DLL. You need to set the property “Copy if Newer” to true on the .dylib file. Then everything should work. Create a new solution & project and just add the Shape Engine Core DLL to your project and reference it. Now you need to download the right version of the Raylib_CsLo & Clipper2 Nuget packages. The releases on GitHub will state which versions were used. Minimal Project Setup // Programe.cs using System.Drawing; using ShapeEngine.Color; using ShapeEngine.Core; using ShapeEngine.Core.Structs; using ShapeEngine.StaticLib.Drawing; namespace ShapeEngineProject; public static class Program { public static void Main(string[] args) { var game = new MyGameClass(GameSettings.StretchMode, WindowSettings.Default); game.Run(); } } public class MyGameClass : Game { public MyGameClass(GameSettings gameSettings, WindowSettings windowSettings) : base(gameSettings, windowSettings) { } protected override void DrawGame(ScreenInfo game) { game.Area.Draw(new ColorRgba(Color.DarkOliveGreen)); game.Area.DrawLines(12f, new ColorRgba(Color.AntiqueWhite)); game.MousePos.Draw(24f, new ColorRgba(Color.Lime), 36); } } Development Process The Main Branch contains the current development stage. You can follow the development process here: Reddit Twitter Instagram YouTube GitHub Discussions Roadmap Examples You can download the newest builds of the Example Project on Itch io. You can clone the repo and inspect the example projects there as well. Examples are simple scenes that focus on one specific area or feature of Shape Engine. Examples showcase the various capabilities of Shape Engine, allowing users to explore various features. The examples cover all major features of Shape Engine, ensuring that users can grasp its full potential. Features In general my goal is to provide the most relevant system a game dev needs without adding a solution for every possible problem. Polygon Fracturing Delaunay Triangulation Text & Font System Word Emphasis System Pathfinding UI System Collision System Audio & Music Savegame System Color Palettes Input System (Keyboard, Mouse, Gamepad) Camera System Screen Texture System Gapped Drawing Striped Drawing Shape Collision System 2.0 with Segment, Line, Ray, Circle, Triangle, Quad, Rect, Polygon, Polyline Documentation & Getting Started Right now there is not much information about how to use Shape Engine. The repository contains an Examples Project. It shows you a lot of what is possible and how it is done and should help you until there is some proper documentation. Currently I don't have the time or the resources to create proper documentation for Shape Engine. If enough people are interested in it this might change. Any help in this direction would be greatly appreciated! Roadmap You can find the roadmap and current milestone of ShapeEngine here. Dependencies I am just using the Raylib Cs c# bindings and the Cipper2 library for polygon clipping. If you use the nuget manager to download Shape Engine as a nuget package you don't have to take care of any dependencies, because they will be downloaded automatically. Limitations There is no physics system because I don´t need one and would´t know how to make one. There is complete collision system but the collision response is up to you. You can also use raylibs physics system. History I made Shape Engine because I wanted to help myself make games with a specific art style and certain limitations. At first, it started out with some helper scripts but now it is a relatively sophisticated system to make games with raylib. Certain parts of the basic game loop are inspired by Bytepath and other things I already used in games that I made myself (especially Fracture Hell). Feel free to use any single part if you don´t want to use the whole package. Contact If you have an issue, or a suggestion for a new feature GitHub is the best way to get in contact with me. GitHub Issues GitHub Discussions On these platforms you can follow the development process of Shape Engine, get in contact with me and always stay up date. Reddit Twitter Instagram YouTube Itch Dev Logs Linktree https://linktr.ee/davegreen.games https://linktr.ee/shapeengine"
  }
}