### YamlMime:ManagedReference
items:
- uid: ShapeEngine.StaticLib.ShapePhysics
  commentId: T:ShapeEngine.StaticLib.ShapePhysics
  id: ShapePhysics
  parent: ShapeEngine.StaticLib
  children:
  - ShapeEngine.StaticLib.ShapePhysics.ApplyAttraction(ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.PhysicsObject)
  - ShapeEngine.StaticLib.ShapePhysics.ApplyAttraction(ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single)
  - ShapeEngine.StaticLib.ShapePhysics.ApplyAttraction(ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single,System.Numerics.Vector2)
  - ShapeEngine.StaticLib.ShapePhysics.ApplyAttraction(ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single,System.Single)
  - ShapeEngine.StaticLib.ShapePhysics.ApplyDragForce(System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Single)
  - ShapeEngine.StaticLib.ShapePhysics.ApplyDragForce(System.Numerics.Vector2,System.Single,System.Single)
  - ShapeEngine.StaticLib.ShapePhysics.ApplyDragForce(System.Single,System.Single,System.Single)
  - ShapeEngine.StaticLib.ShapePhysics.ApplyElasticCollision(ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single)
  - ShapeEngine.StaticLib.ShapePhysics.ApplyElasticCollisionCircleSelf(ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.PhysicsObject,System.Single)
  - ShapeEngine.StaticLib.ShapePhysics.ApplyElasticCollisionSelf(ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single)
  - ShapeEngine.StaticLib.ShapePhysics.ApplyFrictionForce(ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single)
  - ShapeEngine.StaticLib.ShapePhysics.ApplyFrictionForceRealistic(ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single)
  - ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.PhysicsObject)
  - ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single)
  - ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single,System.Numerics.Vector2)
  - ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single,System.Single)
  - ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)
  - ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Numerics.Vector2)
  - ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single)
  - ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Single)
  - ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForce(System.Numerics.Vector2,System.Single,ShapeEngine.Core.PhysicsObject)
  - ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForce(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,ShapeEngine.Core.PhysicsObject)
  - ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForce(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,ShapeEngine.Core.PhysicsObject,System.Func{System.Single,System.Single})
  - ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceDirectional(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,ShapeEngine.Core.PhysicsObject)
  - ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceDirectional(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.Structs.ValueRange)
  - ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceDirectional(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.Structs.ValueRange,System.Func{System.Single,System.Single})
  - ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceRealistic(ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.PhysicsObject)
  - ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceRealistic(System.Numerics.Vector2,System.Single,ShapeEngine.Core.PhysicsObject)
  - ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceRealistic(System.Numerics.Vector2,System.Single,ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.Structs.ValueRange)
  - ShapeEngine.StaticLib.ShapePhysics.CalculateAttraction(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)
  - ShapeEngine.StaticLib.ShapePhysics.CalculateAttraction(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Numerics.Vector2)
  - ShapeEngine.StaticLib.ShapePhysics.CalculateAttraction(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single)
  - ShapeEngine.StaticLib.ShapePhysics.CalculateAttraction(System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Single)
  - ShapeEngine.StaticLib.ShapePhysics.CalculateDragFactor(System.Single,System.Single)
  - ShapeEngine.StaticLib.ShapePhysics.CalculateDragForce(System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Single)
  - ShapeEngine.StaticLib.ShapePhysics.CalculateDragForce(System.Numerics.Vector2,System.Single,System.Single)
  - ShapeEngine.StaticLib.ShapePhysics.CalculateDragForceRealistic(System.Numerics.Vector2,System.Single,System.Single,System.Single)
  - ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollision(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Single,System.Single)
  - ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollisionCircles(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single)
  - ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollisionCirclesSelf(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single)
  - ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollisionSelf(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Single,System.Single)
  - ShapeEngine.StaticLib.ShapePhysics.CalculateFrictionForce(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)
  - ShapeEngine.StaticLib.ShapePhysics.CalculateFrictionForceRealistic(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)
  - ShapeEngine.StaticLib.ShapePhysics.CalculateFrictionTangent(System.Numerics.Vector2,System.Numerics.Vector2)
  - ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForce(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,ShapeEngine.Core.PhysicsObject,System.Func{System.Single,System.Single})
  - ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForce(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,System.Numerics.Vector2)
  - ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForce(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,System.Numerics.Vector2,System.Func{System.Single,System.Single})
  - ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForce(System.Numerics.Vector2,System.Single,System.Numerics.Vector2)
  - ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceDirectional(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,System.Numerics.Vector2,System.Numerics.Vector2)
  - ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceDirectional(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,System.Numerics.Vector2,System.Numerics.Vector2,ShapeEngine.Core.Structs.ValueRange)
  - ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceDirectional(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,System.Numerics.Vector2,System.Numerics.Vector2,ShapeEngine.Core.Structs.ValueRange,System.Func{System.Single,System.Single})
  - ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceDirectional(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,System.Numerics.Vector2,System.Numerics.Vector2,System.Func{System.Single,System.Single})
  - ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceRealistic(System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Numerics.Vector2)
  - ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceRealistic(System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Numerics.Vector2,ShapeEngine.Core.Structs.ValueRange)
  - ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceRealistic(System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Single)
  - ShapeEngine.StaticLib.ShapePhysics.G
  - ShapeEngine.StaticLib.ShapePhysics.GReal
  langs:
  - csharp
  - vb
  name: ShapePhysics
  nameWithType: ShapePhysics
  fullName: ShapeEngine.StaticLib.ShapePhysics
  type: Class
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: ShapePhysics
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 6
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  syntax:
    content: public static class ShapePhysics
    content.vb: Public Module ShapePhysics
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: ShapeEngine.StaticLib.ShapePhysics.GReal
  commentId: F:ShapeEngine.StaticLib.ShapePhysics.GReal
  id: GReal
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: GReal
  nameWithType: ShapePhysics.GReal
  fullName: ShapeEngine.StaticLib.ShapePhysics.GReal
  type: Field
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: GReal
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 11
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: Gravitational constant 6.67430e-11
  example: []
  syntax:
    content: public static readonly float GReal
    return:
      type: System.Single
    content.vb: Public Shared ReadOnly GReal As Single
- uid: ShapeEngine.StaticLib.ShapePhysics.G
  commentId: F:ShapeEngine.StaticLib.ShapePhysics.G
  id: G
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: G
  nameWithType: ShapePhysics.G
  fullName: ShapeEngine.StaticLib.ShapePhysics.G
  type: Field
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: G
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 16
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: >-
    This is the gravitational constant used in all functions. The default value is 1f, essentially making the values that can be used much smaller and therefore more convenient.

    If the real value is needed, set it to GReal.
  example: []
  syntax:
    content: public static float G
    return:
      type: System.Single
    content.vb: Public Shared G As Single
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollisionCircles(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollisionCircles(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single)
  id: CalculateElasticCollisionCircles(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: CalculateElasticCollisionCircles(Vector2, Vector2, float, Vector2, Vector2, float, float)
  nameWithType: ShapePhysics.CalculateElasticCollisionCircles(Vector2, Vector2, float, Vector2, Vector2, float, float)
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollisionCircles(System.Numerics.Vector2, System.Numerics.Vector2, float, System.Numerics.Vector2, System.Numerics.Vector2, float, float)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: CalculateElasticCollisionCircles
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 119
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: Calculate new velocities for an elastic collision between two circles.
  example: []
  syntax:
    content: public static (Vector2 newVelocity1, Vector2 newVelocity2) CalculateElasticCollisionCircles(Vector2 position1, Vector2 velocity1, float mass1, Vector2 position2, Vector2 velocity2, float mass2, float r = 1)
    parameters:
    - id: position1
      type: System.Numerics.Vector2
      description: ''
    - id: velocity1
      type: System.Numerics.Vector2
      description: ''
    - id: mass1
      type: System.Single
      description: ''
    - id: position2
      type: System.Numerics.Vector2
      description: ''
    - id: velocity2
      type: System.Numerics.Vector2
      description: ''
    - id: mass2
      type: System.Single
      description: ''
    - id: r
      type: System.Single
      description: The elasticity of the collision. 0 means all energy is lost after collision, 1 means full energy is retained after collision.
    return:
      type: System.ValueTuple{System.Numerics.Vector2,System.Numerics.Vector2}
      description: ''
    content.vb: Public Shared Function CalculateElasticCollisionCircles(position1 As Vector2, velocity1 As Vector2, mass1 As Single, position2 As Vector2, velocity2 As Vector2, mass2 As Single, r As Single = 1) As (newVelocity1 As Vector2, newVelocity2 As Vector2)
  overload: ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollisionCircles*
  nameWithType.vb: ShapePhysics.CalculateElasticCollisionCircles(Vector2, Vector2, Single, Vector2, Vector2, Single, Single)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollisionCircles(System.Numerics.Vector2, System.Numerics.Vector2, Single, System.Numerics.Vector2, System.Numerics.Vector2, Single, Single)
  name.vb: CalculateElasticCollisionCircles(Vector2, Vector2, Single, Vector2, Vector2, Single, Single)
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollisionCirclesSelf(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollisionCirclesSelf(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single)
  id: CalculateElasticCollisionCirclesSelf(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: CalculateElasticCollisionCirclesSelf(Vector2, Vector2, float, Vector2, Vector2, float, float)
  nameWithType: ShapePhysics.CalculateElasticCollisionCirclesSelf(Vector2, Vector2, float, Vector2, Vector2, float, float)
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollisionCirclesSelf(System.Numerics.Vector2, System.Numerics.Vector2, float, System.Numerics.Vector2, System.Numerics.Vector2, float, float)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: CalculateElasticCollisionCirclesSelf
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 160
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: Calculate new velocity for the first circle based on an elastic collision between two circles.
  example: []
  syntax:
    content: public static Vector2 CalculateElasticCollisionCirclesSelf(Vector2 position1, Vector2 velocity1, float mass1, Vector2 position2, Vector2 velocity2, float mass2, float r = 1)
    parameters:
    - id: position1
      type: System.Numerics.Vector2
      description: ''
    - id: velocity1
      type: System.Numerics.Vector2
      description: ''
    - id: mass1
      type: System.Single
      description: ''
    - id: position2
      type: System.Numerics.Vector2
      description: ''
    - id: velocity2
      type: System.Numerics.Vector2
      description: ''
    - id: mass2
      type: System.Single
      description: ''
    - id: r
      type: System.Single
      description: The elasticity of the collision. 0 means all energy is lost after collision, 1 means full energy is retained after collision.
    return:
      type: System.Numerics.Vector2
      description: ''
    content.vb: Public Shared Function CalculateElasticCollisionCirclesSelf(position1 As Vector2, velocity1 As Vector2, mass1 As Single, position2 As Vector2, velocity2 As Vector2, mass2 As Single, r As Single = 1) As Vector2
  overload: ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollisionCirclesSelf*
  nameWithType.vb: ShapePhysics.CalculateElasticCollisionCirclesSelf(Vector2, Vector2, Single, Vector2, Vector2, Single, Single)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollisionCirclesSelf(System.Numerics.Vector2, System.Numerics.Vector2, Single, System.Numerics.Vector2, System.Numerics.Vector2, Single, Single)
  name.vb: CalculateElasticCollisionCirclesSelf(Vector2, Vector2, Single, Vector2, Vector2, Single, Single)
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollision(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Single,System.Single)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollision(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Single,System.Single)
  id: CalculateElasticCollision(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Single,System.Single)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: CalculateElasticCollision(Vector2, Vector2, float, Vector2, float, float)
  nameWithType: ShapePhysics.CalculateElasticCollision(Vector2, Vector2, float, Vector2, float, float)
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollision(System.Numerics.Vector2, System.Numerics.Vector2, float, System.Numerics.Vector2, float, float)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: CalculateElasticCollision
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 194
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: Calculate new velocities for an elastic collision determined by the given collision normal.
  example: []
  syntax:
    content: public static (Vector2 newVelocity1, Vector2 newVelocity2) CalculateElasticCollision(Vector2 collisionNormal, Vector2 velocity1, float mass1, Vector2 velocity2, float mass2, float r = 1)
    parameters:
    - id: collisionNormal
      type: System.Numerics.Vector2
      description: ''
    - id: velocity1
      type: System.Numerics.Vector2
      description: ''
    - id: mass1
      type: System.Single
      description: ''
    - id: velocity2
      type: System.Numerics.Vector2
      description: ''
    - id: mass2
      type: System.Single
      description: ''
    - id: r
      type: System.Single
      description: The elasticity of the collision. 0 means all energy is lost after collision, 1 means full energy is retained after collision.
    return:
      type: System.ValueTuple{System.Numerics.Vector2,System.Numerics.Vector2}
      description: ''
    content.vb: Public Shared Function CalculateElasticCollision(collisionNormal As Vector2, velocity1 As Vector2, mass1 As Single, velocity2 As Vector2, mass2 As Single, r As Single = 1) As (newVelocity1 As Vector2, newVelocity2 As Vector2)
  overload: ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollision*
  nameWithType.vb: ShapePhysics.CalculateElasticCollision(Vector2, Vector2, Single, Vector2, Single, Single)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollision(System.Numerics.Vector2, System.Numerics.Vector2, Single, System.Numerics.Vector2, Single, Single)
  name.vb: CalculateElasticCollision(Vector2, Vector2, Single, Vector2, Single, Single)
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollisionSelf(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Single,System.Single)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollisionSelf(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Single,System.Single)
  id: CalculateElasticCollisionSelf(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Single,System.Single)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: CalculateElasticCollisionSelf(Vector2, Vector2, float, Vector2, float, float)
  nameWithType: ShapePhysics.CalculateElasticCollisionSelf(Vector2, Vector2, float, Vector2, float, float)
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollisionSelf(System.Numerics.Vector2, System.Numerics.Vector2, float, System.Numerics.Vector2, float, float)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: CalculateElasticCollisionSelf
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 232
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: Calculates new velocity for object1 based on the given collision normal.
  example: []
  syntax:
    content: public static Vector2 CalculateElasticCollisionSelf(Vector2 collisionNormal, Vector2 velocity1, float mass1, Vector2 velocity2, float mass2, float r = 1)
    parameters:
    - id: collisionNormal
      type: System.Numerics.Vector2
      description: ''
    - id: velocity1
      type: System.Numerics.Vector2
      description: ''
    - id: mass1
      type: System.Single
      description: ''
    - id: velocity2
      type: System.Numerics.Vector2
      description: ''
    - id: mass2
      type: System.Single
      description: ''
    - id: r
      type: System.Single
      description: The elasticity of the collision. 0 means all energy is lost after collision, 1 means full energy is retained after collision.
    return:
      type: System.Numerics.Vector2
      description: Returns new velocity 1.
    content.vb: Public Shared Function CalculateElasticCollisionSelf(collisionNormal As Vector2, velocity1 As Vector2, mass1 As Single, velocity2 As Vector2, mass2 As Single, r As Single = 1) As Vector2
  overload: ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollisionSelf*
  nameWithType.vb: ShapePhysics.CalculateElasticCollisionSelf(Vector2, Vector2, Single, Vector2, Single, Single)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollisionSelf(System.Numerics.Vector2, System.Numerics.Vector2, Single, System.Numerics.Vector2, Single, Single)
  name.vb: CalculateElasticCollisionSelf(Vector2, Vector2, Single, Vector2, Single, Single)
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyElasticCollision(ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.ApplyElasticCollision(ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single)
  id: ApplyElasticCollision(ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single)
  isExtensionMethod: true
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: ApplyElasticCollision(PhysicsObject, PhysicsObject, Vector2, float)
  nameWithType: ShapePhysics.ApplyElasticCollision(PhysicsObject, PhysicsObject, Vector2, float)
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyElasticCollision(ShapeEngine.Core.PhysicsObject, ShapeEngine.Core.PhysicsObject, System.Numerics.Vector2, float)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: ApplyElasticCollision
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 260
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: Calculates new velocities for both physics objects based on the given collision normal and sets the new velocities of both objects.
  example: []
  syntax:
    content: public static void ApplyElasticCollision(this PhysicsObject obj1, PhysicsObject obj2, Vector2 collisionNormal, float r = 1)
    parameters:
    - id: obj1
      type: ShapeEngine.Core.PhysicsObject
      description: ''
    - id: obj2
      type: ShapeEngine.Core.PhysicsObject
      description: ''
    - id: collisionNormal
      type: System.Numerics.Vector2
      description: ''
    - id: r
      type: System.Single
      description: The elasticity of the collision. 0 means all energy is lost after collision, 1 means full energy is retained after collision.
    content.vb: Public Shared Sub ApplyElasticCollision(obj1 As PhysicsObject, obj2 As PhysicsObject, collisionNormal As Vector2, r As Single = 1)
  overload: ShapeEngine.StaticLib.ShapePhysics.ApplyElasticCollision*
  nameWithType.vb: ShapePhysics.ApplyElasticCollision(PhysicsObject, PhysicsObject, Vector2, Single)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.ApplyElasticCollision(ShapeEngine.Core.PhysicsObject, ShapeEngine.Core.PhysicsObject, System.Numerics.Vector2, Single)
  name.vb: ApplyElasticCollision(PhysicsObject, PhysicsObject, Vector2, Single)
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyElasticCollisionSelf(ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.ApplyElasticCollisionSelf(ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single)
  id: ApplyElasticCollisionSelf(ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single)
  isExtensionMethod: true
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: ApplyElasticCollisionSelf(PhysicsObject, PhysicsObject, Vector2, float)
  nameWithType: ShapePhysics.ApplyElasticCollisionSelf(PhysicsObject, PhysicsObject, Vector2, float)
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyElasticCollisionSelf(ShapeEngine.Core.PhysicsObject, ShapeEngine.Core.PhysicsObject, System.Numerics.Vector2, float)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: ApplyElasticCollisionSelf
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 273
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: Calculates the new velocity for obj1 based on the given collision normal and sets the new velocity of obj1.
  example: []
  syntax:
    content: public static void ApplyElasticCollisionSelf(this PhysicsObject obj1, PhysicsObject obj2, Vector2 collisionNormal, float r = 1)
    parameters:
    - id: obj1
      type: ShapeEngine.Core.PhysicsObject
      description: ''
    - id: obj2
      type: ShapeEngine.Core.PhysicsObject
      description: ''
    - id: collisionNormal
      type: System.Numerics.Vector2
      description: ''
    - id: r
      type: System.Single
      description: The elasticity of the collision. 0 means all energy is lost after collision, 1 means full energy is retained after collision.
    content.vb: Public Shared Sub ApplyElasticCollisionSelf(obj1 As PhysicsObject, obj2 As PhysicsObject, collisionNormal As Vector2, r As Single = 1)
  overload: ShapeEngine.StaticLib.ShapePhysics.ApplyElasticCollisionSelf*
  nameWithType.vb: ShapePhysics.ApplyElasticCollisionSelf(PhysicsObject, PhysicsObject, Vector2, Single)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.ApplyElasticCollisionSelf(ShapeEngine.Core.PhysicsObject, ShapeEngine.Core.PhysicsObject, System.Numerics.Vector2, Single)
  name.vb: ApplyElasticCollisionSelf(PhysicsObject, PhysicsObject, Vector2, Single)
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyElasticCollisionCircleSelf(ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.PhysicsObject,System.Single)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.ApplyElasticCollisionCircleSelf(ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.PhysicsObject,System.Single)
  id: ApplyElasticCollisionCircleSelf(ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.PhysicsObject,System.Single)
  isExtensionMethod: true
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: ApplyElasticCollisionCircleSelf(PhysicsObject, PhysicsObject, float)
  nameWithType: ShapePhysics.ApplyElasticCollisionCircleSelf(PhysicsObject, PhysicsObject, float)
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyElasticCollisionCircleSelf(ShapeEngine.Core.PhysicsObject, ShapeEngine.Core.PhysicsObject, float)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: ApplyElasticCollisionCircleSelf
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 279
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  syntax:
    content: public static void ApplyElasticCollisionCircleSelf(this PhysicsObject obj1, PhysicsObject obj2, float r = 1)
    parameters:
    - id: obj1
      type: ShapeEngine.Core.PhysicsObject
    - id: obj2
      type: ShapeEngine.Core.PhysicsObject
    - id: r
      type: System.Single
    content.vb: Public Shared Sub ApplyElasticCollisionCircleSelf(obj1 As PhysicsObject, obj2 As PhysicsObject, r As Single = 1)
  overload: ShapeEngine.StaticLib.ShapePhysics.ApplyElasticCollisionCircleSelf*
  nameWithType.vb: ShapePhysics.ApplyElasticCollisionCircleSelf(PhysicsObject, PhysicsObject, Single)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.ApplyElasticCollisionCircleSelf(ShapeEngine.Core.PhysicsObject, ShapeEngine.Core.PhysicsObject, Single)
  name.vb: ApplyElasticCollisionCircleSelf(PhysicsObject, PhysicsObject, Single)
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateDragFactor(System.Single,System.Single)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.CalculateDragFactor(System.Single,System.Single)
  id: CalculateDragFactor(System.Single,System.Single)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: CalculateDragFactor(float, float)
  nameWithType: ShapePhysics.CalculateDragFactor(float, float)
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateDragFactor(float, float)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: CalculateDragFactor
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 295
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: This function calculates a frame rate independent factor for applying drag.
  example: []
  syntax:
    content: public static float CalculateDragFactor(float dragCoefficient, float deltaTime)
    parameters:
    - id: dragCoefficient
      type: System.Single
      description: Drag coefficient between 0 and 1. How much energy should the velocity loose each second.
    - id: deltaTime
      type: System.Single
      description: ''
    return:
      type: System.Single
      description: ''
    content.vb: Public Shared Function CalculateDragFactor(dragCoefficient As Single, deltaTime As Single) As Single
  overload: ShapeEngine.StaticLib.ShapePhysics.CalculateDragFactor*
  nameWithType.vb: ShapePhysics.CalculateDragFactor(Single, Single)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.CalculateDragFactor(Single, Single)
  name.vb: CalculateDragFactor(Single, Single)
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateDragForce(System.Numerics.Vector2,System.Single,System.Single)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.CalculateDragForce(System.Numerics.Vector2,System.Single,System.Single)
  id: CalculateDragForce(System.Numerics.Vector2,System.Single,System.Single)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: CalculateDragForce(Vector2, float, float)
  nameWithType: ShapePhysics.CalculateDragForce(Vector2, float, float)
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateDragForce(System.Numerics.Vector2, float, float)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: CalculateDragForce
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 304
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  syntax:
    content: public static Vector2 CalculateDragForce(Vector2 velocity, float dragCoefficient, float deltaTime)
    parameters:
    - id: velocity
      type: System.Numerics.Vector2
    - id: dragCoefficient
      type: System.Single
    - id: deltaTime
      type: System.Single
    return:
      type: System.Numerics.Vector2
    content.vb: Public Shared Function CalculateDragForce(velocity As Vector2, dragCoefficient As Single, deltaTime As Single) As Vector2
  overload: ShapeEngine.StaticLib.ShapePhysics.CalculateDragForce*
  nameWithType.vb: ShapePhysics.CalculateDragForce(Vector2, Single, Single)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.CalculateDragForce(System.Numerics.Vector2, Single, Single)
  name.vb: CalculateDragForce(Vector2, Single, Single)
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateDragForce(System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Single)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.CalculateDragForce(System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Single)
  id: CalculateDragForce(System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Single)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: CalculateDragForce(Vector2, float, Vector2, float)
  nameWithType: ShapePhysics.CalculateDragForce(Vector2, float, Vector2, float)
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateDragForce(System.Numerics.Vector2, float, System.Numerics.Vector2, float)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: CalculateDragForce
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 322
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: Calculates a frame rate independent drag force based on the supplied velocity and drag normal.
  example: []
  syntax:
    content: public static Vector2 CalculateDragForce(Vector2 velocity, float dragCoefficient, Vector2 dragNormal, float deltaTime)
    parameters:
    - id: velocity
      type: System.Numerics.Vector2
      description: The velocity of the object.
    - id: dragCoefficient
      type: System.Single
      description: A value between 0-1.
    - id: dragNormal
      type: System.Numerics.Vector2
      description: >-
        Drag is applied against the drag normal.
            A velocity pointing in the same direction as the dragNormal does not receive any drag.
            A velocity pointing in the opposite direction as the dragNormal does receive max drag force.
    - id: deltaTime
      type: System.Single
      description: ''
    return:
      type: System.Numerics.Vector2
      description: ''
    content.vb: Public Shared Function CalculateDragForce(velocity As Vector2, dragCoefficient As Single, dragNormal As Vector2, deltaTime As Single) As Vector2
  overload: ShapeEngine.StaticLib.ShapePhysics.CalculateDragForce*
  nameWithType.vb: ShapePhysics.CalculateDragForce(Vector2, Single, Vector2, Single)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.CalculateDragForce(System.Numerics.Vector2, Single, System.Numerics.Vector2, Single)
  name.vb: CalculateDragForce(Vector2, Single, Vector2, Single)
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyDragForce(System.Numerics.Vector2,System.Single,System.Single)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.ApplyDragForce(System.Numerics.Vector2,System.Single,System.Single)
  id: ApplyDragForce(System.Numerics.Vector2,System.Single,System.Single)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: ApplyDragForce(Vector2, float, float)
  nameWithType: ShapePhysics.ApplyDragForce(Vector2, float, float)
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyDragForce(System.Numerics.Vector2, float, float)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: ApplyDragForce
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 343
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: This function calculates a frame rate independent drag force and applies it to the supplied velocity.
  example: []
  syntax:
    content: public static Vector2 ApplyDragForce(Vector2 velocity, float dragCoefficient, float deltaTime)
    parameters:
    - id: velocity
      type: System.Numerics.Vector2
      description: The affected velocity.
    - id: dragCoefficient
      type: System.Single
      description: Drag coefficient between 0 and 1. How much energy should the velocity loose each second.
    - id: deltaTime
      type: System.Single
      description: ''
    return:
      type: System.Numerics.Vector2
      description: Returns the new scaled velocity.
    content.vb: Public Shared Function ApplyDragForce(velocity As Vector2, dragCoefficient As Single, deltaTime As Single) As Vector2
  overload: ShapeEngine.StaticLib.ShapePhysics.ApplyDragForce*
  nameWithType.vb: ShapePhysics.ApplyDragForce(Vector2, Single, Single)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.ApplyDragForce(System.Numerics.Vector2, Single, Single)
  name.vb: ApplyDragForce(Vector2, Single, Single)
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyDragForce(System.Single,System.Single,System.Single)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.ApplyDragForce(System.Single,System.Single,System.Single)
  id: ApplyDragForce(System.Single,System.Single,System.Single)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: ApplyDragForce(float, float, float)
  nameWithType: ShapePhysics.ApplyDragForce(float, float, float)
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyDragForce(float, float, float)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: ApplyDragForce
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 357
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: This function calculates a frame rate independent drag force and applies it to the supplied speed.
  example: []
  syntax:
    content: public static float ApplyDragForce(float speed, float dragCoefficient, float deltaTime)
    parameters:
    - id: speed
      type: System.Single
      description: The affected speed.
    - id: dragCoefficient
      type: System.Single
      description: Drag coefficient between 0 and 1. How much energy should the velocity loose each second.
    - id: deltaTime
      type: System.Single
      description: ''
    return:
      type: System.Single
      description: Returns the new scaled velocity.
    content.vb: Public Shared Function ApplyDragForce(speed As Single, dragCoefficient As Single, deltaTime As Single) As Single
  overload: ShapeEngine.StaticLib.ShapePhysics.ApplyDragForce*
  nameWithType.vb: ShapePhysics.ApplyDragForce(Single, Single, Single)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.ApplyDragForce(Single, Single, Single)
  name.vb: ApplyDragForce(Single, Single, Single)
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyDragForce(System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Single)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.ApplyDragForce(System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Single)
  id: ApplyDragForce(System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Single)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: ApplyDragForce(Vector2, float, Vector2, float)
  nameWithType: ShapePhysics.ApplyDragForce(Vector2, float, Vector2, float)
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyDragForce(System.Numerics.Vector2, float, System.Numerics.Vector2, float)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: ApplyDragForce
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 374
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: This function calculates a frame rate independent drag force and applies it to the supplied velocity.
  example: []
  syntax:
    content: public static Vector2 ApplyDragForce(Vector2 velocity, float dragCoefficient, Vector2 dragNormal, float deltaTime)
    parameters:
    - id: velocity
      type: System.Numerics.Vector2
      description: The affected velocity.
    - id: dragCoefficient
      type: System.Single
      description: Drag coefficient between 0 and 1. How much energy should the velocity loose each second.
    - id: dragNormal
      type: System.Numerics.Vector2
      description: >-
        Drag is applied against the drag normal.
            A velocity pointing in the same direction as the dragNormal does not receive any drag.
            A velocity pointing in the opposite direction as the dragNormal does receive max drag force.
    - id: deltaTime
      type: System.Single
      description: ''
    return:
      type: System.Numerics.Vector2
      description: Returns the new scaled velocity.
    content.vb: Public Shared Function ApplyDragForce(velocity As Vector2, dragCoefficient As Single, dragNormal As Vector2, deltaTime As Single) As Vector2
  overload: ShapeEngine.StaticLib.ShapePhysics.ApplyDragForce*
  nameWithType.vb: ShapePhysics.ApplyDragForce(Vector2, Single, Vector2, Single)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.ApplyDragForce(System.Numerics.Vector2, Single, System.Numerics.Vector2, Single)
  name.vb: ApplyDragForce(Vector2, Single, Vector2, Single)
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateDragForceRealistic(System.Numerics.Vector2,System.Single,System.Single,System.Single)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.CalculateDragForceRealistic(System.Numerics.Vector2,System.Single,System.Single,System.Single)
  id: CalculateDragForceRealistic(System.Numerics.Vector2,System.Single,System.Single,System.Single)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: CalculateDragForceRealistic(Vector2, float, float, float)
  nameWithType: ShapePhysics.CalculateDragForceRealistic(Vector2, float, float, float)
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateDragForceRealistic(System.Numerics.Vector2, float, float, float)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: CalculateDragForceRealistic
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 396
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: >-
    Calculates a realistic drag force.

    Force = FluidDensity * Speed * Speed * DragCoefficient * ReferenceArea
  example: []
  syntax:
    content: public static Vector2 CalculateDragForceRealistic(Vector2 velocity, float dragCoefficient, float referenceArea, float fluidDensity = 1.225)
    parameters:
    - id: velocity
      type: System.Numerics.Vector2
      description: The velocity of the object.
    - id: dragCoefficient
      type: System.Single
      description: The drag coefficient to scale the resulting force.
    - id: referenceArea
      type: System.Single
      description: The surface area of the object resisting the fluid.
    - id: fluidDensity
      type: System.Single
      description: The density of the fluid the object is moving through. Air at sea level has a density value of 1.225f
    return:
      type: System.Numerics.Vector2
      description: ''
    content.vb: Public Shared Function CalculateDragForceRealistic(velocity As Vector2, dragCoefficient As Single, referenceArea As Single, fluidDensity As Single = 1.225) As Vector2
  overload: ShapeEngine.StaticLib.ShapePhysics.CalculateDragForceRealistic*
  nameWithType.vb: ShapePhysics.CalculateDragForceRealistic(Vector2, Single, Single, Single)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.CalculateDragForceRealistic(System.Numerics.Vector2, Single, Single, Single)
  name.vb: CalculateDragForceRealistic(Vector2, Single, Single, Single)
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateAttraction(System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Single)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.CalculateAttraction(System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Single)
  id: CalculateAttraction(System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Single)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: CalculateAttraction(Vector2, float, Vector2, float)
  nameWithType: ShapePhysics.CalculateAttraction(Vector2, float, Vector2, float)
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateAttraction(System.Numerics.Vector2, float, System.Numerics.Vector2, float)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: CalculateAttraction
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 421
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: >-
    Calculate the gravitational force between two objects.

    Use AddForce() if force should be applied to PhysicsObjects!
  example: []
  syntax:
    content: public static (Vector2 force1, Vector2 force2) CalculateAttraction(Vector2 position1, float mass1, Vector2 position2, float mass2)
    parameters:
    - id: position1
      type: System.Numerics.Vector2
    - id: mass1
      type: System.Single
    - id: position2
      type: System.Numerics.Vector2
    - id: mass2
      type: System.Single
    return:
      type: System.ValueTuple{System.Numerics.Vector2,System.Numerics.Vector2}
      description: Returns the resulting forces.
    content.vb: Public Shared Function CalculateAttraction(position1 As Vector2, mass1 As Single, position2 As Vector2, mass2 As Single) As (force1 As Vector2, force2 As Vector2)
  overload: ShapeEngine.StaticLib.ShapePhysics.CalculateAttraction*
  nameWithType.vb: ShapePhysics.CalculateAttraction(Vector2, Single, Vector2, Single)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.CalculateAttraction(System.Numerics.Vector2, Single, System.Numerics.Vector2, Single)
  name.vb: CalculateAttraction(Vector2, Single, Vector2, Single)
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyAttraction(ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.PhysicsObject)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.ApplyAttraction(ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.PhysicsObject)
  id: ApplyAttraction(ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.PhysicsObject)
  isExtensionMethod: true
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: ApplyAttraction(PhysicsObject, PhysicsObject)
  nameWithType: ShapePhysics.ApplyAttraction(PhysicsObject, PhysicsObject)
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyAttraction(ShapeEngine.Core.PhysicsObject, ShapeEngine.Core.PhysicsObject)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: ApplyAttraction
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 446
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  syntax:
    content: public static void ApplyAttraction(this PhysicsObject obj1, PhysicsObject obj2)
    parameters:
    - id: obj1
      type: ShapeEngine.Core.PhysicsObject
    - id: obj2
      type: ShapeEngine.Core.PhysicsObject
    content.vb: Public Shared Sub ApplyAttraction(obj1 As PhysicsObject, obj2 As PhysicsObject)
  overload: ShapeEngine.StaticLib.ShapePhysics.ApplyAttraction*
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateAttraction(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.CalculateAttraction(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)
  id: CalculateAttraction(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: CalculateAttraction(Vector2, Vector2, float)
  nameWithType: ShapePhysics.CalculateAttraction(Vector2, Vector2, float)
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateAttraction(System.Numerics.Vector2, System.Numerics.Vector2, float)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: CalculateAttraction
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 458
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: >-
    Calculate the force for 1 object based on attraction point and force.

    Use AddForce() if force should be applied to PhysicsObjects!
  example: []
  syntax:
    content: public static Vector2 CalculateAttraction(Vector2 position, Vector2 attractionPoint, float attractionForce)
    parameters:
    - id: position
      type: System.Numerics.Vector2
    - id: attractionPoint
      type: System.Numerics.Vector2
    - id: attractionForce
      type: System.Single
    return:
      type: System.Numerics.Vector2
      description: Returns the resulting forces.
    content.vb: Public Shared Function CalculateAttraction(position As Vector2, attractionPoint As Vector2, attractionForce As Single) As Vector2
  overload: ShapeEngine.StaticLib.ShapePhysics.CalculateAttraction*
  nameWithType.vb: ShapePhysics.CalculateAttraction(Vector2, Vector2, Single)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.CalculateAttraction(System.Numerics.Vector2, System.Numerics.Vector2, Single)
  name.vb: CalculateAttraction(Vector2, Vector2, Single)
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyAttraction(ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.ApplyAttraction(ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single)
  id: ApplyAttraction(ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single)
  isExtensionMethod: true
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: ApplyAttraction(PhysicsObject, Vector2, float)
  nameWithType: ShapePhysics.ApplyAttraction(PhysicsObject, Vector2, float)
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyAttraction(ShapeEngine.Core.PhysicsObject, System.Numerics.Vector2, float)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: ApplyAttraction
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 480
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  syntax:
    content: public static void ApplyAttraction(this PhysicsObject obj, Vector2 attractionPoint, float attractionForce)
    parameters:
    - id: obj
      type: ShapeEngine.Core.PhysicsObject
    - id: attractionPoint
      type: System.Numerics.Vector2
    - id: attractionForce
      type: System.Single
    content.vb: Public Shared Sub ApplyAttraction(obj As PhysicsObject, attractionPoint As Vector2, attractionForce As Single)
  overload: ShapeEngine.StaticLib.ShapePhysics.ApplyAttraction*
  nameWithType.vb: ShapePhysics.ApplyAttraction(PhysicsObject, Vector2, Single)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.ApplyAttraction(ShapeEngine.Core.PhysicsObject, System.Numerics.Vector2, Single)
  name.vb: ApplyAttraction(PhysicsObject, Vector2, Single)
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateAttraction(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Numerics.Vector2)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.CalculateAttraction(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Numerics.Vector2)
  id: CalculateAttraction(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Numerics.Vector2)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: CalculateAttraction(Vector2, Vector2, float, Vector2)
  nameWithType: ShapePhysics.CalculateAttraction(Vector2, Vector2, float, Vector2)
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateAttraction(System.Numerics.Vector2, System.Numerics.Vector2, float, System.Numerics.Vector2)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: CalculateAttraction
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 496
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: >-
    Calculate the force for 1 object based on attraction point and force.

    Use AddForce() if force should be applied to PhysicsObjects!
  example: []
  syntax:
    content: public static Vector2 CalculateAttraction(Vector2 position, Vector2 attractionPoint, float attractionForce, Vector2 attractionNormal)
    parameters:
    - id: position
      type: System.Numerics.Vector2
      description: ''
    - id: attractionPoint
      type: System.Numerics.Vector2
      description: ''
    - id: attractionForce
      type: System.Single
      description: ''
    - id: attractionNormal
      type: System.Numerics.Vector2
      description: >-
        Determines the direction from which the attraction force works.
            Pointing in the same direction of attractionNormal will result in max attraction force.
    return:
      type: System.Numerics.Vector2
      description: ''
    content.vb: Public Shared Function CalculateAttraction(position As Vector2, attractionPoint As Vector2, attractionForce As Single, attractionNormal As Vector2) As Vector2
  overload: ShapeEngine.StaticLib.ShapePhysics.CalculateAttraction*
  nameWithType.vb: ShapePhysics.CalculateAttraction(Vector2, Vector2, Single, Vector2)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.CalculateAttraction(System.Numerics.Vector2, System.Numerics.Vector2, Single, System.Numerics.Vector2)
  name.vb: CalculateAttraction(Vector2, Vector2, Single, Vector2)
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyAttraction(ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single,System.Numerics.Vector2)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.ApplyAttraction(ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single,System.Numerics.Vector2)
  id: ApplyAttraction(ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single,System.Numerics.Vector2)
  isExtensionMethod: true
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: ApplyAttraction(PhysicsObject, Vector2, float, Vector2)
  nameWithType: ShapePhysics.ApplyAttraction(PhysicsObject, Vector2, float, Vector2)
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyAttraction(ShapeEngine.Core.PhysicsObject, System.Numerics.Vector2, float, System.Numerics.Vector2)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: ApplyAttraction
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 518
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  syntax:
    content: public static void ApplyAttraction(this PhysicsObject obj, Vector2 attractionPoint, float attractionForce, Vector2 attractionNormal)
    parameters:
    - id: obj
      type: ShapeEngine.Core.PhysicsObject
    - id: attractionPoint
      type: System.Numerics.Vector2
    - id: attractionForce
      type: System.Single
    - id: attractionNormal
      type: System.Numerics.Vector2
    content.vb: Public Shared Sub ApplyAttraction(obj As PhysicsObject, attractionPoint As Vector2, attractionForce As Single, attractionNormal As Vector2)
  overload: ShapeEngine.StaticLib.ShapePhysics.ApplyAttraction*
  nameWithType.vb: ShapePhysics.ApplyAttraction(PhysicsObject, Vector2, Single, Vector2)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.ApplyAttraction(ShapeEngine.Core.PhysicsObject, System.Numerics.Vector2, Single, System.Numerics.Vector2)
  name.vb: ApplyAttraction(PhysicsObject, Vector2, Single, Vector2)
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateAttraction(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.CalculateAttraction(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single)
  id: CalculateAttraction(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: CalculateAttraction(Vector2, Vector2, float, float)
  nameWithType: ShapePhysics.CalculateAttraction(Vector2, Vector2, float, float)
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateAttraction(System.Numerics.Vector2, System.Numerics.Vector2, float, float)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: CalculateAttraction
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 530
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: >-
    Calculate the force for 1 object based on attraction point and force.

    Use AddForce() if force should be applied to PhysicsObjects!
  example: []
  syntax:
    content: public static Vector2 CalculateAttraction(Vector2 position, Vector2 attractionPoint, float attractionForce, float distanceScalePower)
    parameters:
    - id: position
      type: System.Numerics.Vector2
    - id: attractionPoint
      type: System.Numerics.Vector2
    - id: attractionForce
      type: System.Single
    - id: distanceScalePower
      type: System.Single
    return:
      type: System.Numerics.Vector2
      description: Returns the resulting forces.
    content.vb: Public Shared Function CalculateAttraction(position As Vector2, attractionPoint As Vector2, attractionForce As Single, distanceScalePower As Single) As Vector2
  overload: ShapeEngine.StaticLib.ShapePhysics.CalculateAttraction*
  nameWithType.vb: ShapePhysics.CalculateAttraction(Vector2, Vector2, Single, Single)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.CalculateAttraction(System.Numerics.Vector2, System.Numerics.Vector2, Single, Single)
  name.vb: CalculateAttraction(Vector2, Vector2, Single, Single)
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyAttraction(ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single,System.Single)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.ApplyAttraction(ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single,System.Single)
  id: ApplyAttraction(ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single,System.Single)
  isExtensionMethod: true
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: ApplyAttraction(PhysicsObject, Vector2, float, float)
  nameWithType: ShapePhysics.ApplyAttraction(PhysicsObject, Vector2, float, float)
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyAttraction(ShapeEngine.Core.PhysicsObject, System.Numerics.Vector2, float, float)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: ApplyAttraction
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 552
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  syntax:
    content: public static void ApplyAttraction(this PhysicsObject obj, Vector2 attractionPoint, float attractionForce, float distanceScalePower)
    parameters:
    - id: obj
      type: ShapeEngine.Core.PhysicsObject
    - id: attractionPoint
      type: System.Numerics.Vector2
    - id: attractionForce
      type: System.Single
    - id: distanceScalePower
      type: System.Single
    content.vb: Public Shared Sub ApplyAttraction(obj As PhysicsObject, attractionPoint As Vector2, attractionForce As Single, distanceScalePower As Single)
  overload: ShapeEngine.StaticLib.ShapePhysics.ApplyAttraction*
  nameWithType.vb: ShapePhysics.ApplyAttraction(PhysicsObject, Vector2, Single, Single)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.ApplyAttraction(ShapeEngine.Core.PhysicsObject, System.Numerics.Vector2, Single, Single)
  name.vb: ApplyAttraction(PhysicsObject, Vector2, Single, Single)
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Single)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Single)
  id: ApplyRepulsion(System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Single)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: ApplyRepulsion(Vector2, float, Vector2, float)
  nameWithType: ShapePhysics.ApplyRepulsion(Vector2, float, Vector2, float)
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(System.Numerics.Vector2, float, System.Numerics.Vector2, float)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: ApplyRepulsion
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 568
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: >-
    Calculate the repulsion force between two objects.

    Use AddForce() if force should be applied to PhysicsObjects!
  example: []
  syntax:
    content: public static (Vector2 force1, Vector2 force2) ApplyRepulsion(Vector2 position1, float mass1, Vector2 position2, float mass2)
    parameters:
    - id: position1
      type: System.Numerics.Vector2
    - id: mass1
      type: System.Single
    - id: position2
      type: System.Numerics.Vector2
    - id: mass2
      type: System.Single
    return:
      type: System.ValueTuple{System.Numerics.Vector2,System.Numerics.Vector2}
      description: Returns the resulting forces.
    content.vb: Public Shared Function ApplyRepulsion(position1 As Vector2, mass1 As Single, position2 As Vector2, mass2 As Single) As (force1 As Vector2, force2 As Vector2)
  overload: ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion*
  nameWithType.vb: ShapePhysics.ApplyRepulsion(Vector2, Single, Vector2, Single)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(System.Numerics.Vector2, Single, System.Numerics.Vector2, Single)
  name.vb: ApplyRepulsion(Vector2, Single, Vector2, Single)
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.PhysicsObject)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.PhysicsObject)
  id: ApplyRepulsion(ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.PhysicsObject)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: ApplyRepulsion(PhysicsObject, PhysicsObject)
  nameWithType: ShapePhysics.ApplyRepulsion(PhysicsObject, PhysicsObject)
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(ShapeEngine.Core.PhysicsObject, ShapeEngine.Core.PhysicsObject)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: ApplyRepulsion
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 592
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  syntax:
    content: public static void ApplyRepulsion(PhysicsObject obj1, PhysicsObject obj2)
    parameters:
    - id: obj1
      type: ShapeEngine.Core.PhysicsObject
    - id: obj2
      type: ShapeEngine.Core.PhysicsObject
    content.vb: Public Shared Sub ApplyRepulsion(obj1 As PhysicsObject, obj2 As PhysicsObject)
  overload: ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion*
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)
  id: ApplyRepulsion(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: ApplyRepulsion(Vector2, Vector2, float)
  nameWithType: ShapePhysics.ApplyRepulsion(Vector2, Vector2, float)
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(System.Numerics.Vector2, System.Numerics.Vector2, float)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: ApplyRepulsion
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 604
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: >-
    Calculate the repulsion force for 1 object based on repulsion point and force.

    Use AddForce() if force should be applied to PhysicsObjects!
  example: []
  syntax:
    content: public static Vector2 ApplyRepulsion(Vector2 position, Vector2 repulsionPoint, float repulsionForce)
    parameters:
    - id: position
      type: System.Numerics.Vector2
    - id: repulsionPoint
      type: System.Numerics.Vector2
    - id: repulsionForce
      type: System.Single
    return:
      type: System.Numerics.Vector2
      description: Returns the resulting forces.
    content.vb: Public Shared Function ApplyRepulsion(position As Vector2, repulsionPoint As Vector2, repulsionForce As Single) As Vector2
  overload: ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion*
  nameWithType.vb: ShapePhysics.ApplyRepulsion(Vector2, Vector2, Single)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(System.Numerics.Vector2, System.Numerics.Vector2, Single)
  name.vb: ApplyRepulsion(Vector2, Vector2, Single)
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single)
  id: ApplyRepulsion(ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single)
  isExtensionMethod: true
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: ApplyRepulsion(PhysicsObject, Vector2, float)
  nameWithType: ShapePhysics.ApplyRepulsion(PhysicsObject, Vector2, float)
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(ShapeEngine.Core.PhysicsObject, System.Numerics.Vector2, float)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: ApplyRepulsion
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 626
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  syntax:
    content: public static void ApplyRepulsion(this PhysicsObject obj, Vector2 repulsionPoint, float repulsionForce)
    parameters:
    - id: obj
      type: ShapeEngine.Core.PhysicsObject
    - id: repulsionPoint
      type: System.Numerics.Vector2
    - id: repulsionForce
      type: System.Single
    content.vb: Public Shared Sub ApplyRepulsion(obj As PhysicsObject, repulsionPoint As Vector2, repulsionForce As Single)
  overload: ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion*
  nameWithType.vb: ShapePhysics.ApplyRepulsion(PhysicsObject, Vector2, Single)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(ShapeEngine.Core.PhysicsObject, System.Numerics.Vector2, Single)
  name.vb: ApplyRepulsion(PhysicsObject, Vector2, Single)
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Numerics.Vector2)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Numerics.Vector2)
  id: ApplyRepulsion(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Numerics.Vector2)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: ApplyRepulsion(Vector2, Vector2, float, Vector2)
  nameWithType: ShapePhysics.ApplyRepulsion(Vector2, Vector2, float, Vector2)
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(System.Numerics.Vector2, System.Numerics.Vector2, float, System.Numerics.Vector2)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: ApplyRepulsion
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 642
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: >-
    Calculate the repulsion force for 1 object based on repulsion point and force.

    Use AddForce() if force should be applied to PhysicsObjects!
  example: []
  syntax:
    content: public static Vector2 ApplyRepulsion(Vector2 position, Vector2 repulsionPoint, float repulsionForce, Vector2 repulsionNormal)
    parameters:
    - id: position
      type: System.Numerics.Vector2
      description: ''
    - id: repulsionPoint
      type: System.Numerics.Vector2
      description: ''
    - id: repulsionForce
      type: System.Single
      description: ''
    - id: repulsionNormal
      type: System.Numerics.Vector2
      description: >-
        Determines the direction from which the attraction force works.
            Pointing in the same direction of attractionNormal will result in max attraction force.
    return:
      type: System.Numerics.Vector2
      description: Returns the resulting forces.
    content.vb: Public Shared Function ApplyRepulsion(position As Vector2, repulsionPoint As Vector2, repulsionForce As Single, repulsionNormal As Vector2) As Vector2
  overload: ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion*
  nameWithType.vb: ShapePhysics.ApplyRepulsion(Vector2, Vector2, Single, Vector2)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(System.Numerics.Vector2, System.Numerics.Vector2, Single, System.Numerics.Vector2)
  name.vb: ApplyRepulsion(Vector2, Vector2, Single, Vector2)
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single,System.Numerics.Vector2)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single,System.Numerics.Vector2)
  id: ApplyRepulsion(ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single,System.Numerics.Vector2)
  isExtensionMethod: true
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: ApplyRepulsion(PhysicsObject, Vector2, float, Vector2)
  nameWithType: ShapePhysics.ApplyRepulsion(PhysicsObject, Vector2, float, Vector2)
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(ShapeEngine.Core.PhysicsObject, System.Numerics.Vector2, float, System.Numerics.Vector2)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: ApplyRepulsion
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 664
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  syntax:
    content: public static void ApplyRepulsion(this PhysicsObject obj, Vector2 repulsionPoint, float repulsionForce, Vector2 repulsionNormal)
    parameters:
    - id: obj
      type: ShapeEngine.Core.PhysicsObject
    - id: repulsionPoint
      type: System.Numerics.Vector2
    - id: repulsionForce
      type: System.Single
    - id: repulsionNormal
      type: System.Numerics.Vector2
    content.vb: Public Shared Sub ApplyRepulsion(obj As PhysicsObject, repulsionPoint As Vector2, repulsionForce As Single, repulsionNormal As Vector2)
  overload: ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion*
  nameWithType.vb: ShapePhysics.ApplyRepulsion(PhysicsObject, Vector2, Single, Vector2)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(ShapeEngine.Core.PhysicsObject, System.Numerics.Vector2, Single, System.Numerics.Vector2)
  name.vb: ApplyRepulsion(PhysicsObject, Vector2, Single, Vector2)
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single)
  id: ApplyRepulsion(System.Numerics.Vector2,System.Numerics.Vector2,System.Single,System.Single)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: ApplyRepulsion(Vector2, Vector2, float, float)
  nameWithType: ShapePhysics.ApplyRepulsion(Vector2, Vector2, float, float)
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(System.Numerics.Vector2, System.Numerics.Vector2, float, float)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: ApplyRepulsion
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 676
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: >-
    Calculate the repulsion force for 1 object based on repulsion point and force.

    Use AddForce() if force should be applied to PhysicsObjects!
  example: []
  syntax:
    content: public static Vector2 ApplyRepulsion(Vector2 position, Vector2 repulsionPoint, float repulsionForce, float distanceScalePower)
    parameters:
    - id: position
      type: System.Numerics.Vector2
    - id: repulsionPoint
      type: System.Numerics.Vector2
    - id: repulsionForce
      type: System.Single
    - id: distanceScalePower
      type: System.Single
    return:
      type: System.Numerics.Vector2
      description: Returns the resulting forces.
    content.vb: Public Shared Function ApplyRepulsion(position As Vector2, repulsionPoint As Vector2, repulsionForce As Single, distanceScalePower As Single) As Vector2
  overload: ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion*
  nameWithType.vb: ShapePhysics.ApplyRepulsion(Vector2, Vector2, Single, Single)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(System.Numerics.Vector2, System.Numerics.Vector2, Single, Single)
  name.vb: ApplyRepulsion(Vector2, Vector2, Single, Single)
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single,System.Single)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single,System.Single)
  id: ApplyRepulsion(ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single,System.Single)
  isExtensionMethod: true
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: ApplyRepulsion(PhysicsObject, Vector2, float, float)
  nameWithType: ShapePhysics.ApplyRepulsion(PhysicsObject, Vector2, float, float)
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(ShapeEngine.Core.PhysicsObject, System.Numerics.Vector2, float, float)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: ApplyRepulsion
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 698
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  syntax:
    content: public static void ApplyRepulsion(this PhysicsObject obj, Vector2 repulsionPoint, float repulsionForce, float distanceScalePower)
    parameters:
    - id: obj
      type: ShapeEngine.Core.PhysicsObject
    - id: repulsionPoint
      type: System.Numerics.Vector2
    - id: repulsionForce
      type: System.Single
    - id: distanceScalePower
      type: System.Single
    content.vb: Public Shared Sub ApplyRepulsion(obj As PhysicsObject, repulsionPoint As Vector2, repulsionForce As Single, distanceScalePower As Single)
  overload: ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion*
  nameWithType.vb: ShapePhysics.ApplyRepulsion(PhysicsObject, Vector2, Single, Single)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion(ShapeEngine.Core.PhysicsObject, System.Numerics.Vector2, Single, Single)
  name.vb: ApplyRepulsion(PhysicsObject, Vector2, Single, Single)
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateFrictionTangent(System.Numerics.Vector2,System.Numerics.Vector2)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.CalculateFrictionTangent(System.Numerics.Vector2,System.Numerics.Vector2)
  id: CalculateFrictionTangent(System.Numerics.Vector2,System.Numerics.Vector2)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: CalculateFrictionTangent(Vector2, Vector2)
  nameWithType: ShapePhysics.CalculateFrictionTangent(Vector2, Vector2)
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateFrictionTangent(System.Numerics.Vector2, System.Numerics.Vector2)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: CalculateFrictionTangent
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 716
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: >-
    Calculates the friction tangent vector.

    The tangent is always perpendicular to the surface normal.

    The tanget always points in the opposite direction of the velocity.
  example: []
  syntax:
    content: public static Vector2 CalculateFrictionTangent(Vector2 velocity, Vector2 surfaceNormal)
    parameters:
    - id: velocity
      type: System.Numerics.Vector2
      description: ''
    - id: surfaceNormal
      type: System.Numerics.Vector2
      description: ''
    return:
      type: System.Numerics.Vector2
      description: ''
    content.vb: Public Shared Function CalculateFrictionTangent(velocity As Vector2, surfaceNormal As Vector2) As Vector2
  overload: ShapeEngine.StaticLib.ShapePhysics.CalculateFrictionTangent*
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateFrictionForce(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.CalculateFrictionForce(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)
  id: CalculateFrictionForce(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: CalculateFrictionForce(Vector2, Vector2, float)
  nameWithType: ShapePhysics.CalculateFrictionForce(Vector2, Vector2, float)
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateFrictionForce(System.Numerics.Vector2, System.Numerics.Vector2, float)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: CalculateFrictionForce
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 731
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: >-
    Calculates a friction force that always acts directly opposite to the velocity,

    scaled by friction force.
  example: []
  syntax:
    content: public static Vector2 CalculateFrictionForce(Vector2 velocity, Vector2 surfaceNormal, float frictionForce)
    parameters:
    - id: velocity
      type: System.Numerics.Vector2
      description: ''
    - id: surfaceNormal
      type: System.Numerics.Vector2
      description: ''
    - id: frictionForce
      type: System.Single
      description: ''
    return:
      type: System.Numerics.Vector2
      description: ''
    content.vb: Public Shared Function CalculateFrictionForce(velocity As Vector2, surfaceNormal As Vector2, frictionForce As Single) As Vector2
  overload: ShapeEngine.StaticLib.ShapePhysics.CalculateFrictionForce*
  nameWithType.vb: ShapePhysics.CalculateFrictionForce(Vector2, Vector2, Single)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.CalculateFrictionForce(System.Numerics.Vector2, System.Numerics.Vector2, Single)
  name.vb: CalculateFrictionForce(Vector2, Vector2, Single)
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateFrictionForceRealistic(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.CalculateFrictionForceRealistic(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)
  id: CalculateFrictionForceRealistic(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: CalculateFrictionForceRealistic(Vector2, Vector2, float)
  nameWithType: ShapePhysics.CalculateFrictionForceRealistic(Vector2, Vector2, float)
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateFrictionForceRealistic(System.Numerics.Vector2, System.Numerics.Vector2, float)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: CalculateFrictionForceRealistic
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 750
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: >-
    Calculate the tangent based on the surface normal and velocity and returns a force

    that acts in the opposite direction of the tangent scaled by the friction force.
  example: []
  syntax:
    content: public static Vector2 CalculateFrictionForceRealistic(Vector2 velocity, Vector2 surfaceNormal, float frictionForce)
    parameters:
    - id: velocity
      type: System.Numerics.Vector2
      description: ''
    - id: surfaceNormal
      type: System.Numerics.Vector2
      description: ''
    - id: frictionForce
      type: System.Single
      description: ''
    return:
      type: System.Numerics.Vector2
      description: ''
    content.vb: Public Shared Function CalculateFrictionForceRealistic(velocity As Vector2, surfaceNormal As Vector2, frictionForce As Single) As Vector2
  overload: ShapeEngine.StaticLib.ShapePhysics.CalculateFrictionForceRealistic*
  nameWithType.vb: ShapePhysics.CalculateFrictionForceRealistic(Vector2, Vector2, Single)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.CalculateFrictionForceRealistic(System.Numerics.Vector2, System.Numerics.Vector2, Single)
  name.vb: CalculateFrictionForceRealistic(Vector2, Vector2, Single)
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyFrictionForce(ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.ApplyFrictionForce(ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single)
  id: ApplyFrictionForce(ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: ApplyFrictionForce(PhysicsObject, Vector2, float)
  nameWithType: ShapePhysics.ApplyFrictionForce(PhysicsObject, Vector2, float)
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyFrictionForce(ShapeEngine.Core.PhysicsObject, System.Numerics.Vector2, float)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: ApplyFrictionForce
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 761
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  syntax:
    content: public static bool ApplyFrictionForce(PhysicsObject obj, Vector2 surfaceNormal, float frictionForce)
    parameters:
    - id: obj
      type: ShapeEngine.Core.PhysicsObject
    - id: surfaceNormal
      type: System.Numerics.Vector2
    - id: frictionForce
      type: System.Single
    return:
      type: System.Boolean
    content.vb: Public Shared Function ApplyFrictionForce(obj As PhysicsObject, surfaceNormal As Vector2, frictionForce As Single) As Boolean
  overload: ShapeEngine.StaticLib.ShapePhysics.ApplyFrictionForce*
  nameWithType.vb: ShapePhysics.ApplyFrictionForce(PhysicsObject, Vector2, Single)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.ApplyFrictionForce(ShapeEngine.Core.PhysicsObject, System.Numerics.Vector2, Single)
  name.vb: ApplyFrictionForce(PhysicsObject, Vector2, Single)
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyFrictionForceRealistic(ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.ApplyFrictionForceRealistic(ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single)
  id: ApplyFrictionForceRealistic(ShapeEngine.Core.PhysicsObject,System.Numerics.Vector2,System.Single)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: ApplyFrictionForceRealistic(PhysicsObject, Vector2, float)
  nameWithType: ShapePhysics.ApplyFrictionForceRealistic(PhysicsObject, Vector2, float)
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyFrictionForceRealistic(ShapeEngine.Core.PhysicsObject, System.Numerics.Vector2, float)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: ApplyFrictionForceRealistic
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 775
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  syntax:
    content: public static bool ApplyFrictionForceRealistic(PhysicsObject obj, Vector2 surfaceNormal, float frictionForce)
    parameters:
    - id: obj
      type: ShapeEngine.Core.PhysicsObject
    - id: surfaceNormal
      type: System.Numerics.Vector2
    - id: frictionForce
      type: System.Single
    return:
      type: System.Boolean
    content.vb: Public Shared Function ApplyFrictionForceRealistic(obj As PhysicsObject, surfaceNormal As Vector2, frictionForce As Single) As Boolean
  overload: ShapeEngine.StaticLib.ShapePhysics.ApplyFrictionForceRealistic*
  nameWithType.vb: ShapePhysics.ApplyFrictionForceRealistic(PhysicsObject, Vector2, Single)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.ApplyFrictionForceRealistic(ShapeEngine.Core.PhysicsObject, System.Numerics.Vector2, Single)
  name.vb: ApplyFrictionForceRealistic(PhysicsObject, Vector2, Single)
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceRealistic(System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Single)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceRealistic(System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Single)
  id: CalculateReverseAttractionForceRealistic(System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Single)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: CalculateReverseAttractionForceRealistic(Vector2, float, Vector2, float)
  nameWithType: ShapePhysics.CalculateReverseAttractionForceRealistic(Vector2, float, Vector2, float)
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceRealistic(System.Numerics.Vector2, float, System.Numerics.Vector2, float)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: CalculateReverseAttractionForceRealistic
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 804
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: >-
    Calculates a gravitational force between two objects that scales based on distance squared.

    It is called realistic because even though it is doing the reverse of gravity...

    The further away the objects are, the stronger the gravitational force will be.

    Use AddForce() if force should be applied to PhysicsObjects!
  example: []
  syntax:
    content: public static (Vector2 force1, Vector2 force2) CalculateReverseAttractionForceRealistic(Vector2 position1, float mass1, Vector2 position2, float mass2)
    parameters:
    - id: position1
      type: System.Numerics.Vector2
      description: ''
    - id: mass1
      type: System.Single
      description: ''
    - id: position2
      type: System.Numerics.Vector2
      description: ''
    - id: mass2
      type: System.Single
      description: ''
    return:
      type: System.ValueTuple{System.Numerics.Vector2,System.Numerics.Vector2}
      description: Returns the force (acceleration) that can be applied. Corresponding masses are already divided out. Use AddForceRaw in PhysicsObject!
    content.vb: Public Shared Function CalculateReverseAttractionForceRealistic(position1 As Vector2, mass1 As Single, position2 As Vector2, mass2 As Single) As (force1 As Vector2, force2 As Vector2)
  overload: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceRealistic*
  nameWithType.vb: ShapePhysics.CalculateReverseAttractionForceRealistic(Vector2, Single, Vector2, Single)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceRealistic(System.Numerics.Vector2, Single, System.Numerics.Vector2, Single)
  name.vb: CalculateReverseAttractionForceRealistic(Vector2, Single, Vector2, Single)
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceRealistic(ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.PhysicsObject)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceRealistic(ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.PhysicsObject)
  id: ApplyReverseAttractionForceRealistic(ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.PhysicsObject)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: ApplyReverseAttractionForceRealistic(PhysicsObject, PhysicsObject)
  nameWithType: ShapePhysics.ApplyReverseAttractionForceRealistic(PhysicsObject, PhysicsObject)
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceRealistic(ShapeEngine.Core.PhysicsObject, ShapeEngine.Core.PhysicsObject)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: ApplyReverseAttractionForceRealistic
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 837
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: >-
    Calculates a gravitational force between two objects that scales based on distance squared.

    The further away the objects are, the stronger the gravitational force will be. (reverse than in reality)

    Applies the forces to the objects.
  example: []
  syntax:
    content: public static void ApplyReverseAttractionForceRealistic(PhysicsObject obj1, PhysicsObject obj2)
    parameters:
    - id: obj1
      type: ShapeEngine.Core.PhysicsObject
      description: ''
    - id: obj2
      type: ShapeEngine.Core.PhysicsObject
      description: ''
    content.vb: Public Shared Sub ApplyReverseAttractionForceRealistic(obj1 As PhysicsObject, obj2 As PhysicsObject)
  overload: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceRealistic*
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceRealistic(System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Numerics.Vector2)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceRealistic(System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Numerics.Vector2)
  id: CalculateReverseAttractionForceRealistic(System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Numerics.Vector2)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: CalculateReverseAttractionForceRealistic(Vector2, float, Vector2, Vector2)
  nameWithType: ShapePhysics.CalculateReverseAttractionForceRealistic(Vector2, float, Vector2, Vector2)
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceRealistic(System.Numerics.Vector2, float, System.Numerics.Vector2, System.Numerics.Vector2)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: CalculateReverseAttractionForceRealistic
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 873
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: >-
    Calculates a force that gets stronger with distance and direction.

    The force scales with distance squared and the mass of the attraction object!

    A velocity pointing away from the origin has the strongest force, pointing towards the origin has the weakest force.

    If the velocity direction points towards the origin or the distance is 0, the force is 0.
  example: []
  syntax:
    content: public static Vector2 CalculateReverseAttractionForceRealistic(Vector2 attractionOrigin, float attractionMass, Vector2 objectPosition, Vector2 objectVelocity)
    parameters:
    - id: attractionOrigin
      type: System.Numerics.Vector2
      description: The origin of the attraction force.
    - id: attractionMass
      type: System.Single
      description: The mass of the attraction object.
    - id: objectPosition
      type: System.Numerics.Vector2
      description: The position of the object.
    - id: objectVelocity
      type: System.Numerics.Vector2
      description: The velocity of the object.
    return:
      type: System.Numerics.Vector2
      description: Returns the final force. Use AddForce() in PhysicsObject.
    content.vb: Public Shared Function CalculateReverseAttractionForceRealistic(attractionOrigin As Vector2, attractionMass As Single, objectPosition As Vector2, objectVelocity As Vector2) As Vector2
  overload: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceRealistic*
  nameWithType.vb: ShapePhysics.CalculateReverseAttractionForceRealistic(Vector2, Single, Vector2, Vector2)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceRealistic(System.Numerics.Vector2, Single, System.Numerics.Vector2, System.Numerics.Vector2)
  name.vb: CalculateReverseAttractionForceRealistic(Vector2, Single, Vector2, Vector2)
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceRealistic(System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Numerics.Vector2,ShapeEngine.Core.Structs.ValueRange)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceRealistic(System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Numerics.Vector2,ShapeEngine.Core.Structs.ValueRange)
  id: CalculateReverseAttractionForceRealistic(System.Numerics.Vector2,System.Single,System.Numerics.Vector2,System.Numerics.Vector2,ShapeEngine.Core.Structs.ValueRange)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: CalculateReverseAttractionForceRealistic(Vector2, float, Vector2, Vector2, ValueRange)
  nameWithType: ShapePhysics.CalculateReverseAttractionForceRealistic(Vector2, float, Vector2, Vector2, ValueRange)
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceRealistic(System.Numerics.Vector2, float, System.Numerics.Vector2, System.Numerics.Vector2, ShapeEngine.Core.Structs.ValueRange)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: CalculateReverseAttractionForceRealistic
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 910
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: >-
    Calculates a force that gets stronger with distance and direction.

    The force scales with distance squared and the mass of the attraction object!

    A velocity pointing away from the origin has the strongest force, pointing towards the origin has the weakest force.

    If the velocity direction points towards the origin or the distance is 0, the force is 0.
  example: []
  syntax:
    content: public static Vector2 CalculateReverseAttractionForceRealistic(Vector2 attractionOrigin, float attractionMass, Vector2 objectPosition, Vector2 objectVelocity, ValueRange dotRange)
    parameters:
    - id: attractionOrigin
      type: System.Numerics.Vector2
      description: The origin of the attraction force.
    - id: attractionMass
      type: System.Single
      description: The mass of the attraction object.
    - id: objectPosition
      type: System.Numerics.Vector2
      description: The position of the object.
    - id: objectVelocity
      type: System.Numerics.Vector2
      description: The velocity of the object.
    - id: dotRange
      type: ShapeEngine.Core.Structs.ValueRange
      description: >-
        Set the multiplier range for pointing towards the center or away from the center.
            [0 and 1] would make force 0 when pointing towards the center and max when pointing away.
    return:
      type: System.Numerics.Vector2
      description: Returns the final force. Use AddForce() in PhysicsObject.
    content.vb: Public Shared Function CalculateReverseAttractionForceRealistic(attractionOrigin As Vector2, attractionMass As Single, objectPosition As Vector2, objectVelocity As Vector2, dotRange As ValueRange) As Vector2
  overload: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceRealistic*
  nameWithType.vb: ShapePhysics.CalculateReverseAttractionForceRealistic(Vector2, Single, Vector2, Vector2, ValueRange)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceRealistic(System.Numerics.Vector2, Single, System.Numerics.Vector2, System.Numerics.Vector2, ShapeEngine.Core.Structs.ValueRange)
  name.vb: CalculateReverseAttractionForceRealistic(Vector2, Single, Vector2, Vector2, ValueRange)
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceRealistic(System.Numerics.Vector2,System.Single,ShapeEngine.Core.PhysicsObject)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceRealistic(System.Numerics.Vector2,System.Single,ShapeEngine.Core.PhysicsObject)
  id: ApplyReverseAttractionForceRealistic(System.Numerics.Vector2,System.Single,ShapeEngine.Core.PhysicsObject)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: ApplyReverseAttractionForceRealistic(Vector2, float, PhysicsObject)
  nameWithType: ShapePhysics.ApplyReverseAttractionForceRealistic(Vector2, float, PhysicsObject)
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceRealistic(System.Numerics.Vector2, float, ShapeEngine.Core.PhysicsObject)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: ApplyReverseAttractionForceRealistic
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 943
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: >-
    Calculates a force that gets stronger with distance and direction.

    The force scales with distance squared and the mass of the attraction object!

    A velocity pointing away from the origin has the strongest force, pointing towards the origin has the weakest force.

    If the velocity direction points towards the origin or the distance is 0, the force is 0.
  example: []
  syntax:
    content: public static bool ApplyReverseAttractionForceRealistic(Vector2 attractionOrigin, float attractionMass, PhysicsObject obj)
    parameters:
    - id: attractionOrigin
      type: System.Numerics.Vector2
      description: The origin of the attraction force.
    - id: attractionMass
      type: System.Single
      description: The mass of the attraction object.
    - id: obj
      type: ShapeEngine.Core.PhysicsObject
      description: The physics object to apply the force to.
    return:
      type: System.Boolean
      description: Returns if a force was applied.
    content.vb: Public Shared Function ApplyReverseAttractionForceRealistic(attractionOrigin As Vector2, attractionMass As Single, obj As PhysicsObject) As Boolean
  overload: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceRealistic*
  nameWithType.vb: ShapePhysics.ApplyReverseAttractionForceRealistic(Vector2, Single, PhysicsObject)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceRealistic(System.Numerics.Vector2, Single, ShapeEngine.Core.PhysicsObject)
  name.vb: ApplyReverseAttractionForceRealistic(Vector2, Single, PhysicsObject)
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceRealistic(System.Numerics.Vector2,System.Single,ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.Structs.ValueRange)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceRealistic(System.Numerics.Vector2,System.Single,ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.Structs.ValueRange)
  id: ApplyReverseAttractionForceRealistic(System.Numerics.Vector2,System.Single,ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.Structs.ValueRange)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: ApplyReverseAttractionForceRealistic(Vector2, float, PhysicsObject, ValueRange)
  nameWithType: ShapePhysics.ApplyReverseAttractionForceRealistic(Vector2, float, PhysicsObject, ValueRange)
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceRealistic(System.Numerics.Vector2, float, ShapeEngine.Core.PhysicsObject, ShapeEngine.Core.Structs.ValueRange)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: ApplyReverseAttractionForceRealistic
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 981
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: >-
    Calculates a force that gets stronger with distance and direction.

    The force scales with distance squared and the mass of the attraction object!

    A velocity pointing away from the origin has the strongest force, pointing towards the origin has the weakest force.

    If the velocity direction points towards the origin or the distance is 0, the force is 0.
  example: []
  syntax:
    content: public static bool ApplyReverseAttractionForceRealistic(Vector2 attractionOrigin, float attractionMass, PhysicsObject obj, ValueRange dotRange)
    parameters:
    - id: attractionOrigin
      type: System.Numerics.Vector2
      description: The origin of the attraction force.
    - id: attractionMass
      type: System.Single
      description: The mass of the attraction object.
    - id: obj
      type: ShapeEngine.Core.PhysicsObject
      description: The physics object to apply the force to.
    - id: dotRange
      type: ShapeEngine.Core.Structs.ValueRange
      description: >-
        Set the multiplier range for pointing towards the center or away from the center.
            [0 and 1] would make force 0 when pointing towards the center and max when pointing away.
    return:
      type: System.Boolean
      description: Returns if a force was applied.
    content.vb: Public Shared Function ApplyReverseAttractionForceRealistic(attractionOrigin As Vector2, attractionMass As Single, obj As PhysicsObject, dotRange As ValueRange) As Boolean
  overload: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceRealistic*
  nameWithType.vb: ShapePhysics.ApplyReverseAttractionForceRealistic(Vector2, Single, PhysicsObject, ValueRange)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceRealistic(System.Numerics.Vector2, Single, ShapeEngine.Core.PhysicsObject, ShapeEngine.Core.Structs.ValueRange)
  name.vb: ApplyReverseAttractionForceRealistic(Vector2, Single, PhysicsObject, ValueRange)
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceDirectional(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,System.Numerics.Vector2,System.Numerics.Vector2)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceDirectional(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,System.Numerics.Vector2,System.Numerics.Vector2)
  id: CalculateReverseAttractionForceDirectional(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,System.Numerics.Vector2,System.Numerics.Vector2)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: CalculateReverseAttractionForceDirectional(Vector2, float, ValueRange, Vector2, Vector2)
  nameWithType: ShapePhysics.CalculateReverseAttractionForceDirectional(Vector2, float, ValueRange, Vector2, Vector2)
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceDirectional(System.Numerics.Vector2, float, ShapeEngine.Core.Structs.ValueRange, System.Numerics.Vector2, System.Numerics.Vector2)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: CalculateReverseAttractionForceDirectional
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 1022
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: >-
    Calculates a force that gets stronger with distance and direction.

    At a distance equal to attractionRadius with a velocity directly in line with the direction from the origin to the object,

    the force equals attractionForce.

    If the velocity direction points towards the origin or the distance is 0, the force is 0.

    Use AddForce() if force should be applied to PhysicsObjects!
  example: []
  syntax:
    content: public static Vector2 CalculateReverseAttractionForceDirectional(Vector2 attractionOrigin, float attractionForce, ValueRange attractionRadius, Vector2 objectPosition, Vector2 objectVelocity)
    parameters:
    - id: attractionOrigin
      type: System.Numerics.Vector2
      description: The origin of the attraction force.
    - id: attractionForce
      type: System.Single
      description: The fore to apply scaled by direction and distance factors.
    - id: attractionRadius
      type: ShapeEngine.Core.Structs.ValueRange
      description: >-
        The distance range at which minimum and maximum force is calculated.
            Distances below the attractionRadius.Min result in 0 force.
    - id: objectPosition
      type: System.Numerics.Vector2
      description: The position of the object.
    - id: objectVelocity
      type: System.Numerics.Vector2
      description: The velocity of the object.
    return:
      type: System.Numerics.Vector2
      description: Returns the final force.
    content.vb: Public Shared Function CalculateReverseAttractionForceDirectional(attractionOrigin As Vector2, attractionForce As Single, attractionRadius As ValueRange, objectPosition As Vector2, objectVelocity As Vector2) As Vector2
  overload: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceDirectional*
  nameWithType.vb: ShapePhysics.CalculateReverseAttractionForceDirectional(Vector2, Single, ValueRange, Vector2, Vector2)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceDirectional(System.Numerics.Vector2, Single, ShapeEngine.Core.Structs.ValueRange, System.Numerics.Vector2, System.Numerics.Vector2)
  name.vb: CalculateReverseAttractionForceDirectional(Vector2, Single, ValueRange, Vector2, Vector2)
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceDirectional(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,ShapeEngine.Core.PhysicsObject)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceDirectional(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,ShapeEngine.Core.PhysicsObject)
  id: ApplyReverseAttractionForceDirectional(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,ShapeEngine.Core.PhysicsObject)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: ApplyReverseAttractionForceDirectional(Vector2, float, ValueRange, PhysicsObject)
  nameWithType: ShapePhysics.ApplyReverseAttractionForceDirectional(Vector2, float, ValueRange, PhysicsObject)
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceDirectional(System.Numerics.Vector2, float, ShapeEngine.Core.Structs.ValueRange, ShapeEngine.Core.PhysicsObject)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: ApplyReverseAttractionForceDirectional
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 1057
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: >-
    Calculates a force that gets stronger with distance and direction.

    At a distance equal to attractionRadius with a velocity directly in line with the direction from the origin to the object,

    the force equals attractionForce.

    If the velocity direction points towards the origin or the distance is 0, the force is 0.
  example: []
  syntax:
    content: public static bool ApplyReverseAttractionForceDirectional(Vector2 attractionOrigin, float attractionForce, ValueRange attractionRadius, PhysicsObject obj)
    parameters:
    - id: attractionOrigin
      type: System.Numerics.Vector2
      description: The origin of the attraction force.
    - id: attractionForce
      type: System.Single
      description: The fore to apply scaled by direction and distance factors.
    - id: attractionRadius
      type: ShapeEngine.Core.Structs.ValueRange
      description: >-
        The distance range at which minimum and maximum force is calculated.
            Distances below the attractionRadius.Min result in 0 force.
    - id: obj
      type: ShapeEngine.Core.PhysicsObject
      description: The object the force should apply to.
    return:
      type: System.Boolean
      description: Returns if a force was applied.
    content.vb: Public Shared Function ApplyReverseAttractionForceDirectional(attractionOrigin As Vector2, attractionForce As Single, attractionRadius As ValueRange, obj As PhysicsObject) As Boolean
  overload: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceDirectional*
  nameWithType.vb: ShapePhysics.ApplyReverseAttractionForceDirectional(Vector2, Single, ValueRange, PhysicsObject)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceDirectional(System.Numerics.Vector2, Single, ShapeEngine.Core.Structs.ValueRange, ShapeEngine.Core.PhysicsObject)
  name.vb: ApplyReverseAttractionForceDirectional(Vector2, Single, ValueRange, PhysicsObject)
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceDirectional(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,System.Numerics.Vector2,System.Numerics.Vector2,ShapeEngine.Core.Structs.ValueRange)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceDirectional(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,System.Numerics.Vector2,System.Numerics.Vector2,ShapeEngine.Core.Structs.ValueRange)
  id: CalculateReverseAttractionForceDirectional(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,System.Numerics.Vector2,System.Numerics.Vector2,ShapeEngine.Core.Structs.ValueRange)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: CalculateReverseAttractionForceDirectional(Vector2, float, ValueRange, Vector2, Vector2, ValueRange)
  nameWithType: ShapePhysics.CalculateReverseAttractionForceDirectional(Vector2, float, ValueRange, Vector2, Vector2, ValueRange)
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceDirectional(System.Numerics.Vector2, float, ShapeEngine.Core.Structs.ValueRange, System.Numerics.Vector2, System.Numerics.Vector2, ShapeEngine.Core.Structs.ValueRange)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: CalculateReverseAttractionForceDirectional
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 1099
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: >-
    Calculates a force that gets stronger with distance and direction.

    At a distance equal to attractionRadius with a velocity directly in line with the direction from the origin to the object,

    the force equals attractionForce.

    If the velocity direction points towards the origin or the distance is 0, the force is 0.

    Use AddForce() if force should be applied to PhysicsObjects!
  example: []
  syntax:
    content: public static Vector2 CalculateReverseAttractionForceDirectional(Vector2 attractionOrigin, float attractionForce, ValueRange attractionRadius, Vector2 objectPosition, Vector2 objectVelocity, ValueRange dotRange)
    parameters:
    - id: attractionOrigin
      type: System.Numerics.Vector2
      description: The origin of the attraction force.
    - id: attractionForce
      type: System.Single
      description: The fore to apply scaled by direction and distance factors.
    - id: attractionRadius
      type: ShapeEngine.Core.Structs.ValueRange
      description: >-
        The distance range at which minimum and maximum force is calculated.
            Distances below the attractionRadius.Min result in 0 force.
    - id: objectPosition
      type: System.Numerics.Vector2
      description: The position of the object.
    - id: objectVelocity
      type: System.Numerics.Vector2
      description: The velocity of the object.
    - id: dotRange
      type: ShapeEngine.Core.Structs.ValueRange
      description: >-
        Set the multiplier range for pointing towards the center or away from the center.
            [0 and 1] would make force 0 when pointing towards the center and max when pointing away.
    return:
      type: System.Numerics.Vector2
      description: Returns the final force.
    content.vb: Public Shared Function CalculateReverseAttractionForceDirectional(attractionOrigin As Vector2, attractionForce As Single, attractionRadius As ValueRange, objectPosition As Vector2, objectVelocity As Vector2, dotRange As ValueRange) As Vector2
  overload: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceDirectional*
  nameWithType.vb: ShapePhysics.CalculateReverseAttractionForceDirectional(Vector2, Single, ValueRange, Vector2, Vector2, ValueRange)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceDirectional(System.Numerics.Vector2, Single, ShapeEngine.Core.Structs.ValueRange, System.Numerics.Vector2, System.Numerics.Vector2, ShapeEngine.Core.Structs.ValueRange)
  name.vb: CalculateReverseAttractionForceDirectional(Vector2, Single, ValueRange, Vector2, Vector2, ValueRange)
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceDirectional(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.Structs.ValueRange)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceDirectional(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.Structs.ValueRange)
  id: ApplyReverseAttractionForceDirectional(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.Structs.ValueRange)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: ApplyReverseAttractionForceDirectional(Vector2, float, ValueRange, PhysicsObject, ValueRange)
  nameWithType: ShapePhysics.ApplyReverseAttractionForceDirectional(Vector2, float, ValueRange, PhysicsObject, ValueRange)
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceDirectional(System.Numerics.Vector2, float, ShapeEngine.Core.Structs.ValueRange, ShapeEngine.Core.PhysicsObject, ShapeEngine.Core.Structs.ValueRange)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: ApplyReverseAttractionForceDirectional
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 1136
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: >-
    Calculates a force that gets stronger with distance and direction.

    At a distance equal to attractionRadius with a velocity directly in line with the direction from the origin to the object,

    the force equals attractionForce.

    If the velocity direction points towards the origin or the distance is 0, the force is 0.
  example: []
  syntax:
    content: public static bool ApplyReverseAttractionForceDirectional(Vector2 attractionOrigin, float attractionForce, ValueRange attractionRadius, PhysicsObject obj, ValueRange dotRange)
    parameters:
    - id: attractionOrigin
      type: System.Numerics.Vector2
      description: The origin of the attraction force.
    - id: attractionForce
      type: System.Single
      description: The fore to apply scaled by direction and distance factors.
    - id: attractionRadius
      type: ShapeEngine.Core.Structs.ValueRange
      description: >-
        The distance range at which minimum and maximum force is calculated.
            Distances below the attractionRadius.Min result in 0 force.
    - id: obj
      type: ShapeEngine.Core.PhysicsObject
      description: The object the force should apply to.
    - id: dotRange
      type: ShapeEngine.Core.Structs.ValueRange
      description: >-
        Set the multiplier range for pointing towards the center or away from the center.
            [0 and 1] would make force 0 when pointing towards the center and max when pointing away.
    return:
      type: System.Boolean
      description: Returns if a force was applied.
    content.vb: Public Shared Function ApplyReverseAttractionForceDirectional(attractionOrigin As Vector2, attractionForce As Single, attractionRadius As ValueRange, obj As PhysicsObject, dotRange As ValueRange) As Boolean
  overload: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceDirectional*
  nameWithType.vb: ShapePhysics.ApplyReverseAttractionForceDirectional(Vector2, Single, ValueRange, PhysicsObject, ValueRange)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceDirectional(System.Numerics.Vector2, Single, ShapeEngine.Core.Structs.ValueRange, ShapeEngine.Core.PhysicsObject, ShapeEngine.Core.Structs.ValueRange)
  name.vb: ApplyReverseAttractionForceDirectional(Vector2, Single, ValueRange, PhysicsObject, ValueRange)
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceDirectional(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,System.Numerics.Vector2,System.Numerics.Vector2,System.Func{System.Single,System.Single})
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceDirectional(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,System.Numerics.Vector2,System.Numerics.Vector2,System.Func{System.Single,System.Single})
  id: CalculateReverseAttractionForceDirectional(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,System.Numerics.Vector2,System.Numerics.Vector2,System.Func{System.Single,System.Single})
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: CalculateReverseAttractionForceDirectional(Vector2, float, ValueRange, Vector2, Vector2, Func<float, float>)
  nameWithType: ShapePhysics.CalculateReverseAttractionForceDirectional(Vector2, float, ValueRange, Vector2, Vector2, Func<float, float>)
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceDirectional(System.Numerics.Vector2, float, ShapeEngine.Core.Structs.ValueRange, System.Numerics.Vector2, System.Numerics.Vector2, System.Func<float, float>)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: CalculateReverseAttractionForceDirectional
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 1177
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: >-
    Calculates a force that gets stronger with distance and direction.

    At a distance equal to attractionRadius with a velocity directly in line with the direction from the origin to the object,

    the force equals attractionForce.

    If the velocity direction points towards the origin or the distance is 0, the force is 0.

    Use AddForce() if force should be applied to PhysicsObjects!
  example: []
  syntax:
    content: public static Vector2 CalculateReverseAttractionForceDirectional(Vector2 attractionOrigin, float attractionForce, ValueRange attractionRadius, Vector2 objectPosition, Vector2 objectVelocity, Func<float, float> distanceFactorAdjustor)
    parameters:
    - id: attractionOrigin
      type: System.Numerics.Vector2
      description: The origin of the attraction force.
    - id: attractionForce
      type: System.Single
      description: The fore to apply scaled by direction and distance factors.
    - id: attractionRadius
      type: ShapeEngine.Core.Structs.ValueRange
      description: >-
        The distance range at which minimum and maximum force is calculated.
            Distances below the attractionRadius.Min result in 0 force.
    - id: objectPosition
      type: System.Numerics.Vector2
      description: The position of the object.
    - id: objectVelocity
      type: System.Numerics.Vector2
      description: The velocity of the object.
    - id: distanceFactorAdjustor
      type: System.Func{System.Single,System.Single}
      description: >-
        Supply a method that takes a factor between 0 and 1 and returns a new factor as float.
            The new factor will be multiplied with the resulting force.
    return:
      type: System.Numerics.Vector2
      description: Returns the final force.
    content.vb: Public Shared Function CalculateReverseAttractionForceDirectional(attractionOrigin As Vector2, attractionForce As Single, attractionRadius As ValueRange, objectPosition As Vector2, objectVelocity As Vector2, distanceFactorAdjustor As Func(Of Single, Single)) As Vector2
  overload: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceDirectional*
  nameWithType.vb: ShapePhysics.CalculateReverseAttractionForceDirectional(Vector2, Single, ValueRange, Vector2, Vector2, Func(Of Single, Single))
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceDirectional(System.Numerics.Vector2, Single, ShapeEngine.Core.Structs.ValueRange, System.Numerics.Vector2, System.Numerics.Vector2, System.Func(Of Single, Single))
  name.vb: CalculateReverseAttractionForceDirectional(Vector2, Single, ValueRange, Vector2, Vector2, Func(Of Single, Single))
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForce(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,ShapeEngine.Core.PhysicsObject,System.Func{System.Single,System.Single})
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForce(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,ShapeEngine.Core.PhysicsObject,System.Func{System.Single,System.Single})
  id: CalculateReverseAttractionForce(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,ShapeEngine.Core.PhysicsObject,System.Func{System.Single,System.Single})
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: CalculateReverseAttractionForce(Vector2, float, ValueRange, PhysicsObject, Func<float, float>)
  nameWithType: ShapePhysics.CalculateReverseAttractionForce(Vector2, float, ValueRange, PhysicsObject, Func<float, float>)
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForce(System.Numerics.Vector2, float, ShapeEngine.Core.Structs.ValueRange, ShapeEngine.Core.PhysicsObject, System.Func<float, float>)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: CalculateReverseAttractionForce
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 1214
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: >-
    Calculates a force that gets stronger with distance and direction.

    At a distance equal to attractionRadius with a velocity directly in line with the direction from the origin to the object,

    the force equals attractionForce.

    If the velocity direction points towards the origin or the distance is 0, the force is 0.
  example: []
  syntax:
    content: public static bool CalculateReverseAttractionForce(Vector2 attractionOrigin, float attractionForce, ValueRange attractionRadius, PhysicsObject obj, Func<float, float> distanceFactorAdjustor)
    parameters:
    - id: attractionOrigin
      type: System.Numerics.Vector2
      description: The origin of the attraction force.
    - id: attractionForce
      type: System.Single
      description: The fore to apply scaled by direction and distance factors.
    - id: attractionRadius
      type: ShapeEngine.Core.Structs.ValueRange
      description: >-
        The distance range at which minimum and maximum force is calculated.
            Distances below the attractionRadius.Min result in 0 force.
    - id: obj
      type: ShapeEngine.Core.PhysicsObject
      description: The object the force should apply to.
    - id: distanceFactorAdjustor
      type: System.Func{System.Single,System.Single}
      description: >-
        Supply a method that takes a factor between 0 and 1 and returns a new factor as float.
            The new factor will be multiplied with the resulting force.
    return:
      type: System.Boolean
      description: Returns the final force.
    content.vb: Public Shared Function CalculateReverseAttractionForce(attractionOrigin As Vector2, attractionForce As Single, attractionRadius As ValueRange, obj As PhysicsObject, distanceFactorAdjustor As Func(Of Single, Single)) As Boolean
  overload: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForce*
  nameWithType.vb: ShapePhysics.CalculateReverseAttractionForce(Vector2, Single, ValueRange, PhysicsObject, Func(Of Single, Single))
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForce(System.Numerics.Vector2, Single, ShapeEngine.Core.Structs.ValueRange, ShapeEngine.Core.PhysicsObject, System.Func(Of Single, Single))
  name.vb: CalculateReverseAttractionForce(Vector2, Single, ValueRange, PhysicsObject, Func(Of Single, Single))
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceDirectional(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,System.Numerics.Vector2,System.Numerics.Vector2,ShapeEngine.Core.Structs.ValueRange,System.Func{System.Single,System.Single})
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceDirectional(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,System.Numerics.Vector2,System.Numerics.Vector2,ShapeEngine.Core.Structs.ValueRange,System.Func{System.Single,System.Single})
  id: CalculateReverseAttractionForceDirectional(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,System.Numerics.Vector2,System.Numerics.Vector2,ShapeEngine.Core.Structs.ValueRange,System.Func{System.Single,System.Single})
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: CalculateReverseAttractionForceDirectional(Vector2, float, ValueRange, Vector2, Vector2, ValueRange, Func<float, float>)
  nameWithType: ShapePhysics.CalculateReverseAttractionForceDirectional(Vector2, float, ValueRange, Vector2, Vector2, ValueRange, Func<float, float>)
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceDirectional(System.Numerics.Vector2, float, ShapeEngine.Core.Structs.ValueRange, System.Numerics.Vector2, System.Numerics.Vector2, ShapeEngine.Core.Structs.ValueRange, System.Func<float, float>)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: CalculateReverseAttractionForceDirectional
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 1257
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: >-
    Calculates a force that gets stronger with distance and direction.

    At a distance equal to attractionRadius with a velocity directly in line with the direction from the origin to the object,

    the force equals attractionForce.

    If the velocity direction points towards the origin or the distance is 0, the force is 0.

    Use AddForce() if force should be applied to PhysicsObjects!
  example: []
  syntax:
    content: public static Vector2 CalculateReverseAttractionForceDirectional(Vector2 attractionOrigin, float attractionForce, ValueRange attractionRadius, Vector2 objectPosition, Vector2 objectVelocity, ValueRange dotRange, Func<float, float> distanceFactorAdjustor)
    parameters:
    - id: attractionOrigin
      type: System.Numerics.Vector2
      description: The origin of the attraction force.
    - id: attractionForce
      type: System.Single
      description: The fore to apply scaled by direction and distance factors.
    - id: attractionRadius
      type: ShapeEngine.Core.Structs.ValueRange
      description: >-
        The distance range at which minimum and maximum force is calculated.
            Distances below the attractionRadius.Min result in 0 force.
    - id: objectPosition
      type: System.Numerics.Vector2
      description: The position of the object.
    - id: objectVelocity
      type: System.Numerics.Vector2
      description: The velocity of the object.
    - id: dotRange
      type: ShapeEngine.Core.Structs.ValueRange
      description: >-
        Set the multiplier range for pointing towards the center or away from the center.
            [0 and 1] would make force 0 when pointing towards the center and max when pointing away.
    - id: distanceFactorAdjustor
      type: System.Func{System.Single,System.Single}
      description: >-
        Supply a method that takes a factor between 0 and 1 and returns a new factor as float.
            The new factor will be multiplied with the resulting force.
    return:
      type: System.Numerics.Vector2
      description: Returns the final force.
    content.vb: Public Shared Function CalculateReverseAttractionForceDirectional(attractionOrigin As Vector2, attractionForce As Single, attractionRadius As ValueRange, objectPosition As Vector2, objectVelocity As Vector2, dotRange As ValueRange, distanceFactorAdjustor As Func(Of Single, Single)) As Vector2
  overload: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceDirectional*
  nameWithType.vb: ShapePhysics.CalculateReverseAttractionForceDirectional(Vector2, Single, ValueRange, Vector2, Vector2, ValueRange, Func(Of Single, Single))
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceDirectional(System.Numerics.Vector2, Single, ShapeEngine.Core.Structs.ValueRange, System.Numerics.Vector2, System.Numerics.Vector2, ShapeEngine.Core.Structs.ValueRange, System.Func(Of Single, Single))
  name.vb: CalculateReverseAttractionForceDirectional(Vector2, Single, ValueRange, Vector2, Vector2, ValueRange, Func(Of Single, Single))
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceDirectional(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.Structs.ValueRange,System.Func{System.Single,System.Single})
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceDirectional(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.Structs.ValueRange,System.Func{System.Single,System.Single})
  id: ApplyReverseAttractionForceDirectional(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,ShapeEngine.Core.PhysicsObject,ShapeEngine.Core.Structs.ValueRange,System.Func{System.Single,System.Single})
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: ApplyReverseAttractionForceDirectional(Vector2, float, ValueRange, PhysicsObject, ValueRange, Func<float, float>)
  nameWithType: ShapePhysics.ApplyReverseAttractionForceDirectional(Vector2, float, ValueRange, PhysicsObject, ValueRange, Func<float, float>)
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceDirectional(System.Numerics.Vector2, float, ShapeEngine.Core.Structs.ValueRange, ShapeEngine.Core.PhysicsObject, ShapeEngine.Core.Structs.ValueRange, System.Func<float, float>)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: ApplyReverseAttractionForceDirectional
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 1296
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: >-
    Calculates a force that gets stronger with distance and direction.

    At a distance equal to attractionRadius with a velocity directly in line with the direction from the origin to the object,

    the force equals attractionForce.

    If the velocity direction points towards the origin or the distance is 0, the force is 0.
  example: []
  syntax:
    content: public static bool ApplyReverseAttractionForceDirectional(Vector2 attractionOrigin, float attractionForce, ValueRange attractionRadius, PhysicsObject obj, ValueRange dotRange, Func<float, float> distanceFactorAdjustor)
    parameters:
    - id: attractionOrigin
      type: System.Numerics.Vector2
      description: The origin of the attraction force.
    - id: attractionForce
      type: System.Single
      description: The fore to apply scaled by direction and distance factors.
    - id: attractionRadius
      type: ShapeEngine.Core.Structs.ValueRange
      description: >-
        The distance range at which minimum and maximum force is calculated.
            Distances below the attractionRadius.Min result in 0 force.
    - id: obj
      type: ShapeEngine.Core.PhysicsObject
      description: The object the force should apply to.
    - id: dotRange
      type: ShapeEngine.Core.Structs.ValueRange
      description: >-
        Set the multiplier range for pointing towards the center or away from the center.
            [0 and 1] would make force 0 when pointing towards the center and max when pointing away.
    - id: distanceFactorAdjustor
      type: System.Func{System.Single,System.Single}
      description: >-
        Supply a method that takes a factor between 0 and 1 and returns a new factor as float.
            The new factor will be multiplied with the resulting force.
    return:
      type: System.Boolean
      description: Returns if a force was applied.
    content.vb: Public Shared Function ApplyReverseAttractionForceDirectional(attractionOrigin As Vector2, attractionForce As Single, attractionRadius As ValueRange, obj As PhysicsObject, dotRange As ValueRange, distanceFactorAdjustor As Func(Of Single, Single)) As Boolean
  overload: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceDirectional*
  nameWithType.vb: ShapePhysics.ApplyReverseAttractionForceDirectional(Vector2, Single, ValueRange, PhysicsObject, ValueRange, Func(Of Single, Single))
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceDirectional(System.Numerics.Vector2, Single, ShapeEngine.Core.Structs.ValueRange, ShapeEngine.Core.PhysicsObject, ShapeEngine.Core.Structs.ValueRange, System.Func(Of Single, Single))
  name.vb: ApplyReverseAttractionForceDirectional(Vector2, Single, ValueRange, PhysicsObject, ValueRange, Func(Of Single, Single))
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForce(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,System.Numerics.Vector2)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForce(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,System.Numerics.Vector2)
  id: CalculateReverseAttractionForce(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,System.Numerics.Vector2)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: CalculateReverseAttractionForce(Vector2, float, ValueRange, Vector2)
  nameWithType: ShapePhysics.CalculateReverseAttractionForce(Vector2, float, ValueRange, Vector2)
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForce(System.Numerics.Vector2, float, ShapeEngine.Core.Structs.ValueRange, System.Numerics.Vector2)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: CalculateReverseAttractionForce
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 1335
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: >-
    Calculates a force that gets stronger with distance.

    At a distance equal to attractionRadius, the force equals attractionForce.

    Use AddForce() if force should be applied to PhysicsObjects!
  example: []
  syntax:
    content: public static Vector2 CalculateReverseAttractionForce(Vector2 attractionOrigin, float attractionForce, ValueRange attractionRadius, Vector2 objectPosition)
    parameters:
    - id: attractionOrigin
      type: System.Numerics.Vector2
      description: The origin of the attraction force.
    - id: attractionForce
      type: System.Single
      description: The fore to apply scaled by direction and distance factors.
    - id: attractionRadius
      type: ShapeEngine.Core.Structs.ValueRange
      description: >-
        The distance range at which minimum and maximum force is calculated.
            Distances below the attractionRadius.Min result in 0 force.
    - id: objectPosition
      type: System.Numerics.Vector2
      description: The position of the object.
    return:
      type: System.Numerics.Vector2
      description: Returns the final force.
    content.vb: Public Shared Function CalculateReverseAttractionForce(attractionOrigin As Vector2, attractionForce As Single, attractionRadius As ValueRange, objectPosition As Vector2) As Vector2
  overload: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForce*
  nameWithType.vb: ShapePhysics.CalculateReverseAttractionForce(Vector2, Single, ValueRange, Vector2)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForce(System.Numerics.Vector2, Single, ShapeEngine.Core.Structs.ValueRange, System.Numerics.Vector2)
  name.vb: CalculateReverseAttractionForce(Vector2, Single, ValueRange, Vector2)
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForce(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,System.Numerics.Vector2,System.Func{System.Single,System.Single})
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForce(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,System.Numerics.Vector2,System.Func{System.Single,System.Single})
  id: CalculateReverseAttractionForce(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,System.Numerics.Vector2,System.Func{System.Single,System.Single})
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: CalculateReverseAttractionForce(Vector2, float, ValueRange, Vector2, Func<float, float>)
  nameWithType: ShapePhysics.CalculateReverseAttractionForce(Vector2, float, ValueRange, Vector2, Func<float, float>)
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForce(System.Numerics.Vector2, float, ShapeEngine.Core.Structs.ValueRange, System.Numerics.Vector2, System.Func<float, float>)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: CalculateReverseAttractionForce
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 1362
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: >-
    Calculates a force that gets stronger with distance.

    At a distance equal to attractionRadius, the force equals attractionForce.

    Use AddForce() if force should be applied to PhysicsObjects!
  example: []
  syntax:
    content: public static Vector2 CalculateReverseAttractionForce(Vector2 attractionOrigin, float attractionForce, ValueRange attractionRadius, Vector2 objectPosition, Func<float, float> distanceFactorAdjustor)
    parameters:
    - id: attractionOrigin
      type: System.Numerics.Vector2
      description: The origin of the attraction force.
    - id: attractionForce
      type: System.Single
      description: The fore to apply scaled by direction and distance factors.
    - id: attractionRadius
      type: ShapeEngine.Core.Structs.ValueRange
      description: >-
        The distance range at which minimum and maximum force is calculated.
            Distances below the attractionRadius.Min result in 0 force.
    - id: objectPosition
      type: System.Numerics.Vector2
      description: The position of the object.
    - id: distanceFactorAdjustor
      type: System.Func{System.Single,System.Single}
      description: >-
        Supply a method that takes a factor between 0 and 1 and returns a new factor as float.
            The new factor will be multiplied with the resulting force.
    return:
      type: System.Numerics.Vector2
      description: Returns the final force.
    content.vb: Public Shared Function CalculateReverseAttractionForce(attractionOrigin As Vector2, attractionForce As Single, attractionRadius As ValueRange, objectPosition As Vector2, distanceFactorAdjustor As Func(Of Single, Single)) As Vector2
  overload: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForce*
  nameWithType.vb: ShapePhysics.CalculateReverseAttractionForce(Vector2, Single, ValueRange, Vector2, Func(Of Single, Single))
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForce(System.Numerics.Vector2, Single, ShapeEngine.Core.Structs.ValueRange, System.Numerics.Vector2, System.Func(Of Single, Single))
  name.vb: CalculateReverseAttractionForce(Vector2, Single, ValueRange, Vector2, Func(Of Single, Single))
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForce(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,ShapeEngine.Core.PhysicsObject)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForce(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,ShapeEngine.Core.PhysicsObject)
  id: ApplyReverseAttractionForce(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,ShapeEngine.Core.PhysicsObject)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: ApplyReverseAttractionForce(Vector2, float, ValueRange, PhysicsObject)
  nameWithType: ShapePhysics.ApplyReverseAttractionForce(Vector2, float, ValueRange, PhysicsObject)
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForce(System.Numerics.Vector2, float, ShapeEngine.Core.Structs.ValueRange, ShapeEngine.Core.PhysicsObject)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: ApplyReverseAttractionForce
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 1387
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: >-
    Calculates a force that gets stronger with distance.

    At a distance equal to attractionRadius, the force equals attractionForce.

    The force is applied to the obj.
  example: []
  syntax:
    content: public static bool ApplyReverseAttractionForce(Vector2 attractionOrigin, float attractionForce, ValueRange attractionRadius, PhysicsObject obj)
    parameters:
    - id: attractionOrigin
      type: System.Numerics.Vector2
      description: The origin of the attraction force.
    - id: attractionForce
      type: System.Single
      description: The fore to apply scaled by direction and distance factors.
    - id: attractionRadius
      type: ShapeEngine.Core.Structs.ValueRange
      description: >-
        The distance range at which minimum and maximum force is calculated.
            Distances below the attractionRadius.Min result in 0 force.
    - id: obj
      type: ShapeEngine.Core.PhysicsObject
      description: The object the force should apply to.
    return:
      type: System.Boolean
      description: Returns if a force was applied.
    content.vb: Public Shared Function ApplyReverseAttractionForce(attractionOrigin As Vector2, attractionForce As Single, attractionRadius As ValueRange, obj As PhysicsObject) As Boolean
  overload: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForce*
  nameWithType.vb: ShapePhysics.ApplyReverseAttractionForce(Vector2, Single, ValueRange, PhysicsObject)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForce(System.Numerics.Vector2, Single, ShapeEngine.Core.Structs.ValueRange, ShapeEngine.Core.PhysicsObject)
  name.vb: ApplyReverseAttractionForce(Vector2, Single, ValueRange, PhysicsObject)
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForce(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,ShapeEngine.Core.PhysicsObject,System.Func{System.Single,System.Single})
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForce(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,ShapeEngine.Core.PhysicsObject,System.Func{System.Single,System.Single})
  id: ApplyReverseAttractionForce(System.Numerics.Vector2,System.Single,ShapeEngine.Core.Structs.ValueRange,ShapeEngine.Core.PhysicsObject,System.Func{System.Single,System.Single})
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: ApplyReverseAttractionForce(Vector2, float, ValueRange, PhysicsObject, Func<float, float>)
  nameWithType: ShapePhysics.ApplyReverseAttractionForce(Vector2, float, ValueRange, PhysicsObject, Func<float, float>)
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForce(System.Numerics.Vector2, float, ShapeEngine.Core.Structs.ValueRange, ShapeEngine.Core.PhysicsObject, System.Func<float, float>)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: ApplyReverseAttractionForce
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 1415
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: >-
    Calculates a force that gets stronger with distance.

    At a distance equal to attractionRadius, the force equals attractionForce.

    The force is applied to the obj.
  example: []
  syntax:
    content: public static bool ApplyReverseAttractionForce(Vector2 attractionOrigin, float attractionForce, ValueRange attractionRadius, PhysicsObject obj, Func<float, float> distanceFactorAdjustor)
    parameters:
    - id: attractionOrigin
      type: System.Numerics.Vector2
      description: The origin of the attraction force.
    - id: attractionForce
      type: System.Single
      description: The fore to apply scaled by direction and distance factors.
    - id: attractionRadius
      type: ShapeEngine.Core.Structs.ValueRange
      description: >-
        The distance range at which minimum and maximum force is calculated.
            Distances below the attractionRadius.Min result in 0 force.
    - id: obj
      type: ShapeEngine.Core.PhysicsObject
      description: The object the force should apply to.
    - id: distanceFactorAdjustor
      type: System.Func{System.Single,System.Single}
      description: >-
        Supply a method that takes a factor between 0 and 1 and returns a new factor as float.
            The new factor will be multiplied with the resulting force.
    return:
      type: System.Boolean
      description: Returns if a force was applied.
    content.vb: Public Shared Function ApplyReverseAttractionForce(attractionOrigin As Vector2, attractionForce As Single, attractionRadius As ValueRange, obj As PhysicsObject, distanceFactorAdjustor As Func(Of Single, Single)) As Boolean
  overload: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForce*
  nameWithType.vb: ShapePhysics.ApplyReverseAttractionForce(Vector2, Single, ValueRange, PhysicsObject, Func(Of Single, Single))
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForce(System.Numerics.Vector2, Single, ShapeEngine.Core.Structs.ValueRange, ShapeEngine.Core.PhysicsObject, System.Func(Of Single, Single))
  name.vb: ApplyReverseAttractionForce(Vector2, Single, ValueRange, PhysicsObject, Func(Of Single, Single))
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForce(System.Numerics.Vector2,System.Single,System.Numerics.Vector2)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForce(System.Numerics.Vector2,System.Single,System.Numerics.Vector2)
  id: CalculateReverseAttractionForce(System.Numerics.Vector2,System.Single,System.Numerics.Vector2)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: CalculateReverseAttractionForce(Vector2, float, Vector2)
  nameWithType: ShapePhysics.CalculateReverseAttractionForce(Vector2, float, Vector2)
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForce(System.Numerics.Vector2, float, System.Numerics.Vector2)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: CalculateReverseAttractionForce
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 1440
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: >-
    Calculates a force that gets stronger with distance.

    Use AddForce() if force should be applied to PhysicsObjects!
  example: []
  syntax:
    content: public static Vector2 CalculateReverseAttractionForce(Vector2 attractionOrigin, float attractionForce, Vector2 objectPosition)
    parameters:
    - id: attractionOrigin
      type: System.Numerics.Vector2
      description: The origin of the attraction force.
    - id: attractionForce
      type: System.Single
      description: The force scaled by distance squared.
    - id: objectPosition
      type: System.Numerics.Vector2
      description: The position of the object.
    return:
      type: System.Numerics.Vector2
      description: Returns the final force.
    content.vb: Public Shared Function CalculateReverseAttractionForce(attractionOrigin As Vector2, attractionForce As Single, objectPosition As Vector2) As Vector2
  overload: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForce*
  nameWithType.vb: ShapePhysics.CalculateReverseAttractionForce(Vector2, Single, Vector2)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForce(System.Numerics.Vector2, Single, System.Numerics.Vector2)
  name.vb: CalculateReverseAttractionForce(Vector2, Single, Vector2)
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForce(System.Numerics.Vector2,System.Single,ShapeEngine.Core.PhysicsObject)
  commentId: M:ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForce(System.Numerics.Vector2,System.Single,ShapeEngine.Core.PhysicsObject)
  id: ApplyReverseAttractionForce(System.Numerics.Vector2,System.Single,ShapeEngine.Core.PhysicsObject)
  parent: ShapeEngine.StaticLib.ShapePhysics
  langs:
  - csharp
  - vb
  name: ApplyReverseAttractionForce(Vector2, float, PhysicsObject)
  nameWithType: ShapePhysics.ApplyReverseAttractionForce(Vector2, float, PhysicsObject)
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForce(System.Numerics.Vector2, float, ShapeEngine.Core.PhysicsObject)
  type: Method
  source:
    remote:
      path: ShapeEngine/StaticLib/ShapePhysics.cs
      branch: main
      repo: https://github.com/DaveGreen-Games/ShapeEngine.git
    id: ApplyReverseAttractionForce
    path: ../ShapeEngine/ShapeEngine/StaticLib/ShapePhysics.cs
    startLine: 1460
  assemblies:
  - ShapeEngine
  namespace: ShapeEngine.StaticLib
  summary: >-
    Calculates a force that gets stronger with distance.

    Adds the calculated force to the obj.
  example: []
  syntax:
    content: public static bool ApplyReverseAttractionForce(Vector2 attractionOrigin, float attractionForce, PhysicsObject obj)
    parameters:
    - id: attractionOrigin
      type: System.Numerics.Vector2
      description: The origin of the attraction force.
    - id: attractionForce
      type: System.Single
      description: The fore to apply scaled by distance squared.
    - id: obj
      type: ShapeEngine.Core.PhysicsObject
      description: The object the force should apply to.
    return:
      type: System.Boolean
      description: Returns if a force was applied to the obj.
    content.vb: Public Shared Function ApplyReverseAttractionForce(attractionOrigin As Vector2, attractionForce As Single, obj As PhysicsObject) As Boolean
  overload: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForce*
  nameWithType.vb: ShapePhysics.ApplyReverseAttractionForce(Vector2, Single, PhysicsObject)
  fullName.vb: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForce(System.Numerics.Vector2, Single, ShapeEngine.Core.PhysicsObject)
  name.vb: ApplyReverseAttractionForce(Vector2, Single, PhysicsObject)
references:
- uid: ShapeEngine.StaticLib
  commentId: N:ShapeEngine.StaticLib
  href: ShapeEngine.html
  name: ShapeEngine.StaticLib
  nameWithType: ShapeEngine.StaticLib
  fullName: ShapeEngine.StaticLib
  spec.csharp:
  - uid: ShapeEngine
    name: ShapeEngine
    href: ShapeEngine.html
  - name: .
  - uid: ShapeEngine.StaticLib
    name: StaticLib
    href: ShapeEngine.StaticLib.html
  spec.vb:
  - uid: ShapeEngine
    name: ShapeEngine
    href: ShapeEngine.html
  - name: .
  - uid: ShapeEngine.StaticLib
    name: StaticLib
    href: ShapeEngine.StaticLib.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollisionCircles*
  commentId: Overload:ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollisionCircles
  href: ShapeEngine.StaticLib.ShapePhysics.html#ShapeEngine_StaticLib_ShapePhysics_CalculateElasticCollisionCircles_System_Numerics_Vector2_System_Numerics_Vector2_System_Single_System_Numerics_Vector2_System_Numerics_Vector2_System_Single_System_Single_
  name: CalculateElasticCollisionCircles
  nameWithType: ShapePhysics.CalculateElasticCollisionCircles
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollisionCircles
- uid: System.Numerics.Vector2
  commentId: T:System.Numerics.Vector2
  parent: System.Numerics
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.numerics.vector2
  name: Vector2
  nameWithType: Vector2
  fullName: System.Numerics.Vector2
- uid: System.ValueTuple{System.Numerics.Vector2,System.Numerics.Vector2}
  commentId: T:System.ValueTuple{System.Numerics.Vector2,System.Numerics.Vector2}
  parent: System
  definition: System.ValueTuple`2
  href: https://learn.microsoft.com/dotnet/api/system.numerics.vector2
  name: (Vector2 self, Vector2 other)
  nameWithType: (Vector2 self, Vector2 other)
  fullName: (System.Numerics.Vector2 self, System.Numerics.Vector2 other)
  nameWithType.vb: (self As Vector2, other As Vector2)
  fullName.vb: (self As System.Numerics.Vector2, other As System.Numerics.Vector2)
  name.vb: (self As Vector2, other As Vector2)
  spec.csharp:
  - name: (
  - uid: System.Numerics.Vector2
    name: Vector2
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.vector2
  - name: " "
  - uid: System.ValueTuple{System.Numerics.Vector2,System.Numerics.Vector2}.self
    name: self
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.numerics.vector2,system.numerics.vector2-.self
  - name: ','
  - name: " "
  - uid: System.Numerics.Vector2
    name: Vector2
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.vector2
  - name: " "
  - uid: System.ValueTuple{System.Numerics.Vector2,System.Numerics.Vector2}.other
    name: other
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.numerics.vector2,system.numerics.vector2-.other
  - name: )
  spec.vb:
  - name: (
  - uid: System.ValueTuple{System.Numerics.Vector2,System.Numerics.Vector2}.self
    name: self
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.numerics.vector2,system.numerics.vector2-.self
  - name: " "
  - name: As
  - name: " "
  - uid: System.Numerics.Vector2
    name: Vector2
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.vector2
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Numerics.Vector2,System.Numerics.Vector2}.other
    name: other
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.numerics.vector2,system.numerics.vector2-.other
  - name: " "
  - name: As
  - name: " "
  - uid: System.Numerics.Vector2
    name: Vector2
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics.vector2
  - name: )
- uid: System.Numerics
  commentId: N:System.Numerics
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Numerics
  nameWithType: System.Numerics
  fullName: System.Numerics
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Numerics
    name: Numerics
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Numerics
    name: Numerics
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.numerics
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  name: (T1, T2)
  nameWithType: (T1, T2)
  fullName: (T1, T2)
  spec.csharp:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
  spec.vb:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollisionCirclesSelf*
  commentId: Overload:ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollisionCirclesSelf
  href: ShapeEngine.StaticLib.ShapePhysics.html#ShapeEngine_StaticLib_ShapePhysics_CalculateElasticCollisionCirclesSelf_System_Numerics_Vector2_System_Numerics_Vector2_System_Single_System_Numerics_Vector2_System_Numerics_Vector2_System_Single_System_Single_
  name: CalculateElasticCollisionCirclesSelf
  nameWithType: ShapePhysics.CalculateElasticCollisionCirclesSelf
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollisionCirclesSelf
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollision*
  commentId: Overload:ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollision
  href: ShapeEngine.StaticLib.ShapePhysics.html#ShapeEngine_StaticLib_ShapePhysics_CalculateElasticCollision_System_Numerics_Vector2_System_Numerics_Vector2_System_Single_System_Numerics_Vector2_System_Single_System_Single_
  name: CalculateElasticCollision
  nameWithType: ShapePhysics.CalculateElasticCollision
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollision
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollisionSelf*
  commentId: Overload:ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollisionSelf
  href: ShapeEngine.StaticLib.ShapePhysics.html#ShapeEngine_StaticLib_ShapePhysics_CalculateElasticCollisionSelf_System_Numerics_Vector2_System_Numerics_Vector2_System_Single_System_Numerics_Vector2_System_Single_System_Single_
  name: CalculateElasticCollisionSelf
  nameWithType: ShapePhysics.CalculateElasticCollisionSelf
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateElasticCollisionSelf
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyElasticCollision*
  commentId: Overload:ShapeEngine.StaticLib.ShapePhysics.ApplyElasticCollision
  href: ShapeEngine.StaticLib.ShapePhysics.html#ShapeEngine_StaticLib_ShapePhysics_ApplyElasticCollision_ShapeEngine_Core_PhysicsObject_ShapeEngine_Core_PhysicsObject_System_Numerics_Vector2_System_Single_
  name: ApplyElasticCollision
  nameWithType: ShapePhysics.ApplyElasticCollision
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyElasticCollision
- uid: ShapeEngine.Core.PhysicsObject
  commentId: T:ShapeEngine.Core.PhysicsObject
  parent: ShapeEngine.Core
  href: ShapeEngine.Core.PhysicsObject.html
  name: PhysicsObject
  nameWithType: PhysicsObject
  fullName: ShapeEngine.Core.PhysicsObject
- uid: ShapeEngine.Core
  commentId: N:ShapeEngine.Core
  href: ShapeEngine.html
  name: ShapeEngine.Core
  nameWithType: ShapeEngine.Core
  fullName: ShapeEngine.Core
  spec.csharp:
  - uid: ShapeEngine
    name: ShapeEngine
    href: ShapeEngine.html
  - name: .
  - uid: ShapeEngine.Core
    name: Core
    href: ShapeEngine.Core.html
  spec.vb:
  - uid: ShapeEngine
    name: ShapeEngine
    href: ShapeEngine.html
  - name: .
  - uid: ShapeEngine.Core
    name: Core
    href: ShapeEngine.Core.html
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyElasticCollisionSelf*
  commentId: Overload:ShapeEngine.StaticLib.ShapePhysics.ApplyElasticCollisionSelf
  href: ShapeEngine.StaticLib.ShapePhysics.html#ShapeEngine_StaticLib_ShapePhysics_ApplyElasticCollisionSelf_ShapeEngine_Core_PhysicsObject_ShapeEngine_Core_PhysicsObject_System_Numerics_Vector2_System_Single_
  name: ApplyElasticCollisionSelf
  nameWithType: ShapePhysics.ApplyElasticCollisionSelf
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyElasticCollisionSelf
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyElasticCollisionCircleSelf*
  commentId: Overload:ShapeEngine.StaticLib.ShapePhysics.ApplyElasticCollisionCircleSelf
  href: ShapeEngine.StaticLib.ShapePhysics.html#ShapeEngine_StaticLib_ShapePhysics_ApplyElasticCollisionCircleSelf_ShapeEngine_Core_PhysicsObject_ShapeEngine_Core_PhysicsObject_System_Single_
  name: ApplyElasticCollisionCircleSelf
  nameWithType: ShapePhysics.ApplyElasticCollisionCircleSelf
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyElasticCollisionCircleSelf
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateDragFactor*
  commentId: Overload:ShapeEngine.StaticLib.ShapePhysics.CalculateDragFactor
  href: ShapeEngine.StaticLib.ShapePhysics.html#ShapeEngine_StaticLib_ShapePhysics_CalculateDragFactor_System_Single_System_Single_
  name: CalculateDragFactor
  nameWithType: ShapePhysics.CalculateDragFactor
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateDragFactor
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateDragForce*
  commentId: Overload:ShapeEngine.StaticLib.ShapePhysics.CalculateDragForce
  href: ShapeEngine.StaticLib.ShapePhysics.html#ShapeEngine_StaticLib_ShapePhysics_CalculateDragForce_System_Numerics_Vector2_System_Single_System_Single_
  name: CalculateDragForce
  nameWithType: ShapePhysics.CalculateDragForce
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateDragForce
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyDragForce*
  commentId: Overload:ShapeEngine.StaticLib.ShapePhysics.ApplyDragForce
  href: ShapeEngine.StaticLib.ShapePhysics.html#ShapeEngine_StaticLib_ShapePhysics_ApplyDragForce_System_Numerics_Vector2_System_Single_System_Single_
  name: ApplyDragForce
  nameWithType: ShapePhysics.ApplyDragForce
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyDragForce
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateDragForceRealistic*
  commentId: Overload:ShapeEngine.StaticLib.ShapePhysics.CalculateDragForceRealistic
  href: ShapeEngine.StaticLib.ShapePhysics.html#ShapeEngine_StaticLib_ShapePhysics_CalculateDragForceRealistic_System_Numerics_Vector2_System_Single_System_Single_System_Single_
  name: CalculateDragForceRealistic
  nameWithType: ShapePhysics.CalculateDragForceRealistic
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateDragForceRealistic
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateAttraction*
  commentId: Overload:ShapeEngine.StaticLib.ShapePhysics.CalculateAttraction
  href: ShapeEngine.StaticLib.ShapePhysics.html#ShapeEngine_StaticLib_ShapePhysics_CalculateAttraction_System_Numerics_Vector2_System_Single_System_Numerics_Vector2_System_Single_
  name: CalculateAttraction
  nameWithType: ShapePhysics.CalculateAttraction
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateAttraction
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyAttraction*
  commentId: Overload:ShapeEngine.StaticLib.ShapePhysics.ApplyAttraction
  href: ShapeEngine.StaticLib.ShapePhysics.html#ShapeEngine_StaticLib_ShapePhysics_ApplyAttraction_ShapeEngine_Core_PhysicsObject_ShapeEngine_Core_PhysicsObject_
  name: ApplyAttraction
  nameWithType: ShapePhysics.ApplyAttraction
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyAttraction
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion*
  commentId: Overload:ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion
  href: ShapeEngine.StaticLib.ShapePhysics.html#ShapeEngine_StaticLib_ShapePhysics_ApplyRepulsion_System_Numerics_Vector2_System_Single_System_Numerics_Vector2_System_Single_
  name: ApplyRepulsion
  nameWithType: ShapePhysics.ApplyRepulsion
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyRepulsion
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateFrictionTangent*
  commentId: Overload:ShapeEngine.StaticLib.ShapePhysics.CalculateFrictionTangent
  href: ShapeEngine.StaticLib.ShapePhysics.html#ShapeEngine_StaticLib_ShapePhysics_CalculateFrictionTangent_System_Numerics_Vector2_System_Numerics_Vector2_
  name: CalculateFrictionTangent
  nameWithType: ShapePhysics.CalculateFrictionTangent
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateFrictionTangent
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateFrictionForce*
  commentId: Overload:ShapeEngine.StaticLib.ShapePhysics.CalculateFrictionForce
  href: ShapeEngine.StaticLib.ShapePhysics.html#ShapeEngine_StaticLib_ShapePhysics_CalculateFrictionForce_System_Numerics_Vector2_System_Numerics_Vector2_System_Single_
  name: CalculateFrictionForce
  nameWithType: ShapePhysics.CalculateFrictionForce
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateFrictionForce
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateFrictionForceRealistic*
  commentId: Overload:ShapeEngine.StaticLib.ShapePhysics.CalculateFrictionForceRealistic
  href: ShapeEngine.StaticLib.ShapePhysics.html#ShapeEngine_StaticLib_ShapePhysics_CalculateFrictionForceRealistic_System_Numerics_Vector2_System_Numerics_Vector2_System_Single_
  name: CalculateFrictionForceRealistic
  nameWithType: ShapePhysics.CalculateFrictionForceRealistic
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateFrictionForceRealistic
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyFrictionForce*
  commentId: Overload:ShapeEngine.StaticLib.ShapePhysics.ApplyFrictionForce
  href: ShapeEngine.StaticLib.ShapePhysics.html#ShapeEngine_StaticLib_ShapePhysics_ApplyFrictionForce_ShapeEngine_Core_PhysicsObject_System_Numerics_Vector2_System_Single_
  name: ApplyFrictionForce
  nameWithType: ShapePhysics.ApplyFrictionForce
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyFrictionForce
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyFrictionForceRealistic*
  commentId: Overload:ShapeEngine.StaticLib.ShapePhysics.ApplyFrictionForceRealistic
  href: ShapeEngine.StaticLib.ShapePhysics.html#ShapeEngine_StaticLib_ShapePhysics_ApplyFrictionForceRealistic_ShapeEngine_Core_PhysicsObject_System_Numerics_Vector2_System_Single_
  name: ApplyFrictionForceRealistic
  nameWithType: ShapePhysics.ApplyFrictionForceRealistic
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyFrictionForceRealistic
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceRealistic*
  commentId: Overload:ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceRealistic
  href: ShapeEngine.StaticLib.ShapePhysics.html#ShapeEngine_StaticLib_ShapePhysics_CalculateReverseAttractionForceRealistic_System_Numerics_Vector2_System_Single_System_Numerics_Vector2_System_Single_
  name: CalculateReverseAttractionForceRealistic
  nameWithType: ShapePhysics.CalculateReverseAttractionForceRealistic
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceRealistic
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceRealistic*
  commentId: Overload:ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceRealistic
  href: ShapeEngine.StaticLib.ShapePhysics.html#ShapeEngine_StaticLib_ShapePhysics_ApplyReverseAttractionForceRealistic_ShapeEngine_Core_PhysicsObject_ShapeEngine_Core_PhysicsObject_
  name: ApplyReverseAttractionForceRealistic
  nameWithType: ShapePhysics.ApplyReverseAttractionForceRealistic
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceRealistic
- uid: ShapeEngine.Core.Structs.ValueRange
  commentId: T:ShapeEngine.Core.Structs.ValueRange
  parent: ShapeEngine.Core.Structs
  href: ShapeEngine.Core.Structs.ValueRange.html
  name: ValueRange
  nameWithType: ValueRange
  fullName: ShapeEngine.Core.Structs.ValueRange
- uid: ShapeEngine.Core.Structs
  commentId: N:ShapeEngine.Core.Structs
  href: ShapeEngine.html
  name: ShapeEngine.Core.Structs
  nameWithType: ShapeEngine.Core.Structs
  fullName: ShapeEngine.Core.Structs
  spec.csharp:
  - uid: ShapeEngine
    name: ShapeEngine
    href: ShapeEngine.html
  - name: .
  - uid: ShapeEngine.Core
    name: Core
    href: ShapeEngine.Core.html
  - name: .
  - uid: ShapeEngine.Core.Structs
    name: Structs
    href: ShapeEngine.Core.Structs.html
  spec.vb:
  - uid: ShapeEngine
    name: ShapeEngine
    href: ShapeEngine.html
  - name: .
  - uid: ShapeEngine.Core
    name: Core
    href: ShapeEngine.Core.html
  - name: .
  - uid: ShapeEngine.Core.Structs
    name: Structs
    href: ShapeEngine.Core.Structs.html
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceDirectional*
  commentId: Overload:ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceDirectional
  href: ShapeEngine.StaticLib.ShapePhysics.html#ShapeEngine_StaticLib_ShapePhysics_CalculateReverseAttractionForceDirectional_System_Numerics_Vector2_System_Single_ShapeEngine_Core_Structs_ValueRange_System_Numerics_Vector2_System_Numerics_Vector2_
  name: CalculateReverseAttractionForceDirectional
  nameWithType: ShapePhysics.CalculateReverseAttractionForceDirectional
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForceDirectional
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceDirectional*
  commentId: Overload:ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceDirectional
  href: ShapeEngine.StaticLib.ShapePhysics.html#ShapeEngine_StaticLib_ShapePhysics_ApplyReverseAttractionForceDirectional_System_Numerics_Vector2_System_Single_ShapeEngine_Core_Structs_ValueRange_ShapeEngine_Core_PhysicsObject_
  name: ApplyReverseAttractionForceDirectional
  nameWithType: ShapePhysics.ApplyReverseAttractionForceDirectional
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForceDirectional
- uid: System.Func{System.Single,System.Single}
  commentId: T:System.Func{System.Single,System.Single}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<float, float>
  nameWithType: Func<float, float>
  fullName: System.Func<float, float>
  nameWithType.vb: Func(Of Single, Single)
  fullName.vb: System.Func(Of Single, Single)
  name.vb: Func(Of Single, Single)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForce*
  commentId: Overload:ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForce
  href: ShapeEngine.StaticLib.ShapePhysics.html#ShapeEngine_StaticLib_ShapePhysics_CalculateReverseAttractionForce_System_Numerics_Vector2_System_Single_ShapeEngine_Core_Structs_ValueRange_ShapeEngine_Core_PhysicsObject_System_Func_System_Single_System_Single__
  name: CalculateReverseAttractionForce
  nameWithType: ShapePhysics.CalculateReverseAttractionForce
  fullName: ShapeEngine.StaticLib.ShapePhysics.CalculateReverseAttractionForce
- uid: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForce*
  commentId: Overload:ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForce
  href: ShapeEngine.StaticLib.ShapePhysics.html#ShapeEngine_StaticLib_ShapePhysics_ApplyReverseAttractionForce_System_Numerics_Vector2_System_Single_ShapeEngine_Core_Structs_ValueRange_ShapeEngine_Core_PhysicsObject_
  name: ApplyReverseAttractionForce
  nameWithType: ShapePhysics.ApplyReverseAttractionForce
  fullName: ShapeEngine.StaticLib.ShapePhysics.ApplyReverseAttractionForce
